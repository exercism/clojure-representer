; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm.clj:1:1).
; Could not locate clojure/tools/analyzer__init.class, clojure/tools/analyzer.clj or clojure/tools/analyzer.cljc on classpath.
clj꞉clojure-representer꞉> 
; Syntax error compiling at (analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
clj꞉clojure-representer꞉> 
; Evaluating file: analyzer.clj
; WARNING: macroexpand-1 already refers to: #'clojure.core/macroexpand-1 in namespace: analyzer, being replaced by: #'analyzer/macroexpand-1
; WARNING: var? already refers to: #'clojure.core/var? in namespace: analyzer, being replaced by: #'analyzer/var?
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; analyze-fn-method does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Execution error (IllegalAccessError) at analyzer.jvm/eval6259$loading (REPL:9).
; analyze-fn-method does not exist
clj꞉analyzer.jvm꞉> 
; Evaluating file: analyzer.clj
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer.utils꞉> 
; Evaluating file: analyzer.clj
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
#'analyzer/analyze-const
clj꞉analyzer꞉> 
#'analyzer/analyze-form
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#'analyzer/analyze
clj꞉analyzer꞉> 
#'analyzer/empty-env
clj꞉analyzer꞉> 
#'analyzer/analyze-in-env
clj꞉analyzer꞉> 
#'analyzer/macroexpand-1
clj꞉analyzer꞉> 
#'analyzer/parse
clj꞉analyzer꞉> 
#'analyzer/create-var
clj꞉analyzer꞉> 
#'analyzer/var?
clj꞉analyzer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
clj꞉analyzer꞉> 
; Evaluating file: env.clj
; WARNING: ensure already refers to: #'clojure.core/ensure in namespace: analyzer.env, being replaced by: #'analyzer.env/ensure
#'analyzer.env/deref-env
clj꞉analyzer.env꞉> 
; Evaluating file: utils.clj
; WARNING: record? already refers to: #'clojure.core/record? in namespace: analyzer.utils, being replaced by: #'analyzer.utils/record?
; WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: analyzer.utils, being replaced by: #'analyzer.utils/boolean?
#'analyzer.utils/mmerge
clj꞉analyzer.utils꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; analyze-fn-method does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Evaluating file: analyzer.clj
; WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: analyzer, being replaced by: #'analyzer.utils/boolean?
; WARNING: record? already refers to: #'clojure.core/record? in namespace: analyzer, being replaced by: #'analyzer.utils/record?
; WARNING: macroexpand already refers to: #'clojure.core/macroexpand in namespace: analyzer, being replaced by: #'analyzer/macroexpand
#'analyzer/-parse
clj꞉analyzer꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; walk does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:16:4).
; No such var: ana.jvm/analyze-ns
clj꞉clojure-representer꞉> 
; Evaluating file: jvm.clj
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; Could not locate clojure/core/memoize__init.class, clojure/core/memoize.clj or clojure/core/memoize.cljc on classpath.
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; Could not locate clojure/core/memoize__init.class, clojure/core/memoize.clj or clojure/core/memoize.cljc on classpath.
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:16:4).
; No such var: ana.jvm/analyze-ns
clj꞉clojure-representer꞉> 
; Syntax error (ClassNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; org.objectweb.asm.Type
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
; Syntax error compiling at (analyzer\jvm.clj:1:1).
; No namespace: analyzer.passes.jvm.analyze-host-expr
clj꞉clojure-representer꞉> 
; Syntax error (IllegalAccessError) compiling at (analyzer\jvm.clj:1:1).
; analyze-host-expr does not exist
clj꞉clojure-representer꞉> 
; Evaluating file: analyze_host_expr.clj
#'analyzer.passes.jvm.analyze-host-expr/analyze-host-expr
clj꞉analyzer.passes.jvm.analyze-host-expr꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (ArityException) at clojure-representer/eval11854 (REPL:18).
; Wrong number of args (2) passed to: clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (FileNotFoundException) at clojure-representer/eval11860$loading (REPL:1).
; Could not locate uniquify__init.class, uniquify.clj or uniquify.cljc on classpath.
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (IllegalArgumentException) at analyzer.passes.jvm.emit-form/eval10508$fn (emit_form.clj:46).
; No method in multimethod '-emit-form' for dispatch value: null
clj꞉clojure-representer꞉> 
; Evaluating file: jvm.clj
nil
clj꞉analyzer.jvm꞉> 
; Evaluating file: emit_form.clj
#multifn[-emit-form 0x7e6f7a85]
clj꞉analyzer.passes.emit-form꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
"(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* loading__6721__auto__ ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str \"One for you, one for me.\")) ([name] (str \"One for \" name \", one for me.\"))))"
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
(do
 (clojure.core/in-ns 'two-fer)
 (.resetMeta
  (clojure.lang.Namespace/find 'two-fer)
  {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
   :line 1,
   :column 5,
   :end-line 1,
   :end-column 12})
 ((fn*
   loading__6721__auto__
   ([]
    (do
     (clojure.lang.Var/pushThreadBindings
      #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
     (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
 (if
  (.equals 'two-fer 'clojure.core)
  nil
  (do
   (clojure.lang.LockingTransaction/runInTransaction
    (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
   nil)))
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    loading__6721__auto__
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def two-fer (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me.")))))
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    loading__6721__auto__
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def two-fer (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me.")))))
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:18:24).
; No such var: e/emit-hygenic-form
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-17
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-17))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-18] (str "One for " PLACEHOLDER-18 ", one for me.")))))
clj꞉clojure-representer꞉> 
#'analyzer.passes.uniquify/uniquify-locals
clj꞉analyzer.passes.uniquify꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me.")))))
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me.")))))
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:0:0).
; Unable to resolve symbol: mapping in this context
clj꞉clojure-representer꞉> 
{"loading__6721__auto__" "PLACEHOLDER-1", "name" "PLACEHOLDER-1"}
clj꞉clojure-representer꞉> 
(["loading__6721__auto__" "PLACEHOLDER-1"] ["name" "PLACEHOLDER-1"])
clj꞉clojure-representer꞉> 
; Execution error (ClassCastException) at clojure-representer/eval13105 (REPL:26).
; clojure.lang.PersistentArrayMap cannot be cast to clojure.lang.Reversible
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
#'analyzer.passes.uniquify/uniquify-locals
clj꞉analyzer.passes.uniquify꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
; Execution error (IllegalArgumentException) at clojure-representer/eval13134 (REPL:28).
; No value supplied for key: clojure.lang.LazySeq@7ffb9a61
clj꞉clojure-representer꞉> 
{("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name")}
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
; Execution error (ClassCastException) at clojure-representer/eval13140 (REPL:28).
; java.lang.String cannot be cast to java.util.Map$Entry
clj꞉clojure-representer꞉> 
{("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name")}
clj꞉clojure-representer꞉> 
{"PLACEHOLDER-1" "name"}
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer꞉> 
{"PLACEHOLDER-1" "loading__6721__auto__", "PLACEHOLDER-2" "name"}
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Evaluating file: clojure_representer_test.clj
#'clojure-representer-test/represent-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test

FAIL in (represent-test) (clojure_representer_test.clj:7)
FIXME, I fail.
expected: (= 0 1)
  actual: (not (= 0 1))

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
{:test 1, :pass 0, :fail 1, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (require '(clojure.string))
  (def
   two-fer
   (fn*
    ([] "One for you, one for me.")
    ([PLACEHOLDER-2]
     (str "One for " (if (clojure.string/blank? PLACEHOLDER-2) "you" PLACEHOLDER-2) ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def f (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))
  (def two-fer (fn* ([] (f "you")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me."))))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (require '(clojure.string))
  (def
   two-fer
   (fn*
    ([] "One for you, one for me.")
    ([PLACEHOLDER-2]
     (str "One for " (if (clojure.string/blank? PLACEHOLDER-2) "you" PLACEHOLDER-2) ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def f (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))
  (def two-fer (fn* ([] (f "you")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn*
    ([PLACEHOLDER-2] (do (print "One for" PLACEHOLDER-2) (print ", one for me.")))
    ([] (print "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer-name (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))
  (def two-fer (fn* ([] (two-fer-name "you")) ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (do str "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn*
    ([& PLACEHOLDER-2]
     (let*
      [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]
      (format "One for %s, one for me." (if (clojure.lang.Util/identical PLACEHOLDER-4 nil) "you" PLACEHOLDER-4)))))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (two-fer "you")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...)
clj꞉clojure-representer-test꞉> 
; Execution error (ExceptionInfo) at analyzer.passes.jvm.validate/eval9785$fn (validate.clj:28).
; Could not resolve var: Name
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (REPL:-2).
; resources\twofers\373\two_fer.clj (The system cannot find the file specified)
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (REPL:-2).
; resources\twofers\373\two_fer.clj (The system cannot find the file specified)
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/as-path
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:24:26).
; Unable to resolve symbol: n in this context
clj꞉clojure-representer-test꞉> 
#object[java.io.File 0x253cf9d6 "resources\\twofers\\0\\expected.txt"]
clj꞉clojure-representer-test꞉> 
; Execution error (ClassCastException) at clojure-representer-test/eval44340 (REPL:24).
; java.io.File cannot be cast to java.nio.file.Path
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:24:17).
; Unable to resolve symbol: n in this context
clj꞉clojure-representer-test꞉> 
; Execution error (ClassCastException) at clojure-representer-test/eval44349 (REPL:24).
; java.lang.String cannot be cast to java.nio.file.Path
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#object[java.io.File 0x109e8ad1 "resources\\twofers\\expected.txt"]
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\0\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\373\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\373\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\374\expected.txt
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
nil
clj꞉clojure-representer-test꞉> 
