; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm.clj:1:1).
; Could not locate clojure/tools/analyzer__init.class, clojure/tools/analyzer.clj or clojure/tools/analyzer.cljc on classpath.
clj꞉clojure-representer꞉> 
; Syntax error compiling at (analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
clj꞉clojure-representer꞉> 
; Evaluating file: analyzer.clj
; WARNING: macroexpand-1 already refers to: #'clojure.core/macroexpand-1 in namespace: analyzer, being replaced by: #'analyzer/macroexpand-1
; WARNING: var? already refers to: #'clojure.core/var? in namespace: analyzer, being replaced by: #'analyzer/var?
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; analyze-fn-method does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Execution error (IllegalAccessError) at analyzer.jvm/eval6259$loading (REPL:9).
; analyze-fn-method does not exist
clj꞉analyzer.jvm꞉> 
; Evaluating file: analyzer.clj
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer.utils꞉> 
; Evaluating file: analyzer.clj
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
; Evaluation of file analyzer.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
nil
clj꞉analyzer꞉> 
#'analyzer/analyze-const
clj꞉analyzer꞉> 
#'analyzer/analyze-form
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#multifn[-analyze-form 0x3f26349]
clj꞉analyzer꞉> 
#'analyzer/analyze
clj꞉analyzer꞉> 
#'analyzer/empty-env
clj꞉analyzer꞉> 
#'analyzer/analyze-in-env
clj꞉analyzer꞉> 
#'analyzer/macroexpand-1
clj꞉analyzer꞉> 
#'analyzer/parse
clj꞉analyzer꞉> 
#'analyzer/create-var
clj꞉analyzer꞉> 
#'analyzer/var?
clj꞉analyzer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer.clj:155:14).
; Unable to resolve symbol: obj? in this context
clj꞉analyzer꞉> 
; Evaluating file: env.clj
; WARNING: ensure already refers to: #'clojure.core/ensure in namespace: analyzer.env, being replaced by: #'analyzer.env/ensure
#'analyzer.env/deref-env
clj꞉analyzer.env꞉> 
; Evaluating file: utils.clj
; WARNING: record? already refers to: #'clojure.core/record? in namespace: analyzer.utils, being replaced by: #'analyzer.utils/record?
; WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: analyzer.utils, being replaced by: #'analyzer.utils/boolean?
#'analyzer.utils/mmerge
clj꞉analyzer.utils꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; analyze-fn-method does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Evaluating file: analyzer.clj
; WARNING: boolean? already refers to: #'clojure.core/boolean? in namespace: analyzer, being replaced by: #'analyzer.utils/boolean?
; WARNING: record? already refers to: #'clojure.core/record? in namespace: analyzer, being replaced by: #'analyzer.utils/record?
; WARNING: macroexpand already refers to: #'clojure.core/macroexpand in namespace: analyzer, being replaced by: #'analyzer/macroexpand
#'analyzer/-parse
clj꞉analyzer꞉> 
; Evaluating file: jvm.clj
; Syntax error (IllegalAccessError) compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\analyzer\jvm.clj:1:1).
; walk does not exist
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:16:4).
; No such var: ana.jvm/analyze-ns
clj꞉clojure-representer꞉> 
; Evaluating file: jvm.clj
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; Could not locate clojure/core/memoize__init.class, clojure/core/memoize.clj or clojure/core/memoize.cljc on classpath.
; Evaluation of file jvm.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉analyzer.jvm꞉> 
; Syntax error (FileNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; Could not locate clojure/core/memoize__init.class, clojure/core/memoize.clj or clojure/core/memoize.cljc on classpath.
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:16:4).
; No such var: ana.jvm/analyze-ns
clj꞉clojure-representer꞉> 
; Syntax error (ClassNotFoundException) compiling at (analyzer\jvm\utils.clj:1:1).
; org.objectweb.asm.Type
clj꞉analyzer.jvm꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
; Syntax error compiling at (analyzer\jvm.clj:1:1).
; No namespace: analyzer.passes.jvm.analyze-host-expr
clj꞉clojure-representer꞉> 
; Syntax error (IllegalAccessError) compiling at (analyzer\jvm.clj:1:1).
; analyze-host-expr does not exist
clj꞉clojure-representer꞉> 
; Evaluating file: analyze_host_expr.clj
#'analyzer.passes.jvm.analyze-host-expr/analyze-host-expr
clj꞉analyzer.passes.jvm.analyze-host-expr꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (ArityException) at clojure-representer/eval11854 (REPL:18).
; Wrong number of args (2) passed to: clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (FileNotFoundException) at clojure-representer/eval11860$loading (REPL:1).
; Could not locate uniquify__init.class, uniquify.clj or uniquify.cljc on classpath.
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/slug
clj꞉clojure-representer꞉> 
#'clojure-representer/in-dir
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Execution error (IllegalArgumentException) at analyzer.passes.jvm.emit-form/eval10508$fn (emit_form.clj:46).
; No method in multimethod '-emit-form' for dispatch value: null
clj꞉clojure-representer꞉> 
; Evaluating file: jvm.clj
nil
clj꞉analyzer.jvm꞉> 
; Evaluating file: emit_form.clj
#multifn[-emit-form 0x7e6f7a85]
clj꞉analyzer.passes.emit-form꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
"(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* loading__6721__auto__ ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str \"One for you, one for me.\")) ([name] (str \"One for \" name \", one for me.\"))))"
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
(do
 (clojure.core/in-ns 'two-fer)
 (.resetMeta
  (clojure.lang.Namespace/find 'two-fer)
  {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
   :line 1,
   :column 5,
   :end-line 1,
   :end-column 12})
 ((fn*
   loading__6721__auto__
   ([]
    (do
     (clojure.lang.Var/pushThreadBindings
      #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
     (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
 (if
  (.equals 'two-fer 'clojure.core)
  nil
  (do
   (clojure.lang.LockingTransaction/runInTransaction
    (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
   nil)))
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    loading__6721__auto__
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def two-fer (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me.")))))
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    loading__6721__auto__
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6721__auto__))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def two-fer (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me.")))))
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:18:24).
; No such var: e/emit-hygenic-form
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-17
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-17))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-18] (str "One for " PLACEHOLDER-18 ", one for me.")))))
clj꞉clojure-representer꞉> 
#'analyzer.passes.uniquify/uniquify-locals
clj꞉analyzer.passes.uniquify꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me.")))))
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me.")))))
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\src\clojure_representer.clj:0:0).
; Unable to resolve symbol: mapping in this context
clj꞉clojure-representer꞉> 
{"loading__6721__auto__" "PLACEHOLDER-1", "name" "PLACEHOLDER-1"}
clj꞉clojure-representer꞉> 
(["loading__6721__auto__" "PLACEHOLDER-1"] ["name" "PLACEHOLDER-1"])
clj꞉clojure-representer꞉> 
; Execution error (ClassCastException) at clojure-representer/eval13105 (REPL:26).
; clojure.lang.PersistentArrayMap cannot be cast to clojure.lang.Reversible
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
#'analyzer.passes.uniquify/uniquify-locals
clj꞉analyzer.passes.uniquify꞉> 
nil
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
; Execution error (IllegalArgumentException) at clojure-representer/eval13134 (REPL:28).
; No value supplied for key: clojure.lang.LazySeq@7ffb9a61
clj꞉clojure-representer꞉> 
{("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name")}
clj꞉clojure-representer꞉> 
(("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name"))
clj꞉clojure-representer꞉> 
; Execution error (ClassCastException) at clojure-representer/eval13140 (REPL:28).
; java.lang.String cannot be cast to java.util.Map$Entry
clj꞉clojure-representer꞉> 
{("PLACEHOLDER-1" "loading__6721__auto__") ("PLACEHOLDER-1" "name")}
clj꞉clojure-representer꞉> 
{"PLACEHOLDER-1" "name"}
clj꞉clojure-representer꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer꞉> 
{"PLACEHOLDER-1" "loading__6721__auto__", "PLACEHOLDER-2" "name"}
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Evaluating file: clojure_representer_test.clj
#'clojure-representer-test/represent-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test

FAIL in (represent-test) (clojure_representer_test.clj:7)
FIXME, I fail.
expected: (= 0 1)
  actual: (not (= 0 1))

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
{:test 1, :pass 0, :fail 1, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (require '(clojure.string))
  (def
   two-fer
   (fn*
    ([] "One for you, one for me.")
    ([PLACEHOLDER-2]
     (str "One for " (if (clojure.string/blank? PLACEHOLDER-2) "you" PLACEHOLDER-2) ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def f (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))
  (def two-fer (fn* ([] (f "you")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me."))))))
clj꞉clojure-representer-test꞉> 
(((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (require '(clojure.string))
  (def
   two-fer
   (fn*
    ([] "One for you, one for me.")
    ([PLACEHOLDER-2]
     (str "One for " (if (clojure.string/blank? PLACEHOLDER-2) "you" PLACEHOLDER-2) ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def f (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))
  (def two-fer (fn* ([] (f "you")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn*
    ([PLACEHOLDER-2] (do (print "One for" PLACEHOLDER-2) (print ", one for me.")))
    ([] (print "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer-name (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))
  (def two-fer (fn* ([] (two-fer-name "you")) ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (do str "One for you, one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def
   two-fer
   (fn*
    ([& PLACEHOLDER-2]
     (let*
      [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]
      (format "One for %s, one for me." (if (clojure.lang.Util/identical PLACEHOLDER-4 nil) "you" PLACEHOLDER-4)))))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (two-fer "you")))))
 ((do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
     :line 1,
     :column 5,
     :end-line 1,
     :end-column 12})
   ((fn*
     PLACEHOLDER-1
     ([]
      (do
       (clojure.lang.Var/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
       (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do
     (clojure.lang.LockingTransaction/runInTransaction
      (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
     nil)))
  (def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...
 ...)
clj꞉clojure-representer-test꞉> 
; Execution error (ExceptionInfo) at analyzer.passes.jvm.validate/eval9785$fn (validate.clj:28).
; Could not resolve var: Name
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (REPL:-2).
; resources\twofers\373\two_fer.clj (The system cannot find the file specified)
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (REPL:-2).
; resources\twofers\373\two_fer.clj (The system cannot find the file specified)
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/as-path
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:24:26).
; Unable to resolve symbol: n in this context
clj꞉clojure-representer-test꞉> 
#object[java.io.File 0x253cf9d6 "resources\\twofers\\0\\expected.txt"]
clj꞉clojure-representer-test꞉> 
; Execution error (ClassCastException) at clojure-representer-test/eval44340 (REPL:24).
; java.io.File cannot be cast to java.nio.file.Path
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:24:17).
; Unable to resolve symbol: n in this context
clj꞉clojure-representer-test꞉> 
; Execution error (ClassCastException) at clojure-representer-test/eval44349 (REPL:24).
; java.lang.String cannot be cast to java.nio.file.Path
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#object[java.io.File 0x109e8ad1 "resources\\twofers\\expected.txt"]
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\0\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\373\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\373\expected.txt
clj꞉clojure-representer-test꞉> 
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\374\expected.txt
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
nil
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
; Execution error at clojure-representer-test/eval53057 (REPL:16).
; Invalid leading character: @
clj꞉clojure-representer-test꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :line 1,
    :column 5,
    :end-line 1,
    :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer꞉> 
(do
 (clojure.core/in-ns 'two-fer)
 (.resetMeta
  (clojure.lang.Namespace/find 'two-fer)
  {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
   :line 1,
   :column 5,
   :end-line 1,
   :end-column 12})
 ((fn*
   PLACEHOLDER-1
   ([]
    (do
     (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
     (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
 (if
  (.equals 'two-fer 'clojure.core)
  nil
  (do
   (clojure.lang.LockingTransaction/runInTransaction
    (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
   nil)))
clj꞉clojure-representer꞉> 
#object[sun.nio.fs.WindowsPath 0x503fd941 "c:\\Users\\porko\\Documents\\GitHub\\exercism\\clojure-representer"]
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/cwd
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/newfile/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/c:\\Users\\porko\\Documents\\GitHub\\exercism\\clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/as-file
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:\\Users\\porko\\Documents\\GitHub\\exercism\\clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/c:\\Users\\porko\\Documents\\GitHub\\exercism\\clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"c:UsersporkoDocumentsGitHubexercismclojure-representer\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:c:UsersporkoDocumentsGitHubexercismclojure-representer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
; Syntax error reading source at (REPL:33:64).
; Map literal must contain an even number of forms
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"nil\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
clj꞉clojure-representer-test꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:38:16).
; Unable to resolve symbol: remove-path in this context
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/remove-path
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/represent-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.
{:test 1, :pass 1, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/represent-test
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/represent-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

Ran 1 tests containing 500 assertions.
0 failures, 0 errors.
{:test 1, :pass 500, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/cleanup
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

Ran 2 tests containing 1000 assertions.
0 failures, 0 errors.
{:test 2, :pass 1000, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (REPL:-2).
; resources\twofers\0\representation.txt (The system cannot find the file specified)
clj꞉clojure-representer-test꞉> 
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
nil
clj꞉clojure-representer-test꞉> 
#{"((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  fer-2\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3]\r\n    (if (empty? PLACEHOLDER-3) (fer-2 \"you\") (fer-2 PLACEHOLDER-3)))\r\n   ([] (fer-2 \"you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (str PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  one-for\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (one-for \"you\"))\r\n   ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\"))))\r\n (println (two-fer \"bob\"))\r\n (println (two-fer)))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (format \"One for you, one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require 'clojure.string))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (clojure.string/trim PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (if\r\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\r\n       \"you\"\r\n       PLACEHOLDER-3)]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\r\n nil)\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\r\n     \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.string/blank? PLACEHOLDER-2)\r\n     (two-fer \"you\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-template\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3] (two-fer-template PLACEHOLDER-3))\r\n   ([] (two-fer-template \"you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (def\r\n  -main\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (println\r\n     (if\r\n      (first PLACEHOLDER-3)\r\n      (two-fer (first PLACEHOLDER-3))\r\n      (two-fer)))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] (two-fer \"you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (clojure.string/join\r\n      [\"One for \" (first PLACEHOLDER-2) \", one for me.\"]))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\r\n      \"you\"\r\n      PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  build-two-fer-str\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (build-two-fer-str \"you\"))\r\n   ([PLACEHOLDER-3] (build-two-fer-str PLACEHOLDER-3)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (println \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\r\n (two-fer \"Bob\")\r\n (two-fer \"Alice\")\r\n (two-fer))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (two-fer \"Bardia\")\r\n (two-fer \"\")\r\n (two-fer))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  manipulate-string\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-3] (manipulate-string PLACEHOLDER-3)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-name\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer-name \"you\"))\r\n   ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (require '(clojure.string))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if (clojure.string/blank? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format \"One for %s, one for me.\" \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/isZero\r\n      (clojure.lang.RT/count PLACEHOLDER-2))\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/equiv\r\n        (clojure.lang.RT/count PLACEHOLDER-2)\r\n        0)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n       \"you\"\r\n       PLACEHOLDER-4)))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n      \"you\"\r\n      (first PLACEHOLDER-2))\r\n     \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     \"\"\r\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] \"One for you, one for me.\"))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (let*\r\n      [PLACEHOLDER-6\r\n       (let*\r\n        [PLACEHOLDER-5 PLACEHOLDER-4]\r\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\r\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  msg\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  sentence\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (string/join \", \" PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (clojure.core/seq PLACEHOLDER-3)\r\n      PLACEHOLDER-5\r\n      (clojure.core/first PLACEHOLDER-4)\r\n      PLACEHOLDER-6\r\n      (clojure.core/next PLACEHOLDER-4)\r\n      PLACEHOLDER-7\r\n      PLACEHOLDER-5\r\n      PLACEHOLDER-8\r\n      PLACEHOLDER-6]\r\n     (str\r\n      (string/upper-case PLACEHOLDER-7)\r\n      (apply str PLACEHOLDER-8)\r\n      \".\")))))\r\n (def\r\n  one-fer\r\n  (fn*\r\n   ([] (one-fer \"me\"))\r\n   ([PLACEHOLDER-9] (string/join \" \" [\"one for\" PLACEHOLDER-9]))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\r\n (def\r\n  two-fer-unflexible\r\n  (fn*\r\n   ([] (two-fer-unflexible \"you\"))\r\n   ([PLACEHOLDER-11]\r\n    (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"One for me, one for you.\"\r\n     (if\r\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      (str \"One for you, one for me\")\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\r\n"
  "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/use '[clojure.string :only (blank?)]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"
  ...}
clj꞉clojure-representer-test꞉> 
141
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:29:37).
; Unable to resolve symbol: n in this context
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

ERROR in (twofers-test) (AFn.java:429)
Uncaught exception, not in assertion.
expected: nil
  actual: clojure.lang.ArityException: Wrong number of args (1) passed to: clojure.core/run!
 at clojure.lang.AFn.throwArity (AFn.java:429)
    clojure.lang.AFn.invoke (AFn.java:32)
    clojure_representer_test$fn__87922.invokeStatic (NO_SOURCE_FILE:29)
    clojure_representer_test/fn (NO_SOURCE_FILE:19)
    clojure.test$test_var$fn__9737.invoke (test.clj:717)
    clojure.test$test_var.invokeStatic (test.clj:717)
    clojure.test$test_var.invoke (test.clj:708)
    clojure.test$test_vars$fn__9763$fn__9768.invoke (test.clj:735)
    clojure.test$default_fixture.invokeStatic (test.clj:687)
    clojure.test$default_fixture.invoke (test.clj:683)
    clojure.test$test_vars$fn__9763.invoke (test.clj:735)
    clojure.test$default_fixture.invokeStatic (test.clj:687)
    clojure.test$default_fixture.invoke (test.clj:683)
    clojure.test$test_vars.invokeStatic (test.clj:731)
    clojure.test$test_all_vars.invokeStatic (test.clj:737)
    clojure.test$test_ns.invokeStatic (test.clj:758)
    clojure.test$t
est_ns.invoke (test.clj:743)
    clojure.core$map$fn__5866.invoke (core.clj:2755)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1792)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:667)
    clojure.test$run_tests.invokeStatic (test.clj:768)
    clojure.test$run_tests.doInvoke (test.clj:768)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    clojure.test$run_tests.invokeStatic (test.clj:773)
    clojure.test$run_tests.invoke (test.clj:768)
    clojure_representer_test$eval87947.invokeStatic (NO_SOURCE_FILE:32)
    clojure_representer_test$eval87947.invoke (NO_SOURCE_FILE:32)
    clojure.lang.Compiler.eval (Compiler.java:7177)
    clojure.lang.Compiler.eval (Compiler.java:7132)
    clojure.core$eval.invokeStatic (core.clj:3214)
    clojure.core$eval.invoke (core.clj:3210)
    nrepl.middleware.interruptible_eval
$evaluate$fn__1262$fn__1263.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:665)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1973)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1973)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    nrepl.middleware.interruptible_eval$evaluate$fn__1262.invoke (interruptible_eval.clj:87)
    clojure.main$repl$read_eval_print__9086$fn__9089.invoke (main.clj:437)
    clojure.main$repl$read_eval_print__9086.invoke (main.clj:437)
    clojure.main$repl$fn__9095.invoke (main.clj:458)
    clojure.main$repl.invokeStatic (main.clj:458)
    clojure.main$repl.doInvoke (main.clj:368)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:84)
    nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:56)
    nrepl.middle
ware.interruptible_eval$interruptible_eval$fn__1295$fn__1299.invoke (interruptible_eval.clj:152)
    clojure.lang.AFn.run (AFn.java:22)
    nrepl.middleware.session$session_exec$main_loop__1364$fn__1368.invoke (session.clj:218)
    nrepl.middleware.session$session_exec$main_loop__1364.invoke (session.clj:217)
    clojure.lang.AFn.run (AFn.java:22)
    java.lang.Thread.run (:-1)

Ran 2 tests containing 1002 assertions.
0 failures, 1 errors.
{:test 2, :pass 1001, :fail 0, :error 1, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

Ran 2 tests containing 1001 assertions.
0 failures, 0 errors.
{:test 2, :pass 1001, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (require '(clojure.string))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if (clojure.string/blank? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  f\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\r\n   ([] (print \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-name\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer-name \"you\"))\r\n   ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (do str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__114395\",\r\n  \"PLACEHOLDER-3\" : \"vec__114397\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n       \"you\"\r\n       PLACEHOLDER-4)))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/equiv\r\n        (clojure.lang.RT/count PLACEHOLDER-2)\r\n        0)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (string/join \"\" [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n      PLACEHOLDER-2\r\n      \"you\")\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__114975\",\r\n  \"PLACEHOLDER-3\" : \"vec__114977\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.string/blank? PLACEHOLDER-4)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     ([] (str \"One for you, one for me.\"))\r\n     ([PLACEHOLDER-2]\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name1\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.
core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer)\r\n (two-fer \"haley\"))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     []\r\n     (str \"One for you, one for me.\")\r\n     [PLACEHOLDER-2]\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"One for me, one for you.\"\r\n     (if\r\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__115504\",\r\n  \"PLACEHOLDER-3\" : \"vec__115506\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (use '[clojure.string :only (join)])\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\r\n      \"you\"\r\n      PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n      \"you\"\r\n      PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (println\r\n     (clojure.lang.Numbers/add\r\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\r\n      \", one for me\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"One for you, one for me\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-7\" : \"name\",\r\n  \"PLACEHOLDER-6\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer)\r\n (two-fer \"Zaphod\")\r\n (def\r\n  two-fer-var-arg\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (if\r\n     (empty? PLACEHOLDER-3)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\r\n (two-fer-var-arg)\r\n (two-fer-var-arg \"Ford\")\r\n (def\r\n  two-fer-var-arg-apply\r\n  (fn*\r\n   ([& PLACEHOLDER-4]\r\n    (if\r\n     (empty? PLACEHOLDER-4)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\r\n (two-fer-var-arg-apply)\r\n (two-fer-var-arg-apply \"Ford\")\r\n (def\r\n  two-fer-var-arg-apply-when-let\r\n  (fn*\r\n   ([& PLACEHOLDER-5]\r\n    (let*\r\n     [PLACEHOLDER-7\r\n      (let*\r\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\r\n       (if PL
ACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\r\n (two-fer-var-arg-apply-when-let)\r\n (two-fer-var-arg-apply-when-let \"Arthur\"))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"input\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.
core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def hello (fn* ([] (println \"This is ayden\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__115974\",\r\n  \"PLACEHOLDER-3\" : \"vec__115976\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.string/blank? PLACEHOLDER-2)\r\n     (str \"One for you, one for me.\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/identical (first PLACEHOLDER-2) nil)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (do print \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__116163\",\r\n  \"PLACEHOLDER-3\" : \"vec__116165\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n nil)\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__116338\",\r\n  \"PLACEHOLDER-4\" : \"vec__116340\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  one-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      PLACEHOLDER-3\r\n      PLACEHOLDER-5\r\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\r\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"args\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (def\r\n  -main\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (println\r\n     (if\r\n      (first PLACEHOLDER-3)\r\n      (two-fer (first PLACEHOLDER-3))\r\n      (two-fer)))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  sayit\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER-3))))\r\n (two-fer \"foo\")\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name-args\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n   
    (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__116467\",\r\n  \"PLACEHOLDER-3\" : \"vec__116469\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"x\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"you\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (c
lojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.string/blank? PLACEHOLDER-2)\r\n     (two-fer \"you\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (do str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__116694\",\r\n  \"PLACEHOLDER-3\" : \"vec__116696\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"trimmed-name\",\r\n  \"PLACEHOLDER-4\" : \"address-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require 'clojure.string))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.Loc
kingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (clojure.string/trim PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (if\r\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\r\n       \"you\"\r\n       PLACEHOLDER-3)]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\r\n nil)\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     (str \"One for you, one for me.\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (two-fer \"Bardia\")\r\n (two-fer \"\")\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"x\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  fer-2\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3]\r\n    (if (empty? PLACEHOLDER-3) (fer-2 \"you\") (fer-2 PLACEHOLDER-3)))\r\n   ([] (fer-2 \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"display-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n
       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format \"One for %s, one for me.\" \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (printf \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def format-str (fn* ([] \"One for %s, one for me.\")))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format (format-str) \"you\"))\r\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (format \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn
*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) \"you\")]\r\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__117728\",\r\n  \"PLACEHOLDER-3\" : \"vec__117730\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.la
ng.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"res\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/
commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for you, one for me.\"\r\n      PLACEHOLDER-4\r\n      (first PLACEHOLDER-2)]\r\n     (if\r\n      (some? PLACEHOLDER-4)\r\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\r\n      PLACEHOLDER-3))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     \"\"\r\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n      \"you\"\r\n      (first PLACEHOLDER-2))\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (println \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\r\n (two-fer \"Bob\")\r\n (two-fer \"Alice\")\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDER-2))\r\n      PLACEHOLDER-2\r\n      \"you\")\r\n     \", one for me.\"))\r\n   ([] (two-fer \"\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\")))\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-wrap\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer-wrap \"you\"))\r\n   ([PLACEHOLDER-3] (two-fer-wrap PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-template\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3] (two-fer-template PLACEHOLDER-3))\r\n   ([] (two-fer-template \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"arg\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/
*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n nil)\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"other-party\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'cloju
re.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  build-two-fer-str\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (build-two-fer-str \"you\"))\r\n   ([PLACEHOLDER-3] (build-two-fer-str PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  createSentence\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3] (createSentence PLACEHOLDER-3))\r\n   ([] (createSentence \"you\"))))\r\n (two-fer/two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"You\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"no-name\",\r\n  \"PLACEHOLDER-4\" : \"with-name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransa
ction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for you, one for me.\"\r\n      PLACEHOLDER-4\r\n      \"One for %s, one for me.\"]\r\n     (if\r\n      (let*\r\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\r\n      PLACEHOLDER-3\r\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\"))))\r\n (println (two-fer \"bob\"))\r\n (println (two-fer)))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"x\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  msg\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"other\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       
(clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__119436\",\r\n  \"PLACEHOLDER-3\" : \"vec__119438\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def foo :bar))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (not= PLACEHOLDER-2 nil)\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     (str \"One for you, one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"temp__5733__auto__\",\r\n  \"PLACEHOLDER-4\" : \"null-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n 
      (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\r\n     (if\r\n      PLACEHOLDER-3\r\n      (let*\r\n       [PLACEHOLDER-4 PLACEHOLDER-3]\r\n       (str \"One for you, one for me.\"))\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     PLACEHOLDER-2\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120031\",\r\n  \"PLACEHOLDER-3\" : \"vec__120033\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojur
e.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (let*\r\n      [PLACEHOLDER-6\r\n       (let*\r\n        [PLACEHOLDER-5 PLACEHOLDER-4]\r\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\r\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120120\",\r\n  \"PLACEHOLDER-3\" : \"vec__120122\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     (if\r\n      (string? PLACEHOLDER-2)\r\n      nil\r\n      (throw\r\n       (new\r\n        java.lang.AssertionError\r\n        (clojure.core/str\r\n         \"Assert failed: \"\r\n         (clojure.core/pr-str '(string? name))))))\r\n     (if\r\n      (empty? PLACEHOLDER-2)\r\n      (two-fer)\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120327\",\r\n  \"PLACEHOLDER-3\" : \"vec__120329\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"who\"\r\n}" "((def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-1] (format \"One for %s, one for me\" PLACEHOLDER-1)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\r\n     \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"other-person\",\r\n  \"PLACEHOLDER-3\" : \"prefix\",\r\n  \"PLACEHOLDER-4\" : \"mid\",\r\n  \"PLACEHOLDER-5\" : \"postfix\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\
n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for\"\r\n      PLACEHOLDER-4\r\n      (clojure.string/join \"\" [PLACEHOLDER-2 \",\"])\r\n      PLACEHOLDER-5\r\n      \"one for me.\"]\r\n     (clojure.string/join\r\n      \" \"\r\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120640\",\r\n  \"PLACEHOLDER-3\" : \"vec__120642\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120661\",\r\n  \"PLACEHOLDER-3\" : \"vec__120663\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120699\",\r\n  \"PLACEHOLDER-3\" : \"vec__120701\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__120771\",\r\n  \"PLACEHOLDER-3\" : \"vec__120773\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"who\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/
*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/c
ommute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/replace\r\n     \"One for you, one for me.\"\r\n     #\"you\"\r\n     PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"safe-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure
.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\r\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__120944\",\r\n  \"PLACEHOLDER-6\" : \"seq__120945\",\r\n  \"PLACEHOLDER-5\" : \"first__120946\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[cloju
re.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  sentence\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (string/join \", \" PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (clojure.core/seq PLACEHOLDER-3)\r\n      PLACEHOLDER-5\r\n      (clojure.core/first PLACEHOLDER-4)\r\n      PLACEHOLDER-6\r\n      (clojure.core/next PLACEHOLDER-4)\r\n      PLACEHOLDER-7\r\n      PLACEHOLDER-5\r\n      PLACEHOLDER-8\r\n      PLACEHOLDER-6]\r\n     (str\r\n      (string/upper-case PLACEHOLDER-7)\r\n      (apply str PLACEHOLDER-8)\r\n      \".\")))))\r\n (def\r\n  one-fer\r\n  (fn*\r\n   ([] (one-fer \"me\"))\r\n   ([PLACEHOLDER-9] (string/join \" \" [\"on
e for\" PLACEHOLDER-9]))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\r\n (def\r\n  two-fer-unflexible\r\n  (fn*\r\n   ([] (two-fer-unflexible \"you\"))\r\n   ([PLACEHOLDER-11]\r\n    (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  one-for\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (one-for \"you\"))\r\n   ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__121194\",\r\n  \"PLACEHOLDER-3\" : \"vec__121196\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__121215\",\r\n  \"PLACEHOLDER-3\" : \"vec__121217\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      (str \"One for you, one for me\")\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"args\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  get-name\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"you\"\r\n     (first PLACEHOLDER-2)))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (let*\r\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer \"Bob\"))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/isZero\r\n      (clojure.lang.RT/count PLACEHOLDER-2))\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/isZero\r\n      (clojure.lang.RT/count PLACEHOLDER-2))\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (two-fer \"Bob\")\r\n (two-fer))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__121631\",\r\n  \"PLACEHOLDER-4\" : \"map__121633\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (if\r\n       (clojure.core/seq? PLACEHOLDER-3)\r\n       (clojure.lang.PersistentHashMap/create\r\n        (clojure.core/seq PLACEHOLDER-3))\r\n       PLACEHOLDER-3)\r\n      PLACEHOLDER-5\r\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\r\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (clojure.string/join\r\n      [\"One for \" (first PLACEHOLDER-2) \", one for me.\"]))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__121936\",\r\n  \"PLACEHOLDER-3\" : \"vec__121938\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n       \"you\"\r\n       PLACEHOLDER-4)\r\n      \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  _two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (_two-fer \"you\"))\r\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLDER-3)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (println (two-fer)))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (str PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/use '[clojure.string :only (blank?)]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\r\n   ([] \"One for you, one for me\"))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (true? PLACEHOLDER-2)\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     (str \"One for you\" \", one for me.\"))))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in () (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"string\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.co
re/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  manipulate-string\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-3] (manipulate-string PLACEHOLDER-3)))))\r\n"))

ERROR in () (:-2)
mappings Unique solutions
expected: (= 141 (count (set (map (fn* [p1__122723#] (slurp (str "resources/twofers/" p1__122723# "/representation.txt"))) (range 500)))))
  actual: java.io.FileNotFoundException: resources\twofers\0\representation.txt (The system cannot find the file specified)
 at java.io.FileInputStream.open0 (:-2)
    java.io.FileInputStream.open (:-1)
    java.io.FileInputStream.<init> (:-1)
    clojure.java.io$fn__11496.invokeStatic (io.clj:229)
    clojure.java.io/fn (io.clj:229)
    clojure.java.io$fn__11409$G__11402__11416.invoke (io.clj:69)
    clojure.java.io$fn__11508.invokeStatic (io.clj:258)
    clojure.java.io/fn (io.clj:254)
    clojure.java.io$fn__11409$G__11402__11416.invoke (io.clj:69)
    clojure.java.io$fn__11470.invokeStatic (io.clj:165)
    clojure.java.io/fn (io.clj:165)
    clojure.java.io$fn__11422$G__11398__11429.invoke (io.clj:69)
    clojure.java.io$reader.invokeStatic (io.clj:102)
    clojure.java.io$reader.doInvoke (io.clj:86)
    clojure.lang.RestFn.invoke (RestFn.java:410)
    clojure.lang.AFn.applyToHelper (AFn.java:154)
    clojure.lang.RestFn.applyTo (RestFn.java:132)
    clojure.core$apply.invokeStatic (core
.clj:667)
    clojure.core$slurp.invokeStatic (core.clj:6942)
    clojure.core$slurp.doInvoke (core.clj:6942)
    clojure.lang.RestFn.invoke (RestFn.java:410)
    clojure_representer_test$eval122726$fn__122739$fn__122740.invoke (NO_SOURCE_FILE:33)
    clojure.core$map$fn__5866.invoke (core.clj:2753)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.RT.seq (RT.java:535)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core$reduce1.invokeStatic (core.clj:930)
    clojure.core$set.invokeStatic (core.clj:4113)
    clojure.core$set.invoke (core.clj:4105)
    clojure_representer_test$eval122726$fn__122739.invoke (NO_SOURCE_FILE:33)
    clojure_representer_test$eval122726.invokeStatic (NO_SOURCE_FILE:32)
    clojure_representer_test$eval122726.invoke (NO_SOURCE_FILE:27)
    clojure.lang.Compiler.eval (Compiler.java:7177)
    clojure.lang.Compiler.eval (Compiler.java:7132)
    clojure.core$eval.invokeStatic (core.clj:321
4)
    clojure.core$eval.invoke (core.clj:3210)
    nrepl.middleware.interruptible_eval$evaluate$fn__1262$fn__1263.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:665)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1973)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1973)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    nrepl.middleware.interruptible_eval$evaluate$fn__1262.invoke (interruptible_eval.clj:87)
    clojure.main$repl$read_eval_print__9086$fn__9089.invoke (main.clj:437)
    clojure.main$repl$read_eval_print__9086.invoke (main.clj:437)
    clojure.main$repl$fn__9095.invoke (main.clj:458)
    clojure.main$repl.invokeStatic (main.clj:458)
    clojure.main$repl.doInvoke (main.clj:368)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:84)
    nrepl.mi
ddleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:56)
    nrepl.middleware.interruptible_eval$interruptible_eval$fn__1295$fn__1299.invoke (interruptible_eval.clj:152)
    clojure.lang.AFn.run (AFn.java:22)
    nrepl.middleware.session$session_exec$main_loop__1364$fn__1368.invoke (session.clj:218)
    nrepl.middleware.session$session_exec$main_loop__1364.invoke (session.clj:217)
    clojure.lang.AFn.run (AFn.java:22)
    java.lang.Thread.run (:-1)
; Execution error (NoSuchFileException) at sun.nio.fs.WindowsException/translateToIOException (REPL:-1).
; resources\twofers\0\representation.txt
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (require '(clojure.string))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if (clojure.string/blank? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  f\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\r\n   ([] (print \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-name\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer-name \"you\"))\r\n   ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (do str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__131926\",\r\n  \"PLACEHOLDER-3\" : \"vec__131928\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n       \"you\"\r\n       PLACEHOLDER-4)))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/equiv\r\n        (clojure.lang.RT/count PLACEHOLDER-2)\r\n        0)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (string/join \"\" [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n      PLACEHOLDER-2\r\n      \"you\")\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__132506\",\r\n  \"PLACEHOLDER-3\" : \"vec__132508\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.string/blank? PLACEHOLDER-4)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     ([] (str \"One for you, one for me.\"))\r\n     ([PLACEHOLDER-2]\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name1\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.
core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer)\r\n (two-fer \"haley\"))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     []\r\n     (str \"One for you, one for me.\")\r\n     [PLACEHOLDER-2]\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"One for me, one for you.\"\r\n     (if\r\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__133035\",\r\n  \"PLACEHOLDER-3\" : \"vec__133037\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (use '[clojure.string :only (join)])\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\r\n      \"you\"\r\n      PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n      \"you\"\r\n      PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (println\r\n     (clojure.lang.Numbers/add\r\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\r\n      \", one for me\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"One for you, one for me\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-7\" : \"name\",\r\n  \"PLACEHOLDER-6\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer)\r\n (two-fer \"Zaphod\")\r\n (def\r\n  two-fer-var-arg\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (if\r\n     (empty? PLACEHOLDER-3)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\r\n (two-fer-var-arg)\r\n (two-fer-var-arg \"Ford\")\r\n (def\r\n  two-fer-var-arg-apply\r\n  (fn*\r\n   ([& PLACEHOLDER-4]\r\n    (if\r\n     (empty? PLACEHOLDER-4)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\r\n (two-fer-var-arg-apply)\r\n (two-fer-var-arg-apply \"Ford\")\r\n (def\r\n  two-fer-var-arg-apply-when-let\r\n  (fn*\r\n   ([& PLACEHOLDER-5]\r\n    (let*\r\n     [PLACEHOLDER-7\r\n      (let*\r\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\r\n       (if PL
ACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\r\n (two-fer-var-arg-apply-when-let)\r\n (two-fer-var-arg-apply-when-let \"Arthur\"))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"input\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.
core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def hello (fn* ([] (println \"This is ayden\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__133505\",\r\n  \"PLACEHOLDER-3\" : \"vec__133507\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.string/blank? PLACEHOLDER-2)\r\n     (str \"One for you, one for me.\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/identical (first PLACEHOLDER-2) nil)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (do print \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__133694\",\r\n  \"PLACEHOLDER-3\" : \"vec__133696\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      \"One for you, one for me.\"\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n nil)\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__133869\",\r\n  \"PLACEHOLDER-4\" : \"vec__133871\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  one-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      PLACEHOLDER-3\r\n      PLACEHOLDER-5\r\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\r\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"args\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (def\r\n  -main\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (println\r\n     (if\r\n      (first PLACEHOLDER-3)\r\n      (two-fer (first PLACEHOLDER-3))\r\n      (two-fer)))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  sayit\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER-3))))\r\n (two-fer \"foo\")\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name-args\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n   
    (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__133998\",\r\n  \"PLACEHOLDER-3\" : \"vec__134000\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"x\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"you\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (c
lojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.string/blank? PLACEHOLDER-2)\r\n     (two-fer \"you\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (do str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__134225\",\r\n  \"PLACEHOLDER-3\" : \"vec__134227\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"trimmed-name\",\r\n  \"PLACEHOLDER-4\" : \"address-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require 'clojure.string))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.Loc
kingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (clojure.string/trim PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (if\r\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\r\n       \"you\"\r\n       PLACEHOLDER-3)]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\r\n nil)\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     (str \"One for you, one for me.\")\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"\"))\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n (two-fer \"Bardia\")\r\n (two-fer \"\")\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"x\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  fer-2\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3]\r\n    (if (empty? PLACEHOLDER-3) (fer-2 \"you\") (fer-2 PLACEHOLDER-3)))\r\n   ([] (fer-2 \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"display-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n
       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format \"One for %s, one for me.\" \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (printf \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def format-str (fn* ([] \"One for %s, one for me.\")))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (format (format-str) \"you\"))\r\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (format \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn
*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) \"you\")]\r\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__135259\",\r\n  \"PLACEHOLDER-3\" : \"vec__135261\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.la
ng.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\",\r\n  \"PLACEHOLDER-3\" : \"res\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/
commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for you, one for me.\"\r\n      PLACEHOLDER-4\r\n      (first PLACEHOLDER-2)]\r\n     (if\r\n      (some? PLACEHOLDER-4)\r\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\r\n      PLACEHOLDER-3))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/join\r\n     \"\"\r\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n      \"you\"\r\n      (first PLACEHOLDER-2))\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (println \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\r\n (two-fer \"Bob\")\r\n (two-fer \"Alice\")\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if\r\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDER-2))\r\n      PLACEHOLDER-2\r\n      \"you\")\r\n     \", one for me.\"))\r\n   ([] (two-fer \"\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\")))\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-wrap\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer-wrap \"you\"))\r\n   ([PLACEHOLDER-3] (two-fer-wrap PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer-template\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3] (two-fer-template PLACEHOLDER-3))\r\n   ([] (two-fer-template \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"arg\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/
*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n nil)\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"other-party\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'cloju
re.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  build-two-fer-str\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (build-two-fer-str \"you\"))\r\n   ([PLACEHOLDER-3] (build-two-fer-str PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\")))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  createSentence\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-3] (createSentence PLACEHOLDER-3))\r\n   ([] (createSentence \"you\"))))\r\n (two-fer/two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"You\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"no-name\",\r\n  \"PLACEHOLDER-4\" : \"with-name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransa
ction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for you, one for me.\"\r\n      PLACEHOLDER-4\r\n      \"One for %s, one for me.\"]\r\n     (if\r\n      (let*\r\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\r\n      PLACEHOLDER-3\r\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\"))))\r\n (println (two-fer \"bob\"))\r\n (println (two-fer)))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"x\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  msg\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-4\" : \"other\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       
(clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-4\r\n      (let*\r\n       [PLACEHOLDER-3 PLACEHOLDER-2]\r\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__136967\",\r\n  \"PLACEHOLDER-3\" : \"vec__136969\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def foo :bar))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (let*\r\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (not= PLACEHOLDER-2 nil)\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     (str \"One for you, one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"temp__5733__auto__\",\r\n  \"PLACEHOLDER-4\" : \"null-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n 
      (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\r\n     (if\r\n      PLACEHOLDER-3\r\n      (let*\r\n       [PLACEHOLDER-4 PLACEHOLDER-3]\r\n       (str \"One for you, one for me.\"))\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     PLACEHOLDER-2\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\r\n     \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n       \"you\"\r\n       (first PLACEHOLDER-2))]\r\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__137562\",\r\n  \"PLACEHOLDER-3\" : \"vec__137564\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojur
e.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (let*\r\n      [PLACEHOLDER-6\r\n       (let*\r\n        [PLACEHOLDER-5 PLACEHOLDER-4]\r\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\r\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__137651\",\r\n  \"PLACEHOLDER-3\" : \"vec__137653\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (do\r\n     (if\r\n      (string? PLACEHOLDER-2)\r\n      nil\r\n      (throw\r\n       (new\r\n        java.lang.AssertionError\r\n        (clojure.core/str\r\n         \"Assert failed: \"\r\n         (clojure.core/pr-str '(string? name))))))\r\n     (if\r\n      (empty? PLACEHOLDER-2)\r\n      (two-fer)\r\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__137858\",\r\n  \"PLACEHOLDER-3\" : \"vec__137860\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"who\"\r\n}" "((def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-1] (format \"One for %s, one for me\" PLACEHOLDER-1)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (str\r\n     \"One for \"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\r\n     \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"other-person\",\r\n  \"PLACEHOLDER-3\" : \"prefix\",\r\n  \"PLACEHOLDER-4\" : \"mid\",\r\n  \"PLACEHOLDER-5\" : \"postfix\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\
n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      \"One for\"\r\n      PLACEHOLDER-4\r\n      (clojure.string/join \"\" [PLACEHOLDER-2 \",\"])\r\n      PLACEHOLDER-5\r\n      \"one for me.\"]\r\n     (clojure.string/join\r\n      \" \"\r\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'
clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (format\r\n     \"One for %s, one for me.\"\r\n     (let*\r\n      [PLACEHOLDER-3 PLACEHOLDER-2]\r\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138171\",\r\n  \"PLACEHOLDER-3\" : \"vec__138173\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138192\",\r\n  \"PLACEHOLDER-3\" : \"vec__138194\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138230\",\r\n  \"PLACEHOLDER-3\" : \"vec__138232\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (format\r\n      \"One for %s, one for me.\"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138302\",\r\n  \"PLACEHOLDER-3\" : \"vec__138304\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"who\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/
*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer nil))\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"args\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/c
ommute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (clojure.string/replace\r\n     \"One for you, one for me.\"\r\n     #\"you\"\r\n     PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"safe-name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure
.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\r\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__138475\",\r\n  \"PLACEHOLDER-6\" : \"seq__138476\",\r\n  \"PLACEHOLDER-5\" : \"first__138477\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[cloju
re.string :as string]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  sentence\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (string/join \", \" PLACEHOLDER-2)\r\n      PLACEHOLDER-4\r\n      (clojure.core/seq PLACEHOLDER-3)\r\n      PLACEHOLDER-5\r\n      (clojure.core/first PLACEHOLDER-4)\r\n      PLACEHOLDER-6\r\n      (clojure.core/next PLACEHOLDER-4)\r\n      PLACEHOLDER-7\r\n      PLACEHOLDER-5\r\n      PLACEHOLDER-8\r\n      PLACEHOLDER-6]\r\n     (str\r\n      (string/upper-case PLACEHOLDER-7)\r\n      (apply str PLACEHOLDER-8)\r\n      \".\")))))\r\n (def\r\n  one-fer\r\n  (fn*\r\n   ([] (one-fer \"me\"))\r\n   ([PLACEHOLDER-9] (string/join \" \" [\"on
e for\" PLACEHOLDER-9]))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\r\n (def\r\n  two-fer-unflexible\r\n  (fn*\r\n   ([] (two-fer-unflexible \"you\"))\r\n   ([PLACEHOLDER-11]\r\n    (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  one-for\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (one-for \"you\"))\r\n   ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138725\",\r\n  \"PLACEHOLDER-3\" : \"vec__138727\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTr
ansaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (let*\r\n       [PLACEHOLDER-5 PLACEHOLDER-4]\r\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__138746\",\r\n  \"PLACEHOLDER-3\" : \"vec__138748\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (if\r\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n      (str \"One for you, one for me\")\r\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"args\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core
/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  get-name\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\r\n     \"you\"\r\n     (first PLACEHOLDER-2)))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-3]\r\n    (let*\r\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\r\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (two-fer \"Bob\"))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"s\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core
/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/isZero\r\n      (clojure.lang.RT/count PLACEHOLDER-2))\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (clojure.lang.Numbers/isZero\r\n      (clojure.lang.RT/count PLACEHOLDER-2))\r\n     \"One for you, one for me.\"\r\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\r\n (two-fer \"Bob\")\r\n (two-fer))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__139162\",\r\n  \"PLACEHOLDER-4\" : \"map__139164\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (if\r\n       (clojure.core/seq? PLACEHOLDER-3)\r\n       (clojure.lang.PersistentHashMap/create\r\n        (clojure.core/seq PLACEHOLDER-3))\r\n       PLACEHOLDER-3)\r\n      PLACEHOLDER-5\r\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\r\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/require '[clojure.string :as str]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojur
e.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (str \"One for you, one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (if\r\n     (empty? PLACEHOLDER-2)\r\n     \"One for you, one for me.\"\r\n     (clojure.string/join\r\n      [\"One for \" (first PLACEHOLDER-2) \", one for me.\"]))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__139467\",\r\n  \"PLACEHOLDER-3\" : \"vec__139469\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (
clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([& PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      PLACEHOLDER-2\r\n      PLACEHOLDER-4\r\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\r\n     (str\r\n      \"One for \"\r\n      (if\r\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\r\n       \"you\"\r\n       PLACEHOLDER-4)\r\n      \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  _two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (_two-fer \"you\"))\r\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLDER-3)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (println (two-fer)))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (str \"One for you, one for me.\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"n\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*l
oaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (let*\r\n     [PLACEHOLDER-3\r\n      (if (empty? PLACEHOLDER-2) \"you\" (str PLACEHOLDER-2))]\r\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] \"One for you, one for me.\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (do\r\n        (clojure.core/refer 'clojure.core)\r\n        (clojure.core/use '[clojure.string :only (blank?)]))\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clo
jure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\r\n   ([] (two-fer \"you\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\r\n   ([] \"One for you, one for me\"))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([PLACEHOLDER-2]\r\n    (if\r\n     (true? PLACEHOLDER-2)\r\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\r\n     (str \"One for you\" \", one for me.\"))))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.core/*loaded-libs*\r\n        clojure.c
ore/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] \"One for you, one for me.\")\r\n   ([PLACEHOLDER-2]\r\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\r\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"string\",\r\n  \"PLACEHOLDER-3\" : \"name\"\r\n}" "((do\r\n  (clojure.core/in-ns 'two-fer)\r\n  (.resetMeta\r\n   (clojure.lang.Namespace/find 'two-fer)\r\n   {:file\r\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\r\n    :line 1,\r\n    :column 5,\r\n    :end-line 1,\r\n    :end-column 12})\r\n  ((fn*\r\n    PLACEHOLDER-1\r\n    ([]\r\n     (do\r\n      (clojure.lang.Var/pushThreadBindings\r\n       #:clojure.lang.Compiler{LOADER\r\n                               (.getClassLoader\r\n                                (.getClass PLACEHOLDER-1))})\r\n      (try\r\n       (clojure.core/refer 'clojure.core)\r\n       (finally (clojure.lang.Var/popThreadBindings)))))))\r\n  (if\r\n   (.equals 'two-fer 'clojure.core)\r\n   nil\r\n   (do\r\n    (clojure.lang.LockingTransaction/runInTransaction\r\n     (fn*\r\n      ([]\r\n       (clojure.core/commute\r\n        @#'clojure.co
re/*loaded-libs*\r\n        clojure.core/conj\r\n        'two-fer))))\r\n    nil)))\r\n (def\r\n  manipulate-string\r\n  (fn*\r\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\r\n (def\r\n  two-fer\r\n  (fn*\r\n   ([] (two-fer \"you\"))\r\n   ([PLACEHOLDER-3] (manipulate-string PLACEHOLDER-3)))))\r\n"))

Ran 2 tests containing 1501 assertions.
500 failures, 0 errors.
{:test 2, :pass 1001, :fail 500, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__149263\",\r\n  \"PLACEHOLDER-3\" : \"vec__149265\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__44882\",\r\n  \"PLACEHOLDER-3\" : \"vec__44884\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__149843\",\r\n  \"PLACEHOLDER-3\" : \"vec__149845\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__45462\",\r\n  \"PLACEHOLDER-3\" : \"vec__45464\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__150372\",\r\n  \"PLACEHOLDER-3\" : \"vec__150374\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__45991\",\r\n  \"PLACEHOLDER-3\" : \"vec__45993\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__150842\",\r\n  \"PLACEHOLDER-3\" : \"vec__150844\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46461\",\r\n  \"PLACEHOLDER-3\" : \"vec__46463\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__151031\",\r\n  \"PLACEHOLDER-3\" : \"vec__151033\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46650\",\r\n  \"PLACEHOLDER-3\" : \"vec__46652\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__151206\",\r\n  \"PLACEHOLDER-4\" : \"vec__151208\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__46825\",\r\n  \"PLACEHOLDER-4\" : \"vec__46827\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__151335\",\r\n  \"PLACEHOLDER-3\" : \"vec__151337\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46954\",\r\n  \"PLACEHOLDER-3\" : \"vec__46956\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__151562\",\r\n  \"PLACEHOLDER-3\" : \"vec__151564\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__47181\",\r\n  \"PLACEHOLDER-3\" : \"vec__47183\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__152596\",\r\n  \"PLACEHOLDER-3\" : \"vec__152598\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__48215\",\r\n  \"PLACEHOLDER-3\" : \"vec__48217\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__154304\",\r\n  \"PLACEHOLDER-3\" : \"vec__154306\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__49923\",\r\n  \"PLACEHOLDER-3\" : \"vec__49925\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__154899\",\r\n  \"PLACEHOLDER-3\" : \"vec__154901\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50518\",\r\n  \"PLACEHOLDER-3\" : \"vec__50520\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__154988\",\r\n  \"PLACEHOLDER-3\" : \"vec__154990\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50607\",\r\n  \"PLACEHOLDER-3\" : \"vec__50609\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__155195\",\r\n  \"PLACEHOLDER-3\" : \"vec__155197\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50814\",\r\n  \"PLACEHOLDER-3\" : \"vec__50816\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__155508\",\r\n  \"PLACEHOLDER-3\" : \"vec__155510\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51127\",\r\n  \"PLACEHOLDER-3\" : \"vec__51129\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__155529\",\r\n  \"PLACEHOLDER-3\" : \"vec__155531\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51148\",\r\n  \"PLACEHOLDER-3\" : \"vec__51150\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__155567\",\r\n  \"PLACEHOLDER-3\" : \"vec__155569\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51186\",\r\n  \"PLACEHOLDER-3\" : \"vec__51188\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__155639\",\r\n  \"PLACEHOLDER-3\" : \"vec__155641\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51258\",\r\n  \"PLACEHOLDER-3\" : \"vec__51260\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__155812\",\r\n  \"PLACEHOLDER-6\" : \"seq__155813\",\r\n  \"PLACEHOLDER-5\" : \"first__155814\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__51431\",\r\n  \"PLACEHOLDER-6\" : \"seq__51432\",\r\n  \"PLACEHOLDER-5\" : \"first__51433\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__156062\",\r\n  \"PLACEHOLDER-3\" : \"vec__156064\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51681\",\r\n  \"PLACEHOLDER-3\" : \"vec__51683\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__156083\",\r\n  \"PLACEHOLDER-3\" : \"vec__156085\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51702\",\r\n  \"PLACEHOLDER-3\" : \"vec__51704\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__156499\",\r\n  \"PLACEHOLDER-4\" : \"map__156501\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__52118\",\r\n  \"PLACEHOLDER-4\" : \"map__52120\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__156804\",\r\n  \"PLACEHOLDER-3\" : \"vec__156806\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__52423\",\r\n  \"PLACEHOLDER-3\" : \"vec__52425\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

Ran 2 tests containing 1501 assertions.
22 failures, 0 errors.
{:test 2, :pass 1479, :fail 22, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
; Syntax error compiling at (c:\Users\porko\Documents\GitHub\exercism\clojure-representer\test\clojure_representer_test.clj:19:1).
; Unable to resolve symbol: deftest in this context
clj꞉clojure-representer-test꞉> 
; Evaluating file: clojure_representer_test.clj
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/as-path
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/remove-path
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__166702\",\r\n  \"PLACEHOLDER-3\" : \"vec__166704\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__44882\",\r\n  \"PLACEHOLDER-3\" : \"vec__44884\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__167282\",\r\n  \"PLACEHOLDER-3\" : \"vec__167284\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__45462\",\r\n  \"PLACEHOLDER-3\" : \"vec__45464\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__167811\",\r\n  \"PLACEHOLDER-3\" : \"vec__167813\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__45991\",\r\n  \"PLACEHOLDER-3\" : \"vec__45993\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__168281\",\r\n  \"PLACEHOLDER-3\" : \"vec__168283\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46461\",\r\n  \"PLACEHOLDER-3\" : \"vec__46463\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__168470\",\r\n  \"PLACEHOLDER-3\" : \"vec__168472\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46650\",\r\n  \"PLACEHOLDER-3\" : \"vec__46652\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__168645\",\r\n  \"PLACEHOLDER-4\" : \"vec__168647\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-5\" : \"name\",\r\n  \"PLACEHOLDER-3\" : \"p__46825\",\r\n  \"PLACEHOLDER-4\" : \"vec__46827\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__168774\",\r\n  \"PLACEHOLDER-3\" : \"vec__168776\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__46954\",\r\n  \"PLACEHOLDER-3\" : \"vec__46956\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__169001\",\r\n  \"PLACEHOLDER-3\" : \"vec__169003\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__47181\",\r\n  \"PLACEHOLDER-3\" : \"vec__47183\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__170035\",\r\n  \"PLACEHOLDER-3\" : \"vec__170037\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__48215\",\r\n  \"PLACEHOLDER-3\" : \"vec__48217\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__171743\",\r\n  \"PLACEHOLDER-3\" : \"vec__171745\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__49923\",\r\n  \"PLACEHOLDER-3\" : \"vec__49925\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__172338\",\r\n  \"PLACEHOLDER-3\" : \"vec__172340\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50518\",\r\n  \"PLACEHOLDER-3\" : \"vec__50520\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\",\r\n  \"PLACEHOLDER-6\" : \"nn\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__172427\",\r\n  \"PLACEHOLDER-3\" : \"vec__172429\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50607\",\r\n  \"PLACEHOLDER-3\" : \"vec__50609\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__172634\",\r\n  \"PLACEHOLDER-3\" : \"vec__172636\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__50814\",\r\n  \"PLACEHOLDER-3\" : \"vec__50816\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__172947\",\r\n  \"PLACEHOLDER-3\" : \"vec__172949\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51127\",\r\n  \"PLACEHOLDER-3\" : \"vec__51129\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__172968\",\r\n  \"PLACEHOLDER-3\" : \"vec__172970\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51148\",\r\n  \"PLACEHOLDER-3\" : \"vec__51150\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__173006\",\r\n  \"PLACEHOLDER-3\" : \"vec__173008\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51186\",\r\n  \"PLACEHOLDER-3\" : \"vec__51188\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__173078\",\r\n  \"PLACEHOLDER-3\" : \"vec__173080\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51258\",\r\n  \"PLACEHOLDER-3\" : \"vec__51260\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__173251\",\r\n  \"PLACEHOLDER-6\" : \"seq__173252\",\r\n  \"PLACEHOLDER-5\" : \"first__173253\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"coll\",\r\n  \"PLACEHOLDER-3\" : \"vec__51431\",\r\n  \"PLACEHOLDER-6\" : \"seq__51432\",\r\n  \"PLACEHOLDER-5\" : \"first__51433\",\r\n  \"PLACEHOLDER-7\" : \"first-char\",\r\n  \"PLACEHOLDER-8\" : \"remaining-chars\",\r\n  \"PLACEHOLDER-11\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__173501\",\r\n  \"PLACEHOLDER-3\" : \"vec__173503\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51681\",\r\n  \"PLACEHOLDER-3\" : \"vec__51683\",\r\n  \"PLACEHOLDER-4\" : \"name\",\r\n  \"PLACEHOLDER-5\" : \"or__5516__auto__\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__173522\",\r\n  \"PLACEHOLDER-3\" : \"vec__173524\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__51702\",\r\n  \"PLACEHOLDER-3\" : \"vec__51704\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__173938\",\r\n  \"PLACEHOLDER-4\" : \"map__173940\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__52118\",\r\n  \"PLACEHOLDER-4\" : \"map__52120\",\r\n  \"PLACEHOLDER-5\" : \"name\"\r\n}"))

FAIL in (twofers-test) (NO_SOURCE_FILE:31)
mappings
expected: (= mapping expected)
  actual: (not (= "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__174243\",\r\n  \"PLACEHOLDER-3\" : \"vec__174245\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}" "{\r\n  \"PLACEHOLDER-1\" : \"loading__6721__auto__\",\r\n  \"PLACEHOLDER-2\" : \"p__52423\",\r\n  \"PLACEHOLDER-3\" : \"vec__52425\",\r\n  \"PLACEHOLDER-4\" : \"name\"\r\n}"))

Ran 2 tests containing 1501 assertions.
22 failures, 0 errors.
{:test 2, :pass 1479, :fail 22, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

Ran 2 tests containing 1001 assertions.
0 failures, 0 errors.
{:test 2, :pass 1001, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
