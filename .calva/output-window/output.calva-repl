; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
; Syntax error compiling at (src/clojure_representer.clj:12:1).
; Can't take value of a macro: #'clojure.core/ns
clj꞉clojure-representer꞉> 
; Error printing return value at clojure.lang.Util/runtimeException (Util.java:221).
; Can't take value of a macro: #'clojure.core/ns
clj꞉clojure-representer꞉> 
(ns two-fer)
clj꞉clojure-representer꞉> 
(ns two-fer)
clj꞉clojure-representer꞉> 
(do (ns two-fer) (defn two-fer ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))))
clj꞉clojure-representer꞉> 
; Execution error (ExceptionInfo) at analyzer.passes.jvm.validate/eval8182$fn (validate.clj:28).
; Could not resolve var: do
clj꞉clojure-representer꞉> 
; Error printing return value (ExceptionInfo) at analyzer.passes.jvm.validate/eval8182$fn (validate.clj:28).
; Could not resolve var: do
clj꞉clojure-representer꞉> 
(do (ns two-fer) (defn two-fer ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))))
clj꞉clojure-representer꞉> 
(do
 (do
  (clojure.core/in-ns 'two-fer)
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉two-fer꞉> 
