; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
; Evaluating file: clojure_representer_test.clj
nil
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (require '(clojure.string))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (clojure.string/blank? PLACEHOLDER-2) \"yo
u\" PLACEHOLDER-2)\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (require '(clojure.string))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (clo
jure.string/blank? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  f\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def two-fer (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\n" "((do\n  (clojure.core
/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  f\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\n   ([] (print \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-
ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\n   ([] (print \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-name\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-name \"you\"))\n   ([PLACEHOLDER-3] (two-fer-na
me PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-name\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-name \"you\"))\n   ([PLACEHOLDER-3]
 (two-fer-name PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [P
LACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/equiv\n        (clojure.lang.RT/count PLACEHOLDER-2)\n        0)\n       \"yo
u\"\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure
.lang.Util/equiv\n        (clojure.lang.RT/count PLACEHOLDER-2)\n        0)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (string/join \"\" [\"One for \" PLACEHOLDE
R-2 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (string/join \"\" [\"One
 for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n      PLA
CEHOLDER-2\n      \"you\")\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/gt (cloj
ure.lang.RT/count PLACEHOLDER-2) 0)\n      PLACEHOLDER-2\n      \"you\")\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.reset
Meta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (cloju
re.string/blank? PLACEHOLDER-4)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHO
LDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.string/blank? PLACEHOLDER-4)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     ([] (str \"One for you, one for me.\"))\n     ([PLACEHOLDER-2]\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((d
o\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     ([] (str \"One for you, one for me.\"))\n     ([PLACEHOLDER-2]\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n 
 (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two
-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"haley\"))\n" "((do\n  (clojure.c
ore/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"haley\"))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n 
 (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n
   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (
clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     []\n     (str \"One for you, one for me.\")\n     [PLACEHOLDER-2]\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n" "((
do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     []\n     (str \"One for you, one for me.\")\n     [PLACEHOLDER-2]\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     \"One for you, one for me.
\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     \"One for you, one for me.\"
)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for me, one for you.\"\n     (if\n      (clojure.lang.Numbers/gt (clojure.
lang.RT/count PLACEHOLDER-2) 0)\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\
n     \"One for me, one for you.\"\n     (if\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.reset
Meta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n
   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (use '[clojure.string :only (join)])\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\
n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (use '[clojure.string :only (join)])\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n      \"you\"\n      PLACEHOLD
ER-2)\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n     
 \"you\"\n      PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      PLACEHOLDER-2)\n     \", one for 
me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      PLACEHOLDER-2)\n     \", one for
 me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (clojure.string/join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n 
 (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println\n     (clojure.lang.Numbers/add\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\n      \", one for me\"))))))\n" "((do\n  
(clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println\n     (clojure.lang.Numbers/add\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\n      \", one for me\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for you, one for me\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me
\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for you, one for me\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me\
"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"Zaphod\")\n (def\n  two-fer-var-arg\n  (fn*
\n   ([& PLACEHOLDER-3]\n    (if\n     (empty? PLACEHOLDER-3)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\n (two-fer-var-arg)\n (two-fer-var-arg \"Ford\")\n (def\n  two-fer-var-arg-apply\n  (fn*\n   ([& PLACEHOLDER-4]\n    (if\n     (empty? PLACEHOLDER-4)\n     \"One for you, one for me.\"\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\n (two-fer-var-arg-apply)\n (two-fer-var-arg-apply \"Ford\")\n (def\n  two-fer-var-arg-apply-when-let\n  (fn*\n   ([& PLACEHOLDER-5]\n    (let*\n     [PLACEHOLDER-7\n      (let*\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\n       (if PLACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\n (two-fer-var-arg-apply-when-let)\n (two-fer-var-arg-apply-when-let \"Arthur\"))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end
-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"Zaphod\")\n (def\n  two-fer-var-arg\n  (fn*\n   ([& PLACEHOLDER-3]\n    (if\n     (empty? PLACEHOLDER-3)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\n (two-fer-var-arg)\n (two
-fer-var-arg \"Ford\")\n (def\n  two-fer-var-arg-apply\n  (fn*\n   ([& PLACEHOLDER-4]\n    (if\n     (empty? PLACEHOLDER-4)\n     \"One for you, one for me.\"\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\n (two-fer-var-arg-apply)\n (two-fer-var-arg-apply \"Ford\")\n (def\n  two-fer-var-arg-apply-when-let\n  (fn*\n   ([& PLACEHOLDER-5]\n    (let*\n     [PLACEHOLDER-7\n      (let*\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\n       (if PLACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\n (two-fer-var-arg-apply-when-let)\n (two-fer-var-arg-apply-when-let \"Arthur\"))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def hello (fn* ([] (println \"This is ayden\")))))\n" "((do\n  (c
lojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def hello (fn* ([] (println \"This is ayden\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (cloju
re.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n   
  [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (str \"One for you, one for me.\")\n     (str 
\"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (str 
\"One for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical (first PLACEHOLDER-2) nil)\n       \"you\"\n       (first PLACEHOLD
ER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical (first 
PLACEHOLDER-2) nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (do print \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-
ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (do print \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (cloju
re.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let
*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n nil)\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"yo
u\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"y
ou\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4\n      PLACEHO
LDER-3\n      PLACEHOLDER-5\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \
"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4\n      PLACEHOLDER-3\n      PLACEHOLDER-5\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (def\n  -main\n  (f
n*\n   ([& PLACEHOLDER-3]\n    (println\n     (if\n      (first PLACEHOLDER-3)\n      (two-fer (first PLACEHOLDER-3))\n      (two-fer)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n
   ([PLACEHOLDER-2]\n    (clojure.string/join\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (def\n  -main\n  (fn*\n   ([& PLACEHOLDER-3]\n    (println\n     (if\n      (first PLACEHOLDER-3)\n      (two-fer (first PLACEHOLDER-3))\n      (two-fer)))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column
 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sayit\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER-3))))\n (two-f
er \"foo\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sayit\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER
-3))))\n (two-fer \"foo\")\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n    
 (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (
if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     
[PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\n" "((do\n  (clojur
e.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-
fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n    
 (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (
if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (two-fer \"you\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-
fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (two-fer \"you\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([
] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require 'clojure.string))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (clojure.string/trim PLA
CEHOLDER-2)\n      PLACEHOLDER-4\n      (if\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\n       \"you\"\n       PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require 'clojure.string))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\
n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (clojure.string/trim PLACEHOLDER-2)\n      PLACEHOLDER-4\n      (if\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\n       \"you\"\n       PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\n nil)\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"y
ou\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-
3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     (str \"One for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 \", one
 for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     (str \"One for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 
\", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me
.\")))))\n (two-fer \"Bardia\")\n (two-fer \"\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\
n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (two-fer \"Bardia\")\n (two-fer \"\")\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 P
LACEHOLDER-3 \"you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (
if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  fer-2\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3]\n    (if (empty? PLACEHOLDER-3) (fer-2 \"you\") (f
er-2 PLACEHOLDER-3)))\n   ([] (fer-2 \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  fer-2\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3]\n    (if (
empty? PLACEHOLDER-3) (fer-2 \"you\") (fer-2 PLACEHOLDER-3)))\n   ([] (fer-2 \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two
-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column
 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"y
ou\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-
3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for %s, one for me.\" \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer
)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for %s, one for me.\" \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (printf \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (printf \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def format-str (fn* ([] \"One for %s, one for me.\")))\n (def\n  two-fer\n  (fn*\n   ([] (format (format-str) \"you\"))\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\n" "((do\n  
(clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def format-str (fn* ([] \"One for %s, one for me.\")))\n (def\n  two-fer\n  (fn*\n   ([] (format (format-str) \"you\"))\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (format \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (format \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-f
er)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) 
\"you\")]\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n 
    [PLACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) \"you\")]\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n
      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/c
onj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      (first PLACEHOLDER-2)]\n     (if\n      (some? PLAC
EHOLDER-4)\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\n      PLACEHOLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for y
ou, one for me.\"\n      PLACEHOLDER-4\n      (first PLACEHOLDER-2)]\n     (if\n      (some? PLACEHOLDER-4)\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\n      PLACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     \"\"\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clo
jure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     \"\"\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      (first PLACEHOLDER-2))\n     \"
, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      (first PLACEHOLDER-2
))\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (println \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\n (two-fer \"Bob\")\n (tw
o-fer \"Alice\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (println \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\n (tw
o-fer \"Bob\")\n (two-fer \"Alice\")\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDER-2))\n      PLACEHOLDER-2\n      \"you\")\
n     \", one for me.\"))\n   ([] (two-fer \"\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDE
R-2))\n      PLACEHOLDER-2\n      \"you\")\n     \", one for me.\"))\n   ([] (two-fer \"\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\")))\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n 
 (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\")))\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.
\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"
)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-wrap\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-wrap \"you\"))\n   ([PLACEHOLDER-3] (two-fer-wr
ap PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-wrap\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-wrap \"you\"))\n   ([PLACEHOLDER-3]
 (two-fer-wrap PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-template\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (two-fer-template PLACEHOLDER-3))\n   (
[] (two-fer-template \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-template\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (two-fer-templa
te PLACEHOLDER-3))\n   ([] (two-fer-template \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for
 me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one 
for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  
(.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   
(clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n nil)\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  build-two-fer-str\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (build-two-fer-str \"you\"))\n   ([PLACEHOLDER-3] (
build-two-fer-str PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  build-two-fer-str\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (build-two-fer-str \"you
\"))\n   ([PLACEHOLDER-3] (build-two-fer-str PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\")))\n   ([]
 (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.
\")))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  createSentence\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (createSentence PLACEHOLDER-3))\n   ([] (
createSentence \"you\"))))\n (two-fer/two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  createSentence\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (cr
eateSentence PLACEHOLDER-3))\n   ([] (createSentence \"you\"))))\n (two-fer/two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"You\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"You\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      \"One for %s, one for me.\"]\n
     (if\n      (let*\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\n      PLACEHOLDER-3\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        '
two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      \"One for %s, one for me.\"]\n     (if\n      (let*\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\n      PLACEHOLDER-3\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))
One for bob, one for me.
One for you, one for me.

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\"))))\n (println (two-fer \"bob\"))\n (println (two-fer))
)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\"))))\n (println (two-fer \"bob\"))\n (println (two-fer)))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  msg\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\n" "((do\n  (
clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  msg\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"On
e for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLA
CEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDE
R-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def foo :bar))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def foo :bar))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\n     \", on
e for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\n    
 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n
     \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n     (str \"One for \" (first PLACEH
OLDER-2) \", one for me.\")\n     \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (not= PLACEHOLDER-2 nil)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you, one for me.\"))))))\n" "((
do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (not= PLACEHOLDER-2 nil)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you, one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n     (if\n      PLACEHOLDER-3\n      (let*\n
       [PLACEHOLDER-4 PLACEHOLDER-3]\n       (str \"One for you, one for me.\"))\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEH
OLDER-2]\n    (let*\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n     (if\n      PLACEHOLDER-3\n      (let*\n       [PLACEHOLDER-4 PLACEHOLDER-3]\n       (str \"One for you, one for me.\"))\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     PLACEHOLDER-2\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n     \"One for you, one for me.\")))))\n" "((do\n  (
clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     PLACEHOLDER-2\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n     \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/ident
ical PLACEHOLDER-2 nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    
nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (let*\n      [PLA
CEHOLDER-6\n       (let*\n        [PLACEHOLDER-5 PLACEHOLDER-4]\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\
n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (let*\n      [PLACEHOLDER-6\n       (let*\n        [PLACEHOLDER-5 PLACEHOLDER-4]\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n" "((do
\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (do\n     (if\n      (string? PLACEHOLDER-2)\n      nil\n      (throw\n       (new\n        java.lang.Asse
rtionError\n        (clojure.core/str\n         \"Assert failed: \"\n         (clojure.core/pr-str '(string? name))))))\n     (if\n      (empty? PLACEHOLDER-2)\n      (two-fer)\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj
\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (do\n     (if\n      (string? PLACEHOLDER-2)\n      nil\n      (throw\n       (new\n        java.lang.AssertionError\n        (clojure.core/str\n         \"Assert failed: \"\n         (clojure.core/pr-str '(string? name))))))\n     (if\n      (empty? PLACEHOLDER-2)\n      (two-fer)\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column
 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))
\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLA
CEHOLDER-3 \"you\"))\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLA
CEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one fo
r me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for\"\n      PLACEHOLDER-4\n      (clojure.string/join \"\" [PLACEHOLDER-2 \"
,\"])\n      PLACEHOLDER-5\n      \"one for me.\"]\n     (clojure.string/join\n      \" \"\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   (
[PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for\"\n      PLACEHOLDER-4\n      (clojure.string/join \"\" [PLACEHOLDER-2 \",\"])\n      PLACEHOLDER-5\n      \"one for me.\"]\n     (clojure.string/join\n      \" \"\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMet
a\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))
\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     
[PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)
\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"
One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEH
OLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     
[PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", o
ne for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDE
R-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n" "
((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (clojure.string/replace\n     \"One for yo
u, one for me.\"\n     #\"you\"\n     PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\
n    (clojure.string/replace\n     \"One for you, one for me.\"\n     #\"you\"\n     PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\n     (format \"One for %s, one for me.\" PLA
CEHOLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\n     (format \"One for %s, one for me
.\" PLACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sentence\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (string/join \", \" PLACEHOLDER-
2)\n      PLACEHOLDER-4\n      (clojure.core/seq PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.core/first PLACEHOLDER-4)\n      PLACEHOLDER-6\n      (clojure.core/next PLACEHOLDER-4)\n      PLACEHOLDER-7\n      PLACEHOLDER-5\n      PLACEHOLDER-8\n      PLACEHOLDER-6]\n     (str\n      (string/upper-case PLACEHOLDER-7)\n      (apply str PLACEHOLDER-8)\n      \".\")))))\n (def\n  one-fer\n  (fn*\n   ([] (one-fer \"me\"))\n   ([PLACEHOLDER-9] (string/join \" \" [\"one for\" PLACEHOLDER-9]))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\n (def\n  two-fer-unflexible\n  (fn*\n   ([] (two-fer-unflexible \"you\"))\n   ([PLACEHOLDER-11] (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n   
   (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sentence\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (string/join \", \" PLACEHOLDER-2)\n      PLACEHOLDER-4\n      (clojure.core/seq PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.core/first PLACEHOLDER-4)\n      PLACEHOLDER-6\n      (clojure.core/next PLACEHOLDER-4)\n      PLACEHOLDER-7\n      PLACEHOLDER-5\n      PLACEHOLDER-8\n   
   PLACEHOLDER-6]\n     (str\n      (string/upper-case PLACEHOLDER-7)\n      (apply str PLACEHOLDER-8)\n      \".\")))))\n (def\n  one-fer\n  (fn*\n   ([] (one-fer \"me\"))\n   ([PLACEHOLDER-9] (string/join \" \" [\"one for\" PLACEHOLDER-9]))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\n (def\n  two-fer-unflexible\n  (fn*\n   ([] (two-fer-unflexible \"you\"))\n   ([PLACEHOLDER-11]\n    (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n
   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-for\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn* ([] (one-for \"you\")) ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\n
" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-for\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([] (one-for \"you\"))\n   ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\n"))


FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" PLACEHOLDER-2 
\", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" 
PLACEHOLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     
[PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (cloju
re.lang.Util/identical PLACEHOLDER-4 nil)\n      (str \"One for you, one for me\")\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\
n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      (str \"One for you, one for me\")\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  get-name\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"you\"\n     (first PLACEHOLDER-2)))))\n (def\n  two-fer\n  (fn*\n   ([& PLACE
HOLDER-3]\n    (let*\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  get-name\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang
.Util/identical PLACEHOLDER-2 nil)\n     \"you\"\n     (first PLACEHOLDER-2)))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer \"Bob\"))\n" "((do\n  (clojure.core/in-n
s 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer \"Bob\"))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one for me.\"\n     (str \"One for \
" (first PLACEHOLDER-2) \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you
, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one for me.\"\n     (str \"One for \
" (first PLACEHOLDER-2) \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you
, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (two-fer \"Bob\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'tw
o-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (two-fer \"Bob\")\n (two-fer))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojur
e.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  
(.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (if\n       (clojure.core/seq? PLACEHOLDER-3)\n       (clojure.lan
g.PersistentHashMap/create\n        (clojure.core/seq PLACEHOLDER-3))\n       PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n     
   'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (if\n       (clojure.core/seq? PLACEHOLDER-3)\n       (clojure.lang.PersistentHashMap/create\n        (clojure.core/seq PLACEHOLDER-3))\n       PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, on
e for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for y
ou, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] (two-
fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([
] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column
 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (clojure.string/join\n      [\"One for \" (first PLACEHOLDER-2) \", 
one for me.\"]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (clojure.string/join\n      [\"One for \" (first PLACEHOL
DER-2) \", one for me.\"]))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One
 for \"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n
     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  _two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (_two-fer \"you\"))\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLD
ER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  _two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (_two-fer \"you\"))\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLD
ER-3)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two
-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))
One for you, one for me.

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (println (two-fer)))\n" "((do\n  (clojure.core/in
-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (println (two-fer)))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (str PLACEHOLDER-2))]\n     (str \"On
e for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" 
(str PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (
.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/use '[clojure.string :only (blank?)]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", 
one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/use '[clojure.string :only (blank?)]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLD
ER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\n   ([] \"One for you, one for me\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\n   ([] \"One for you, one for me\"))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (true? PLACEHOLDER-2)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you\" \", one for me.\"))))))\n" "
((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (true? PLACEHOLDER-2)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you\" \", one for me.\"))))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cloju
re.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= 
                "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" 
                  "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (clojure_representer_test.clj:26)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  manipulate-string\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-3] (manipulate
-string PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"nil\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  manipulate-string\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLD
ER-3] (manipulate-string PLACEHOLDER-3)))))\n"))

Ran 1 tests containing 501 assertions.
499 failures, 0 errors.
{:test 1, :pass 2, :fail 499, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
"((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
; Execution error at clojure-representer-test/eval21173 (REPL:38).
; Invalid leading character: @
clj꞉clojure-representer-test꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
; Evaluating file: clojure_representer_test.clj
nil
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
[{:tag :list,
  :format-string "(%s)",
  :wrap-length 2,
  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
  :children
  ({:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
    :children
    ({:value do, :string-value "do", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
       {:whitespace " "}
       {:tag :quote,
        :prefix "'",
        :sym quote,
        :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :map,
        :format-string "{%s}",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
        :children
        ({:k :file, :auto-resolved? false, :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :line, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 1, :string-value "1"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :column, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 5, :string-value "5"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :end-line, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 1, :string-value "1"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :end-column, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 12, :string-value "12"})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value fn*, :string-value "fn*", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.Var/pushThreadBindings,
                :string-value "clojure.lang.Var/pushThreadBindings",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:children
                ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                 {:tag :map,
                  :format-string "{%s}",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                  :children
                  [{:value LOADER,
                    :string-value "LOADER",
                    :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                   {:newlines "\n"}
                   {:whitespace "                               "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "                                "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                       {:whitespace " "}
                       {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value try, :string-value "try", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value finally, :string-value "finally", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/popThreadBindings,
                    :string-value "clojure.lang.Var/popThreadBindings",
                    :map-qualifier nil})})})})})})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value if, :string-value "if", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value .equals, :string-value ".equals", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:value nil, :string-value "nil"}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.lang.LockingTransaction/runInTransaction,
            :string-value "clojure.lang.LockingTransaction/runInTransaction",
            :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:children
                  [{:tag :var,
                    :prefix "'",
                    :suffix "",
                    :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                    :sexpr-count 1,
                    :children
                    [{:value clojure.core/*loaded-libs*,
                      :string-value "clojure.core/*loaded-libs*",
                      :map-qualifier nil}]}]}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value nil, :string-value "nil"})})})}
   {:newlines "\n"}
   {:whitespace " "}
   {:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
    :children
    ({:value def, :string-value "def", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:value two-fer, :string-value "two-fer", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value fn*, :string-value "fn*", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
         {:whitespace " "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value str, :string-value "str", :map-qualifier nil}
           {:whitespace " "}
           {:lines ["One for you, one for me."]})})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:tag :vector,
          :format-string "[%s]",
          :wrap-length 2,
          :seq-fn #function[clojure.core/vec],
          :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
         {:whitespace " "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value str, :string-value "str", :map-qualifier nil}
           {:whitespace " "}
           {:lines ["One for "]}
           {:whitespace " "}
           {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
           {:whitespace " "}
           {:lines [", one for me."]})})})})})}
 {:l [],
  :pnodes
  [{:children
    ({:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :map,
            :format-string "{%s}",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
            :children
            ({:k :file, :auto-resolved? false, :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 5, :string-value "5"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 12, :string-value "12"})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value do, :string-value "do", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/pushThreadBindings,
                    :string-value "clojure.lang.Var/pushThreadBindings",
                    :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:children
                    ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                     {:tag :map,
                      :format-string "{%s}",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                      :children
                      [{:value LOADER,
                        :string-value "LOADER",
                        :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                       {:newlines "\n"}
                       {:whitespace "                               "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                         {:newlines "\n"}
                         {:whitespace "                                "}
                         {:tag :list,
                          :format-string "(%s)",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                          :children
                          ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                           {:whitespace " "}
                           {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value try, :string-value "try", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value finally, :string-value "finally", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.lang.Var/popThreadBindings,
                        :string-value "clojure.lang.Var/popThreadBindings",
                        :map-qualifier nil})})})})})})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value if, :string-value "if", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value .equals, :string-value ".equals", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:value nil, :string-value "nil"}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.LockingTransaction/runInTransaction,
                :string-value "clojure.lang.LockingTransaction/runInTransaction",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value fn*, :string-value "fn*", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:tag :vector,
                    :format-string "[%s]",
                    :wrap-length 2,
                    :seq-fn #function[clojure.core/vec],
                    :children ()}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:children
                      [{:tag :var,
                        :prefix "'",
                        :suffix "",
                        :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                        :sexpr-count 1,
                        :children
                        [{:value clojure.core/*loaded-libs*,
                          :string-value "clojure.core/*loaded-libs*",
                          :map-qualifier nil}]}]}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value nil, :string-value "nil"})})})}
       {:newlines "\n"}
       {:whitespace " "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value def, :string-value "def", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:value two-fer, :string-value "two-fer", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value fn*, :string-value "fn*", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for you, one for me."]})})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector,
              :format-string "[%s]",
              :wrap-length 2,
              :seq-fn #function[clojure.core/vec],
              :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for "]}
               {:whitespace " "}
               {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
               {:whitespace " "}
               {:lines [", one for me."]})})})})})}
     {:newlines "\n"})}],
  :ppath nil,
  :r ({:newlines "\n"})}]
clj꞉clojure-representer-test꞉> 
((do
  (clojure.core/in-ns 'two-fer)
  (.resetMeta
   (clojure.lang.Namespace/find 'two-fer)
   {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj",
    :end-column 12,
    :column 5,
    :line 1,
    :end-line 1})
  ((fn*
    PLACEHOLDER-1
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))})
      (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn* ([] (clojure.core/commute (deref #'clojure.core/*loaded-libs*) clojure.core/conj 'two-fer))))
    nil)))
 (def
  two-fer
  (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
[{:k :file, :auto-resolved? false, :map-qualifier nil}
 {:l [],
  :pnodes
  [{:children
    ({:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :map,
            :format-string "{%s}",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
            :children
            ({:k :file, :auto-resolved? false, :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 5, :string-value "5"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 12, :string-value "12"})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value do, :string-value "do", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/pushThreadBindings,
                    :string-value "clojure.lang.Var/pushThreadBindings",
                    :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:children
                    ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                     {:tag :map,
                      :format-string "{%s}",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                      :children
                      [{:value LOADER,
                        :string-value "LOADER",
                        :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                       {:newlines "\n"}
                       {:whitespace "                               "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                         {:newlines "\n"}
                         {:whitespace "                                "}
                         {:tag :list,
                          :format-string "(%s)",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                          :children
                          ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                           {:whitespace " "}
                           {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value try, :string-value "try", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value finally, :string-value "finally", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.lang.Var/popThreadBindings,
                        :string-value "clojure.lang.Var/popThreadBindings",
                        :map-qualifier nil})})})})})})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value if, :string-value "if", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value .equals, :string-value ".equals", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:value nil, :string-value "nil"}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.LockingTransaction/runInTransaction,
                :string-value "clojure.lang.LockingTransaction/runInTransaction",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value fn*, :string-value "fn*", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:tag :vector,
                    :format-string "[%s]",
                    :wrap-length 2,
                    :seq-fn #function[clojure.core/vec],
                    :children ()}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:children
                      [{:tag :var,
                        :prefix "'",
                        :suffix "",
                        :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                        :sexpr-count 1,
                        :children
                        [{:value clojure.core/*loaded-libs*,
                          :string-value "clojure.core/*loaded-libs*",
                          :map-qualifier nil}]}]}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value nil, :string-value "nil"})})})}
       {:newlines "\n"}
       {:whitespace " "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value def, :string-value "def", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:value two-fer, :string-value "two-fer", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value fn*, :string-value "fn*", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for you, one for me."]})})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector,
              :format-string "[%s]",
              :wrap-length 2,
              :seq-fn #function[clojure.core/vec],
              :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for "]}
               {:whitespace " "}
               {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
               {:whitespace " "}
               {:lines [", one for me."]})})})})})}
     {:newlines "\n"})}
   {:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
    :children
    ({:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value do, :string-value "do", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :map,
          :format-string "{%s}",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
          :children
          ({:k :file, :auto-resolved? false, :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :line, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 1, :string-value "1"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :column, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 5, :string-value "5"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :end-line, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 1, :string-value "1"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :end-column, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 12, :string-value "12"})})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value fn*, :string-value "fn*", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
             {:newlines "\n"}
             {:whitespace "     "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value do, :string-value "do", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.lang.Var/pushThreadBindings,
                  :string-value "clojure.lang.Var/pushThreadBindings",
                  :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:children
                  ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                   {:tag :map,
                    :format-string "{%s}",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                    :children
                    [{:value LOADER,
                      :string-value "LOADER",
                      :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                     {:newlines "\n"}
                     {:whitespace "                               "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "                                "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                         {:whitespace " "}
                         {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value try, :string-value "try", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                   {:whitespace " "}
                   {:tag :quote,
                    :prefix "'",
                    :sym quote,
                    :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value finally, :string-value "finally", :map-qualifier nil}
                   {:whitespace " "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.lang.Var/popThreadBindings,
                      :string-value "clojure.lang.Var/popThreadBindings",
                      :map-qualifier nil})})})})})})})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value if, :string-value "if", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value .equals, :string-value ".equals", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "   "}
         {:value nil, :string-value "nil"}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value do, :string-value "do", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.lang.LockingTransaction/runInTransaction,
              :string-value "clojure.lang.LockingTransaction/runInTransaction",
              :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "     "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value fn*, :string-value "fn*", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:tag :vector,
                  :format-string "[%s]",
                  :wrap-length 2,
                  :seq-fn #function[clojure.core/vec],
                  :children ()}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:children
                    [{:tag :var,
                      :prefix "'",
                      :suffix "",
                      :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                      :sexpr-count 1,
                      :children
                      [{:value clojure.core/*loaded-libs*,
                        :string-value "clojure.core/*loaded-libs*",
                        :map-qualifier nil}]}]}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:tag :quote,
                    :prefix "'",
                    :sym quote,
                    :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
           {:newlines "\n"}
           {:whitespace "    "}
           {:value nil, :string-value "nil"})})})}
     {:newlines "\n"}
     {:whitespace " "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value def, :string-value "def", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "  "}
       {:value two-fer, :string-value "two-fer", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value fn*, :string-value "fn*", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
           {:whitespace " "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value str, :string-value "str", :map-qualifier nil}
             {:whitespace " "}
             {:lines ["One for you, one for me."]})})}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :vector,
            :format-string "[%s]",
            :wrap-length 2,
            :seq-fn #function[clojure.core/vec],
            :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
           {:whitespace " "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value str, :string-value "str", :map-qualifier nil}
             {:whitespace " "}
             {:lines ["One for "]}
             {:whitespace " "}
             {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
             {:whitespace " "}
             {:lines [", one for me."]})})})})})}
   {:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
    :children
    ({:value do, :string-value "do", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
       {:whitespace " "}
       {:tag :quote,
        :prefix "'",
        :sym quote,
        :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :map,
        :format-string "{%s}",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
        :children
        ({:k :file, :auto-resolved? false, :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :line, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 1, :string-value "1"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :column, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 5, :string-value "5"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :end-line, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 1, :string-value "1"}
         {:commas ","}
         {:newlines "\n"}
         {:whitespace "    "}
         {:k :end-column, :auto-resolved? false, :map-qualifier nil}
         {:whitespace " "}
         {:value 12, :string-value "12"})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value fn*, :string-value "fn*", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.Var/pushThreadBindings,
                :string-value "clojure.lang.Var/pushThreadBindings",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:children
                ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                 {:tag :map,
                  :format-string "{%s}",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                  :children
                  [{:value LOADER,
                    :string-value "LOADER",
                    :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                   {:newlines "\n"}
                   {:whitespace "                               "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "                                "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                       {:whitespace " "}
                       {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value try, :string-value "try", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value finally, :string-value "finally", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/popThreadBindings,
                    :string-value "clojure.lang.Var/popThreadBindings",
                    :map-qualifier nil})})})})})})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value if, :string-value "if", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value .equals, :string-value ".equals", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:value nil, :string-value "nil"}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.lang.LockingTransaction/runInTransaction,
            :string-value "clojure.lang.LockingTransaction/runInTransaction",
            :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:children
                  [{:tag :var,
                    :prefix "'",
                    :suffix "",
                    :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                    :sexpr-count 1,
                    :children
                    [{:value clojure.core/*loaded-libs*,
                      :string-value "clojure.core/*loaded-libs*",
                      :map-qualifier nil}]}]}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value nil, :string-value "nil"})})})}
   {:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
    :children
    ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "   "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
       {:whitespace " "}
       {:tag :quote,
        :prefix "'",
        :sym quote,
        :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
     {:newlines "\n"}
     {:whitespace "   "}
     {:tag :map,
      :format-string "{%s}",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
      :children
      ({:k :file, :auto-resolved? false, :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "    "}
       {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
       {:commas ","}
       {:newlines "\n"}
       {:whitespace "    "}
       {:k :line, :auto-resolved? false, :map-qualifier nil}
       {:whitespace " "}
       {:value 1, :string-value "1"}
       {:commas ","}
       {:newlines "\n"}
       {:whitespace "    "}
       {:k :column, :auto-resolved? false, :map-qualifier nil}
       {:whitespace " "}
       {:value 5, :string-value "5"}
       {:commas ","}
       {:newlines "\n"}
       {:whitespace "    "}
       {:k :end-line, :auto-resolved? false, :map-qualifier nil}
       {:whitespace " "}
       {:value 1, :string-value "1"}
       {:commas ","}
       {:newlines "\n"}
       {:whitespace "    "}
       {:k :end-column, :auto-resolved? false, :map-qualifier nil}
       {:whitespace " "}
       {:value 12, :string-value "12"})})}
   {:tag :map,
    :format-string "{%s}",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
    :children
    ({:k :file, :auto-resolved? false, :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "    "}
     {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
     {:commas ","}
     {:newlines "\n"}
     {:whitespace "    "}
     {:k :line, :auto-resolved? false, :map-qualifier nil}
     {:whitespace " "}
     {:value 1, :string-value "1"}
     {:commas ","}
     {:newlines "\n"}
     {:whitespace "    "}
     {:k :column, :auto-resolved? false, :map-qualifier nil}
     {:whitespace " "}
     {:value 5, :string-value "5"}
     {:commas ","}
     {:newlines "\n"}
     {:whitespace "    "}
     {:k :end-line, :auto-resolved? false, :map-qualifier nil}
     {:whitespace " "}
     {:value 1, :string-value "1"}
     {:commas ","}
     {:newlines "\n"}
     {:whitespace "    "}
     {:k :end-column, :auto-resolved? false, :map-qualifier nil}
     {:whitespace " "}
     {:value 12, :string-value "12"})}],
  :ppath
  {:l
   [{:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
    {:newlines "\n"}
    {:whitespace "   "}
    {:tag :list,
     :format-string "(%s)",
     :wrap-length 2,
     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
     :children
     ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
      {:whitespace " "}
      {:tag :quote,
       :prefix "'",
       :sym quote,
       :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
    {:newlines "\n"}
    {:whitespace "   "}],
   :pnodes
   [{:children
     ({:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value do, :string-value "do", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
            {:whitespace " "}
            {:tag :quote,
             :prefix "'",
             :sym quote,
             :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :map,
             :format-string "{%s}",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
             :children
             ({:k :file, :auto-resolved? false, :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :line, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 1, :string-value "1"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :column, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 5, :string-value "5"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :end-line, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 1, :string-value "1"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :end-column, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 12, :string-value "12"})})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value fn*, :string-value "fn*", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:tag :vector,
                 :format-string "[%s]",
                 :wrap-length 2,
                 :seq-fn #function[clojure.core/vec],
                 :children ()}
                {:newlines "\n"}
                {:whitespace "     "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value do, :string-value "do", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value clojure.lang.Var/pushThreadBindings,
                     :string-value "clojure.lang.Var/pushThreadBindings",
                     :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:children
                     ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                      {:tag :map,
                       :format-string "{%s}",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                       :children
                       [{:value LOADER,
                         :string-value "LOADER",
                         :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                        {:newlines "\n"}
                        {:whitespace "                               "}
                        {:tag :list,
                         :format-string "(%s)",
                         :wrap-length 2,
                         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                         :children
                         ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                          {:newlines "\n"}
                          {:whitespace "                                "}
                          {:tag :list,
                           :format-string "(%s)",
                           :wrap-length 2,
                           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                           :children
                           ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                            {:whitespace " "}
                            {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value try, :string-value "try", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                      {:whitespace " "}
                      {:tag :quote,
                       :prefix "'",
                       :sym quote,
                       :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value finally, :string-value "finally", :map-qualifier nil}
                      {:whitespace " "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value clojure.lang.Var/popThreadBindings,
                         :string-value "clojure.lang.Var/popThreadBindings",
                         :map-qualifier nil})})})})})})})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value if, :string-value "if", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value .equals, :string-value ".equals", :map-qualifier nil}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:value nil, :string-value "nil"}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value do, :string-value "do", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value clojure.lang.LockingTransaction/runInTransaction,
                 :string-value "clojure.lang.LockingTransaction/runInTransaction",
                 :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "     "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value fn*, :string-value "fn*", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:tag :vector,
                     :format-string "[%s]",
                     :wrap-length 2,
                     :seq-fn #function[clojure.core/vec],
                     :children ()}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:children
                       [{:tag :var,
                         :prefix "'",
                         :suffix "",
                         :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                         :sexpr-count 1,
                         :children
                         [{:value clojure.core/*loaded-libs*,
                           :string-value "clojure.core/*loaded-libs*",
                           :map-qualifier nil}]}]}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:tag :quote,
                       :prefix "'",
                       :sym quote,
                       :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
              {:newlines "\n"}
              {:whitespace "    "}
              {:value nil, :string-value "nil"})})})}
        {:newlines "\n"}
        {:whitespace " "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value def, :string-value "def", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:value two-fer, :string-value "two-fer", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value fn*, :string-value "fn*", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
              {:whitespace " "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value str, :string-value "str", :map-qualifier nil}
                {:whitespace " "}
                {:lines ["One for you, one for me."]})})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :vector,
               :format-string "[%s]",
               :wrap-length 2,
               :seq-fn #function[clojure.core/vec],
               :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
              {:whitespace " "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value str, :string-value "str", :map-qualifier nil}
                {:whitespace " "}
                {:lines ["One for "]}
                {:whitespace " "}
                {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
                {:whitespace " "}
                {:lines [", one for me."]})})})})})}
      {:newlines "\n"})}
    {:tag :list,
     :format-string "(%s)",
     :wrap-length 2,
     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
     :children
     ({:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value do, :string-value "do", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
          {:whitespace " "}
          {:tag :quote,
           :prefix "'",
           :sym quote,
           :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
            {:whitespace " "}
            {:tag :quote,
             :prefix "'",
             :sym quote,
             :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :map,
           :format-string "{%s}",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
           :children
           ({:k :file, :auto-resolved? false, :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "    "}
            {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
            {:commas ","}
            {:newlines "\n"}
            {:whitespace "    "}
            {:k :line, :auto-resolved? false, :map-qualifier nil}
            {:whitespace " "}
            {:value 1, :string-value "1"}
            {:commas ","}
            {:newlines "\n"}
            {:whitespace "    "}
            {:k :column, :auto-resolved? false, :map-qualifier nil}
            {:whitespace " "}
            {:value 5, :string-value "5"}
            {:commas ","}
            {:newlines "\n"}
            {:whitespace "    "}
            {:k :end-line, :auto-resolved? false, :map-qualifier nil}
            {:whitespace " "}
            {:value 1, :string-value "1"}
            {:commas ","}
            {:newlines "\n"}
            {:whitespace "    "}
            {:k :end-column, :auto-resolved? false, :map-qualifier nil}
            {:whitespace " "}
            {:value 12, :string-value "12"})})}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value fn*, :string-value "fn*", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "    "}
            {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "    "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
              {:newlines "\n"}
              {:whitespace "     "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value do, :string-value "do", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "      "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value clojure.lang.Var/pushThreadBindings,
                   :string-value "clojure.lang.Var/pushThreadBindings",
                   :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "       "}
                  {:children
                   ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                    {:tag :map,
                     :format-string "{%s}",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                     :children
                     [{:value LOADER,
                       :string-value "LOADER",
                       :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                      {:newlines "\n"}
                      {:whitespace "                               "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                        {:newlines "\n"}
                        {:whitespace "                                "}
                        {:tag :list,
                         :format-string "(%s)",
                         :wrap-length 2,
                         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                         :children
                         ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                          {:whitespace " "}
                          {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                {:newlines "\n"}
                {:whitespace "      "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value try, :string-value "try", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "       "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                    {:whitespace " "}
                    {:tag :quote,
                     :prefix "'",
                     :sym quote,
                     :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                  {:newlines "\n"}
                  {:whitespace "       "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value finally, :string-value "finally", :map-qualifier nil}
                    {:whitespace " "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.lang.Var/popThreadBindings,
                       :string-value "clojure.lang.Var/popThreadBindings",
                       :map-qualifier nil})})})})})})})}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value if, :string-value "if", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value .equals, :string-value ".equals", :map-qualifier nil}
            {:whitespace " "}
            {:tag :quote,
             :prefix "'",
             :sym quote,
             :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
            {:whitespace " "}
            {:tag :quote,
             :prefix "'",
             :sym quote,
             :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
          {:newlines "\n"}
          {:whitespace "   "}
          {:value nil, :string-value "nil"}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value do, :string-value "do", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "    "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value clojure.lang.LockingTransaction/runInTransaction,
               :string-value "clojure.lang.LockingTransaction/runInTransaction",
               :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "     "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value fn*, :string-value "fn*", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "      "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:tag :vector,
                   :format-string "[%s]",
                   :wrap-length 2,
                   :seq-fn #function[clojure.core/vec],
                   :children ()}
                  {:newlines "\n"}
                  {:whitespace "       "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "        "}
                    {:children
                     [{:tag :var,
                       :prefix "'",
                       :suffix "",
                       :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                       :sexpr-count 1,
                       :children
                       [{:value clojure.core/*loaded-libs*,
                         :string-value "clojure.core/*loaded-libs*",
                         :map-qualifier nil}]}]}
                    {:newlines "\n"}
                    {:whitespace "        "}
                    {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "        "}
                    {:tag :quote,
                     :prefix "'",
                     :sym quote,
                     :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
            {:newlines "\n"}
            {:whitespace "    "}
            {:value nil, :string-value "nil"})})})}
      {:newlines "\n"}
      {:whitespace " "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value def, :string-value "def", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "  "}
        {:value two-fer, :string-value "two-fer", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value fn*, :string-value "fn*", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
            {:whitespace " "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value str, :string-value "str", :map-qualifier nil}
              {:whitespace " "}
              {:lines ["One for you, one for me."]})})}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :vector,
             :format-string "[%s]",
             :wrap-length 2,
             :seq-fn #function[clojure.core/vec],
             :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
            {:whitespace " "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value str, :string-value "str", :map-qualifier nil}
              {:whitespace " "}
              {:lines ["One for "]}
              {:whitespace " "}
              {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
              {:whitespace " "}
              {:lines [", one for me."]})})})})})}
    {:tag :list,
     :format-string "(%s)",
     :wrap-length 2,
     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
     :children
     ({:value do, :string-value "do", :map-qualifier nil}
      {:newlines "\n"}
      {:whitespace "  "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
        {:whitespace " "}
        {:tag :quote,
         :prefix "'",
         :sym quote,
         :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
      {:newlines "\n"}
      {:whitespace "  "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "   "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
          {:whitespace " "}
          {:tag :quote,
           :prefix "'",
           :sym quote,
           :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
        {:newlines "\n"}
        {:whitespace "   "}
        {:tag :map,
         :format-string "{%s}",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
         :children
         ({:k :file, :auto-resolved? false, :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "    "}
          {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
          {:commas ","}
          {:newlines "\n"}
          {:whitespace "    "}
          {:k :line, :auto-resolved? false, :map-qualifier nil}
          {:whitespace " "}
          {:value 1, :string-value "1"}
          {:commas ","}
          {:newlines "\n"}
          {:whitespace "    "}
          {:k :column, :auto-resolved? false, :map-qualifier nil}
          {:whitespace " "}
          {:value 5, :string-value "5"}
          {:commas ","}
          {:newlines "\n"}
          {:whitespace "    "}
          {:k :end-line, :auto-resolved? false, :map-qualifier nil}
          {:whitespace " "}
          {:value 1, :string-value "1"}
          {:commas ","}
          {:newlines "\n"}
          {:whitespace "    "}
          {:k :end-column, :auto-resolved? false, :map-qualifier nil}
          {:whitespace " "}
          {:value 12, :string-value "12"})})}
      {:newlines "\n"}
      {:whitespace "  "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value fn*, :string-value "fn*", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "    "}
          {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "    "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
            {:newlines "\n"}
            {:whitespace "     "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value do, :string-value "do", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "      "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value clojure.lang.Var/pushThreadBindings,
                 :string-value "clojure.lang.Var/pushThreadBindings",
                 :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "       "}
                {:children
                 ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                  {:tag :map,
                   :format-string "{%s}",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                   :children
                   [{:value LOADER,
                     :string-value "LOADER",
                     :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                    {:newlines "\n"}
                    {:whitespace "                               "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "                                "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                        {:whitespace " "}
                        {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
              {:newlines "\n"}
              {:whitespace "      "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value try, :string-value "try", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "       "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                  {:whitespace " "}
                  {:tag :quote,
                   :prefix "'",
                   :sym quote,
                   :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                {:newlines "\n"}
                {:whitespace "       "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value finally, :string-value "finally", :map-qualifier nil}
                  {:whitespace " "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value clojure.lang.Var/popThreadBindings,
                     :string-value "clojure.lang.Var/popThreadBindings",
                     :map-qualifier nil})})})})})})})}
      {:newlines "\n"}
      {:whitespace "  "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value if, :string-value "if", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "   "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value .equals, :string-value ".equals", :map-qualifier nil}
          {:whitespace " "}
          {:tag :quote,
           :prefix "'",
           :sym quote,
           :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
          {:whitespace " "}
          {:tag :quote,
           :prefix "'",
           :sym quote,
           :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
        {:newlines "\n"}
        {:whitespace "   "}
        {:value nil, :string-value "nil"}
        {:newlines "\n"}
        {:whitespace "   "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value do, :string-value "do", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "    "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value clojure.lang.LockingTransaction/runInTransaction,
             :string-value "clojure.lang.LockingTransaction/runInTransaction",
             :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "     "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value fn*, :string-value "fn*", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "      "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:tag :vector,
                 :format-string "[%s]",
                 :wrap-length 2,
                 :seq-fn #function[clojure.core/vec],
                 :children ()}
                {:newlines "\n"}
                {:whitespace "       "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "        "}
                  {:children
                   [{:tag :var,
                     :prefix "'",
                     :suffix "",
                     :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                     :sexpr-count 1,
                     :children
                     [{:value clojure.core/*loaded-libs*,
                       :string-value "clojure.core/*loaded-libs*",
                       :map-qualifier nil}]}]}
                  {:newlines "\n"}
                  {:whitespace "        "}
                  {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "        "}
                  {:tag :quote,
                   :prefix "'",
                   :sym quote,
                   :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
          {:newlines "\n"}
          {:whitespace "    "}
          {:value nil, :string-value "nil"})})})}
    {:tag :list,
     :format-string "(%s)",
     :wrap-length 2,
     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
     :children
     ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
      {:newlines "\n"}
      {:whitespace "   "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
        {:whitespace " "}
        {:tag :quote,
         :prefix "'",
         :sym quote,
         :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
      {:newlines "\n"}
      {:whitespace "   "}
      {:tag :map,
       :format-string "{%s}",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
       :children
       ({:k :file, :auto-resolved? false, :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "    "}
        {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
        {:commas ","}
        {:newlines "\n"}
        {:whitespace "    "}
        {:k :line, :auto-resolved? false, :map-qualifier nil}
        {:whitespace " "}
        {:value 1, :string-value "1"}
        {:commas ","}
        {:newlines "\n"}
        {:whitespace "    "}
        {:k :column, :auto-resolved? false, :map-qualifier nil}
        {:whitespace " "}
        {:value 5, :string-value "5"}
        {:commas ","}
        {:newlines "\n"}
        {:whitespace "    "}
        {:k :end-line, :auto-resolved? false, :map-qualifier nil}
        {:whitespace " "}
        {:value 1, :string-value "1"}
        {:commas ","}
        {:newlines "\n"}
        {:whitespace "    "}
        {:k :end-column, :auto-resolved? false, :map-qualifier nil}
        {:whitespace " "}
        {:value 12, :string-value "12"})})}],
   :ppath
   {:l
    [{:value do, :string-value "do", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
       {:whitespace " "}
       {:tag :quote,
        :prefix "'",
        :sym quote,
        :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
     {:newlines "\n"}
     {:whitespace "  "}],
    :pnodes
    [{:children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value do, :string-value "do", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "  "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "  "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
               {:whitespace " "}
               {:tag :quote,
                :prefix "'",
                :sym quote,
                :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :map,
              :format-string "{%s}",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
              :children
              ({:k :file, :auto-resolved? false, :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "    "}
               {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
               {:commas ","}
               {:newlines "\n"}
               {:whitespace "    "}
               {:k :line, :auto-resolved? false, :map-qualifier nil}
               {:whitespace " "}
               {:value 1, :string-value "1"}
               {:commas ","}
               {:newlines "\n"}
               {:whitespace "    "}
               {:k :column, :auto-resolved? false, :map-qualifier nil}
               {:whitespace " "}
               {:value 5, :string-value "5"}
               {:commas ","}
               {:newlines "\n"}
               {:whitespace "    "}
               {:k :end-line, :auto-resolved? false, :map-qualifier nil}
               {:whitespace " "}
               {:value 1, :string-value "1"}
               {:commas ","}
               {:newlines "\n"}
               {:whitespace "    "}
               {:k :end-column, :auto-resolved? false, :map-qualifier nil}
               {:whitespace " "}
               {:value 12, :string-value "12"})})}
           {:newlines "\n"}
           {:whitespace "  "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value fn*, :string-value "fn*", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "    "}
               {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "    "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:tag :vector,
                  :format-string "[%s]",
                  :wrap-length 2,
                  :seq-fn #function[clojure.core/vec],
                  :children ()}
                 {:newlines "\n"}
                 {:whitespace "     "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value do, :string-value "do", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "      "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.lang.Var/pushThreadBindings,
                      :string-value "clojure.lang.Var/pushThreadBindings",
                      :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "       "}
                     {:children
                      ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                       {:tag :map,
                        :format-string "{%s}",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                        :children
                        [{:value LOADER,
                          :string-value "LOADER",
                          :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                         {:newlines "\n"}
                         {:whitespace "                               "}
                         {:tag :list,
                          :format-string "(%s)",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                          :children
                          ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                           {:newlines "\n"}
                           {:whitespace "                                "}
                           {:tag :list,
                            :format-string "(%s)",
                            :wrap-length 2,
                            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                            :children
                            ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                             {:whitespace " "}
                             {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                   {:newlines "\n"}
                   {:whitespace "      "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value try, :string-value "try", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "       "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                       {:whitespace " "}
                       {:tag :quote,
                        :prefix "'",
                        :sym quote,
                        :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                     {:newlines "\n"}
                     {:whitespace "       "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value finally, :string-value "finally", :map-qualifier nil}
                       {:whitespace " "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value clojure.lang.Var/popThreadBindings,
                          :string-value "clojure.lang.Var/popThreadBindings",
                          :map-qualifier nil})})})})})})})}
           {:newlines "\n"}
           {:whitespace "  "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value if, :string-value "if", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value .equals, :string-value ".equals", :map-qualifier nil}
               {:whitespace " "}
               {:tag :quote,
                :prefix "'",
                :sym quote,
                :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
               {:whitespace " "}
               {:tag :quote,
                :prefix "'",
                :sym quote,
                :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
             {:newlines "\n"}
             {:whitespace "   "}
             {:value nil, :string-value "nil"}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value do, :string-value "do", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "    "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.lang.LockingTransaction/runInTransaction,
                  :string-value "clojure.lang.LockingTransaction/runInTransaction",
                  :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "     "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value fn*, :string-value "fn*", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "      "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:tag :vector,
                      :format-string "[%s]",
                      :wrap-length 2,
                      :seq-fn #function[clojure.core/vec],
                      :children ()}
                     {:newlines "\n"}
                     {:whitespace "       "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "        "}
                       {:children
                        [{:tag :var,
                          :prefix "'",
                          :suffix "",
                          :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                          :sexpr-count 1,
                          :children
                          [{:value clojure.core/*loaded-libs*,
                            :string-value "clojure.core/*loaded-libs*",
                            :map-qualifier nil}]}]}
                       {:newlines "\n"}
                       {:whitespace "        "}
                       {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "        "}
                       {:tag :quote,
                        :prefix "'",
                        :sym quote,
                        :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
               {:newlines "\n"}
               {:whitespace "    "}
               {:value nil, :string-value "nil"})})})}
         {:newlines "\n"}
         {:whitespace " "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value def, :string-value "def", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "  "}
           {:value two-fer, :string-value "two-fer", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "  "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:whitespace " "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value str, :string-value "str", :map-qualifier nil}
                 {:whitespace " "}
                 {:lines ["One for you, one for me."]})})}
             {:newlines "\n"}
             {:whitespace "   "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector,
                :format-string "[%s]",
                :wrap-length 2,
                :seq-fn #function[clojure.core/vec],
                :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
               {:whitespace " "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value str, :string-value "str", :map-qualifier nil}
                 {:whitespace " "}
                 {:lines ["One for "]}
                 {:whitespace " "}
                 {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
                 {:whitespace " "}
                 {:lines [", one for me."]})})})})})}
       {:newlines "\n"})}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :map,
            :format-string "{%s}",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
            :children
            ({:k :file, :auto-resolved? false, :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 5, :string-value "5"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-line, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 1, :string-value "1"}
             {:commas ","}
             {:newlines "\n"}
             {:whitespace "    "}
             {:k :end-column, :auto-resolved? false, :map-qualifier nil}
             {:whitespace " "}
             {:value 12, :string-value "12"})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value do, :string-value "do", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/pushThreadBindings,
                    :string-value "clojure.lang.Var/pushThreadBindings",
                    :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:children
                    ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                     {:tag :map,
                      :format-string "{%s}",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                      :children
                      [{:value LOADER,
                        :string-value "LOADER",
                        :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                       {:newlines "\n"}
                       {:whitespace "                               "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                         {:newlines "\n"}
                         {:whitespace "                                "}
                         {:tag :list,
                          :format-string "(%s)",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                          :children
                          ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                           {:whitespace " "}
                           {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value try, :string-value "try", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value finally, :string-value "finally", :map-qualifier nil}
                     {:whitespace " "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.lang.Var/popThreadBindings,
                        :string-value "clojure.lang.Var/popThreadBindings",
                        :map-qualifier nil})})})})})})})}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value if, :string-value "if", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value .equals, :string-value ".equals", :map-qualifier nil}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
             {:whitespace " "}
             {:tag :quote,
              :prefix "'",
              :sym quote,
              :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:value nil, :string-value "nil"}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "    "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.LockingTransaction/runInTransaction,
                :string-value "clojure.lang.LockingTransaction/runInTransaction",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "     "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value fn*, :string-value "fn*", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "      "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:tag :vector,
                    :format-string "[%s]",
                    :wrap-length 2,
                    :seq-fn #function[clojure.core/vec],
                    :children ()}
                   {:newlines "\n"}
                   {:whitespace "       "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:children
                      [{:tag :var,
                        :prefix "'",
                        :suffix "",
                        :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                        :sexpr-count 1,
                        :children
                        [{:value clojure.core/*loaded-libs*,
                          :string-value "clojure.core/*loaded-libs*",
                          :map-qualifier nil}]}]}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "        "}
                     {:tag :quote,
                      :prefix "'",
                      :sym quote,
                      :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
             {:newlines "\n"}
             {:whitespace "    "}
             {:value nil, :string-value "nil"})})})}
       {:newlines "\n"}
       {:whitespace " "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value def, :string-value "def", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:value two-fer, :string-value "two-fer", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "  "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value fn*, :string-value "fn*", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for you, one for me."]})})}
           {:newlines "\n"}
           {:whitespace "   "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector,
              :format-string "[%s]",
              :wrap-length 2,
              :seq-fn #function[clojure.core/vec],
              :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
             {:whitespace " "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value str, :string-value "str", :map-qualifier nil}
               {:whitespace " "}
               {:lines ["One for "]}
               {:whitespace " "}
               {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
               {:whitespace " "}
               {:lines [", one for me."]})})})})})}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value do, :string-value "do", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :map,
          :format-string "{%s}",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
          :children
          ({:k :file, :auto-resolved? false, :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :line, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 1, :string-value "1"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :column, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 5, :string-value "5"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :end-line, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 1, :string-value "1"}
           {:commas ","}
           {:newlines "\n"}
           {:whitespace "    "}
           {:k :end-column, :auto-resolved? false, :map-qualifier nil}
           {:whitespace " "}
           {:value 12, :string-value "12"})})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value fn*, :string-value "fn*", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
             {:newlines "\n"}
             {:whitespace "     "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value do, :string-value "do", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.lang.Var/pushThreadBindings,
                  :string-value "clojure.lang.Var/pushThreadBindings",
                  :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:children
                  ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                   {:tag :map,
                    :format-string "{%s}",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                    :children
                    [{:value LOADER,
                      :string-value "LOADER",
                      :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                     {:newlines "\n"}
                     {:whitespace "                               "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "                                "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                         {:whitespace " "}
                         {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value try, :string-value "try", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                   {:whitespace " "}
                   {:tag :quote,
                    :prefix "'",
                    :sym quote,
                    :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value finally, :string-value "finally", :map-qualifier nil}
                   {:whitespace " "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value clojure.lang.Var/popThreadBindings,
                      :string-value "clojure.lang.Var/popThreadBindings",
                      :map-qualifier nil})})})})})})})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value if, :string-value "if", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value .equals, :string-value ".equals", :map-qualifier nil}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
           {:whitespace " "}
           {:tag :quote,
            :prefix "'",
            :sym quote,
            :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
         {:newlines "\n"}
         {:whitespace "   "}
         {:value nil, :string-value "nil"}
         {:newlines "\n"}
         {:whitespace "   "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value do, :string-value "do", :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "    "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value clojure.lang.LockingTransaction/runInTransaction,
              :string-value "clojure.lang.LockingTransaction/runInTransaction",
              :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "     "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value fn*, :string-value "fn*", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "      "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:tag :vector,
                  :format-string "[%s]",
                  :wrap-length 2,
                  :seq-fn #function[clojure.core/vec],
                  :children ()}
                 {:newlines "\n"}
                 {:whitespace "       "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:children
                    [{:tag :var,
                      :prefix "'",
                      :suffix "",
                      :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                      :sexpr-count 1,
                      :children
                      [{:value clojure.core/*loaded-libs*,
                        :string-value "clojure.core/*loaded-libs*",
                        :map-qualifier nil}]}]}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "        "}
                   {:tag :quote,
                    :prefix "'",
                    :sym quote,
                    :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
           {:newlines "\n"}
           {:whitespace "    "}
           {:value nil, :string-value "nil"})})})}],
    :ppath
    {:l [],
     :pnodes
     [{:children
       ({:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value do, :string-value "do", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "  "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
            {:newlines "\n"}
            {:whitespace "  "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
                {:whitespace " "}
                {:tag :quote,
                 :prefix "'",
                 :sym quote,
                 :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :map,
               :format-string "{%s}",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
               :children
               ({:k :file, :auto-resolved? false, :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "    "}
                {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
                {:commas ","}
                {:newlines "\n"}
                {:whitespace "    "}
                {:k :line, :auto-resolved? false, :map-qualifier nil}
                {:whitespace " "}
                {:value 1, :string-value "1"}
                {:commas ","}
                {:newlines "\n"}
                {:whitespace "    "}
                {:k :column, :auto-resolved? false, :map-qualifier nil}
                {:whitespace " "}
                {:value 5, :string-value "5"}
                {:commas ","}
                {:newlines "\n"}
                {:whitespace "    "}
                {:k :end-line, :auto-resolved? false, :map-qualifier nil}
                {:whitespace " "}
                {:value 1, :string-value "1"}
                {:commas ","}
                {:newlines "\n"}
                {:whitespace "    "}
                {:k :end-column, :auto-resolved? false, :map-qualifier nil}
                {:whitespace " "}
                {:value 12, :string-value "12"})})}
            {:newlines "\n"}
            {:whitespace "  "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value fn*, :string-value "fn*", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "    "}
                {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "    "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:tag :vector,
                   :format-string "[%s]",
                   :wrap-length 2,
                   :seq-fn #function[clojure.core/vec],
                   :children ()}
                  {:newlines "\n"}
                  {:whitespace "     "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value do, :string-value "do", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "      "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.lang.Var/pushThreadBindings,
                       :string-value "clojure.lang.Var/pushThreadBindings",
                       :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "       "}
                      {:children
                       ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                        {:tag :map,
                         :format-string "{%s}",
                         :wrap-length 2,
                         :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                         :children
                         [{:value LOADER,
                           :string-value "LOADER",
                           :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                          {:newlines "\n"}
                          {:whitespace "                               "}
                          {:tag :list,
                           :format-string "(%s)",
                           :wrap-length 2,
                           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                           :children
                           ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                            {:newlines "\n"}
                            {:whitespace "                                "}
                            {:tag :list,
                             :format-string "(%s)",
                             :wrap-length 2,
                             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                             :children
                             ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                              {:whitespace " "}
                              {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                    {:newlines "\n"}
                    {:whitespace "      "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value try, :string-value "try", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "       "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                        {:whitespace " "}
                        {:tag :quote,
                         :prefix "'",
                         :sym quote,
                         :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                      {:newlines "\n"}
                      {:whitespace "       "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value finally, :string-value "finally", :map-qualifier nil}
                        {:whitespace " "}
                        {:tag :list,
                         :format-string "(%s)",
                         :wrap-length 2,
                         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                         :children
                         ({:value clojure.lang.Var/popThreadBindings,
                           :string-value "clojure.lang.Var/popThreadBindings",
                           :map-qualifier nil})})})})})})})}
            {:newlines "\n"}
            {:whitespace "  "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value if, :string-value "if", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value .equals, :string-value ".equals", :map-qualifier nil}
                {:whitespace " "}
                {:tag :quote,
                 :prefix "'",
                 :sym quote,
                 :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
                {:whitespace " "}
                {:tag :quote,
                 :prefix "'",
                 :sym quote,
                 :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
              {:newlines "\n"}
              {:whitespace "   "}
              {:value nil, :string-value "nil"}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value do, :string-value "do", :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "    "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value clojure.lang.LockingTransaction/runInTransaction,
                   :string-value "clojure.lang.LockingTransaction/runInTransaction",
                   :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "     "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value fn*, :string-value "fn*", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "      "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:tag :vector,
                       :format-string "[%s]",
                       :wrap-length 2,
                       :seq-fn #function[clojure.core/vec],
                       :children ()}
                      {:newlines "\n"}
                      {:whitespace "       "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                        {:newlines "\n"}
                        {:whitespace "        "}
                        {:children
                         [{:tag :var,
                           :prefix "'",
                           :suffix "",
                           :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                           :sexpr-count 1,
                           :children
                           [{:value clojure.core/*loaded-libs*,
                             :string-value "clojure.core/*loaded-libs*",
                             :map-qualifier nil}]}]}
                        {:newlines "\n"}
                        {:whitespace "        "}
                        {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                        {:newlines "\n"}
                        {:whitespace "        "}
                        {:tag :quote,
                         :prefix "'",
                         :sym quote,
                         :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
                {:newlines "\n"}
                {:whitespace "    "}
                {:value nil, :string-value "nil"})})})}
          {:newlines "\n"}
          {:whitespace " "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value def, :string-value "def", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "  "}
            {:value two-fer, :string-value "two-fer", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "  "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value fn*, :string-value "fn*", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:tag :vector,
                 :format-string "[%s]",
                 :wrap-length 2,
                 :seq-fn #function[clojure.core/vec],
                 :children ()}
                {:whitespace " "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value str, :string-value "str", :map-qualifier nil}
                  {:whitespace " "}
                  {:lines ["One for you, one for me."]})})}
              {:newlines "\n"}
              {:whitespace "   "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:tag :vector,
                 :format-string "[%s]",
                 :wrap-length 2,
                 :seq-fn #function[clojure.core/vec],
                 :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
                {:whitespace " "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value str, :string-value "str", :map-qualifier nil}
                  {:whitespace " "}
                  {:lines ["One for "]}
                  {:whitespace " "}
                  {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
                  {:whitespace " "}
                  {:lines [", one for me."]})})})})})}
        {:newlines "\n"})}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value do, :string-value "do", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
            {:whitespace " "}
            {:tag :quote,
             :prefix "'",
             :sym quote,
             :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :map,
             :format-string "{%s}",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
             :children
             ({:k :file, :auto-resolved? false, :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :line, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 1, :string-value "1"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :column, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 5, :string-value "5"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :end-line, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 1, :string-value "1"}
              {:commas ","}
              {:newlines "\n"}
              {:whitespace "    "}
              {:k :end-column, :auto-resolved? false, :map-qualifier nil}
              {:whitespace " "}
              {:value 12, :string-value "12"})})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value fn*, :string-value "fn*", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:tag :vector,
                 :format-string "[%s]",
                 :wrap-length 2,
                 :seq-fn #function[clojure.core/vec],
                 :children ()}
                {:newlines "\n"}
                {:whitespace "     "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value do, :string-value "do", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value clojure.lang.Var/pushThreadBindings,
                     :string-value "clojure.lang.Var/pushThreadBindings",
                     :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:children
                     ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                      {:tag :map,
                       :format-string "{%s}",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                       :children
                       [{:value LOADER,
                         :string-value "LOADER",
                         :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                        {:newlines "\n"}
                        {:whitespace "                               "}
                        {:tag :list,
                         :format-string "(%s)",
                         :wrap-length 2,
                         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                         :children
                         ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                          {:newlines "\n"}
                          {:whitespace "                                "}
                          {:tag :list,
                           :format-string "(%s)",
                           :wrap-length 2,
                           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                           :children
                           ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                            {:whitespace " "}
                            {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:value try, :string-value "try", :map-qualifier nil}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                      {:whitespace " "}
                      {:tag :quote,
                       :prefix "'",
                       :sym quote,
                       :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value finally, :string-value "finally", :map-qualifier nil}
                      {:whitespace " "}
                      {:tag :list,
                       :format-string "(%s)",
                       :wrap-length 2,
                       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                       :children
                       ({:value clojure.lang.Var/popThreadBindings,
                         :string-value "clojure.lang.Var/popThreadBindings",
                         :map-qualifier nil})})})})})})})}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value if, :string-value "if", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value .equals, :string-value ".equals", :map-qualifier nil}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
              {:whitespace " "}
              {:tag :quote,
               :prefix "'",
               :sym quote,
               :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:value nil, :string-value "nil"}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value do, :string-value "do", :map-qualifier nil}
              {:newlines "\n"}
              {:whitespace "    "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value clojure.lang.LockingTransaction/runInTransaction,
                 :string-value "clojure.lang.LockingTransaction/runInTransaction",
                 :map-qualifier nil}
                {:newlines "\n"}
                {:whitespace "     "}
                {:tag :list,
                 :format-string "(%s)",
                 :wrap-length 2,
                 :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                 :children
                 ({:value fn*, :string-value "fn*", :map-qualifier nil}
                  {:newlines "\n"}
                  {:whitespace "      "}
                  {:tag :list,
                   :format-string "(%s)",
                   :wrap-length 2,
                   :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                   :children
                   ({:tag :vector,
                     :format-string "[%s]",
                     :wrap-length 2,
                     :seq-fn #function[clojure.core/vec],
                     :children ()}
                    {:newlines "\n"}
                    {:whitespace "       "}
                    {:tag :list,
                     :format-string "(%s)",
                     :wrap-length 2,
                     :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                     :children
                     ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:children
                       [{:tag :var,
                         :prefix "'",
                         :suffix "",
                         :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                         :sexpr-count 1,
                         :children
                         [{:value clojure.core/*loaded-libs*,
                           :string-value "clojure.core/*loaded-libs*",
                           :map-qualifier nil}]}]}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                      {:newlines "\n"}
                      {:whitespace "        "}
                      {:tag :quote,
                       :prefix "'",
                       :sym quote,
                       :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
              {:newlines "\n"}
              {:whitespace "    "}
              {:value nil, :string-value "nil"})})})}
        {:newlines "\n"}
        {:whitespace " "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value def, :string-value "def", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:value two-fer, :string-value "two-fer", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "  "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:value fn*, :string-value "fn*", :map-qualifier nil}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
              {:whitespace " "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value str, :string-value "str", :map-qualifier nil}
                {:whitespace " "}
                {:lines ["One for you, one for me."]})})}
            {:newlines "\n"}
            {:whitespace "   "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:tag :vector,
               :format-string "[%s]",
               :wrap-length 2,
               :seq-fn #function[clojure.core/vec],
               :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
              {:whitespace " "}
              {:tag :list,
               :format-string "(%s)",
               :wrap-length 2,
               :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
               :children
               ({:value str, :string-value "str", :map-qualifier nil}
                {:whitespace " "}
                {:lines ["One for "]}
                {:whitespace " "}
                {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
                {:whitespace " "}
                {:lines [", one for me."]})})})})})}],
     :ppath
     {:l [],
      :pnodes
      [{:children
        ({:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "  "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.core/in-ns, :string-value "clojure.core/in-ns", :map-qualifier nil}
               {:whitespace " "}
               {:tag :quote,
                :prefix "'",
                :sym quote,
                :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
             {:newlines "\n"}
             {:whitespace "  "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value .resetMeta, :string-value ".resetMeta", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.lang.Namespace/find, :string-value "clojure.lang.Namespace/find", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :map,
                :format-string "{%s}",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                :children
                ({:k :file, :auto-resolved? false, :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
                 {:commas ","}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:k :line, :auto-resolved? false, :map-qualifier nil}
                 {:whitespace " "}
                 {:value 1, :string-value "1"}
                 {:commas ","}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:k :column, :auto-resolved? false, :map-qualifier nil}
                 {:whitespace " "}
                 {:value 5, :string-value "5"}
                 {:commas ","}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:k :end-line, :auto-resolved? false, :map-qualifier nil}
                 {:whitespace " "}
                 {:value 1, :string-value "1"}
                 {:commas ","}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:k :end-column, :auto-resolved? false, :map-qualifier nil}
                 {:whitespace " "}
                 {:value 12, :string-value "12"})})}
             {:newlines "\n"}
             {:whitespace "  "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value fn*, :string-value "fn*", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:tag :vector,
                    :format-string "[%s]",
                    :wrap-length 2,
                    :seq-fn #function[clojure.core/vec],
                    :children ()}
                   {:newlines "\n"}
                   {:whitespace "     "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value do, :string-value "do", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "      "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value clojure.lang.Var/pushThreadBindings,
                        :string-value "clojure.lang.Var/pushThreadBindings",
                        :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "       "}
                       {:children
                        ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                         {:tag :map,
                          :format-string "{%s}",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                          :children
                          [{:value LOADER,
                            :string-value "LOADER",
                            :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                           {:newlines "\n"}
                           {:whitespace "                               "}
                           {:tag :list,
                            :format-string "(%s)",
                            :wrap-length 2,
                            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                            :children
                            ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                             {:newlines "\n"}
                             {:whitespace "                                "}
                             {:tag :list,
                              :format-string "(%s)",
                              :wrap-length 2,
                              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                              :children
                              ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                               {:whitespace " "}
                               {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
                     {:newlines "\n"}
                     {:whitespace "      "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value try, :string-value "try", :map-qualifier nil}
                       {:newlines "\n"}
                       {:whitespace "       "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                         {:whitespace " "}
                         {:tag :quote,
                          :prefix "'",
                          :sym quote,
                          :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
                       {:newlines "\n"}
                       {:whitespace "       "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value finally, :string-value "finally", :map-qualifier nil}
                         {:whitespace " "}
                         {:tag :list,
                          :format-string "(%s)",
                          :wrap-length 2,
                          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                          :children
                          ({:value clojure.lang.Var/popThreadBindings,
                            :string-value "clojure.lang.Var/popThreadBindings",
                            :map-qualifier nil})})})})})})})}
             {:newlines "\n"}
             {:whitespace "  "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value if, :string-value "if", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value .equals, :string-value ".equals", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
               {:newlines "\n"}
               {:whitespace "   "}
               {:value nil, :string-value "nil"}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value do, :string-value "do", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.LockingTransaction/runInTransaction,
                    :string-value "clojure.lang.LockingTransaction/runInTransaction",
                    :map-qualifier nil}
                   {:newlines "\n"}
                   {:whitespace "     "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value fn*, :string-value "fn*", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "      "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:tag :vector,
                        :format-string "[%s]",
                        :wrap-length 2,
                        :seq-fn #function[clojure.core/vec],
                        :children ()}
                       {:newlines "\n"}
                       {:whitespace "       "}
                       {:tag :list,
                        :format-string "(%s)",
                        :wrap-length 2,
                        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                        :children
                        ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                         {:newlines "\n"}
                         {:whitespace "        "}
                         {:children
                          [{:tag :var,
                            :prefix "'",
                            :suffix "",
                            :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                            :sexpr-count 1,
                            :children
                            [{:value clojure.core/*loaded-libs*,
                              :string-value "clojure.core/*loaded-libs*",
                              :map-qualifier nil}]}]}
                         {:newlines "\n"}
                         {:whitespace "        "}
                         {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                         {:newlines "\n"}
                         {:whitespace "        "}
                         {:tag :quote,
                          :prefix "'",
                          :sym quote,
                          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
                 {:newlines "\n"}
                 {:whitespace "    "}
                 {:value nil, :string-value "nil"})})})}
           {:newlines "\n"}
           {:whitespace " "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value def, :string-value "def", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "  "}
             {:value two-fer, :string-value "two-fer", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "  "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value fn*, :string-value "fn*", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:tag :vector,
                  :format-string "[%s]",
                  :wrap-length 2,
                  :seq-fn #function[clojure.core/vec],
                  :children ()}
                 {:whitespace " "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value str, :string-value "str", :map-qualifier nil}
                   {:whitespace " "}
                   {:lines ["One for you, one for me."]})})}
               {:newlines "\n"}
               {:whitespace "   "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:tag :vector,
                  :format-string "[%s]",
                  :wrap-length 2,
                  :seq-fn #function[clojure.core/vec],
                  :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
                 {:whitespace " "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value str, :string-value "str", :map-qualifier nil}
                   {:whitespace " "}
                   {:lines ["One for "]}
                   {:whitespace " "}
                   {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
                   {:whitespace " "}
                   {:lines [", one for me."]})})})})})}
         {:newlines "\n"})}],
      :ppath nil,
      :r ({:newlines "\n"})},
     :r
     ({:newlines "\n"}
      {:whitespace " "}
      {:tag :list,
       :format-string "(%s)",
       :wrap-length 2,
       :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
       :children
       ({:value def, :string-value "def", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "  "}
        {:value two-fer, :string-value "two-fer", :map-qualifier nil}
        {:newlines "\n"}
        {:whitespace "  "}
        {:tag :list,
         :format-string "(%s)",
         :wrap-length 2,
         :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
         :children
         ({:value fn*, :string-value "fn*", :map-qualifier nil}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
            {:whitespace " "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value str, :string-value "str", :map-qualifier nil}
              {:whitespace " "}
              {:lines ["One for you, one for me."]})})}
          {:newlines "\n"}
          {:whitespace "   "}
          {:tag :list,
           :format-string "(%s)",
           :wrap-length 2,
           :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
           :children
           ({:tag :vector,
             :format-string "[%s]",
             :wrap-length 2,
             :seq-fn #function[clojure.core/vec],
             :children ({:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil})}
            {:whitespace " "}
            {:tag :list,
             :format-string "(%s)",
             :wrap-length 2,
             :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
             :children
             ({:value str, :string-value "str", :map-qualifier nil}
              {:whitespace " "}
              {:lines ["One for "]}
              {:whitespace " "}
              {:value PLACEHOLDER-2, :string-value "PLACEHOLDER-2", :map-qualifier nil}
              {:whitespace " "}
              {:lines [", one for me."]})})})})})},
    :r
    ({:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value fn*, :string-value "fn*", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value do, :string-value "do", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value clojure.lang.Var/pushThreadBindings,
                :string-value "clojure.lang.Var/pushThreadBindings",
                :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:children
                ({:auto-resolved? false, :prefix "clojure.lang.Compiler"}
                 {:tag :map,
                  :format-string "{%s}",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/map-node/fn--13922],
                  :children
                  [{:value LOADER,
                    :string-value "LOADER",
                    :map-qualifier {:auto-resolved? false, :prefix "clojure.lang.Compiler"}}
                   {:newlines "\n"}
                   {:whitespace "                               "}
                   {:tag :list,
                    :format-string "(%s)",
                    :wrap-length 2,
                    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                    :children
                    ({:value .getClassLoader, :string-value ".getClassLoader", :map-qualifier nil}
                     {:newlines "\n"}
                     {:whitespace "                                "}
                     {:tag :list,
                      :format-string "(%s)",
                      :wrap-length 2,
                      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                      :children
                      ({:value .getClass, :string-value ".getClass", :map-qualifier nil}
                       {:whitespace " "}
                       {:value PLACEHOLDER-1, :string-value "PLACEHOLDER-1", :map-qualifier nil})})}]})})}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:value try, :string-value "try", :map-qualifier nil}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/refer, :string-value "clojure.core/refer", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value finally, :string-value "finally", :map-qualifier nil}
                 {:whitespace " "}
                 {:tag :list,
                  :format-string "(%s)",
                  :wrap-length 2,
                  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                  :children
                  ({:value clojure.lang.Var/popThreadBindings,
                    :string-value "clojure.lang.Var/popThreadBindings",
                    :map-qualifier nil})})})})})})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
      :children
      ({:value if, :string-value "if", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value .equals, :string-value ".equals", :map-qualifier nil}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]}
         {:whitespace " "}
         {:tag :quote,
          :prefix "'",
          :sym quote,
          :children [{:value clojure.core, :string-value "clojure.core", :map-qualifier nil}]})}
       {:newlines "\n"}
       {:whitespace "   "}
       {:value nil, :string-value "nil"}
       {:newlines "\n"}
       {:whitespace "   "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
        :children
        ({:value do, :string-value "do", :map-qualifier nil}
         {:newlines "\n"}
         {:whitespace "    "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
          :children
          ({:value clojure.lang.LockingTransaction/runInTransaction,
            :string-value "clojure.lang.LockingTransaction/runInTransaction",
            :map-qualifier nil}
           {:newlines "\n"}
           {:whitespace "     "}
           {:tag :list,
            :format-string "(%s)",
            :wrap-length 2,
            :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
            :children
            ({:value fn*, :string-value "fn*", :map-qualifier nil}
             {:newlines "\n"}
             {:whitespace "      "}
             {:tag :list,
              :format-string "(%s)",
              :wrap-length 2,
              :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
              :children
              ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
               {:newlines "\n"}
               {:whitespace "       "}
               {:tag :list,
                :format-string "(%s)",
                :wrap-length 2,
                :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13916],
                :children
                ({:value clojure.core/commute, :string-value "clojure.core/commute", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:children
                  [{:tag :var,
                    :prefix "'",
                    :suffix "",
                    :sexpr-fn #function[rewrite-clj.node.reader-macro/var-node/fn--13818],
                    :sexpr-count 1,
                    :children
                    [{:value clojure.core/*loaded-libs*,
                      :string-value "clojure.core/*loaded-libs*",
                      :map-qualifier nil}]}]}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:value clojure.core/conj, :string-value "clojure.core/conj", :map-qualifier nil}
                 {:newlines "\n"}
                 {:whitespace "        "}
                 {:tag :quote,
                  :prefix "'",
                  :sym quote,
                  :children [{:value two-fer, :string-value "two-fer", :map-qualifier nil}]})})})})}
         {:newlines "\n"}
         {:whitespace "    "}
         {:value nil, :string-value "nil"})})})},
   :r nil},
  :r
  ({:newlines "\n"}
   {:whitespace "    "}
   {:lines ["file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"]}
   {:commas ","}
   {:newlines "\n"}
   {:whitespace "    "}
   {:k :line, :auto-resolved? false, :map-qualifier nil}
   {:whitespace " "}
   {:value 1, :string-value "1"}
   {:commas ","}
   {:newlines "\n"}
   {:whitespace "    "}
   {:k :column, :auto-resolved? false, :map-qualifier nil}
   {:whitespace " "}
   {:value 5, :string-value "5"}
   {:commas ","}
   {:newlines "\n"}
   {:whitespace "    "}
   {:k :end-line, :auto-resolved? false, :map-qualifier nil}
   {:whitespace " "}
   {:value 1, :string-value "1"}
   {:commas ","}
   {:newlines "\n"}
   {:whitespace "    "}
   {:k :end-column, :auto-resolved? false, :map-qualifier nil}
   {:whitespace " "}
   {:value 12, :string-value "12"})}]
clj꞉clojure-representer-test꞉> 
:file
clj꞉clojure-representer-test꞉> 
nil
clj꞉clojure-representer-test꞉> 
"file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj"
clj꞉clojure-representer-test꞉> 
""
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/remove-path
clj꞉clojure-representer-test꞉> 
"((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/twofers-test
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (require '(clojure.string))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (clojure.string/blank? PLACEHOLDER-2) \"you\"
 PLACEHOLDER-2)\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (require '(clojure.string))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (clojure.s
tring/blank? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  f\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def two-fer (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in
-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  f\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn* ([] (f \"you\")) ([PLACEHOLDER-3] (f PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\n   ([] (print \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 
'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\")))\n   ([] (print \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-name\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-name \"you\"))\n   ([PLACEHOLDER-3] (two-fer-name 
PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-name\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-name \"you\"))\n   ([PLACEHOLDER-3] (two-
fer-name PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHO
LDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/equiv\n        (clojure.lang.RT/count PLACEHOLDER-2)\n        0)\n       \"you\"
\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.
Util/equiv\n        (clojure.lang.RT/count PLACEHOLDER-2)\n        0)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (string/join \"\" [\"One for \" PLACEHOLDER-2
 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (string/join \"\" [\"One for \
" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n      PLACEH
OLDER-2\n      \"you\")\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/gt (clojure.la
ng.RT/count PLACEHOLDER-2) 0)\n      PLACEHOLDER-2\n      \"you\")\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMet
a\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta
\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (reduce str [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.
string/blank? PLACEHOLDER-4)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3
\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.string/blank? PLACEHOLDER-4)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     ([] (str \"One for you, one for me.\"))\n     ([PLACEHOLDER-2]\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((do\n
  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     ([] (str \"One for you, one for me.\"))\n     ([PLACEHOLDER-2]\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if PLACEHOLDER-2 PLACEHOLDER-2 \"you\")\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fe
r)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"haley\"))\n" "((do\n  (clojure.core
/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"haley\"))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   
(clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clo
jure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 ((fnil first [\"you\"]) PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     []\n     (str \"One for you, one for me.\")\n     [PLACEHOLDER-2]\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n" "((do\
n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do\n     []\n     (str \"One for you, one for me.\")\n     [PLACEHOLDER-2]\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     \"One for you, one for me.\")
))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     \"One for you, one for me.\")))))\
n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for me, one for you.\"\n     (if\n      (clojure.lang.Numbers/gt (clojure.lan
g.RT/count PLACEHOLDER-2) 0)\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     
\"One for me, one for you.\"\n     (if\n      (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n      (str \"One for \" PLACEHOLDER-2 \", one for you\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMet
a\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   
(clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (use '[clojure.string :only (join)])\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\n  
(clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (use '[clojure.string :only (join)])\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n      \"you\"\n      PLACEHOLDER-
2)\n     \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/equiv PLACEHOLDER-2 \"\")\n      \"you
\"\n      PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      PLACEHOLDER-2)\n     \", one for me.
\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      PLACEHOLDER-2)\n     \", one for me.\"
)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (clojure.string/join [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"])))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println\n     (clojure.lang.Numbers/add\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\n      \", one for me\"))))))\n" "((do\n  (cl
ojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (println\n     (clojure.lang.Numbers/add\n      (clojure.lang.Numbers/add \"One for \" PLACEHOLDER-2)\n      \", one for me\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for you, one for me\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me\")
)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"One for you, one for me\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me\")))))
)\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"Zaphod\")\n (def\n  two-fer-var-arg\n  (fn*\n 
  ([& PLACEHOLDER-3]\n    (if\n     (empty? PLACEHOLDER-3)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\n (two-fer-var-arg)\n (two-fer-var-arg \"Ford\")\n (def\n  two-fer-var-arg-apply\n  (fn*\n   ([& PLACEHOLDER-4]\n    (if\n     (empty? PLACEHOLDER-4)\n     \"One for you, one for me.\"\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\n (two-fer-var-arg-apply)\n (two-fer-var-arg-apply \"Ford\")\n (def\n  two-fer-var-arg-apply-when-let\n  (fn*\n   ([& PLACEHOLDER-5]\n    (let*\n     [PLACEHOLDER-7\n      (let*\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\n       (if PLACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\n (two-fer-var-arg-apply-when-let)\n (two-fer-var-arg-apply-when-let \"Arthur\"))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-colum
n 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer)\n (two-fer \"Zaphod\")\n (def\n  two-fer-var-arg\n  (fn*\n   ([& PLACEHOLDER-3]\n    (if\n     (empty? PLACEHOLDER-3)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-3) \", one for me.\")))))\n (two-fer-var-arg)\n (two-fer-v
ar-arg \"Ford\")\n (def\n  two-fer-var-arg-apply\n  (fn*\n   ([& PLACEHOLDER-4]\n    (if\n     (empty? PLACEHOLDER-4)\n     \"One for you, one for me.\"\n     (str \"One for \" (apply str PLACEHOLDER-4) \", one for me.\")))))\n (two-fer-var-arg-apply)\n (two-fer-var-arg-apply \"Ford\")\n (def\n  two-fer-var-arg-apply-when-let\n  (fn*\n   ([& PLACEHOLDER-5]\n    (let*\n     [PLACEHOLDER-7\n      (let*\n       [PLACEHOLDER-6 (first PLACEHOLDER-5)]\n       (if PLACEHOLDER-6 PLACEHOLDER-6 \"you\"))]\n     (str \"One for \" PLACEHOLDER-7 \", one for me.\")))))\n (two-fer-var-arg-apply-when-let)\n (two-fer-var-arg-apply-when-let \"Arthur\"))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def hello (fn* ([] (println \"This is ayden\")))))\n" "((do\n  (cloj
ure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def hello (fn* ([] (println \"This is ayden\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.
lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLA
CEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (str \"One for you, one for me.\")\n     (str \"O
ne for \" PLACEHOLDER-2 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (str \"One 
for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical (first PLACEHOLDER-2) nil)\n       \"you\"\n       (first PLACEHOLDER-
2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical (first PLACEH
OLDER-2) nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (do print \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 
'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (do print (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (do print \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.
lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n   
  [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      \"One for you, one for me.\"\n      (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n nil)\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"
)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))
)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4\n      PLACEHOLDE
R-3\n      PLACEHOLDER-5\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One f
or %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4\n      PLACEHOLDER-3\n      PLACEHOLDER-5\n      (clojure.lang.RT/nth PLACEHOLDER-4 0 nil)]\n     (if PLACEHOLDER-5 (one-fer PLACEHOLDER-5) (one-fer \"you\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (def\n  -main\n  (fn*\
n   ([& PLACEHOLDER-3]\n    (println\n     (if\n      (first PLACEHOLDER-3)\n      (two-fer (first PLACEHOLDER-3))\n      (two-fer)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([P
LACEHOLDER-2]\n    (clojure.string/join\n     (concat \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (def\n  -main\n  (fn*\n   ([& PLACEHOLDER-3]\n    (println\n     (if\n      (first PLACEHOLDER-3)\n      (two-fer (first PLACEHOLDER-3))\n      (two-fer)))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n 
   :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sayit\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER-3))))\n (two-fer 
\"foo\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sayit\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (sayit \"you\")) ([PLACEHOLDER-3] (sayit PLACEHOLDER-3))))
\n (two-fer \"foo\")\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (s
tr \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLA
CEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACE
HOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\n" "((do\n  (clojure.c
ore/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (loop* [PLACEHOLDER-3 [1 2 3]] PLACEHOLDER-3))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer
)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (s
tr \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n       (if PLA
CEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (two-fer \"you\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two-fer
 \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.string/blank? PLACEHOLDER-2)\n     (two-fer \"you\")\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")))\n   ([] (two
-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (do str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require 'clojure.string))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (clojure.string/trim PLACEH
OLDER-2)\n      PLACEHOLDER-4\n      (if\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\n       \"you\"\n       PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require 'clojure.string))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n     
   clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (clojure.string/trim PLACEHOLDER-2)\n      PLACEHOLDER-4\n      (if\n       (clojure.lang.Util/equiv PLACEHOLDER-3 \"\")\n       \"you\"\n       PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\")))))\n nil)\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\
"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLAC
EHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     (str \"One for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 \", one fo
r me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     (str \"One for you, one for me.\")\n     (str \"One for \" PLACEHOLDER-2 \", on
e for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\"
)))))\n (two-fer \"Bardia\")\n (two-fer \"\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"\"))\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     
(str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n (two-fer \"Bardia\")\n (two-fer \"\")\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLAC
EHOLDER-3 \"you\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLA
CEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  fer-2\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3]\n    (if (empty? PLACEHOLDER-3) (fer-2 \"you\") (fer-
2 PLACEHOLDER-3)))\n   ([] (fer-2 \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  fer-2\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3]\n    (if (empty?
 PLACEHOLDER-3) (fer-2 \"you\") (fer-2 PLACEHOLDER-3)))\n   ([] (fer-2 \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fe
r)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n 
   :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\
"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLAC
EHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for %s, one for me.\" \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n
  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (format \"One for %s, one for me.\" \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (printf \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (printf \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (printf \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def format-str (fn* ([] \"One for %s, one for me.\")))\n (def\n  two-fer\n  (fn*\n   ([] (format (format-str) \"you\"))\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\n" "((do\n  (cl
ojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def format-str (fn* ([] \"One for %s, one for me.\")))\n (def\n  two-fer\n  (fn*\n   ([] (format (format-str) \"you\"))\n   ([PLACEHOLDER-2] (format (format-str) PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (format \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.res
etMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (format \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)
\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def two-fer (fn* ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) \"y
ou\")]\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [P
LACEHOLDER-3 (if PLACEHOLDER-2 (str/join PLACEHOLDER-2) \"you\")]\n     (format \"One for %s, one for me.\" PLACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n   
   (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n 
       'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if (str/blank? PLACEHOLDER-4) \"you\" PLACEHOLDER-4)\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      (first PLACEHOLDER-2)]\n     (if\n      (some? PLACEHO
LDER-4)\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\n      PLACEHOLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, on
e for me.\"\n      PLACEHOLDER-4\n      (first PLACEHOLDER-2)]\n     (if\n      (some? PLACEHOLDER-4)\n      (clojure.string/replace PLACEHOLDER-3 #\"you\" PLACEHOLDER-4)\n      PLACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     \"\"\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojur
e.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (clojure.string/join\n     \"\"\n     [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      (first PLACEHOLDER-2))\n     \", o
ne for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n      \"you\"\n      (first PLACEHOLDER-2))\n  
   \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (println \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\n (two-fer \"Bob\")\n (two-f
er \"Alice\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (println \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (do (print \"One for\" PLACEHOLDER-2) (print \", one for me.\\n\")))))\n (two-fer 
\"Bob\")\n (two-fer \"Alice\")\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDER-2))\n      PLACEHOLDER-2\n      \"you\")\n  
   \", one for me.\"))\n   ([] (two-fer \"\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if\n      (clojure.lang.Numbers/lt 0 (clojure.lang.RT/count PLACEHOLDER-2))\
n      PLACEHOLDER-2\n      \"you\")\n     \", one for me.\"))\n   ([] (two-fer \"\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\")))\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.
resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one for me.\")))\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")
))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\
n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-wrap\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-wrap \"you\"))\n   ([PLACEHOLDER-3] (two-fer-wrap 
PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-wrap\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer-wrap \"you\"))\n   ([PLACEHOLDER-3] (two-
fer-wrap PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-template\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (two-fer-template PLACEHOLDER-3))\n   ([] 
(two-fer-template \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer-template\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (two-fer-template PLA
CEHOLDER-3))\n   ([] (two-fer-template \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me
.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (first PLACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me
.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.r
esetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str \"One for \" (str PLACEHOLDER-2) \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n nil)\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (cl
ojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n nil)\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  build-two-fer-str\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (build-two-fer-str \"you\"))\n   ([PLACEHOLDER-3] (bui
ld-two-fer-str PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  build-two-fer-str\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (build-two-fer-str \"you\"))\n
   ([PLACEHOLDER-3] (build-two-fer-str PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\")))\n   ([] (t
wo-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\")))\
n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  createSentence\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (createSentence PLACEHOLDER-3))\n   ([] (cre
ateSentence \"you\"))))\n (two-fer/two-fer))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  createSentence\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-3] (createSe
ntence PLACEHOLDER-3))\n   ([] (createSentence \"you\"))))\n (two-fer/two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"You\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"You\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      \"One for %s, one for me.\"]\n   
  (if\n      (let*\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\n      PLACEHOLDER-3\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fe
r))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for you, one for me.\"\n      PLACEHOLDER-4\n      \"One for %s, one for me.\"]\n     (if\n      (let*\n       [PLACEHOLDER-5 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 (empty? PLACEHOLDER-2)))\n      PLACEHOLDER-3\n      (format PLACEHOLDER-4 PLACEHOLDER-2)))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))
One for bob, one for me.
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\"))))\n (println (two-fer \"bob\"))\n (println (two-fer)))\n
" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\"))))\n (println (two-fer \"bob\"))\n (println (two-fer)))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  msg\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\n" "((do\n  (clo
jure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  msg\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn* ([] (msg \"you\")) ([PLACEHOLDER-3] (msg PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))]\n     (str \"One f
or \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-4\n      (let*\n       [PLACEHOLDER-3 PLACEHOLDER-2]\n       (if PLACEHOLDER-3 PLACEHOLD
ER-3 \"you\"))]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n 
     (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if PLACEHOLDER-4 PLACEHOLDER-4 \"you\")\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def foo :bar))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def foo :bar))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\n     \", one f
or me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 (first PLACEHOLDER-2)]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\n     \", o
ne for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n   
  \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0)\n     (str \"One for \" (first PLACEHOLDER-
2) \", one for me.\")\n     \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (not= PLACEHOLDER-2 nil)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you, one for me.\"))))))\n" "((do\
n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (not= PLACEHOLDER-2 nil)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you, one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n     (if\n      PLACEHOLDER-3\n      (let*\n   
    [PLACEHOLDER-4 PLACEHOLDER-3]\n       (str \"One for you, one for me.\"))\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-
2]\n    (let*\n     [PLACEHOLDER-3 (clojure.lang.Util/identical PLACEHOLDER-2 nil)]\n     (if\n      PLACEHOLDER-3\n      (let*\n       [PLACEHOLDER-4 PLACEHOLDER-3]\n       (str \"One for you, one for me.\"))\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     PLACEHOLDER-2\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n     \"One for you, one for me.\")))))\n" "((do\n  (clo
jure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     PLACEHOLDER-2\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\")\n     \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identica
l PLACEHOLDER-2 nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))
\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n       \"you\"\n       (first PLACEHOLDER-2))]\n     (str/join [\"One for \" PLACEHOLDER-3 \", one for me.\"]))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (let*\n      [PLACEH
OLDER-6\n       (let*\n        [PLACEHOLDER-5 PLACEHOLDER-4]\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([
& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (let*\n      [PLACEHOLDER-6\n       (let*\n        [PLACEHOLDER-5 PLACEHOLDER-4]\n        (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))]\n      (format \"One for %s, one for me.\" PLACEHOLDER-6)))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n" "((do\n 
 (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (do\n     (if\n      (string? PLACEHOLDER-2)\n      nil\n      (throw\n       (new\n        java.lang.Asserti
onError\n        (clojure.core/str\n         \"Assert failed: \"\n         (clojure.core/pr-str '(string? name))))))\n     (if\n      (empty? PLACEHOLDER-2)\n      (two-fer)\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n    
    'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (do\n     (if\n      (string? PLACEHOLDER-2)\n      nil\n      (throw\n       (new\n        java.lang.AssertionError\n        (clojure.core/str\n         \"Assert failed: \"\n         (clojure.core/pr-str '(string? name))))))\n     (if\n      (empty? PLACEHOLDER-2)\n      (two-fer)\n      (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n 
   :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\"))\n 
    \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (str\n     \"One for \"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLD
ER-3 \"you\"))\n     \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEH
OLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\
" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for\"\n      PLACEHOLDER-4\n      (clojure.string/join \"\" [PLACEHOLDER-2 \",\"
])\n      PLACEHOLDER-5\n      \"one for me.\"]\n     (clojure.string/join\n      \" \"\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACE
HOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      \"One for\"\n      PLACEHOLDER-4\n      (clojure.string/join \"\" [PLACEHOLDER-2 \",\"])\n      PLACEHOLDER-5\n      \"one for me.\"]\n     (clojure.string/join\n      \" \"\n      [PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n
   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for\" \\space PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\n"
 "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (format\n     \"One for %s, one for me.\"\n     (let*\n      [PLACEHOLDER-3 PLACEHOLDER-2]\n      (if PLACEHOLDER-3 PLACEHOLDER-3 \"you\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACE
HOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n 
 (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for\" \" \" PLACEHOLDER-2 \", \" \"one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One
 for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-
3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (format\n      \"One for %s, one for me.\"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACE
HOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \", one 
for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer nil))\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3 (if (empty? PLACEHOLDER-2) \"you\" PLACEHOLDER-2)]\n     (str \"One for \" PLACEHOLDER-3 \"
, one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n" "((d
o\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (clojure.string/replace\n     \"One for you, 
one for me.\"\n     #\"you\"\n     PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (
clojure.string/replace\n     \"One for you, one for me.\"\n     #\"you\"\n     PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\n     (format \"One for %s, one for me.\" PLACEH
OLDER-3))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (apply str PLACEHOLDER-2))]\n     (format \"One for %s, one for me.\" PL
ACEHOLDER-3))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sentence\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (string/join \", \" PLACEHOLDER-2)\
n      PLACEHOLDER-4\n      (clojure.core/seq PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.core/first PLACEHOLDER-4)\n      PLACEHOLDER-6\n      (clojure.core/next PLACEHOLDER-4)\n      PLACEHOLDER-7\n      PLACEHOLDER-5\n      PLACEHOLDER-8\n      PLACEHOLDER-6]\n     (str\n      (string/upper-case PLACEHOLDER-7)\n      (apply str PLACEHOLDER-8)\n      \".\")))))\n (def\n  one-fer\n  (fn*\n   ([] (one-fer \"me\"))\n   ([PLACEHOLDER-9] (string/join \" \" [\"one for\" PLACEHOLDER-9]))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\n (def\n  two-fer-unflexible\n  (fn*\n   ([] (two-fer-unflexible \"you\"))\n   ([PLACEHOLDER-11] (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (cl
ojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as string]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  sentence\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (string/join \", \" PLACEHOLDER-2)\n      PLACEHOLDER-4\n      (clojure.core/seq PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.core/first PLACEHOLDER-4)\n      PLACEHOLDER-6\n      (clojure.core/next PLACEHOLDER-4)\n      PLACEHOLDER-7\n      PLACEHOLDER-5\n      PLACEHOLDER-8\n      PLA
CEHOLDER-6]\n     (str\n      (string/upper-case PLACEHOLDER-7)\n      (apply str PLACEHOLDER-8)\n      \".\")))))\n (def\n  one-fer\n  (fn*\n   ([] (one-fer \"me\"))\n   ([PLACEHOLDER-9] (string/join \" \" [\"one for\" PLACEHOLDER-9]))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-10] (sentence (one-fer PLACEHOLDER-10) (one-fer)))))\n (def\n  two-fer-unflexible\n  (fn*\n   ([] (two-fer-unflexible \"you\"))\n   ([PLACEHOLDER-11]\n    (str \"One for \" PLACEHOLDER-11 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lan
g.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   
(clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \", and one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-for\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn* ([] (one-for \"you\")) ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\n" "
((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  one-for\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (def\n  two-fer\n  (fn*\n   ([] (one-for \"you\"))\n   ([PLACEHOLDER-3] (one-for PLACEHOLDER-3)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" PLACEHOLDER-2 \",
 one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (str \"One for \" PLACEH
OLDER-2 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACE
HOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (let*\n       [PLACEHOLDER-5 PLACEHOLDER-4]\n       (if PLACEHOLDER-5 PLACEHOLDER-5 \"you\"))\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.
lang.Util/identical PLACEHOLDER-4 nil)\n      (str \"One for you, one for me\")\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     
[PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (if\n      (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n      (str \"One for you, one for me\")\n      (str \"One for \" PLACEHOLDER-4 \", one for me\")))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  get-name\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/identical PLACEHOLDER-2 nil)\n     \"you\"\n     (first PLACEHOLDER-2)))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOL
DER-3]\n    (let*\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  get-name\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (clojure.lang.Util/
identical PLACEHOLDER-2 nil)\n     \"you\"\n     (first PLACEHOLDER-2)))))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-3]\n    (let*\n     [PLACEHOLDER-4 (get-name PLACEHOLDER-3)]\n     (str \"One for \" PLACEHOLDER-4 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer \"Bob\"))\n" "((do\n  (clojure.core/in-ns '
two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (two-fer \"Bob\"))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one for me.\"\n     (str \"One for \" (
first PLACEHOLDER-2) \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one 
for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one for me.\"\n     (str \"One for \" (
first PLACEHOLDER-2) \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (clojure.lang.Numbers/isZero\n      (clojure.lang.RT/count PLACEHOLDER-2))\n     \"One for you, one 
for me.\"\n     (str \"One for \" (first PLACEHOLDER-2) \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (two-fer \"Bob\")\n (two-fer))\n" "((do\n  (clojure.core/in-ns 'two-f
er)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))))\n (two-fer \"Bob\")\n (two-fer))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.l
ang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.r
esetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (apply str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (if\n       (clojure.core/seq? PLACEHOLDER-3)\n       (clojure.lang.P
ersistentHashMap/create\n        (clojure.core/seq PLACEHOLDER-3))\n       PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'tw
o-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (if\n       (clojure.core/seq? PLACEHOLDER-3)\n       (clojure.lang.PersistentHashMap/create\n        (clojure.core/seq PLACEHOLDER-3))\n       PLACEHOLDER-3)\n      PLACEHOLDER-5\n      (clojure.lang.RT/get PLACEHOLDER-4 :name \"you\")]\n     (str \"One for \" PLACEHOLDER-5 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, one f
or me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2))\n   ([] \"One for you, on
e for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] (two-fer
 \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/require '[clojure.string :as str]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (str/join [\"One for \" PLACEHOLDER-2 \", one for me.\"]))\n   ([] (two
-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n 
   :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def two-fer (fn* ([PLACEHOLDER-2] nil))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (clojure.string/join\n      [\"One for \" (first PLACEHOLDER-2) \", one
 for me.\"]))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (if\n     (empty? PLACEHOLDER-2)\n     \"One for you, one for me.\"\n     (clojure.string/join\n      [\"One for \" (first PLACEHOLDER-2)
 \", one for me.\"]))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One fo
r \"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)\n      \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([& PLACEHOLDER-2]\n    (let*\n     [
PLACEHOLDER-3\n      PLACEHOLDER-2\n      PLACEHOLDER-4\n      (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)]\n     (str\n      \"One for \"\n      (if\n       (clojure.lang.Util/identical PLACEHOLDER-4 nil)\n       \"you\"\n       PLACEHOLDER-4)\n      \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  _two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (_two-fer \"you\"))\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLDER-
3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  _two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (_two-fer \"you\"))\n   ([PLACEHOLDER-3] (_two-fer PLACEHOLDER-3))
)))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fe
r)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))
One for you, one for me.

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (println (two-fer)))\n" "((do\n  (clojure.core/in-ns
 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (println (two-fer)))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetM
eta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (str \"One for you, one for me.\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (str PLACEHOLDER-2))]\n     (str \"One f
or \" PLACEHOLDER-3 \", one for me.\"))))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (let*\n     [PLACEHOLDER-3\n      (if (empty? PLACEHOLDER-2) \"you\" (str P
LACEHOLDER-2))]\n     (str \"One for \" PLACEHOLDER-3 \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] \"One for you, one for me.\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.re
setMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (str \"One for \" PLACEHOLDER-2 \",\" \" one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/use '[clojure.string :only (blank?)]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one
 for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (do\n        (clojure.core/refer 'clojure.core)\n        (clojure.core/use '[clojure.string :only (blank?)]))\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \
", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))\n   ([] (two-fer \"you\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\n   ([] \"One for you, one for me\"))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (
clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for\" PLACEHOLDER-2 \", one for me\"))\n   ([] \"One for you, one for me\"))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (true? PLACEHOLDER-2)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you\" \", one for me.\"))))))\n" "((d
o\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([PLACEHOLDER-2]\n    (if\n     (true? PLACEHOLDER-2)\n     (str \"One for \" PLACEHOLDER-2 \", one for me.\")\n     (str \"One for you\" \", one for me.\"))))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.
lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\")))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2] (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n 
  (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  two-fer\n  (fn*\n   ([] \"One for you, one for me.\")\n   ([PLACEHOLDER-2]\n    (format \"One for %s, one for me.\" PLACEHOLDER-2)))))\n"))

FAIL in (twofers-test) (NO_SOURCE_FILE:32)
500 twofers
expected: (= (remove-path representation) (remove-path expected))
  actual: (not (= "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  manipulate-string\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-3] (manipulate-st
ring PLACEHOLDER-3)))))\n" "((do\n  (clojure.core/in-ns 'two-fer)\n  (.resetMeta\n   (clojure.lang.Namespace/find 'two-fer)\n   {:file\n    \"\",\n    :line 1,\n    :column 5,\n    :end-line 1,\n    :end-column 12})\n  ((fn*\n    PLACEHOLDER-1\n    ([]\n     (do\n      (clojure.lang.Var/pushThreadBindings\n       #:clojure.lang.Compiler{LOADER\n                               (.getClassLoader\n                                (.getClass PLACEHOLDER-1))})\n      (try\n       (clojure.core/refer 'clojure.core)\n       (finally (clojure.lang.Var/popThreadBindings)))))))\n  (if\n   (.equals 'two-fer 'clojure.core)\n   nil\n   (do\n    (clojure.lang.LockingTransaction/runInTransaction\n     (fn*\n      ([]\n       (clojure.core/commute\n        @#'clojure.core/*loaded-libs*\n        clojure.core/conj\n        'two-fer))))\n    nil)))\n (def\n  manipulate-string\n  (fn*\n   ([PLACEHOLDER-2] (str \"One for \" PLACEHOLDER-2 \", one for me.\"))))\n (def\n  two-fer\n  (fn*\n   ([] (two-fer \"you\"))\n   ([PLACEHOLDER-3] 
(manipulate-string PLACEHOLDER-3)))))\n"))

Ran 1 tests containing 501 assertions.
499 failures, 0 errors.
{:test 1, :pass 2, :fail 499, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
#'clojure-representer-test/remove-path
clj꞉clojure-representer-test꞉> 

Testing clojure-representer-test
One for Bob, one for me.
One for Alice, one for me.
One for you, one for me.
One for bob, one for me.
One for you, one for me.
One for you, one for me.

Ran 1 tests containing 501 assertions.
0 failures, 0 errors.
{:test 1, :pass 501, :fail 0, :error 0, :type :summary}
clj꞉clojure-representer-test꞉> 
; nREPL Connection was closed
; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉clojure-representer꞉> 
"(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n  )\n"
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Execution error (ClassCastException) at analyzer.jvm/macroexpand-1 (jvm.clj:176).
; class java.lang.Character cannot be cast to class java.lang.String (java.lang.Character and java.lang.String are in module java.base of loader 'bootstrap')
clj꞉clojure-representer꞉> 
{:ret
 {:children [:test :then :else],
  :else
  {:op :do,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :form
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil),
   :statements
   [{:args
     [{:children [:methods],
       :op :fn,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns two-fer,
        :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
       :o-tag clojure.lang.AFunction,
       :variadic? false,
       :methods
       [{:children [:params :body],
         :loop-id loop_12512,
         :arglist [],
         :params [],
         :fixed-arity 0,
         :op :fn-method,
         :env
         {:context :ctx/expr,
          :locals {},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false},
         :o-tag java.lang.Object,
         :variadic? false,
         :form ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)),
         :tag java.lang.Object,
         :body
         {:args
          [{:op :invoke,
            :form @#'clojure.core/*loaded-libs*,
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_12512,
             :loop-locals 0},
            :fn
            {:op :var,
             :assignable? false,
             :var #'clojure.core/deref,
             :meta
             {:added "1.0",
              :ns #namespace[clojure.core],
              :name deref,
              :file "clojure/core.clj",
              :static true,
              :column 1,
              :line 2323,
              :arglists ([ref] [ref timeout-ms timeout-val]),
              :doc
              "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?."},
             :env
             {:context :ctx/expr,
              :locals {},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_12512,
              :loop-locals 0},
             :form clojure.core/deref,
             :o-tag java.lang.Object,
             :arglists ([ref] [ref timeout-ms timeout-val])},
            :args
            [{:op :the-var,
              :env
              {:context :ctx/expr,
               :locals {},
               :ns two-fer,
               :file "/home/bob/clojure-representer/src/clojure_representer.clj",
               :once false,
               :loop-id loop_12512,
               :loop-locals 0},
              :form #'clojure.core/*loaded-libs*,
              :var #'clojure.core/*loaded-libs*,
              :o-tag clojure.lang.Var,
              :tag clojure.lang.Var}],
            :children [:fn :args],
            :o-tag java.lang.Object}
           {:op :var,
            :assignable? false,
            :var #'clojure.core/conj,
            :meta
            {:added "1.0",
             :ns #namespace[clojure.core],
             :name conj,
             :file "clojure/core.clj",
             :static true,
             :column 1,
             :line 75,
             :arglists ([] [coll] [coll x] [coll x & xs]),
             :doc
             "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).\n    (conj coll) returns coll. (conj) returns [].\n    The 'addition' may happen at different 'places' depending\n    on the concrete type."},
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_12512,
             :loop-locals 0},
            :form clojure.core/conj,
            :o-tag java.lang.Object,
            :arglists ([] [coll] [coll x] [coll x & xs])}
           {:op :quote,
            :expr
            {:op :const,
             :env
             {:context :ctx/expr,
              :locals {},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_12512,
              :loop-locals 0},
             :type :symbol,
             :literal? true,
             :val two-fer,
             :form two-fer,
             :o-tag clojure.lang.Symbol,
             :tag clojure.lang.Symbol},
            :form 'two-fer,
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_12512,
             :loop-locals 0},
            :literal? true,
            :children [:expr],
            :tag clojure.lang.Symbol,
            :o-tag clojure.lang.Symbol}],
          :children [:fn :args],
          :body? true,
          :fn
          {:op :var,
           :assignable? false,
           :var #'clojure.core/commute,
           :meta
           {:added "1.0",
            :ns #namespace[clojure.core],
            :name commute,
            :file "clojure/core.clj",
            :static true,
            :column 1,
            :line 2439,
            :arglists ([ref fun & args]),
            :doc
            "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set."},
           :env
           {:context :ctx/expr,
            :locals {},
            :ns two-fer,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :once false,
            :loop-id loop_12512,
            :loop-locals 0},
           :form clojure.core/commute,
           :o-tag java.lang.Object,
           :arglists ([ref fun & args])},
          :op :invoke,
          :env
          {:context :ctx/return,
           :locals {},
           :ns two-fer,
           :file "/home/bob/clojure-representer/src/clojure_representer.clj",
           :once false,
           :loop-id loop_12512,
           :loop-locals 0},
          :o-tag java.lang.Object,
          :form (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer),
          :raw-forms ((do (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}}],
       :once false,
       :max-fixed-arity 0,
       :form (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))),
       :tag java.util.concurrent.Callable,
       :arglists ([]),
       :raw-forms
       ((clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
     :children [:args],
     :method runInTransaction,
     :op :static-call,
     :env
     {:context :ctx/statement,
      :locals {},
      :ns two-fer,
      :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :o-tag java.lang.Object,
     :class clojure.lang.LockingTransaction,
     :form
     (.
      clojure.lang.LockingTransaction
      (clojure.core/runInTransaction
       (clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))),
     :tag java.lang.Object,
     :validated? true,
     :raw-forms
     ((clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))
      (clojure.core/sync nil (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
   :ret
   {:op :const,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :type :nil,
    :literal? true,
    :val nil,
    :form nil,
    :o-tag nil,
    :tag nil},
   :children [:statements :ret],
   :tag nil,
   :o-tag nil},
  :op :if,
  :env
  {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
  :o-tag nil,
  :result nil,
  :top-level true,
  :then
  {:op :const,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :type :nil,
   :literal? true,
   :val nil,
   :form nil,
   :o-tag nil,
   :tag nil},
  :form
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil)),
  :test
  {:args
   [{:op :quote,
     :expr
     {:op :const,
      :env
      {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
      :type :symbol,
      :literal? true,
      :val clojure.core,
      :form clojure.core,
      :o-tag clojure.lang.Symbol,
      :tag clojure.lang.Symbol},
     :form 'clojure.core,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :literal? true,
     :children [:expr],
     :tag java.lang.Object,
     :o-tag clojure.lang.Symbol}],
   :children [:instance :args],
   :instance
   {:op :quote,
    :expr
    {:op :const,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :type :symbol,
     :literal? true,
     :val two-fer,
     :form two-fer,
     :o-tag clojure.lang.Symbol,
     :tag clojure.lang.Symbol},
    :form 'two-fer,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :literal? true,
    :children [:expr],
    :tag clojure.lang.Symbol,
    :o-tag clojure.lang.Symbol},
   :method equals,
   :op :instance-call,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag boolean,
   :class clojure.lang.Symbol,
   :form (. 'two-fer (equals 'clojure.core)),
   :tag boolean,
   :validated? true,
   :raw-forms ((.equals 'two-fer 'clojure.core))},
  :raw-forms nil},
 :children [:statements :ret],
 :op :do,
 :env
 {:context :ctx/expr,
  :locals {},
  :ns clojure-representer,
  :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
 :result nil,
 :top-level true,
 :form
 (do
  (clojure.core/in-ns 'two-fer)
  (clojure.core/with-loading-context (clojure.core/refer 'clojure.core))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil))),
 :statements
 [{:args
   [{:op :quote,
     :expr
     {:op :const,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns clojure-representer,
       :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
      :type :symbol,
      :literal? true,
      :val two-fer,
      :form two-fer,
      :o-tag clojure.lang.Symbol,
      :tag clojure.lang.Symbol},
     :form 'two-fer,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns clojure-representer,
      :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :literal? true,
     :children [:expr],
     :tag clojure.lang.Symbol,
     :o-tag clojure.lang.Symbol}],
   :children [:fn :args],
   :fn
   {:op :var,
    :assignable? false,
    :var #'clojure.core/in-ns,
    :meta
    {:doc "Sets *ns* to the namespace named by the symbol, creating it if needed.",
     :arglists ([name]),
     :name in-ns,
     :ns #namespace[clojure.core],
     :added "1.0"},
    :env
    {:context :ctx/expr,
     :locals {},
     :ns clojure-representer,
     :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :form clojure.core/in-ns,
    :o-tag java.lang.Object,
    :arglists ([name])},
   :op :invoke,
   :env
   {:context :ctx/statement,
    :locals {},
    :ns clojure-representer,
    :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag java.lang.Object,
   :result #namespace[two-fer],
   :top-level true,
   :form (clojure.core/in-ns 'two-fer),
   :raw-forms nil}
  {:args [],
   :children [:fn :args],
   :fn
   {:children [:local :methods],
    :op :fn,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :o-tag clojure.lang.AFunction,
    :variadic? false,
    :methods
    [{:children [:params :body],
      :loop-id loop_12507,
      :arglist [],
      :params [],
      :fixed-arity 0,
      :op :fn-method,
      :env
      {:context :ctx/expr,
       :locals
       {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
       :ns two-fer,
       :file "/home/bob/clojure-representer/src/clojure_representer.clj",
       :once false},
      :o-tag java.lang.Object,
      :variadic? false,
      :form
      ([]
       (.
        clojure.lang.Var
        (clojure.core/pushThreadBindings
         #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
       (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
      :tag java.lang.Object,
      :body
      {:op :do,
       :env
       {:context :ctx/return,
        :locals
        {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
        :ns two-fer,
        :file "/home/bob/clojure-representer/src/clojure_representer.clj",
        :once false,
        :loop-id loop_12507,
        :loop-locals 0},
       :form
       (do
        (.
         clojure.lang.Var
         (clojure.core/pushThreadBindings
          #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
        (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
       :statements
       [{:args
         [{:op :map,
           :env
           {:context :ctx/expr,
            :locals
            {loading__6789__auto__
             {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
            :ns two-fer,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :once false,
            :loop-id loop_12507,
            :loop-locals 0},
           :keys
           [{:field LOADER,
             :op :static-field,
             :env
             {:context :ctx/expr,
              :locals
              {loading__6789__auto__
               {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_12507,
              :loop-locals 0},
             :o-tag clojure.lang.Var,
             :class clojure.lang.Compiler,
             :form (. clojure.lang.Compiler -LOADER),
             :tag clojure.lang.Var,
             :assignable? false,
             :raw-forms (clojure.lang.Compiler/LOADER)}],
           :vals
           [{:args [],
             :children [:instance],
             :instance
             {:args [],
              :children [:instance],
              :instance
              {:children [],
               :name PLACEHOLDER-1,
               :op :local,
               :env
               {:context :ctx/expr,
                :locals
                {loading__6789__auto__
                 {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
                :ns two-fer,
                :file "/home/bob/clojure-representer/src/clojure_representer.clj",
                :once false,
                :loop-id loop_12507,
                :loop-locals 0},
               :o-tag clojure.lang.AFunction,
               :form loading__6789__auto__,
               :tag java.lang.Object,
               :atom #<Atom@798aa345: {:tag clojure.lang.AFunction}>,
               :local :fn,
               :assignable? false},
              :method getClass,
              :op :instance-call,
              :env
              {:context :ctx/expr,
               :locals
               {loading__6789__auto__
                {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
               :ns two-fer,
               :file "/home/bob/clojure-representer/src/clojure_representer.clj",
               :once false,
               :loop-id loop_12507,
               :loop-locals 0},
              :o-tag java.lang.Class,
              :m-or-f getClass,
              :class java.lang.Object,
              :form (. loading__6789__auto__ getClass),
              :tag java.lang.Class,
              :validated? true,
              :raw-forms ((.getClass loading__6789__auto__))},
             :method getClassLoader,
             :op :instance-call,
             :env
             {:context :ctx/expr,
              :locals
              {loading__6789__auto__
               {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_12507,
              :loop-locals 0},
             :o-tag java.lang.ClassLoader,
             :m-or-f getClassLoader,
             :class java.lang.Class,
             :form (. (.getClass loading__6789__auto__) getClassLoader),
             :tag java.lang.ClassLoader,
             :validated? true,
             :raw-forms ((.getClassLoader (.getClass loading__6789__auto__)))}],
           :form #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))},
           :children [:keys :vals],
           :o-tag clojure.lang.PersistentHashMap,
           :tag clojure.lang.Associative}],
         :children [:args],
         :method pushThreadBindings,
         :op :static-call,
         :env
         {:context :ctx/statement,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false,
          :loop-id loop_12507,
          :loop-locals 0},
         :o-tag void,
         :class clojure.lang.Var,
         :form
         (.
          clojure.lang.Var
          (clojure.core/pushThreadBindings
           #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))})),
         :tag void,
         :validated? true}],
       :ret
       {:op :try,
        :env
        {:context :ctx/return,
         :locals
         {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
         :ns two-fer,
         :file "/home/bob/clojure-representer/src/clojure_representer.clj",
         :once false,
         :loop-id loop_12507,
         :loop-locals 0},
        :form (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))),
        :body
        {:args
         [{:op :quote,
           :expr
           {:op :const,
            :env
            {:no-recur true,
             :loop-locals 0,
             :locals
             {loading__6789__auto__
              {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
             :ns two-fer,
             :loop-id loop_12507,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :in-try true,
             :once false,
             :context :ctx/expr},
            :type :symbol,
            :literal? true,
            :val clojure.core,
            :form clojure.core,
            :o-tag clojure.lang.Symbol,
            :tag clojure.lang.Symbol},
           :form 'clojure.core,
           :env
           {:no-recur true,
            :loop-locals 0,
            :locals
            {loading__6789__auto__
             {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
            :ns two-fer,
            :loop-id loop_12507,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :in-try true,
            :once false,
            :context :ctx/expr},
           :literal? true,
           :children [:expr],
           :tag clojure.lang.Symbol,
           :o-tag clojure.lang.Symbol}],
         :children [:fn :args],
         :body? true,
         :fn
         {:op :var,
          :assignable? false,
          :var #'clojure.core/refer,
          :meta
          {:arglists ([ns-sym & filters]),
           :doc
           "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.",
           :added "1.0",
           :line 4218,
           :column 1,
           :file "clojure/core.clj",
           :name refer,
           :ns #namespace[clojure.core]},
          :env
          {:no-recur true,
           :loop-locals 0,
           :locals
           {loading__6789__auto__
            {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
           :ns two-fer,
           :loop-id loop_12507,
           :file "/home/bob/clojure-representer/src/clojure_representer.clj",
           :in-try true,
           :once false,
           :context :ctx/expr},
          :form clojure.core/refer,
          :o-tag java.lang.Object,
          :arglists ([ns-sym & filters])},
         :op :invoke,
         :env
         {:no-recur true,
          :loop-locals 0,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :loop-id loop_12507,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :in-try true,
          :once false,
          :context :ctx/return},
         :o-tag java.lang.Object,
         :form (clojure.core/refer 'clojure.core),
         :raw-forms ((do (clojure.core/refer 'clojure.core)))},
        :catches [],
        :finally
        {:args [],
         :children [:args],
         :body? true,
         :method popThreadBindings,
         :op :static-call,
         :env
         {:context :ctx/statement,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false,
          :loop-id loop_12507,
          :loop-locals 0,
          :no-recur true},
         :o-tag void,
         :class clojure.lang.Var,
         :form (. clojure.lang.Var (clojure.core/popThreadBindings)),
         :tag void,
         :validated? true,
         :raw-forms ((do (. clojure.lang.Var (clojure.core/popThreadBindings))))},
        :children [:body :catches :finally],
        :o-tag nil},
       :children [:statements :ret],
       :body? true,
       :o-tag nil},
      :local {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}}],
    :once false,
    :max-fixed-arity 0,
    :form
    (fn*
     loading__6789__auto__
     ([]
      (.
       clojure.lang.Var
       (clojure.core/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
      (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
    :tag clojure.lang.AFunction,
    :arglists ([]),
    :local
    {:op :binding,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :form loading__6789__auto__,
     :local :fn,
     :name PLACEHOLDER-1,
     :atom #<Atom@798aa345: {:tag clojure.lang.AFunction}>,
     :tag clojure.lang.AFunction,
     :o-tag clojure.lang.AFunction},
    :raw-forms
    ((clojure.core/fn
      loading__6789__auto__
      []
      (.
       clojure.lang.Var
       (clojure.core/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
      (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))))},
   :op :invoke,
   :env
   {:context :ctx/statement,
    :locals {},
    :ns two-fer,
    :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag java.lang.Object,
   :result nil,
   :top-level true,
   :form
   ((clojure.core/fn
     loading__6789__auto__
     []
     (.
      clojure.lang.Var
      (clojure.core/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
     (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
   :raw-forms ((clojure.core/with-loading-context (clojure.core/refer 'clojure.core)))}],
 :raw-forms ((ns two-fer))}
clj꞉two-fer꞉> 
; Execution error (AssertionError) at analyzer.jvm/analyze-ns (jvm.clj:596).
; Assert failed: Can't find (ns two-fer) in classpath
res
clj꞉clojure-representer꞉> 
#'two-fer/two-fer
clj꞉clojure-representer꞉> 
[{:ret
  {:children [:test :then :else],
   :else
   {:op :do,
    :env
    {:context :ctx/expr,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :form
    (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil),
    :statements
    [{:args
      [{:children [:methods],
        :op :fn,
        :env
        {:context :ctx/expr,
         :locals {},
         :ns two-fer,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 13,
         :column 1,
         :line 1,
         :end-line 1},
        :o-tag clojure.lang.AFunction,
        :variadic? false,
        :methods
        [{:children [:params :body],
          :loop-id loop_12545,
          :arglist [],
          :params [],
          :fixed-arity 0,
          :op :fn-method,
          :env
          {:locals {},
           :ns two-fer,
           :file "file:/home/bob/clojure-representer/src/two_fer.clj",
           :end-column 13,
           :column 1,
           :line 1,
           :once false,
           :end-line 1,
           :context :ctx/expr},
          :o-tag java.lang.Object,
          :variadic? false,
          :form ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)),
          :tag java.lang.Object,
          :body
          {:args
           [{:op :invoke,
             :form @#'clojure.core/*loaded-libs*,
             :env
             {:loop-locals 0,
              :locals {},
              :ns two-fer,
              :loop-id loop_12545,
              :file "file:/home/bob/clojure-representer/src/two_fer.clj",
              :end-column 13,
              :column 1,
              :line 1,
              :once false,
              :end-line 1,
              :context :ctx/expr},
             :fn
             {:op :var,
              :assignable? false,
              :var #'clojure.core/deref,
              :meta
              {:added "1.0",
               :ns #namespace[clojure.core],
               :name deref,
               :file "clojure/core.clj",
               :static true,
               :column 1,
               :line 2323,
               :arglists ([ref] [ref timeout-ms timeout-val]),
               :doc
               "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?."},
              :env
              {:loop-locals 0,
               :locals {},
               :ns two-fer,
               :loop-id loop_12545,
               :file "file:/home/bob/clojure-representer/src/two_fer.clj",
               :end-column 13,
               :column 1,
               :line 1,
               :once false,
               :end-line 1,
               :context :ctx/expr},
              :form clojure.core/deref,
              :o-tag java.lang.Object,
              :arglists ([ref] [ref timeout-ms timeout-val])},
             :args
             [{:op :the-var,
               :env
               {:loop-locals 0,
                :locals {},
                :ns two-fer,
                :loop-id loop_12545,
                :file "file:/home/bob/clojure-representer/src/two_fer.clj",
                :end-column 13,
                :column 1,
                :line 1,
                :once false,
                :end-line 1,
                :context :ctx/expr},
               :form #'clojure.core/*loaded-libs*,
               :var #'clojure.core/*loaded-libs*,
               :o-tag clojure.lang.Var,
               :tag clojure.lang.Var}],
             :children [:fn :args],
             :o-tag java.lang.Object}
            {:op :var,
             :assignable? false,
             :var #'clojure.core/conj,
             :meta
             {:added "1.0",
              :ns #namespace[clojure.core],
              :name conj,
              :file "clojure/core.clj",
              :static true,
              :column 1,
              :line 75,
              :arglists ([] [coll] [coll x] [coll x & xs]),
              :doc
              "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).\n    (conj coll) returns coll. (conj) returns [].\n    The 'addition' may happen at different 'places' depending\n    on the concrete type."},
             :env
             {:loop-locals 0,
              :locals {},
              :ns two-fer,
              :loop-id loop_12545,
              :file "file:/home/bob/clojure-representer/src/two_fer.clj",
              :end-column 13,
              :column 1,
              :line 1,
              :once false,
              :end-line 1,
              :context :ctx/expr},
             :form clojure.core/conj,
             :o-tag java.lang.Object,
             :arglists ([] [coll] [coll x] [coll x & xs])}
            {:op :quote,
             :expr
             {:children [:meta],
              :meta
              {:op :const,
               :env
               {:loop-locals 0,
                :locals {},
                :ns two-fer,
                :loop-id loop_12545,
                :file "file:/home/bob/clojure-representer/src/two_fer.clj",
                :end-column 12,
                :column 5,
                :line 1,
                :once false,
                :end-line 1,
                :context :ctx/expr},
               :type :map,
               :literal? true,
               :val
               {:file "file:/home/bob/clojure-representer/src/two_fer.clj",
                :line 1,
                :column 5,
                :end-line 1,
                :end-column 12},
               :form
               {:file "file:/home/bob/clojure-representer/src/two_fer.clj",
                :line 1,
                :column 5,
                :end-line 1,
                :end-column 12},
               :o-tag clojure.lang.PersistentArrayMap,
               :tag clojure.lang.PersistentArrayMap},
              :val two-fer,
              :type :symbol,
              :op :const,
              :env
              {:loop-locals 0,
               :locals {},
               :ns two-fer,
               :loop-id loop_12545,
               :file "file:/home/bob/clojure-representer/src/two_fer.clj",
               :end-column 12,
               :column 5,
               :line 1,
               :once false,
               :end-line 1,
               :context :ctx/expr},
              :o-tag clojure.lang.Symbol,
              :literal? true,
              :form two-fer,
              :tag clojure.lang.Symbol},
             :form 'two-fer,
             :env
             {:loop-locals 0,
              :locals {},
              :ns two-fer,
              :loop-id loop_12545,
              :file "file:/home/bob/clojure-representer/src/two_fer.clj",
              :end-column 13,
              :column 1,
              :line 1,
              :once false,
              :end-line 1,
              :context :ctx/expr},
             :literal? true,
             :children [:expr],
             :tag clojure.lang.Symbol,
             :o-tag clojure.lang.Symbol}],
           :children [:fn :args],
           :body? true,
           :fn
           {:op :var,
            :assignable? false,
            :var #'clojure.core/commute,
            :meta
            {:added "1.0",
             :ns #namespace[clojure.core],
             :name commute,
             :file "clojure/core.clj",
             :static true,
             :column 1,
             :line 2439,
             :arglists ([ref fun & args]),
             :doc
             "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set."},
            :env
            {:loop-locals 0,
             :locals {},
             :ns two-fer,
             :loop-id loop_12545,
             :file "file:/home/bob/clojure-representer/src/two_fer.clj",
             :end-column 13,
             :column 1,
             :line 1,
             :once false,
             :end-line 1,
             :context :ctx/expr},
            :form clojure.core/commute,
            :o-tag java.lang.Object,
            :arglists ([ref fun & args])},
           :op :invoke,
           :env
           {:loop-locals 0,
            :locals {},
            :ns two-fer,
            :loop-id loop_12545,
            :file "file:/home/bob/clojure-representer/src/two_fer.clj",
            :end-column 13,
            :column 1,
            :line 1,
            :once false,
            :end-line 1,
            :context :ctx/return},
           :o-tag java.lang.Object,
           :form (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer),
           :raw-forms ((do (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}}],
        :once false,
        :max-fixed-arity 0,
        :form (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))),
        :tag java.util.concurrent.Callable,
        :arglists ([]),
        :raw-forms
        ((clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
      :children [:args],
      :method runInTransaction,
      :op :static-call,
      :env
      {:context :ctx/statement,
       :locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 13,
       :column 1,
       :line 1,
       :end-line 1},
      :o-tag java.lang.Object,
      :class clojure.lang.LockingTransaction,
      :form
      (.
       clojure.lang.LockingTransaction
       (clojure.core/runInTransaction
        (clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))),
      :tag java.lang.Object,
      :validated? true,
      :raw-forms
      ((clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))
       (clojure.core/sync nil (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
    :ret
    {:op :const,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns two-fer,
      :file "file:/home/bob/clojure-representer/src/two_fer.clj",
      :end-column 13,
      :column 1,
      :line 1,
      :end-line 1},
     :type :nil,
     :literal? true,
     :val nil,
     :form nil,
     :o-tag nil,
     :tag nil},
    :children [:statements :ret],
    :tag nil,
    :o-tag nil},
   :op :if,
   :env
   {:context :ctx/expr,
    :locals {},
    :ns two-fer,
    :file "file:/home/bob/clojure-representer/src/two_fer.clj",
    :end-column 13,
    :column 1,
    :line 1,
    :end-line 1},
   :o-tag nil,
   :result nil,
   :top-level true,
   :then
   {:op :const,
    :env
    {:context :ctx/expr,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :type :nil,
    :literal? true,
    :val nil,
    :form nil,
    :o-tag nil,
    :tag nil},
   :form
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil)),
   :test
   {:args
    [{:op :quote,
      :expr
      {:op :const,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns two-fer,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 13,
        :column 1,
        :line 1,
        :end-line 1},
       :type :symbol,
       :literal? true,
       :val clojure.core,
       :form clojure.core,
       :o-tag clojure.lang.Symbol,
       :tag clojure.lang.Symbol},
      :form 'clojure.core,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 13,
       :column 1,
       :line 1,
       :end-line 1},
      :literal? true,
      :children [:expr],
      :tag java.lang.Object,
      :o-tag clojure.lang.Symbol}],
    :children [:instance :args],
    :instance
    {:op :quote,
     :expr
     {:children [:meta],
      :meta
      {:op :const,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns two-fer,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 12,
        :column 5,
        :line 1,
        :end-line 1},
       :type :map,
       :literal? true,
       :val
       {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
       :form
       {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
       :o-tag clojure.lang.PersistentArrayMap,
       :tag clojure.lang.PersistentArrayMap},
      :val two-fer,
      :type :symbol,
      :op :const,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 12,
       :column 5,
       :line 1,
       :end-line 1},
      :o-tag clojure.lang.Symbol,
      :literal? true,
      :form two-fer,
      :tag clojure.lang.Symbol},
     :form 'two-fer,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns two-fer,
      :file "file:/home/bob/clojure-representer/src/two_fer.clj",
      :end-column 13,
      :column 1,
      :line 1,
      :end-line 1},
     :literal? true,
     :children [:expr],
     :tag clojure.lang.Symbol,
     :o-tag clojure.lang.Symbol},
    :method equals,
    :op :instance-call,
    :env
    {:context :ctx/expr,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :o-tag boolean,
    :class clojure.lang.Symbol,
    :form (. 'two-fer (equals 'clojure.core)),
    :tag boolean,
    :validated? true,
    :raw-forms ((.equals 'two-fer 'clojure.core))},
   :raw-forms nil},
  :children [:statements :ret],
  :op :do,
  :env
  {:context :ctx/expr,
   :locals {},
   :ns clojure-representer,
   :file "file:/home/bob/clojure-representer/src/two_fer.clj",
   :end-column 13,
   :column 1,
   :line 1,
   :end-line 1},
  :result nil,
  :top-level true,
  :form
  (do
   (clojure.core/in-ns 'two-fer)
   (.resetMeta
    (clojure.lang.Namespace/find 'two-fer)
    {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12})
   (clojure.core/with-loading-context (clojure.core/refer 'clojure.core))
   (if
    (.equals 'two-fer 'clojure.core)
    nil
    (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil))),
  :statements
  [{:args
    [{:op :quote,
      :expr
      {:children [:meta],
       :meta
       {:op :const,
        :env
        {:context :ctx/expr,
         :locals {},
         :ns clojure-representer,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 12,
         :column 5,
         :line 1,
         :end-line 1},
        :type :map,
        :literal? true,
        :val
        {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
        :form
        {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
        :o-tag clojure.lang.PersistentArrayMap,
        :tag clojure.lang.PersistentArrayMap},
       :val two-fer,
       :type :symbol,
       :op :const,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns clojure-representer,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 12,
        :column 5,
        :line 1,
        :end-line 1},
       :o-tag clojure.lang.Symbol,
       :literal? true,
       :form two-fer,
       :tag clojure.lang.Symbol},
      :form 'two-fer,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns clojure-representer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 13,
       :column 1,
       :line 1,
       :end-line 1},
      :literal? true,
      :children [:expr],
      :tag clojure.lang.Symbol,
      :o-tag clojure.lang.Symbol}],
    :children [:fn :args],
    :fn
    {:op :var,
     :assignable? false,
     :var #'clojure.core/in-ns,
     :meta
     {:doc "Sets *ns* to the namespace named by the symbol, creating it if needed.",
      :arglists ([name]),
      :name in-ns,
      :ns #namespace[clojure.core],
      :added "1.0"},
     :env
     {:context :ctx/expr,
      :locals {},
      :ns clojure-representer,
      :file "file:/home/bob/clojure-representer/src/two_fer.clj",
      :end-column 13,
      :column 1,
      :line 1,
      :end-line 1},
     :form clojure.core/in-ns,
     :o-tag java.lang.Object,
     :arglists ([name])},
    :op :invoke,
    :env
    {:context :ctx/statement,
     :locals {},
     :ns clojure-representer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :o-tag java.lang.Object,
    :result #namespace[two-fer],
    :top-level true,
    :form (clojure.core/in-ns 'two-fer),
    :raw-forms nil}
   {:args
    [{:op :const,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 13,
       :column 1,
       :line 1,
       :end-line 1},
      :form
      {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
      :val
      {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
      :type :map,
      :literal? true,
      :o-tag clojure.lang.PersistentArrayMap,
      :tag clojure.lang.IPersistentMap}],
    :children [:instance :args],
    :instance
    {:args
     [{:op :quote,
       :expr
       {:children [:meta],
        :meta
        {:op :const,
         :env
         {:context :ctx/expr,
          :locals {},
          :ns two-fer,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 12,
          :column 5,
          :line 1,
          :end-line 1},
         :type :map,
         :literal? true,
         :val
         {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
         :form
         {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
         :o-tag clojure.lang.PersistentArrayMap,
         :tag clojure.lang.PersistentArrayMap},
        :val two-fer,
        :type :symbol,
        :op :const,
        :env
        {:context :ctx/expr,
         :locals {},
         :ns two-fer,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 12,
         :column 5,
         :line 1,
         :end-line 1},
        :o-tag clojure.lang.Symbol,
        :literal? true,
        :form two-fer,
        :tag clojure.lang.Symbol},
       :form 'two-fer,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns two-fer,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 13,
        :column 1,
        :line 1,
        :end-line 1},
       :literal? true,
       :children [:expr],
       :tag clojure.lang.Symbol,
       :o-tag clojure.lang.Symbol}],
     :children [:args],
     :method find,
     :op :static-call,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns two-fer,
      :file "file:/home/bob/clojure-representer/src/two_fer.clj",
      :end-column 13,
      :column 1,
      :line 1,
      :end-line 1},
     :o-tag clojure.lang.Namespace,
     :class clojure.lang.Namespace,
     :form (. clojure.lang.Namespace (find 'two-fer)),
     :tag clojure.lang.AReference,
     :validated? true,
     :raw-forms ((clojure.lang.Namespace/find 'two-fer))},
    :method resetMeta,
    :op :instance-call,
    :env
    {:context :ctx/statement,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :o-tag clojure.lang.IPersistentMap,
    :result
    {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12},
    :class clojure.lang.AReference,
    :top-level true,
    :form
    (.
     (clojure.lang.Namespace/find 'two-fer)
     (resetMeta
      {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12})),
    :tag clojure.lang.IPersistentMap,
    :validated? true,
    :raw-forms
    ((.resetMeta
      (clojure.lang.Namespace/find 'two-fer)
      {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}))}
   {:args [],
    :children [:fn :args],
    :fn
    {:children [:local :methods],
     :op :fn,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns two-fer,
      :file "file:/home/bob/clojure-representer/src/two_fer.clj",
      :end-column 13,
      :column 1,
      :line 1,
      :end-line 1},
     :o-tag clojure.lang.AFunction,
     :variadic? false,
     :methods
     [{:children [:params :body],
       :loop-id loop_12540,
       :arglist [],
       :params [],
       :fixed-arity 0,
       :op :fn-method,
       :env
       {:locals
        {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
        :ns two-fer,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 13,
        :column 1,
        :line 1,
        :once false,
        :end-line 1,
        :context :ctx/expr},
       :o-tag java.lang.Object,
       :variadic? false,
       :form
       ([]
        (.
         clojure.lang.Var
         (clojure.core/pushThreadBindings
          #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
        (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
       :tag java.lang.Object,
       :body
       {:op :do,
        :env
        {:loop-locals 0,
         :locals
         {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
         :ns two-fer,
         :loop-id loop_12540,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 13,
         :column 1,
         :line 1,
         :once false,
         :end-line 1,
         :context :ctx/return},
        :form
        (do
         (.
          clojure.lang.Var
          (clojure.core/pushThreadBindings
           #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
         (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
        :statements
        [{:args
          [{:op :map,
            :env
            {:loop-locals 0,
             :locals
             {loading__6789__auto__
              {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
             :ns two-fer,
             :loop-id loop_12540,
             :file "file:/home/bob/clojure-representer/src/two_fer.clj",
             :end-column 13,
             :column 1,
             :line 1,
             :once false,
             :end-line 1,
             :context :ctx/expr},
            :keys
            [{:field LOADER,
              :op :static-field,
              :env
              {:loop-locals 0,
               :locals
               {loading__6789__auto__
                {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
               :ns two-fer,
               :loop-id loop_12540,
               :file "file:/home/bob/clojure-representer/src/two_fer.clj",
               :end-column 13,
               :column 1,
               :line 1,
               :once false,
               :end-line 1,
               :context :ctx/expr},
              :o-tag clojure.lang.Var,
              :class clojure.lang.Compiler,
              :form (. clojure.lang.Compiler -LOADER),
              :tag clojure.lang.Var,
              :assignable? false,
              :raw-forms (clojure.lang.Compiler/LOADER)}],
            :vals
            [{:args [],
              :children [:instance],
              :instance
              {:args [],
               :children [:instance],
               :instance
               {:children [],
                :name PLACEHOLDER-2,
                :op :local,
                :env
                {:loop-locals 0,
                 :locals
                 {loading__6789__auto__
                  {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
                 :ns two-fer,
                 :loop-id loop_12540,
                 :file "file:/home/bob/clojure-representer/src/two_fer.clj",
                 :end-column 13,
                 :column 1,
                 :line 1,
                 :once false,
                 :end-line 1,
                 :context :ctx/expr},
                :o-tag clojure.lang.AFunction,
                :form loading__6789__auto__,
                :tag java.lang.Object,
                :atom #<Atom@1d686634: {:tag clojure.lang.AFunction}>,
                :local :fn,
                :assignable? false},
               :method getClass,
               :op :instance-call,
               :env
               {:loop-locals 0,
                :locals
                {loading__6789__auto__
                 {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
                :ns two-fer,
                :loop-id loop_12540,
                :file "file:/home/bob/clojure-representer/src/two_fer.clj",
                :end-column 13,
                :column 1,
                :line 1,
                :once false,
                :end-line 1,
                :context :ctx/expr},
               :o-tag java.lang.Class,
               :m-or-f getClass,
               :class java.lang.Object,
               :form (. loading__6789__auto__ getClass),
               :tag java.lang.Class,
               :validated? true,
               :raw-forms ((.getClass loading__6789__auto__))},
              :method getClassLoader,
              :op :instance-call,
              :env
              {:loop-locals 0,
               :locals
               {loading__6789__auto__
                {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
               :ns two-fer,
               :loop-id loop_12540,
               :file "file:/home/bob/clojure-representer/src/two_fer.clj",
               :end-column 13,
               :column 1,
               :line 1,
               :once false,
               :end-line 1,
               :context :ctx/expr},
              :o-tag java.lang.ClassLoader,
              :m-or-f getClassLoader,
              :class java.lang.Class,
              :form (. (.getClass loading__6789__auto__) getClassLoader),
              :tag java.lang.ClassLoader,
              :validated? true,
              :raw-forms ((.getClassLoader (.getClass loading__6789__auto__)))}],
            :form #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))},
            :children [:keys :vals],
            :o-tag clojure.lang.PersistentHashMap,
            :tag clojure.lang.Associative}],
          :children [:args],
          :method pushThreadBindings,
          :op :static-call,
          :env
          {:loop-locals 0,
           :locals
           {loading__6789__auto__
            {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
           :ns two-fer,
           :loop-id loop_12540,
           :file "file:/home/bob/clojure-representer/src/two_fer.clj",
           :end-column 13,
           :column 1,
           :line 1,
           :once false,
           :end-line 1,
           :context :ctx/statement},
          :o-tag void,
          :class clojure.lang.Var,
          :form
          (.
           clojure.lang.Var
           (clojure.core/pushThreadBindings
            #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))})),
          :tag void,
          :validated? true}],
        :ret
        {:op :try,
         :env
         {:loop-locals 0,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :loop-id loop_12540,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 13,
          :column 1,
          :line 1,
          :once false,
          :end-line 1,
          :context :ctx/return},
         :form
         (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))),
         :body
         {:args
          [{:op :quote,
            :expr
            {:op :const,
             :env
             {:no-recur true,
              :loop-locals 0,
              :locals
              {loading__6789__auto__
               {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
              :ns two-fer,
              :loop-id loop_12540,
              :file "file:/home/bob/clojure-representer/src/two_fer.clj",
              :end-column 13,
              :column 1,
              :in-try true,
              :line 1,
              :once false,
              :end-line 1,
              :context :ctx/expr},
             :type :symbol,
             :literal? true,
             :val clojure.core,
             :form clojure.core,
             :o-tag clojure.lang.Symbol,
             :tag clojure.lang.Symbol},
            :form 'clojure.core,
            :env
            {:no-recur true,
             :loop-locals 0,
             :locals
             {loading__6789__auto__
              {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
             :ns two-fer,
             :loop-id loop_12540,
             :file "file:/home/bob/clojure-representer/src/two_fer.clj",
             :end-column 13,
             :column 1,
             :in-try true,
             :line 1,
             :once false,
             :end-line 1,
             :context :ctx/expr},
            :literal? true,
            :children [:expr],
            :tag clojure.lang.Symbol,
            :o-tag clojure.lang.Symbol}],
          :children [:fn :args],
          :body? true,
          :fn
          {:op :var,
           :assignable? false,
           :var #'clojure.core/refer,
           :meta
           {:arglists ([ns-sym & filters]),
            :doc
            "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.",
            :added "1.0",
            :line 4218,
            :column 1,
            :file "clojure/core.clj",
            :name refer,
            :ns #namespace[clojure.core]},
           :env
           {:no-recur true,
            :loop-locals 0,
            :locals
            {loading__6789__auto__
             {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
            :ns two-fer,
            :loop-id loop_12540,
            :file "file:/home/bob/clojure-representer/src/two_fer.clj",
            :end-column 13,
            :column 1,
            :in-try true,
            :line 1,
            :once false,
            :end-line 1,
            :context :ctx/expr},
           :form clojure.core/refer,
           :o-tag java.lang.Object,
           :arglists ([ns-sym & filters])},
          :op :invoke,
          :env
          {:no-recur true,
           :loop-locals 0,
           :locals
           {loading__6789__auto__
            {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
           :ns two-fer,
           :loop-id loop_12540,
           :file "file:/home/bob/clojure-representer/src/two_fer.clj",
           :end-column 13,
           :column 1,
           :in-try true,
           :line 1,
           :once false,
           :end-line 1,
           :context :ctx/return},
          :o-tag java.lang.Object,
          :form (clojure.core/refer 'clojure.core),
          :raw-forms ((do (clojure.core/refer 'clojure.core)))},
         :catches [],
         :finally
         {:args [],
          :children [:args],
          :body? true,
          :method popThreadBindings,
          :op :static-call,
          :env
          {:no-recur true,
           :loop-locals 0,
           :locals
           {loading__6789__auto__
            {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
           :ns two-fer,
           :loop-id loop_12540,
           :file "file:/home/bob/clojure-representer/src/two_fer.clj",
           :end-column 13,
           :column 1,
           :line 1,
           :once false,
           :end-line 1,
           :context :ctx/statement},
          :o-tag void,
          :class clojure.lang.Var,
          :form (. clojure.lang.Var (clojure.core/popThreadBindings)),
          :tag void,
          :validated? true,
          :raw-forms ((do (. clojure.lang.Var (clojure.core/popThreadBindings))))},
         :children [:body :catches :finally],
         :o-tag nil},
        :children [:statements :ret],
        :body? true,
        :o-tag nil},
       :local {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}}],
     :once false,
     :max-fixed-arity 0,
     :form
     (fn*
      loading__6789__auto__
      ([]
       (.
        clojure.lang.Var
        (clojure.core/pushThreadBindings
         #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
       (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
     :tag clojure.lang.AFunction,
     :arglists ([]),
     :local
     {:op :binding,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 13,
       :column 1,
       :line 1,
       :end-line 1},
      :form loading__6789__auto__,
      :local :fn,
      :name PLACEHOLDER-2,
      :atom #<Atom@1d686634: {:tag clojure.lang.AFunction}>,
      :tag clojure.lang.AFunction,
      :o-tag clojure.lang.AFunction},
     :raw-forms
     ((clojure.core/fn
       loading__6789__auto__
       []
       (.
        clojure.lang.Var
        (clojure.core/pushThreadBindings
         #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
       (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))))},
    :op :invoke,
    :env
    {:context :ctx/statement,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 13,
     :column 1,
     :line 1,
     :end-line 1},
    :o-tag java.lang.Object,
    :result nil,
    :top-level true,
    :form
    ((clojure.core/fn
      loading__6789__auto__
      []
      (.
       clojure.lang.Var
       (clojure.core/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
      (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
    :raw-forms ((clojure.core/with-loading-context (clojure.core/refer 'clojure.core)))}],
  :raw-forms ((ns two-fer))}
 {:children [:meta :init],
  :meta
  {:op :const,
   :env
   {:context :ctx/expr,
    :locals {},
    :ns two-fer,
    :file "file:/home/bob/clojure-representer/src/two_fer.clj",
    :end-column 4,
    :column 1,
    :line 3,
    :end-line 6},
   :form
   {:file "file:/home/bob/clojure-representer/src/two_fer.clj",
    :line 3,
    :column 1,
    :end-line 6,
    :end-column 4,
    :arglists '([] [name])},
   :val
   {:file "file:/home/bob/clojure-representer/src/two_fer.clj",
    :line 3,
    :column 1,
    :end-line 6,
    :end-column 4,
    :arglists '([] [name])},
   :type :map,
   :literal? true,
   :o-tag clojure.lang.PersistentArrayMap,
   :tag clojure.lang.PersistentArrayMap},
  :return-tag java.lang.String,
  :init
  {:children [:meta :expr],
   :meta
   {:op :const,
    :env
    {:context :ctx/expr,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 4,
     :column 1,
     :line 3,
     :end-line 6},
    :form {:rettag nil},
    :val {:rettag nil},
    :type :map,
    :literal? true,
    :o-tag clojure.lang.PersistentArrayMap,
    :tag clojure.lang.PersistentArrayMap},
   :return-tag java.lang.String,
   :op :with-meta,
   :env
   {:context :ctx/expr,
    :locals {},
    :ns two-fer,
    :file "file:/home/bob/clojure-representer/src/two_fer.clj",
    :end-column 4,
    :column 1,
    :line 3,
    :end-line 6},
   :o-tag java.lang.Object,
   :expr
   {:children [:methods],
    :return-tag java.lang.String,
    :op :fn,
    :env
    {:context :ctx/expr,
     :locals {},
     :ns two-fer,
     :file "file:/home/bob/clojure-representer/src/two_fer.clj",
     :end-column 4,
     :column 1,
     :line 3,
     :end-line 6},
    :o-tag clojure.lang.AFunction,
    :variadic? false,
    :methods
    [{:children [:params :body],
      :loop-id loop_12550,
      :arglist [],
      :params [],
      :fixed-arity 0,
      :op :fn-method,
      :env
      {:locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 4,
       :column 1,
       :line 3,
       :once false,
       :end-line 6,
       :context :ctx/expr},
      :o-tag java.lang.Object,
      :variadic? false,
      :form ([] (str "One for you, one for me.")),
      :tag java.lang.Object,
      :body
      {:args
       [{:op :const,
         :env
         {:loop-locals 0,
          :locals {},
          :ns two-fer,
          :loop-id loop_12550,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 39,
          :column 7,
          :line 4,
          :once false,
          :end-line 4,
          :context :ctx/expr},
         :type :string,
         :literal? true,
         :val "One for you, one for me.",
         :form "One for you, one for me.",
         :o-tag java.lang.String,
         :tag java.lang.String}],
       :children [:fn :args],
       :body? true,
       :fn
       {:meta
        {:added "1.0",
         :ns #namespace[clojure.core],
         :name str,
         :file "clojure/core.clj",
         :static true,
         :column 1,
         :line 546,
         :tag java.lang.String,
         :arglists ([] [x] [x & ys]),
         :doc
         "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args."},
        :return-tag java.lang.String,
        :op :var,
        :env
        {:loop-locals 0,
         :locals {},
         :ns two-fer,
         :loop-id loop_12550,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 11,
         :column 8,
         :line 4,
         :once false,
         :end-line 4,
         :context :ctx/expr},
        :o-tag java.lang.Object,
        :var #'clojure.core/str,
        :form str,
        :tag clojure.lang.AFunction,
        :arglists ([] [x] [x & ys]),
        :assignable? false},
       :meta
       {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 4, :column 7, :end-line 4, :end-column 39},
       :op :invoke,
       :env
       {:loop-locals 0,
        :locals {},
        :ns two-fer,
        :loop-id loop_12550,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 39,
        :column 7,
        :line 4,
        :once false,
        :end-line 4,
        :context :ctx/return},
       :o-tag java.lang.Object,
       :form (str "One for you, one for me."),
       :tag java.lang.String,
       :raw-forms ((do (str "One for you, one for me.")))}}
     {:children [:params :body],
      :loop-id loop_12551,
      :arglist [name],
      :params
      [{:name PLACEHOLDER-3,
        :op :binding,
        :env
        {:locals {},
         :ns two-fer,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 9,
         :column 5,
         :line 5,
         :once false,
         :end-line 5,
         :context :ctx/expr},
        :o-tag java.lang.Object,
        :variadic? false,
        :arg-id 0,
        :form name,
        :tag java.lang.Object,
        :atom #<Atom@2982dab8: {:tag java.lang.Object}>,
        :local :arg}],
      :fixed-arity 1,
      :op :fn-method,
      :env
      {:locals {},
       :ns two-fer,
       :file "file:/home/bob/clojure-representer/src/two_fer.clj",
       :end-column 4,
       :column 1,
       :line 3,
       :once false,
       :end-line 6,
       :context :ctx/expr},
      :o-tag java.lang.Object,
      :variadic? false,
      :form ([name] (str "One for " name ", one for me.")),
      :tag java.lang.Object,
      :body
      {:args
       [{:op :const,
         :env
         {:loop-locals 1,
          :locals {name {:form name, :name name, :variadic? false, :op :binding, :arg-id 0, :local :arg}},
          :ns two-fer,
          :loop-id loop_12551,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 48,
          :column 11,
          :line 5,
          :once false,
          :end-line 5,
          :context :ctx/expr},
         :type :string,
         :literal? true,
         :val "One for ",
         :form "One for ",
         :o-tag java.lang.String,
         :tag java.lang.String}
        {:children [],
         :name PLACEHOLDER-3,
         :op :local,
         :env
         {:loop-locals 1,
          :locals {name {:form name, :name name, :variadic? false, :op :binding, :arg-id 0, :local :arg}},
          :ns two-fer,
          :loop-id loop_12551,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 31,
          :column 27,
          :line 5,
          :once false,
          :end-line 5,
          :context :ctx/expr},
         :o-tag java.lang.Object,
         :variadic? false,
         :arg-id 0,
         :form name,
         :tag java.lang.Object,
         :atom #<Atom@2982dab8: {:tag java.lang.Object}>,
         :local :arg,
         :assignable? false}
        {:op :const,
         :env
         {:loop-locals 1,
          :locals {name {:form name, :name name, :variadic? false, :op :binding, :arg-id 0, :local :arg}},
          :ns two-fer,
          :loop-id loop_12551,
          :file "file:/home/bob/clojure-representer/src/two_fer.clj",
          :end-column 48,
          :column 11,
          :line 5,
          :once false,
          :end-line 5,
          :context :ctx/expr},
         :type :string,
         :literal? true,
         :val ", one for me.",
         :form ", one for me.",
         :o-tag java.lang.String,
         :tag java.lang.String}],
       :children [:fn :args],
       :body? true,
       :fn
       {:meta
        {:added "1.0",
         :ns #namespace[clojure.core],
         :name str,
         :file "clojure/core.clj",
         :static true,
         :column 1,
         :line 546,
         :tag java.lang.String,
         :arglists ([] [x] [x & ys]),
         :doc
         "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args."},
        :return-tag java.lang.String,
        :op :var,
        :env
        {:loop-locals 1,
         :locals {name {:form name, :name name, :variadic? false, :op :binding, :arg-id 0, :local :arg}},
         :ns two-fer,
         :loop-id loop_12551,
         :file "file:/home/bob/clojure-representer/src/two_fer.clj",
         :end-column 15,
         :column 12,
         :line 5,
         :once false,
         :end-line 5,
         :context :ctx/expr},
        :o-tag java.lang.Object,
        :var #'clojure.core/str,
        :form str,
        :tag clojure.lang.AFunction,
        :arglists ([] [x] [x & ys]),
        :assignable? false},
       :meta
       {:file "file:/home/bob/clojure-representer/src/two_fer.clj", :line 5, :column 11, :end-line 5, :end-column 48},
       :op :invoke,
       :env
       {:loop-locals 1,
        :locals {name {:form name, :name name, :variadic? false, :op :binding, :arg-id 0, :local :arg}},
        :ns two-fer,
        :loop-id loop_12551,
        :file "file:/home/bob/clojure-representer/src/two_fer.clj",
        :end-column 48,
        :column 11,
        :line 5,
        :once false,
        :end-line 5,
        :context :ctx/return},
       :o-tag java.lang.Object,
       :form (str "One for " name ", one for me."),
       :tag java.lang.String,
       :raw-forms ((do (str "One for " name ", one for me.")))}}],
    :once false,
    :max-fixed-arity 1,
    :form (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))),
    :tag clojure.lang.AFunction,
    :arglists ([] [name])},
   :form (fn* ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))),
   :tag clojure.lang.AFunction,
   :arglists ([] [name]),
   :raw-forms
   ((clojure.core/fn ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))))},
  :name two-fer,
  :op :def,
  :env
  {:context :ctx/expr,
   :locals {},
   :ns two-fer,
   :file "file:/home/bob/clojure-representer/src/two_fer.clj",
   :end-column 4,
   :column 1,
   :line 3,
   :end-line 6},
  :o-tag clojure.lang.Var,
  :var #'two-fer/two-fer,
  :result #'two-fer/two-fer,
  :top-level true,
  :form
  (def two-fer (clojure.core/fn ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me.")))),
  :tag clojure.lang.Var,
  :arglists ([] [name]),
  :raw-forms ((defn two-fer ([] (str "One for you, one for me.")) ([name] (str "One for " name ", one for me."))))}]
clj꞉clojure-representer꞉> 
; Execution error (AssertionError) at analyzer.jvm/analyze-ns (jvm.clj:596).
; Assert failed: Can't find two-fer in classpath
res
clj꞉clojure-representer꞉> 
#'two-fer/two-fer
clj꞉clojure-representer꞉> 
; Execution error (AssertionError) at analyzer.jvm/analyze-ns (jvm.clj:596).
; Assert failed: Can't find two-fer in classpath
res
clj꞉clojure-representer꞉> 
; Error printing return value (ClassCastException) at clojure.edn/read-string (edn.clj:46).
; class java.lang.Character cannot be cast to class java.lang.String (java.lang.Character and java.lang.String are in module java.base of loader 'bootstrap')
clj꞉clojure-representer꞉> 
nil
clj꞉clojure-representer꞉> 
; Execution error (ExceptionInfo) at analyzer.passes.jvm.validate/eval8273$fn (validate.clj:198).
; class rewrite_clj.node.whitespace.NewlineNode is not a function, but it's used as such
clj꞉clojure-representer꞉> 
[{:tag :list,
  :format-string "(%s)",
  :wrap-length 2,
  :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
  :children
  ({:value ns, :string-value "ns", :map-qualifier nil}
   {:whitespace " "}
   {:value two-fer, :string-value "two-fer", :map-qualifier nil})}
 {:l [],
  :pnodes
  [{:children
    ({:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
      :children
      ({:value ns, :string-value "ns", :map-qualifier nil}
       {:whitespace " "}
       {:value two-fer, :string-value "two-fer", :map-qualifier nil})}
     {:newlines "\n\n"}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
      :children
      ({:value defn, :string-value "defn", :map-qualifier nil}
       {:whitespace " "}
       {:value two-fer, :string-value "two-fer", :map-qualifier nil}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
        :children
        ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
         {:whitespace " "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
          :children
          ({:value str, :string-value "str", :map-qualifier nil}
           {:whitespace " "}
           {:lines ["One for you, one for me."]})})}
       {:newlines "\n"}
       {:whitespace "  "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
        :children
        ({:tag :vector,
          :format-string "[%s]",
          :wrap-length 2,
          :seq-fn #function[clojure.core/vec],
          :children ({:value name, :string-value "name", :map-qualifier nil})}
         {:whitespace " "}
         {:tag :list,
          :format-string "(%s)",
          :wrap-length 2,
          :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
          :children
          ({:value str, :string-value "str", :map-qualifier nil}
           {:whitespace " "}
           {:lines ["One for "]}
           {:whitespace " "}
           {:value name, :string-value "name", :map-qualifier nil}
           {:whitespace " "}
           {:lines [", one for me."]})})}
       {:newlines "\n"}
       {:whitespace "  "})}
     {:newlines "\n"})}],
  :ppath nil,
  :r
  ({:newlines "\n\n"}
   {:tag :list,
    :format-string "(%s)",
    :wrap-length 2,
    :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
    :children
    ({:value defn, :string-value "defn", :map-qualifier nil}
     {:whitespace " "}
     {:value two-fer, :string-value "two-fer", :map-qualifier nil}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
      :children
      ({:tag :vector, :format-string "[%s]", :wrap-length 2, :seq-fn #function[clojure.core/vec], :children ()}
       {:whitespace " "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
        :children
        ({:value str, :string-value "str", :map-qualifier nil}
         {:whitespace " "}
         {:lines ["One for you, one for me."]})})}
     {:newlines "\n"}
     {:whitespace "  "}
     {:tag :list,
      :format-string "(%s)",
      :wrap-length 2,
      :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
      :children
      ({:tag :vector,
        :format-string "[%s]",
        :wrap-length 2,
        :seq-fn #function[clojure.core/vec],
        :children ({:value name, :string-value "name", :map-qualifier nil})}
       {:whitespace " "}
       {:tag :list,
        :format-string "(%s)",
        :wrap-length 2,
        :seq-fn #function[rewrite-clj.node.seq/list-node/fn--13949],
        :children
        ({:value str, :string-value "str", :map-qualifier nil}
         {:whitespace " "}
         {:lines ["One for "]}
         {:whitespace " "}
         {:value name, :string-value "name", :map-qualifier nil}
         {:whitespace " "}
         {:lines [", one for me."]})})}
     {:newlines "\n"}
     {:whitespace "  "})}
   {:newlines "\n"})}]
clj꞉clojure-representer꞉> 
{:ret
 {:children [:test :then :else],
  :else
  {:op :do,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :form
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil),
   :statements
   [{:args
     [{:children [:methods],
       :op :fn,
       :env
       {:context :ctx/expr,
        :locals {},
        :ns two-fer,
        :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
       :o-tag clojure.lang.AFunction,
       :variadic? false,
       :methods
       [{:children [:params :body],
         :loop-id loop_15169,
         :arglist [],
         :params [],
         :fixed-arity 0,
         :op :fn-method,
         :env
         {:context :ctx/expr,
          :locals {},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false},
         :o-tag java.lang.Object,
         :variadic? false,
         :form ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)),
         :tag java.lang.Object,
         :body
         {:args
          [{:op :invoke,
            :form @#'clojure.core/*loaded-libs*,
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_15169,
             :loop-locals 0},
            :fn
            {:op :var,
             :assignable? false,
             :var #'clojure.core/deref,
             :meta
             {:added "1.0",
              :ns #namespace[clojure.core],
              :name deref,
              :file "clojure/core.clj",
              :static true,
              :column 1,
              :line 2323,
              :arglists ([ref] [ref timeout-ms timeout-val]),
              :doc
              "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?."},
             :env
             {:context :ctx/expr,
              :locals {},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_15169,
              :loop-locals 0},
             :form clojure.core/deref,
             :o-tag java.lang.Object,
             :arglists ([ref] [ref timeout-ms timeout-val])},
            :args
            [{:op :the-var,
              :env
              {:context :ctx/expr,
               :locals {},
               :ns two-fer,
               :file "/home/bob/clojure-representer/src/clojure_representer.clj",
               :once false,
               :loop-id loop_15169,
               :loop-locals 0},
              :form #'clojure.core/*loaded-libs*,
              :var #'clojure.core/*loaded-libs*,
              :o-tag clojure.lang.Var,
              :tag clojure.lang.Var}],
            :children [:fn :args],
            :o-tag java.lang.Object}
           {:op :var,
            :assignable? false,
            :var #'clojure.core/conj,
            :meta
            {:added "1.0",
             :ns #namespace[clojure.core],
             :name conj,
             :file "clojure/core.clj",
             :static true,
             :column 1,
             :line 75,
             :arglists ([] [coll] [coll x] [coll x & xs]),
             :doc
             "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).\n    (conj coll) returns coll. (conj) returns [].\n    The 'addition' may happen at different 'places' depending\n    on the concrete type."},
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_15169,
             :loop-locals 0},
            :form clojure.core/conj,
            :o-tag java.lang.Object,
            :arglists ([] [coll] [coll x] [coll x & xs])}
           {:op :quote,
            :expr
            {:op :const,
             :env
             {:context :ctx/expr,
              :locals {},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_15169,
              :loop-locals 0},
             :type :symbol,
             :literal? true,
             :val two-fer,
             :form two-fer,
             :o-tag clojure.lang.Symbol,
             :tag clojure.lang.Symbol},
            :form 'two-fer,
            :env
            {:context :ctx/expr,
             :locals {},
             :ns two-fer,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :once false,
             :loop-id loop_15169,
             :loop-locals 0},
            :literal? true,
            :children [:expr],
            :tag clojure.lang.Symbol,
            :o-tag clojure.lang.Symbol}],
          :children [:fn :args],
          :body? true,
          :fn
          {:op :var,
           :assignable? false,
           :var #'clojure.core/commute,
           :meta
           {:added "1.0",
            :ns #namespace[clojure.core],
            :name commute,
            :file "clojure/core.clj",
            :static true,
            :column 1,
            :line 2439,
            :arglists ([ref fun & args]),
            :doc
            "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set."},
           :env
           {:context :ctx/expr,
            :locals {},
            :ns two-fer,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :once false,
            :loop-id loop_15169,
            :loop-locals 0},
           :form clojure.core/commute,
           :o-tag java.lang.Object,
           :arglists ([ref fun & args])},
          :op :invoke,
          :env
          {:context :ctx/return,
           :locals {},
           :ns two-fer,
           :file "/home/bob/clojure-representer/src/clojure_representer.clj",
           :once false,
           :loop-id loop_15169,
           :loop-locals 0},
          :o-tag java.lang.Object,
          :form (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer),
          :raw-forms ((do (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}}],
       :once false,
       :max-fixed-arity 0,
       :form (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))),
       :tag java.util.concurrent.Callable,
       :arglists ([]),
       :raw-forms
       ((clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
     :children [:args],
     :method runInTransaction,
     :op :static-call,
     :env
     {:context :ctx/statement,
      :locals {},
      :ns two-fer,
      :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :o-tag java.lang.Object,
     :class clojure.lang.LockingTransaction,
     :form
     (.
      clojure.lang.LockingTransaction
      (clojure.core/runInTransaction
       (clojure.core/fn [] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))),
     :tag java.lang.Object,
     :validated? true,
     :raw-forms
     ((clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))
      (clojure.core/sync nil (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)))}],
   :ret
   {:op :const,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :type :nil,
    :literal? true,
    :val nil,
    :form nil,
    :o-tag nil,
    :tag nil},
   :children [:statements :ret],
   :tag nil,
   :o-tag nil},
  :op :if,
  :env
  {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
  :o-tag nil,
  :result nil,
  :top-level true,
  :then
  {:op :const,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :type :nil,
   :literal? true,
   :val nil,
   :form nil,
   :o-tag nil,
   :tag nil},
  :form
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil)),
  :test
  {:args
   [{:op :quote,
     :expr
     {:op :const,
      :env
      {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
      :type :symbol,
      :literal? true,
      :val clojure.core,
      :form clojure.core,
      :o-tag clojure.lang.Symbol,
      :tag clojure.lang.Symbol},
     :form 'clojure.core,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :literal? true,
     :children [:expr],
     :tag java.lang.Object,
     :o-tag clojure.lang.Symbol}],
   :children [:instance :args],
   :instance
   {:op :quote,
    :expr
    {:op :const,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :type :symbol,
     :literal? true,
     :val two-fer,
     :form two-fer,
     :o-tag clojure.lang.Symbol,
     :tag clojure.lang.Symbol},
    :form 'two-fer,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :literal? true,
    :children [:expr],
    :tag clojure.lang.Symbol,
    :o-tag clojure.lang.Symbol},
   :method equals,
   :op :instance-call,
   :env
   {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag boolean,
   :class clojure.lang.Symbol,
   :form (. 'two-fer (equals 'clojure.core)),
   :tag boolean,
   :validated? true,
   :raw-forms ((.equals 'two-fer 'clojure.core))},
  :raw-forms nil},
 :children [:statements :ret],
 :op :do,
 :env
 {:context :ctx/expr,
  :locals {},
  :ns clojure-representer,
  :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
 :result nil,
 :top-level true,
 :form
 (do
  (clojure.core/in-ns 'two-fer)
  (clojure.core/with-loading-context (clojure.core/refer 'clojure.core))
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do (clojure.core/dosync (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer)) nil))),
 :statements
 [{:args
   [{:op :quote,
     :expr
     {:op :const,
      :env
      {:context :ctx/expr,
       :locals {},
       :ns clojure-representer,
       :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
      :type :symbol,
      :literal? true,
      :val two-fer,
      :form two-fer,
      :o-tag clojure.lang.Symbol,
      :tag clojure.lang.Symbol},
     :form 'two-fer,
     :env
     {:context :ctx/expr,
      :locals {},
      :ns clojure-representer,
      :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :literal? true,
     :children [:expr],
     :tag clojure.lang.Symbol,
     :o-tag clojure.lang.Symbol}],
   :children [:fn :args],
   :fn
   {:op :var,
    :assignable? false,
    :var #'clojure.core/in-ns,
    :meta
    {:doc "Sets *ns* to the namespace named by the symbol, creating it if needed.",
     :arglists ([name]),
     :name in-ns,
     :ns #namespace[clojure.core],
     :added "1.0"},
    :env
    {:context :ctx/expr,
     :locals {},
     :ns clojure-representer,
     :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :form clojure.core/in-ns,
    :o-tag java.lang.Object,
    :arglists ([name])},
   :op :invoke,
   :env
   {:context :ctx/statement,
    :locals {},
    :ns clojure-representer,
    :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag java.lang.Object,
   :result #namespace[two-fer],
   :top-level true,
   :form (clojure.core/in-ns 'two-fer),
   :raw-forms nil}
  {:args [],
   :children [:fn :args],
   :fn
   {:children [:local :methods],
    :op :fn,
    :env
    {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
    :o-tag clojure.lang.AFunction,
    :variadic? false,
    :methods
    [{:children [:params :body],
      :loop-id loop_15164,
      :arglist [],
      :params [],
      :fixed-arity 0,
      :op :fn-method,
      :env
      {:context :ctx/expr,
       :locals
       {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
       :ns two-fer,
       :file "/home/bob/clojure-representer/src/clojure_representer.clj",
       :once false},
      :o-tag java.lang.Object,
      :variadic? false,
      :form
      ([]
       (.
        clojure.lang.Var
        (clojure.core/pushThreadBindings
         #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
       (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
      :tag java.lang.Object,
      :body
      {:op :do,
       :env
       {:context :ctx/return,
        :locals
        {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
        :ns two-fer,
        :file "/home/bob/clojure-representer/src/clojure_representer.clj",
        :once false,
        :loop-id loop_15164,
        :loop-locals 0},
       :form
       (do
        (.
         clojure.lang.Var
         (clojure.core/pushThreadBindings
          #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
        (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))),
       :statements
       [{:args
         [{:op :map,
           :env
           {:context :ctx/expr,
            :locals
            {loading__6789__auto__
             {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
            :ns two-fer,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :once false,
            :loop-id loop_15164,
            :loop-locals 0},
           :keys
           [{:field LOADER,
             :op :static-field,
             :env
             {:context :ctx/expr,
              :locals
              {loading__6789__auto__
               {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_15164,
              :loop-locals 0},
             :o-tag clojure.lang.Var,
             :class clojure.lang.Compiler,
             :form (. clojure.lang.Compiler -LOADER),
             :tag clojure.lang.Var,
             :assignable? false,
             :raw-forms (clojure.lang.Compiler/LOADER)}],
           :vals
           [{:args [],
             :children [:instance],
             :instance
             {:args [],
              :children [:instance],
              :instance
              {:children [],
               :name PLACEHOLDER-4,
               :op :local,
               :env
               {:context :ctx/expr,
                :locals
                {loading__6789__auto__
                 {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
                :ns two-fer,
                :file "/home/bob/clojure-representer/src/clojure_representer.clj",
                :once false,
                :loop-id loop_15164,
                :loop-locals 0},
               :o-tag clojure.lang.AFunction,
               :form loading__6789__auto__,
               :tag java.lang.Object,
               :atom #<Atom@371b6696: {:tag clojure.lang.AFunction}>,
               :local :fn,
               :assignable? false},
              :method getClass,
              :op :instance-call,
              :env
              {:context :ctx/expr,
               :locals
               {loading__6789__auto__
                {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
               :ns two-fer,
               :file "/home/bob/clojure-representer/src/clojure_representer.clj",
               :once false,
               :loop-id loop_15164,
               :loop-locals 0},
              :o-tag java.lang.Class,
              :m-or-f getClass,
              :class java.lang.Object,
              :form (. loading__6789__auto__ getClass),
              :tag java.lang.Class,
              :validated? true,
              :raw-forms ((.getClass loading__6789__auto__))},
             :method getClassLoader,
             :op :instance-call,
             :env
             {:context :ctx/expr,
              :locals
              {loading__6789__auto__
               {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
              :ns two-fer,
              :file "/home/bob/clojure-representer/src/clojure_representer.clj",
              :once false,
              :loop-id loop_15164,
              :loop-locals 0},
             :o-tag java.lang.ClassLoader,
             :m-or-f getClassLoader,
             :class java.lang.Class,
             :form (. (.getClass loading__6789__auto__) getClassLoader),
             :tag java.lang.ClassLoader,
             :validated? true,
             :raw-forms ((.getClassLoader (.getClass loading__6789__auto__)))}],
           :form #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))},
           :children [:keys :vals],
           :o-tag clojure.lang.PersistentHashMap,
           :tag clojure.lang.Associative}],
         :children [:args],
         :method pushThreadBindings,
         :op :static-call,
         :env
         {:context :ctx/statement,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false,
          :loop-id loop_15164,
          :loop-locals 0},
         :o-tag void,
         :class clojure.lang.Var,
         :form
         (.
          clojure.lang.Var
          (clojure.core/pushThreadBindings
           #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))})),
         :tag void,
         :validated? true}],
       :ret
       {:op :try,
        :env
        {:context :ctx/return,
         :locals
         {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
         :ns two-fer,
         :file "/home/bob/clojure-representer/src/clojure_representer.clj",
         :once false,
         :loop-id loop_15164,
         :loop-locals 0},
        :form (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))),
        :body
        {:args
         [{:op :quote,
           :expr
           {:op :const,
            :env
            {:no-recur true,
             :loop-locals 0,
             :locals
             {loading__6789__auto__
              {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
             :ns two-fer,
             :loop-id loop_15164,
             :file "/home/bob/clojure-representer/src/clojure_representer.clj",
             :in-try true,
             :once false,
             :context :ctx/expr},
            :type :symbol,
            :literal? true,
            :val clojure.core,
            :form clojure.core,
            :o-tag clojure.lang.Symbol,
            :tag clojure.lang.Symbol},
           :form 'clojure.core,
           :env
           {:no-recur true,
            :loop-locals 0,
            :locals
            {loading__6789__auto__
             {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
            :ns two-fer,
            :loop-id loop_15164,
            :file "/home/bob/clojure-representer/src/clojure_representer.clj",
            :in-try true,
            :once false,
            :context :ctx/expr},
           :literal? true,
           :children [:expr],
           :tag clojure.lang.Symbol,
           :o-tag clojure.lang.Symbol}],
         :children [:fn :args],
         :body? true,
         :fn
         {:op :var,
          :assignable? false,
          :var #'clojure.core/refer,
          :meta
          {:arglists ([ns-sym & filters]),
           :doc
           "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.",
           :added "1.0",
           :line 4218,
           :column 1,
           :file "clojure/core.clj",
           :name refer,
           :ns #namespace[clojure.core]},
          :env
          {:no-recur true,
           :loop-locals 0,
           :locals
           {loading__6789__auto__
            {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
           :ns two-fer,
           :loop-id loop_15164,
           :file "/home/bob/clojure-representer/src/clojure_representer.clj",
           :in-try true,
           :once false,
           :context :ctx/expr},
          :form clojure.core/refer,
          :o-tag java.lang.Object,
          :arglists ([ns-sym & filters])},
         :op :invoke,
         :env
         {:no-recur true,
          :loop-locals 0,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :loop-id loop_15164,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :in-try true,
          :once false,
          :context :ctx/return},
         :o-tag java.lang.Object,
         :form (clojure.core/refer 'clojure.core),
         :raw-forms ((do (clojure.core/refer 'clojure.core)))},
        :catches [],
        :finally
        {:args [],
         :children [:args],
         :body? true,
         :method popThreadBindings,
         :op :static-call,
         :env
         {:context :ctx/statement,
          :locals
          {loading__6789__auto__ {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}},
          :ns two-fer,
          :file "/home/bob/clojure-representer/src/clojure_representer.clj",
          :once false,
          :loop-id loop_15164,
          :loop-locals 0,
          :no-recur true},
         :o-tag void,
         :class clojure.lang.Var,
         :form (. clojure.lang.Var (clojure.core/popThreadBindings)),
         :tag void,
         :validated? true,
         :raw-forms ((do (. clojure.lang.Var (clojure.core/popThreadBindings))))},
        :children [:body :catches :finally],
        :o-tag nil},
       :children [:statements :ret],
       :body? true,
       :o-tag nil},
      :local {:op :binding, :form loading__6789__auto__, :local :fn, :name loading__6789__auto__}}],
    :once false,
    :max-fixed-arity 0,
    :form
    (fn*
     loading__6789__auto__
     ([]
      (.
       clojure.lang.Var
       (clojure.core/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
      (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
    :tag clojure.lang.AFunction,
    :arglists ([]),
    :local
    {:op :binding,
     :env
     {:context :ctx/expr, :locals {}, :ns two-fer, :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
     :form loading__6789__auto__,
     :local :fn,
     :name PLACEHOLDER-4,
     :atom #<Atom@371b6696: {:tag clojure.lang.AFunction}>,
     :tag clojure.lang.AFunction,
     :o-tag clojure.lang.AFunction},
    :raw-forms
    ((clojure.core/fn
      loading__6789__auto__
      []
      (.
       clojure.lang.Var
       (clojure.core/pushThreadBindings
        #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
      (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings))))))},
   :op :invoke,
   :env
   {:context :ctx/statement,
    :locals {},
    :ns two-fer,
    :file "/home/bob/clojure-representer/src/clojure_representer.clj"},
   :o-tag java.lang.Object,
   :result nil,
   :top-level true,
   :form
   ((clojure.core/fn
     loading__6789__auto__
     []
     (.
      clojure.lang.Var
      (clojure.core/pushThreadBindings
       #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass loading__6789__auto__))}))
     (try (clojure.core/refer 'clojure.core) (finally (. clojure.lang.Var (clojure.core/popThreadBindings)))))),
   :raw-forms ((clojure.core/with-loading-context (clojure.core/refer 'clojure.core)))}],
 :raw-forms ((ns two-fer))}
clj꞉two-fer꞉> 
(do
 (clojure.core/in-ns 'two-fer)
 ((fn*
   PLACEHOLDER-5
   ([]
    (do
     (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-5))})
     (try (clojure.core/refer 'clojure.core) (finally (clojure.lang.Var/popThreadBindings)))))))
 (if
  (.equals 'two-fer 'clojure.core)
  nil
  (do
   (clojure.lang.LockingTransaction/runInTransaction
    (fn* ([] (clojure.core/commute @#'clojure.core/*loaded-libs* clojure.core/conj 'two-fer))))
   nil)))
clj꞉two-fer꞉> 
#'clojure-representer/represent
clj꞉clojure-representer꞉> 
; nREPL Connection was closed
