#{"(ns two-fer)\n\n(defn two-fer [ & args] ;; <- arglist goes here\n  ;; your code goes here\n  (cond \n    (nil? args) \"One for you, one for me.\"\n    (empty? (first args)) \"One for you, one for me.\"\n    :else (str \"One for \" (first args) \", one for me.\")\n    )\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n)" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (format \"One for you, one for me.\"))\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (if (nil? name)\n            \"One for you, one for me.\"\n            (str \"One for \" name \", one for me.\"))))\n\n" "(ns two-fer)\n\n(def message \"One for you, one for me.\")\n\n(defn two-fer\n ([] message)\n ([name] (clojure.string/replace message #\"you\" name)) ;; <- arglist goes here\n  ;; your code goes here\n  )\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\")) \n  ([name] ;; <- arglist goes here\n  (str \"One for \"name\", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me!\")\n  ([name] (str \"One for \" name \", one for me!\")))\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (\n    str \"One for \" name \", one for me.\"))\n  ([] \n    \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ;; your code goes here\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\")))" "(ns two-fer)\n\n(defn two-fer\n  ([]\n  (two-fer \"you\"))\n  ([name]\n  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\")) \n  ([] \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  \"If name is defined, returns a string with the message: One for name, one for me.\n  Otherwise, returns a string with the message: One for you, one for me.\"\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\"One for you, one for me.\")\n  ([name](str \"One for \" name \", one for me.\")))\n\n\n" "(ns two-fer)\n(require '[clojure.string :as str])\n(defn two-fer \n  ([]\n   (str \"One for you, one for me.\"))\n  ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [name]\n  (format \"One for %s, one for me\"\n          (if (empty? name) \"me\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer nil))\n  ([name]\n   (let [name' (if (empty? name) \"you\" name)]\n     (str \"One for \" name' \", one for me.\"))))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (if (string? name)\n     (str \"One for \" name \", one for me.\")))\n  ([]\n   (str \"One for you, one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (if (nil? name)\n    (str \"One for you, one for me.\")\n    (let [[first] name]\n      (str \"One for \" first \", one for me.\"))))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\")) \n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (format \"One for %s, one for me.\", name)\n   )\n  ([] \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (println name)\n  (let [x (if (nil? name) \"you\" (first name))]\n    (str \"One for \" x \", one for me\")))\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n\n" "(ns two-fer)\n\n(defn two-fer \n    ([] ( two-fer \"you\"))\n    ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two--fer \"you\"))\n  ([name] (two--fer name)))\n\n(defn two--fer [name]\n  (clojure.string/join [\"One for \" name \", one for me.\"]))\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(def s \"One for _ and one for me\")\n\n(defn two-fer [& {:keys [name] :or {name \"you\"}}]\n  (str/replace s \"_\" name)\n  )\n\n(two-fer)" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [& names] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? names)\n      (str \"One for you, one for me.\")\n      (str \"One for \" (first names) \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]   (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n    (str \"One for \" (str name) \", one for me.\"))\n  ([]\n    (two-fer \"you\"))\n)" "(ns two-fer)\n\n(defn two-fer\n  ([]\n    \"One for you, one for me.\")\n\n  ([name]\n    (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n\n  ([name]\n   (let [n (if (nil? name) \"you\" name)]\n     (str \"One for \" n \", one for me.\")))\n)\n\n(comment\n  (print \"One for you, one for me.\")\n\n  (two-fer \"foo\")\n  (two-fer nil)\n\n  (= \"One for you, one for me.\" (two-fer))\n)\n\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\" ))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n    (two-fer \"you\"))\n  ([name]\n    (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"\"))\n  ([name] (if (empty? name)\n    (str \"One for you, one for me.\")\n    (str \"One for \" name \", one for me.\"))))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\")))\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (str \"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (format \"One for %s, one for me.\" name))\n  ([] \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   (two-fer \"you\"))\n  ([name]  \n  (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([nm] (str \"One for \" nm \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me\")\n  ([name] (format \"One for %s, one for me\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n  (str \"One for \" name\n       \", one for me.\")\n)\n  ([] (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"\"))\n  ([name]\n    (let [new-name (if (empty? name) \"you\" name)]\n      (format \"One for %s, one for me.\" new-name))))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n    (str \"One for \" name \", one for me.\"))\n  ([]\n    \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]     (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))\n\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n   (format \"One for %s, one for me.\" name))\n  ([]\n   \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   two-fer \"you\"))\n\n(print two-fer)" "(ns two-fer)\n\n(defn two-fer \n  \n  ([](two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (cond \n    :else (str \"One for \" name \", one for me.\")\n    ))\n)\n" "(ns two-fer\n  (:require [clojure.pprint :refer [cl-format]]))\n\n(defn two-fer\n  ([] (two-fer nil))\n  ([name] (cl-format nil \"One for ~:[you~;~:*~A~], one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\")\n   )\n  ([]\n   \"One for you, one for me.\"))\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer nil))\n  ([name] \n  (str \"One for \" (or name \"you\") \", one for me.\"))\n  )\n\n(two-fer \"Alice\")" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")) ;; <- arglist goes here\n  ;; your code goes here\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer\n  ([]     \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   (two-fer \"you\")))" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([] \n   (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n;; (defn two-fer [& [name]]\n;;   (format \"One for %s, one for me.\" (or name \"you\")))\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer ([name] \n  (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer ;;[name] ;; <- arglist goes here\n  ;; your code goes here\n    ([] (str \"One for you, one for me.\"))\n    ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn -two-fer [name]\n  (str \"One for \" name \", one for me.\"))\n\n(defn two-fer\n  ([name] (-two-fer name))\n  ([] (-two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer \n ([] \"One for you, one for me.\")\n ([name] (str \"One for \" name \", one for me.\")) ;; <- arglist goes here\n  ;; your code goes here\n  )\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   (two-fer \"you\"))\n  )" "(ns two-fer)\n\n\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(def format-string \"One for %s, one for me.\")\n\n(defn two-fer \n  ([name]\n   (format format-string name))\n  ([]\n   (format format-string \"you\"))\n)" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name];; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n ([] \"One for you, one for me.\")\n ([name] (str \"One for \" name \", one for me.\"))\n)\n\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n  (str \"One for \"  name \", one for me.\" ))\n)\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  (str \"One for \" (or name \"you\") \", one for me.\")\n)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name, \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\"))\n  ([]\n  \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (format \"One for %s, one for me.\" name))\n  ([]\n   (str \"One for you, one for me.\")))\n\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer [name]\n   (str \"One for \"\n        (if (= name \"\") \"you\" name)\n        \", one for me.\")\n   )\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (str \"One for you, one for me.\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n    ([]     (two-fer \"you\"))\n    ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn validated-name [name]\n  (if (empty? (str/trim name)) \"you\" name))\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n   (str \"One for \" (validated-name name) \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& [s]]\n  (let [s' (or s \"you\")]\n    (str \"One for \" s' \", one for me.\")\n  )\n)\n" "(ns two-fer)\n\n(defn two-fer\n    ([] (two-fer \"you\"))\n    ([name] (str \"One for \" name \", one for me.\"))\n    )" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (if name (str \"One for \" (first name) \", one for me.\")\n                \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n  ( [] (str \"One for you, one for me.\") )\n  ( [name] (str \"One for \" name \", one for me.\") )\n)\n" "(ns two-fer)\n\n(defn two-fer;; <- arglist goes here\n  ([] str \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  )\n\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n  ([name]\n  (str \"One for \" name \", one for me.\"))\n\n  ([] (two-fer \"you\"))\n\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]]\n    (format \"One for %s, one for me.\" (or name \"you\" ))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \" (if (empty? name) \"you\" name) \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  (str \"One for \" (or name \"you\") \", one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([n] (str \"One for \" n \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \"Example of multi-arity, i.e. multiple paths depending on the number of arguments\"\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))\n)\n  \n" "(ns two-fer)\n\n(defn two-fer [name]\n  (if (not (nil? name))\n    (format \"One for %s, one for me.\", name)\n    \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n    (two-fer \"you\"))\n  ([name]\n    (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\") ))\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n  (let [newName (if (empty? name) \"you\" name)]\n    (format \"One for %s, one for me.\" newName)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ;; <- arglist goes here\n  ;; your code goes here\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n\n(two-fer)\n\n(two-fer \"Kees\")\n" "(ns two-fer)\n\n(defn two-fer-name [name]\n  (str \"One for \" name \", one for me.\"))\n\n(defn two-fer\n  ([]\n   (two-fer-name \"you\"))\n  ([name]\n   (two-fer-name name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] println \"One for you, one for me.\")\n  ([name] println (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (format \"One for %s, one for me.\" name))\n  ([] (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (reduce str (concat [\"One for \" name \", one for me.\"]))))" "(ns two-fer)\n\n(defn two-fer\n  ([]\n  \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n  )" "(ns two-fer)\n\n(defn two-fer ([]\n               (two-fer \"you\"))\n              ([name]\n               (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \", name, \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name]\n    (clojure.string/join [\"One for \" name \", one for me.\"]))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\")) \n  ([name] (str \"One for \" name \", one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n   (str \"One for \" name \", one for me.\"))\n\n  ([]\n   \"One for you, one for me.\"))\n\n(two-fer)\n" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? name)\n    (str \"One for you,\" \" \" \"one for me.\")\n    (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer (\n  [name] (str \"One for \" name \", one for me.\"))\n  ([] (str \"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]]\n  (let [n (if name (str name) \"you\")]\n    (str \"One for \" n \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name]\n  (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] \n   (let [template \"One for %s, one for me.\"]\n     (format template name))))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n   (two-fer \"you\"))\n  ([name] \n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer [name]\n  (if (clojure.string/blank? name)\n    \"One for you, one for me.\"\n    (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer [& [name]]\n  (if name\n    (str \"One for \" name \", one for me.\")\n    (str \"One for you, one for me.\")))" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")) \n)" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  ;; your code goes here\n  (if name\n    (format \"One for %s, one for me.\" name)\n    (format \"One for you, one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (str \"One for you, one for me.\")))" "(ns two-fer)\n\n(defn two-fer   \n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (str \"One for you, one for me.\"))\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]]\n  (str \"One for \" (or name \"you\") \", one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \n   (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (format \"One for %s, one for me.\" (if (empty? name) \"you\" (first name)))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (format \"One for %s, one for me.\", name)))\n\n" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  ;; your code goes here\n  (if name\n    (str \"One for \" name \", one for me.\")\n    \"One for you, one for me.\"\n    )\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer \n  ([] (format \"One for you, one for me.\"))\n  ([name] (format \"One for %s, one for me.\" (if (empty? (str/trim name)) \"you\" name)))\n)\n" "(ns two-fer)\n\n(defn- get-name [name]\n  (str \"One for \" name \", one for me.\")\n)\n(defn two-fer \n  ([] get-name \"you\")\n  ([name] get-name name) \n)\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (str \"One for \" (or (first name) \"you\") \", one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer [& name] \n  (str \"One for \" (if name (first name) \"you\") \", one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n  ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]     \"One for you, one for me.\" )\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer [name]\n  (str/join [\"One for \" name \", one for me.\"]))" "(ns two-fer\n  (:require [clojure.string :refer [blank?]]))\n\n(defn name? [n] (if (or (blank? n) (nil? n)) \"you\" n))\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n    (format \"One for %s, one for me.\" (name? name)))\n  ([] (two-fer \"\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n  (str \"One for you, one for me.\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n    (str \"One for \" name \", one for me.\"))\n  ([]\n   \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n      ([]\n       \"One for you, one for me.\")\n      ([name]\n       (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] ;; <- arglist goes here\n\n   (str \"One for \" name  \", one for me.\")\n   )\n  ([]      \"One for you, one for me.\")\n)\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn sentence [name]\n  (str \"One for \" name \", one for me.\"))\n\n(defn two-fer\n  ([] (sentence \"you\"))\n  ([name] (sentence name)))\n\n" "(ns two-fer)\n\n(defn two-fer\n      ([] (two-fer \"you\"))\n      ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n     (str \"One for \" name \", one for me.\"))\n  ([]\n   \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name\n               \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n    ([] (two-fer \"you\"))\n    ([name] (apply str [\"One for \" name \", one for me.\"]))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]     (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me\")\n  ([name] (str \"One for \" name\", one for me\")) ;; your code goes here\n)\n\n\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (str \"One for \" (or (first name) \"you\") \", one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n  \"Says 'One for `name`, one for me.'\"\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]       \"One for you, one for me.\")\n  ([name]   (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([x] (format \"One for %s, one for me.\" x)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name]\n  (if (empty? name)\n    \"One for you, one for me.\"\n    (str \"One for \" name \", one for me.\")\n  ))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (format \"One for %s, one for me.\" name))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \"\n       name\n       \", one for me.\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] \n   (str \"One for \" name \", one for me.\"))\n  ([] \n   (two-fer \"you\"))\n)" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\") \n  ([name] (format \"One for %s, one for me.\" name)))\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (str \"One for you, one for me.\"))\n  ([name] (if (nil? name)\n            (two-fer)\n            (str \"One for \" name \", one for me.\"))\n))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (str (str \"One for \" name) \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer ([] (two-fer \"you\"))\n   ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   (two-fer \"you\")))" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\")\n   )\n  ([]\n   (str \"One for you, one for me.\")\n   )\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer\n  ([]       \"One for you, one for me.\")\n  ([name]   (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  \"Called with no argument: Returns One for you, one for me\n   Called with name: Returns One for <<name>, one for me\"\n  ([] (two-fer \"you\"))\n  ([name] )\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] \n   (format \"One for %s, one for me.\" name))\n  ([] \n   \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" (or name \"you\") \", one for me.\"))\n)\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (str (str \"One for \" name) \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer\n\t(:require [clojure.string :as str]))\n\n(defn two-fer ([name] ;; <- arglist goes here\n\t(let [n (if (str/blank? name) \"you\" name)]\n\t\t(format \"One for %s, one for me.\" n)\n\t))\n\n\t([]\n\t \t\"One for you, one for me.\"\n\t)\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([]      (two-fer \"you\"))\n  ([name]  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (if name\n      (format \"One for %s, one for me.\" (first name))\n    (format \"One for you, one for me.\")\n    )\n    \n)\n" "(ns two-fer)\n\n(defn two-fer\n ([] \"One for you, one for me.\")\n ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? name) \n    (str \"One for you, one for me.\") \n    (str \"One for \" (first name) \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \" name \", one for me.\"))\n  ([]\n   (str \"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n    \"One for you, one for me.\")\n  ([name]\n    (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n  (str \"One for \" name \", one for me.\" ))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" (or name \"you\")))\n  ([] (two-fer nil))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" name))\n)" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (let [your-name (if name (first name) \"you\")]\n    (format \"One for %s, one for me.\" your-name))\n  )\n" "(ns two-fer)\n\n(defn- _two-fer [name] (str \"One for \" name \", one for me.\"))\n\n(defn two-fer \n  ([] (_two-fer \"you\"))\n  ([name] (_two-fer name)))\n" "(ns two-fer)\n\n(defn two-fer ([name] ;; <- arglist goes here\n  ;; your code goes here\n(str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (str \"One for you, one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer [ & name] ;; <- arglist goes here\n  ;; your code goes here\n(if (nil? name)\n  \"One for you, one for me.\"\n  (str \"One for \" (first name)  \", one for me.\")\n)\n)" "(ns two-fer)\n\n(defn two-fer ([name]\n                           (str \"One for \" name \", one for me.\"))\n              \n              ([] (str \"One for you, one for me.\")))" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (str \"One for you, one for me.\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? name)\n    \"One for you, one for me.\"\n    (format \"One for %s, one for me.\" name)\n    )\n)\n\n\n(two-fer)" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([nm]\n  (format \"One for %s, one for me.\" nm)))\n" "(ns two-fer)\n\n(defn- one-for \n  [x]\n  (str \"One for \" x \", one for me.\"))\n\n(defn two-fer \n  ([] (one-for \"you\")) \n  ([name] (one-for name)) \n)\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (if name\n    (format \"One for %s, one for me.\" name)\n    (\"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\"\n                  name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))) ;; <- arglist goes here\n  ;; your code goes here\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"\"))\n  ([name]\n   (if (empty? name)\n     \"One for you, one for me.\"\n     (format \"One for %s, one for me.\" name))))" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\"))\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] \n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]      (two-fer \"you\"))\n  ([name]  (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \" name \", one for me.\")\n)\n\n(two-fer \"Alice\")\n" "(ns two-fer)\n\n(defn two-fer \n   ([]\n  (str \"One for you, one for me.\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (#(str \"One for \" % \", one for me.\")name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer \n  ([name] (apply str (concat \"One for \" name \", one for me.\")))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" (if (empty? name) \"you\" name) \", one for me.\"))\n  ([] (str \"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([& name] ;; <- arglist goes here\n  (cond (and (not (empty? name)) (= (count name) 1)) (str \"One for \" (first name) \", one for me.\")\n        :else (str \"One for you, one for me.\"))))" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n  (str \"One for \" name \", one for me.\"))\n  ([]\n  (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  ;; your code goes here\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" (or name \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))  \n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]     \"One for you, one for me.\")\n  ([name]  (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n   ;; your code goes here\n   (format \"One for %s, one for me.\" name))\n  ([]\n   (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ;; your code goes here\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n ([] \"One for you, one for me.\")\n ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\"))\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer-message [name]\n  (str \"One for \" name \", one for me.\"))\n\n(defn two-fer\n  ([] (two-fer-message \"you\"))\n  ([name] (two-fer-message name))\n)\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer nil))\n  ([name] \n   (let [phrase \"One for you, one for me.\"]\n    (if (nil? name)\n    phrase\n    (clojure.string/replace phrase \"you\" name))\n    )))\n" "(ns two-fer)\n\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (format \"One for %s, one for me.\" name))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\"))\n  ;; your code goes here)\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\", name)) \n)\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))\n\n" "(ns two-fer)\n\n(defn two-fer [name]\n  (cond (= name \"Alice\") \"One for Alice, one for me.\"\n        (= name \"Bob\") \"One for Bob, one for me.\"\n        (= name \"Zaphod\") \"One for Zaphod, one for me.\"\n        :else \"One for you, one for me.\"\n        )\n  )\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (case name\n            \"\" \"One for you, one for me.\"\n            \"Alice\" \"One for Alice, one for me.\"\n            \"Bob\" \"One for Bob, one for me.\"))\n  ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n   (two-fer \"you\"))\n  ([name] \n    (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n    (str \"One for you, one for me.\"))\n  ([name]\n    (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(comment (defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n )\n)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name))\n  )\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n([] \"One for you, one for me.\") \n([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n  (two-fer \"you\"))\n  ([name]\n  (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer ([] \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] ( str \"One for you, one for me.\" ) )\n  ([name] (str \"One for \" name \", one for me.\" ))\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn- compute-response [name]\n  (str/join [\"One for \" name \", one for me.\"]))\n\n(defn two-fer\n  ([] (compute-response \"you\"))\n  ([name] (compute-response name)))\n\n\n" "(ns two-fer)\n\n(defn two-fer ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")) ;; <- arglist goes here\n  ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\") \n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n   ([] (str \"One for you, one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n   (str \"One for \" (or name \"you\") \", one for me.\"))\n  ([]\n   \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name]\n  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn   two-fer \n  ([]     \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer (str \"you\")))\n  ([name]  (str \"One for \" name \", one for me.\"))\n)\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   \"One for you, one for me.\")\n  )\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  (let [n (if (nil? name) \"you\" (first name))]\n    (str \"One for \" n \", one for me.\")\n  ))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\", name)))\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" (if (empty? name) \"you\" name))))\n\n" "(ns two-fer)\n\n(defn two-fer \n   ([] (two-fer \"you\"))\n   ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n(use 'clojure.string)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" (or name \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n\t\t([] \"One for you, one for me.\")\n\t\t([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"\"))\n  ([name] (str \"One for \" (if (empty? name) \"you\" name) \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (str \"One for you, one for me.\"))\n\n)\n" "(ns two-fer)\n\n;; The way to do this in Clojure\n;; is to pattern match different argument numbers.\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n    (two-fer \"you\"))\n  ([name]\n    (str \"One for \"  name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n  \n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n   (two-fer \"you\"))\n  ([name] \n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\" )\n   )\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (case name\n    (or \"\" nil) \"One for you, one for me.\"\n    (str \"One for \" name \", one for me.\")))\n  ([] \"One for you, one for me.\")\n)" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here  \n  ([]  (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))) \n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\"))\n    \n)\n" "(ns two-fer)\n\n(defn- _two-fer [name]\n  (str \"One for \"name\", one for me.\"))\n\n(defn two-fer \n([] (_two-fer \"you\"))\n([name] (_two-fer name))\n)\n\n;; (defn two-fer \n;; ([] \"One for you, one for me.\")\n;; ([name] (str \"One for \" name \", one for me.\")) ;; <- arglist goes here\n;;   ;; your code goes here\n;; )\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (condp = name\n    nil \"One for you, one for me.\"\n    \"\"  \"One for you, one for me.\"\n    (str \"One for \" name \", one for me.\")))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer nil))\n  ([name]\n   (format \"One for %s, one for me.\" (or name \"you\"))))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  (str \"One for \" (if name name \"you\") \", one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer [& args] ;; <- arglist goes here\n  (if (first args)\n    (str \"One for \" (first args) \", one for me.\")\n    \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer;; <- arglist goes here\n  ;; your code goes here\n  ([]\n   (two-fer \"you\"))\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n   (str \"One for \" name \", one for me.\")\n   )\n  ([]\n   (str \"One for you, one for me.\"))\n)\n" "(ns two-fer)\n\n(defn normalize-name [name]\n  (if (or (nil? name) (empty? name))\n    \"you\"\n    name))\n\n(defn two-fer\n  ([]\n  (two-fer nil))\n  ([name]\n  (str \"One for \" (normalize-name name) \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]     (str    \"One for you, one for me.\"))\n  ([name] (format \"One for %s, one for me.\" name))\n  )\n\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n    (str/join [\"One for \" name \", one for me.\" ]))\n  ([]\n  (str \"One for you, one for me.\"))\n    )\n" "(ns two-fer)\n\n(defn two-fer;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer \"you\"))\n  ([name] (clojure.string/join \"\" [\"One for \" name \", one for me.\"]))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \n   (two-fer \"you\"))\n  ([name]\n   (format \"One for %s, one for me.\" name))\n)\n" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (let [res (cond (str/blank? name) \"you\" \n              :else name)]\n    (str \"One for \" res \", one for me.\")))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" (if (= name \"\") \"you\" name))))" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name]\n     (str \"One for \" name \", one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   \"One for you, one for me.\")\n  ([name] \n   (if (clojure.string/blank? name) \n     (two-fer)\n     (str \"One for \" \n          (clojure.string/trim name) \n          \", one for me.\"))))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\")) \n  ([name] (format \"One for %s, one for me.\" name))\n)" "(ns two-fer)\n\n\n(defn two-fer\n  ([name]\n   (if (empty? name)\n     (str \"One for you, one for me.\")\n     (str \"One for \" name \", one for me.\")))\n\n  ([]\n   (str \"One for you, one for me.\"))\n)" "(ns two-fer)\n\n(defn two-fer\n  (\n    []\n    (two-fer \"you\")\n  )\n  (\n    [name]\n    (str \"One for \" name \", one for me.\")\n  )\n)\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([name] (format \"%s %s%s\" \"One for\" name \", one for me.\"))\n  ( [] (format \"%s %s%s\" \"One for\" \"you\" \", one for me.\")))" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn two-fer \n  ([name]\n   (str \"One for \" name \", one for me.\")\n   )\n  ([]\n   (two-fer \"you\")  \n  )\n  \n)\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (cond\n    (empty? name) \"One for you, one for me.\"\n    :else (str \"One for \" (first name)  \", one for me.\")))" "(ns two-fer)\n\n(defn two-fer   ;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer \"you\" ))\n  ([name]  (str \"One for \" name \", one for me.\"))\n)\n\n" "(ns two-fer)\n\n(defn two-fer [& name] ;; <- arglist goes here\n  ;; your code goes here\n  (if (empty? name) \n    \"One for you, one for me.\"\n    (str \"One for \" (nth name 0) \", one for me.\"))\n)\n\n(two-fer)\n" "(ns two-fer)\n\n(defn two-fer\n  \"take a name and insert it into message\"\n  [& name]\n  (str \"One for \" (or name \"you\") \", one for me.\"))\n" "(ns two-fer\n  (:require [clojure.string :as str]) )\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? name)\n    (str \"One for you, one for me.\")\n      (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer [name]\n (cond (name) (str \"One for \" name \", one for me.\") \n     :else (str \"One for you, one for me.\")) ;; <- arglist goes here\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))\n  \n" "(ns two-fer)\n\n(defn two-fer \n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n  \n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n\n\n(two-fer \"Tom\")\n(two-fer)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& [recipient]]\n  (format \"One for %s, one for me.\" (or recipient \"you\")))" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (format \"One for %s, one for me.\"\n          (if (nil? name) \"you\" (first name))))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (clojure.string/join [\"One for \" name \", one for me.\"]))\n)\n" "(ns two-fer)\n\n\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n  \n\n\n\n\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([]      (two-fer \"you\"))\n  ([name]  (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name]  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name)))" "(ns two-fer)\n\n(defn two-fer \n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (if (nil? name)\n    \"One for you, one for me.\"\n    (format \"One for %s, one for me.\" name)))\n  ([] (two-fer \"you\"))\n)" "(ns two-fer)\n\n(defn two-fer [& name]\n (str \"One for \" (or (first name) \"you\") \", one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer [& [name]] ;; <- arglist goes here\n  (format \"One for %s, one for me.\" (or name \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (format \"One for %s, one for me.\" name)))\n\n" "(ns two-fer)\n()\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name]\n   (format \"One for %s, one for %s.\" name \"me\")) ;; <- arglist goes here\n  ;; your code goes here\n)\n" "(  ns two-fer )\n\n( defn two-fer  ;; <- arglist vai aqui\n   ;; seu código vai aqui\n  ([]\n   (two-fer \"you\")\n  )\n  ([name]\n   (str \"One for \" name \", one for me.\")\n  )\n)\n" "(ns two-fer)\n\n(defn two-fer ([name] (str \"One for \"name\", one for me.\"))\n                ([]  \"One for you, one for me.\")) \n\n  \n\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] \n    (str \"One for \" name \", one for me.\"))\n  ([]\n   \"One for you, one for me.\"))\n" "(ns two-fer)\n\n(defn two-fer\n  [& [name]]\n  (cond\n    (nil? name) \"One for you, one for me.\"\n    :else (format \"One for %s, one for me.\" name)))\n\n;; (two-fer \"Alice\")\n;; (two-fer nil)\n;; (two-fer)\n" "(ns two-fer)\n\n(defn two-fer [& name]\n  (let [who (if name (first name) \"you\")]\n    (format \"One for %s, one for me.\" who)))" "(ns two-fer)\n\n(defn two-fer \n  ([]\n  \"One for you, one for me.\")\n  ([name] ;; <- arglist goes here\n  (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (format \"One for %s, one for me.\" name))    \n)\n" "(ns two-fer)\n\n(defn two-fer [name]\n  (cond name (str \"One for \" name \", one for me.\")\n        :else \"One for you, one for me.\"\n  )\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ;; your code goes here\n  ([name](format \"One for %s, one for me.\" (cond (> 0 (count name)) \"you\" :else name)))\n  ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer nil))\n  ([name]\n  (if (empty? name)\n    (str \"One for you, one for me.\")\n    (str \"One for \" name \", one for me.\")))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me\"))\n  ([] \"One for you, one for me.\"))\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n  ;; <- arglist goes here\n    ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\")))\n  \n" "(ns two-fer)\n\n(defn two-fer\n  ([] (two-fer \"you\"))\n  ([subject] (str \"One for \" subject \", one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n  )\n" "(ns two-fer)\n\n(defn two-fer ([] \"One for you, one for me.\")\n([name] (str \"One for \" (if (empty? name) \"you\" name) \", one for me.\")))\n\n\n" "(ns two-fer)\n\n(defn two-fer\n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([] (str \"One for you, one for me.\"))\n  ([name] (str \"One for \" name \", one for me.\")))" "(ns two-fer\n  (:require [clojure.string :as str]))\n\n(defn get_name [name]\n  (if (str/blank? name) \"you\" name))\n\n(defn two-fer \n  ([name] (format \"One for %s, one for me.\" name))\n  ([] (two-fer \"you\"))\n)\n" "(ns two-fer)\n\n(defn two-fer ;; <- arglist goes here\n  ([] \"One for you, one for me.\")\n  ([name] (apply str [\"One for \" name \", one for me.\"])))" "(ns two-fer)\n\n(defn two-fer \n  ([]\n   \"One for you, one for me.\")\n  ([name]\n   (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\"))\n" "\n(ns two-fer)\n\n(defn two-fer\n  ([]\n\n   \"One for you, one for me.\")\n\n  ([name] ;; <- arglist goes here\n   (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer ([x] (str \"One for \" x \", one for me.\")) ([] (str \"One for you, one for me.\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\"))\n   ;; <- arglist goes here\n  ;; your code goes here\n)\n" "(ns two-fer)\n\n(defn two-fer [& [name]]\n  (str \"One for \" (or name \"you\") \", one for me.\"))\n\n(two-fer)\n(two-fer \"as\")\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer \"you\"))\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer\n      ([name] (str \"One for \" name \", one for me.\"))\n      ([] \"One for you, one for me.\")\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name]\n    (str \"One for \" name \", one for me.\"))\n  ([]\n    (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer ([name] ;; <- arglist goes here\n               (str \"One for \" name \", one for me.\"))\n  ([] \"One for you, one for me.\"))\n" "(ns two-fer)\n(require '[clojure.string])\n\n(defn two-fer [name] ;; <- arglist goes here\n  ;; your code goes here\n  (str \"One for \" \n    (if (clojure.string/blank? name) \n      \"you\"\n      name\n    )\n      \", one for me.\")\n)" "(ns two-fer)\n\n(defn two-fer \n  ([]     (two-fer \"you\"))\n  ([name] (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\") ;; <- arglist goes here\n  ([name] (str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer \n  ([name] (str \"One for \" name \", one for me.\"))\n  ([] (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ([name]\n   (format \"One for %s, one for me.\" name))\n  ([]\n   (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer\n  ([]\n   (two-fer \"you\"))\n  ([name] ;; <- arglist goes here\n  ;; your code goes here\n  (format \"One for %s, one for me.\" name)))\n" "(ns two-fer)\n\n(defn two-fer [name] ;; <- arglist goes here\n  (when (some? name)\n    true\n    false)\n)\n" "(ns two-fer)\n\n(defn two-fer\n  ([name] ;; <- arglist goes here\n   (str \"One for \" name \", one for me.\"))\n  ([]\n   (two-fer \"you\")))\n" "(ns two-fer)\n\n(defn two-fer \n  ;; It is recalling the function with the value you\n  ([] (two-fer \"you\") )\n  ([name](str \"One for \" name \", one for me.\"))\n)\n" "(ns two-fer)\n\n(defn two-fer  ;; <- arglist goes here\n  ;; your code goes here\n  ([] (two-fer \"you\") )\n  ([name](str \"One for \" name \", one for me.\"))\n)\n\n\n\n" "(ns two-fer)\n\n(defn two-fer \n  ([] \"One for you, one for me.\")\n  ([name] (str \"One for \" name \", one for me.\")))\n\n\n"}