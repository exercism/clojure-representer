(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(require (quote (clojure.string)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " (if (clojure.string/blank? PLACEHOLDER-2) "you" PLACEHOLDER-2) ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def f (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(def two-fer (fn* ([] (f "you")) ([PLACEHOLDER-3] (f PLACEHOLDER-3))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (do (print "One for" PLACEHOLDER-2) (print ", one for me."))) ([] (print "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer-name (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(def two-fer (fn* ([] (two-fer-name "you")) ([PLACEHOLDER-3] (two-fer-name PLACEHOLDER-3))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (do str "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([& PLACEHOLDER-2] (let* [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)] (format "One for %s, one for me." (if (clojure.lang.Util/identical PLACEHOLDER-4 nil) "you" PLACEHOLDER-4))))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (two-fer "you"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([& PLACEHOLDER-2] (let* [PLACEHOLDER-3 (if (clojure.lang.Util/equiv (clojure.lang.RT/count PLACEHOLDER-2) 0) "you" (first PLACEHOLDER-2))] (str "One for " PLACEHOLDER-3 ", one for me.")))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (do (clojure.core/refer (quote clojure.core)) (clojure.core/require (quote [clojure.string :as string]))) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (string/join "" ["One for " PLACEHOLDER-2 ", one for me."]))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " (if (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0) PLACEHOLDER-2 "you") ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2)) ([] "One for you, one for me.")))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for" " " PLACEHOLDER-2 ", " "one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (reduce str ["One for " PLACEHOLDER-2 ", one for me."]))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([& PLACEHOLDER-2] (let* [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)] (if (clojure.string/blank? PLACEHOLDER-4) "One for you, one for me." (str "One for " PLACEHOLDER-4 ", one for me."))))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] "One for you, one for me.")))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (two-fer "you"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (do ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " (if PLACEHOLDER-2 PLACEHOLDER-2 "you") ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for you"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] "One for you, one for me.")))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] "One for you, one for me.")))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (format "One for %s, one for me." PLACEHOLDER-2))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(two-fer)(two-fer "haley")(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (str "One for you, one for me.")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(two-fer)(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([& PLACEHOLDER-2] (let* [PLACEHOLDER-3 ((fnil first ["you"]) PLACEHOLDER-2)] (str "One for " PLACEHOLDER-3 ", one for me.")))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (do [] (str "One for you, one for me.") [PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (if (clojure.lang.Util/equiv PLACEHOLDER-2 "") (str "One for " PLACEHOLDER-2 ", one for me.") "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (str "One for you, one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (if (clojure.lang.Util/identical PLACEHOLDER-2 nil) "One for me, one for you." (if (clojure.lang.Numbers/gt (clojure.lang.RT/count PLACEHOLDER-2) 0) (str "One for " PLACEHOLDER-2 ", one for you"))))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me.")) ([] (two-fer "you"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([PLACEHOLDER-2] (println (str "One for " PLACEHOLDER-2 ", one for me."))) ([] (two-fer "you"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([& PLACEHOLDER-2] (let* [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 (clojure.lang.RT/nth PLACEHOLDER-3 0 nil)] (format "One for %s, one for me." (let* [PLACEHOLDER-5 PLACEHOLDER-4] (if PLACEHOLDER-5 PLACEHOLDER-5 "you")))))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me"))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(use (quote [clojure.string :only (join)]))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (join ["One for " PLACEHOLDER-2 ", one for me."]))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " (if (clojure.lang.Util/equiv PLACEHOLDER-2 "") "you" PLACEHOLDER-2) ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] "One for you, one for me.") ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))(do (clojure.core/in-ns (quote two-fer)) (.resetMeta (clojure.lang.Namespace/find (quote two-fer)) {:file "file:/C:/Users/porko/Documents/GitHub/exercism/clojure-representer/src/two_fer.clj", :line 1, :column 5, :end-line 1, :end-column 12}) ((fn* PLACEHOLDER-1 ([] (do (clojure.lang.Var/pushThreadBindings #:clojure.lang.Compiler{LOADER (.getClassLoader (.getClass PLACEHOLDER-1))}) (try (clojure.core/refer (quote clojure.core)) (finally (clojure.lang.Var/popThreadBindings))))))) (if (.equals (quote two-fer) (quote clojure.core)) nil (do (clojure.lang.LockingTransaction/runInTransaction (fn* ([] (clojure.core/commute (clojure.core/deref (var clojure.core/*loaded-libs*)) clojure.core/conj (quote two-fer))))) nil)))(def two-fer (fn* ([] (two-fer "you")) ([PLACEHOLDER-2] (str "One for " PLACEHOLDER-2 ", one for me."))))