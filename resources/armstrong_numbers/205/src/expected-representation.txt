(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  number-of-digits
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     1
     (clojure.lang.Numbers/add
      (number-of-digits
       (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      1)))))
 (def
  pow
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-3 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-2
      (pow
       PLACEHOLDER-2
       (clojure.lang.Numbers/minus PLACEHOLDER-3 1)))))))
 (def
  armstrong-sum
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (do
     (def value (pow (mod PLACEHOLDER-4 10) PLACEHOLDER-5))
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-4 10)
      value
      (clojure.lang.Numbers/add
       value
       (armstrong-sum
        (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
        PLACEHOLDER-5)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (do
     (def digits (number-of-digits PLACEHOLDER-6))
     (clojure.lang.Util/equiv
      (armstrong-sum PLACEHOLDER-6 digits)
      PLACEHOLDER-6))))))
