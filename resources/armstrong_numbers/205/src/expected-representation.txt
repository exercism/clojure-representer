(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     1
     (clojure.lang.Numbers/add
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      1)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-3 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-3
      (PLACEHOLDER-2
       PLACEHOLDER-3
       (clojure.lang.Numbers/minus PLACEHOLDER-3 1)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-5]
    (do
     (def
      PLACEHOLDER-6
      (PLACEHOLDER-2 (mod PLACEHOLDER-5 10) PLACEHOLDER-5))
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-5 10)
      PLACEHOLDER-6
      (clojure.lang.Numbers/add
       PLACEHOLDER-6
       (PLACEHOLDER-5
        (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)
        PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-9]
    (do
     (def PLACEHOLDER-9 (PLACEHOLDER-1 PLACEHOLDER-9))
     (clojure.lang.Util/equiv
      (PLACEHOLDER-5 PLACEHOLDER-9 PLACEHOLDER-9)
      PLACEHOLDER-9))))))
