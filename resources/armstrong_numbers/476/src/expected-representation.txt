(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (rseq
     (mapv
      (fn* ([PLACEHOLDER-2] (mod PLACEHOLDER-2 10)))
      (take-while
       pos?
       (iterate
        (fn*
         ([PLACEHOLDER-3]
          (clojure.lang.Numbers/quotient PLACEHOLDER-3 10)))
        PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-4
  (fn* ([PLACEHOLDER-5] (clojure.lang.RT/count (str PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-7]
    (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (clojure.lang.Util/equiv
     PLACEHOLDER-7
     (reduce
      +
      (map
       PLACEHOLDER-6
       (PLACEHOLDER-1 PLACEHOLDER-7)
       (map
        (constantly (PLACEHOLDER-4 PLACEHOLDER-7))
        (PLACEHOLDER-1 PLACEHOLDER-7)))))))))
