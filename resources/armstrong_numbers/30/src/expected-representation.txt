(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as m]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-1
     (let*
      [PLACEHOLDER-3
       (mapv
        (fn*
         ([PLACEHOLDER-2]
          (java.lang.Character/digit PLACEHOLDER-2 10)))
        (str PLACEHOLDER-1))]
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-4]
          (m/expt
           PLACEHOLDER-4
           (clojure.lang.RT/longCast
            (clojure.lang.RT/count PLACEHOLDER-3)))))
        PLACEHOLDER-3))))))))
