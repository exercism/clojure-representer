(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn* ([PLACEHOLDER-2] (java.lang.Integer/parseInt PLACEHOLDER-2)))
     (clojure.string/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (if
     (clojure.lang.Util/equiv 0 PLACEHOLDER-4)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-3
      (PLACEHOLDER-3
       PLACEHOLDER-3
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (clojure.lang.Util/equiv
     PLACEHOLDER-6
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-7]
         (PLACEHOLDER-3
          PLACEHOLDER-7
          (clojure.lang.RT/count (PLACEHOLDER-1 PLACEHOLDER-6)))))
       (PLACEHOLDER-1 PLACEHOLDER-6))))))))
