(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (let*
     [PLACEHOLDER-2
      (fn*
       PLACEHOLDER-2
       ([PLACEHOLDER-3]
        (new
         clojure.lang.LazySeq
         (fn*
          ([]
           (loop*
            [PLACEHOLDER-3 PLACEHOLDER-3]
            (let*
             [PLACEHOLDER-4 (clojure.core/seq PLACEHOLDER-3)]
             (if
              PLACEHOLDER-4
              (let*
               [PLACEHOLDER-5 PLACEHOLDER-4]
               (if
                (clojure.core/chunked-seq? PLACEHOLDER-5)
                (let*
                 [PLACEHOLDER-6
                  (clojure.core/chunk-first PLACEHOLDER-5)
                  PLACEHOLDER-7
                  (clojure.lang.RT/intCast
                   (clojure.lang.RT/count PLACEHOLDER-6))
                  PLACEHOLDER-7
                  (clojure.core/chunk-buffer PLACEHOLDER-7)]
                 (if
                  (loop*
                   [PLACEHOLDER-7 (clojure.lang.RT/intCast 0)]
                   (if
                    (clojure.lang.Numbers/lt
                     PLACEHOLDER-7
                     PLACEHOLDER-7)
                    (let*
                     [PLACEHOLDER-8 (.nth PLACEHOLDER-6 PLACEHOLDER-7)]
                     (do
                      (clojure.core/chunk-append
                       PLACEHOLDER-7
                       PLACEHOLDER-2)
                      (recur
                       (clojure.lang.Numbers/unchecked_inc
                        PLACEHOLDER-7))))
                    true))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-7)
                   (PLACEHOLDER-2
                    (clojure.core/chunk-rest PLACEHOLDER-5)))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-7)
                   nil)))
                (let*
                 [PLACEHOLDER-11 (clojure.core/first PLACEHOLDER-5)]
                 (clojure.core/cons
                  PLACEHOLDER-2
                  (PLACEHOLDER-2
                   (clojure.core/rest PLACEHOLDER-5))))))))))))))]
     (PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-15
  (fn*
   ([PLACEHOLDER-16 PLACEHOLDER-16]
    (reduce * (PLACEHOLDER-1 (range PLACEHOLDER-16) PLACEHOLDER-16)))))
 (def
  PLACEHOLDER-18
  (fn*
   ([PLACEHOLDER-18]
    (do
     (def PLACEHOLDER-19 (str PLACEHOLDER-18))
     (def PLACEHOLDER-20 (clojure.lang.RT/count PLACEHOLDER-19))
     (def
      PLACEHOLDER-21
      (reduce
       (fn*
        ([PLACEHOLDER-21 PLACEHOLDER-22]
         (clojure.lang.Numbers/add
          PLACEHOLDER-21
          (PLACEHOLDER-15
           (java.lang.Character/digit PLACEHOLDER-22 10)
           PLACEHOLDER-20))))
       0
       PLACEHOLDER-19))
     (clojure.lang.Numbers/equiv PLACEHOLDER-18 PLACEHOLDER-21))))))
