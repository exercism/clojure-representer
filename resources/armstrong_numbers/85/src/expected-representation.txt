(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn* ([PLACEHOLDER-1] (clojure.lang.RT/count (str PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3] (map (comp read-string str) (str PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (loop*
     [PLACEHOLDER-5 1 PLACEHOLDER-5 PLACEHOLDER-5]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-5)
      PLACEHOLDER-5
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-4 PLACEHOLDER-5)
       (clojure.lang.Numbers/dec PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      PLACEHOLDER-7
      PLACEHOLDER-9
      (PLACEHOLDER-1 PLACEHOLDER-7)
      PLACEHOLDER-11
      (PLACEHOLDER-2 PLACEHOLDER-7)]
     (if
      (clojure.lang.Numbers/equiv
       (reduce
        +
        (map
         (fn*
          ([PLACEHOLDER-12]
           (PLACEHOLDER-4 PLACEHOLDER-12 PLACEHOLDER-9)))
         PLACEHOLDER-11))
       PLACEHOLDER-7)
      true
      false))))))
