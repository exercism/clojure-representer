(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     '()
     (let*
      [PLACEHOLDER-1
       (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)
       PLACEHOLDER-2
       (clojure.lang.Numbers/remainder PLACEHOLDER-1 10)]
      (cons PLACEHOLDER-2 (PLACEHOLDER-1 PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-5]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-5 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-5
      (PLACEHOLDER-4
       PLACEHOLDER-5
       (clojure.lang.Numbers/dec PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-7 0)
     0
     (let*
      [PLACEHOLDER-8
       (PLACEHOLDER-1 PLACEHOLDER-7)
       PLACEHOLDER-9
       (clojure.lang.RT/count PLACEHOLDER-8)]
      (clojure.lang.Util/equiv
       PLACEHOLDER-7
       (reduce
        +
        (map
         (fn*
          ([PLACEHOLDER-10]
           (PLACEHOLDER-4 PLACEHOLDER-10 PLACEHOLDER-9)))
         PLACEHOLDER-8)))))))))
