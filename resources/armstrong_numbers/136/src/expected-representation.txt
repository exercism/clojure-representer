(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  getDigits
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     '()
     (let*
      [PLACEHOLDER-2
       (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)
       PLACEHOLDER-3
       (clojure.lang.Numbers/remainder PLACEHOLDER-1 10)]
      (cons PLACEHOLDER-3 (getDigits PLACEHOLDER-2)))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-5 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-4
      (exp PLACEHOLDER-4 (clojure.lang.Numbers/dec PLACEHOLDER-5)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-6 0)
     0
     (let*
      [PLACEHOLDER-7
       (getDigits PLACEHOLDER-6)
       PLACEHOLDER-8
       (clojure.lang.RT/count PLACEHOLDER-7)]
      (clojure.lang.Util/equiv
       PLACEHOLDER-6
       (reduce
        +
        (map
         (fn* ([PLACEHOLDER-9] (exp PLACEHOLDER-9 PLACEHOLDER-8)))
         PLACEHOLDER-7)))))))))
