(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  number-to-vector
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-3 []]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-2 0)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
       (conj
        PLACEHOLDER-3
        (clojure.lang.Numbers/remainder PLACEHOLDER-2 10))))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-5 0)
     (clojure.lang.Numbers/divide
      1
      (exp PLACEHOLDER-4 (clojure.lang.Numbers/minus PLACEHOLDER-5)))
     (loop*
      [PLACEHOLDER-6
       1
       PLACEHOLDER-7
       PLACEHOLDER-4
       PLACEHOLDER-8
       PLACEHOLDER-5]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-8 0)
       PLACEHOLDER-6
       (if
        (even? PLACEHOLDER-8)
        (recur
         PLACEHOLDER-6
         (clojure.lang.Numbers/multiply PLACEHOLDER-7 PLACEHOLDER-7)
         (clojure.lang.Numbers/divide PLACEHOLDER-8 2))
        (recur
         (clojure.lang.Numbers/multiply PLACEHOLDER-6 PLACEHOLDER-7)
         PLACEHOLDER-7
         (clojure.lang.Numbers/dec PLACEHOLDER-8)))))))))
 (def
  armstrong
  (fn*
   ([PLACEHOLDER-9]
    (loop*
     [PLACEHOLDER-10 (number-to-vector PLACEHOLDER-9) PLACEHOLDER-11 0]
     (if
      (empty? PLACEHOLDER-10)
      PLACEHOLDER-11
      (recur
       (rest PLACEHOLDER-10)
       (clojure.lang.Numbers/add
        (exp
         (first PLACEHOLDER-10)
         (clojure.lang.RT/count (number-to-vector PLACEHOLDER-9)))
        PLACEHOLDER-11)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     PLACEHOLDER-12
     (armstrong PLACEHOLDER-12))))))
