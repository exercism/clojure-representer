(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-2 []]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-2 0)
      PLACEHOLDER-2
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
       (conj
        PLACEHOLDER-2
        (clojure.lang.Numbers/remainder PLACEHOLDER-2 10))))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-5 0)
     (clojure.lang.Numbers/divide
      1
      (PLACEHOLDER-4
       PLACEHOLDER-4
       (clojure.lang.Numbers/minus PLACEHOLDER-5)))
     (loop*
      [PLACEHOLDER-6
       1
       PLACEHOLDER-6
       PLACEHOLDER-4
       PLACEHOLDER-7
       PLACEHOLDER-5]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-7 0)
       PLACEHOLDER-6
       (if
        (even? PLACEHOLDER-7)
        (recur
         PLACEHOLDER-6
         (clojure.lang.Numbers/multiply PLACEHOLDER-6 PLACEHOLDER-6)
         (clojure.lang.Numbers/divide PLACEHOLDER-7 2))
        (recur
         (clojure.lang.Numbers/multiply PLACEHOLDER-6 PLACEHOLDER-6)
         PLACEHOLDER-6
         (clojure.lang.Numbers/dec PLACEHOLDER-7)))))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-10]
    (loop*
     [PLACEHOLDER-10 (PLACEHOLDER-1 PLACEHOLDER-10) PLACEHOLDER-11 0]
     (if
      (empty? PLACEHOLDER-10)
      PLACEHOLDER-11
      (recur
       (rest PLACEHOLDER-10)
       (clojure.lang.Numbers/add
        (PLACEHOLDER-4
         (first PLACEHOLDER-10)
         (clojure.lang.RT/count (PLACEHOLDER-1 PLACEHOLDER-10)))
        PLACEHOLDER-11)))))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-14]
    (clojure.lang.Util/equiv
     PLACEHOLDER-14
     (PLACEHOLDER-10 PLACEHOLDER-14))))))
