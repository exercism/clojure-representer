(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-1
      (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)
      PLACEHOLDER-2
      (mod PLACEHOLDER-1 10)]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-1 0)
      (list PLACEHOLDER-2)
      (new
       clojure.lang.LazySeq
       (fn*
        ([] (conj (PLACEHOLDER-1 PLACEHOLDER-1) PLACEHOLDER-2)))))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (apply * (repeat PLACEHOLDER-6 PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7
      (PLACEHOLDER-1 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-7)
      PLACEHOLDER-10
      (map
       (fn*
        ([PLACEHOLDER-10]
         (PLACEHOLDER-5 PLACEHOLDER-10 PLACEHOLDER-9)))
       PLACEHOLDER-7)]
     (clojure.lang.Util/equiv
      (apply + PLACEHOLDER-10)
      PLACEHOLDER-7))))))
