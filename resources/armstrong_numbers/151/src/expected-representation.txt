(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def temp (str/split (str PLACEHOLDER-1) (re-pattern "")))
     (def num-digits (clojure.lang.RT/count temp))
     (def nums (mapv bigint temp))
     (def
      squared
      (mapv
       (fn*
        ([PLACEHOLDER-2]
         (java.lang.Math/pow PLACEHOLDER-2 num-digits)))
       nums))
     (def sum (apply + squared))
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-1 21897142587612075)
      true
      (if
       :else
       (clojure.lang.Util/equiv
        sum
        (clojure.lang.RT/floatCast PLACEHOLDER-1)))))))))
