(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  arm-calc
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4 (clojure.lang.RT/count (str PLACEHOLDER-3))]
     (loop*
      [PLACEHOLDER-5 (str PLACEHOLDER-3) PLACEHOLDER-6 0]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-5)
        0)
       PLACEHOLDER-6
       (recur
        (subs PLACEHOLDER-5 1)
        (clojure.lang.Numbers/add
         PLACEHOLDER-6
         (exp
          (java.lang.Integer/parseInt (subs PLACEHOLDER-5 0 1))
          PLACEHOLDER-4)))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (clojure.lang.Util/equiv PLACEHOLDER-7 (arm-calc PLACEHOLDER-7))))))
