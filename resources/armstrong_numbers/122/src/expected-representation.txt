(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-1] (reduce + PLACEHOLDER-1))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3] (java.lang.Integer/parseInt (str PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (loop*
     [PLACEHOLDER-5 1 PLACEHOLDER-5 PLACEHOLDER-5]
     (if
      (clojure.lang.Numbers/gt PLACEHOLDER-5 0)
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-4)
       (clojure.lang.Numbers/dec PLACEHOLDER-5))
      PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     PLACEHOLDER-8
     (let*
      [PLACEHOLDER-9
       (seq (str PLACEHOLDER-8))
       PLACEHOLDER-10
       (clojure.lang.RT/count PLACEHOLDER-9)]
      (PLACEHOLDER-1
       (map
        (fn*
         ([PLACEHOLDER-11]
          (PLACEHOLDER-4
           (PLACEHOLDER-2 PLACEHOLDER-11)
           PLACEHOLDER-10)))
        PLACEHOLDER-9))))))))
