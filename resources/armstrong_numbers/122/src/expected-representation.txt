(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def sum (fn* ([PLACEHOLDER-1] (reduce + PLACEHOLDER-1))))
 (def
  char->num
  (fn*
   ([PLACEHOLDER-2] (java.lang.Integer/parseInt (str PLACEHOLDER-2)))))
 (def
  expt
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (loop*
     [PLACEHOLDER-5 1 PLACEHOLDER-6 PLACEHOLDER-4]
     (if
      (clojure.lang.Numbers/gt PLACEHOLDER-6 0)
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-3)
       (clojure.lang.Numbers/dec PLACEHOLDER-6))
      PLACEHOLDER-5)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (clojure.lang.Util/equiv
     PLACEHOLDER-7
     (let*
      [PLACEHOLDER-8
       (seq (str PLACEHOLDER-7))
       PLACEHOLDER-9
       (clojure.lang.RT/count PLACEHOLDER-8)]
      (sum
       (map
        (fn*
         ([PLACEHOLDER-10]
          (expt (char->num PLACEHOLDER-10) PLACEHOLDER-9)))
        PLACEHOLDER-8))))))))
