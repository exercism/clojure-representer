(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def
      digits
      (fn*
       ([PLACEHOLDER-2]
        (if
         (clojure.lang.Numbers/isPos PLACEHOLDER-2)
         (cons
          (mod PLACEHOLDER-2 10)
          (digits
           (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)))))))
     (def
      exp
      (fn*
       ([PLACEHOLDER-3 PLACEHOLDER-4]
        (loop*
         [PLACEHOLDER-5 1 PLACEHOLDER-6 PLACEHOLDER-3]
         (if
          (clojure.lang.Numbers/isZero PLACEHOLDER-6)
          PLACEHOLDER-5
          (recur
           (clojure.lang.Numbers/multiply PLACEHOLDER-4 PLACEHOLDER-5)
           (clojure.lang.Numbers/dec PLACEHOLDER-6)))))))
     (def list-of-digits (digits PLACEHOLDER-1))
     (def num-of-digits (clojure.lang.RT/count list-of-digits))
     (def
      raised-to-power
      (map (partial exp num-of-digits) list-of-digits))
     (clojure.lang.Util/equiv
      PLACEHOLDER-1
      (reduce + raised-to-power)))))))
