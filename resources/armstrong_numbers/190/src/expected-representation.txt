(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (fn*
       PLACEHOLDER-2
       ([PLACEHOLDER-2]
        (new
         clojure.lang.LazySeq
         (fn*
          ([]
           (loop*
            [PLACEHOLDER-3 PLACEHOLDER-2]
            (let*
             [PLACEHOLDER-4 (clojure.core/seq PLACEHOLDER-3)]
             (if
              PLACEHOLDER-4
              (let*
               [PLACEHOLDER-5 PLACEHOLDER-4]
               (if
                (clojure.core/chunked-seq? PLACEHOLDER-5)
                (let*
                 [PLACEHOLDER-6
                  (clojure.core/chunk-first PLACEHOLDER-5)
                  PLACEHOLDER-6
                  (clojure.lang.RT/intCast
                   (clojure.lang.RT/count PLACEHOLDER-6))
                  PLACEHOLDER-6
                  (clojure.core/chunk-buffer PLACEHOLDER-6)]
                 (if
                  (loop*
                   [PLACEHOLDER-7 (clojure.lang.RT/intCast 0)]
                   (if
                    (clojure.lang.Numbers/lt
                     PLACEHOLDER-7
                     PLACEHOLDER-6)
                    (let*
                     [PLACEHOLDER-8 (.nth PLACEHOLDER-6 PLACEHOLDER-7)]
                     (do
                      (clojure.core/chunk-append
                       PLACEHOLDER-6
                       (clojure.lang.Numbers/minus
                        (clojure.lang.RT/byteCast PLACEHOLDER-8)
                        48))
                      (recur
                       (clojure.lang.Numbers/unchecked_inc
                        PLACEHOLDER-7))))
                    true))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-6)
                   (PLACEHOLDER-2
                    (clojure.core/chunk-rest PLACEHOLDER-5)))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-6)
                   nil)))
                (let*
                 [PLACEHOLDER-11 (clojure.core/first PLACEHOLDER-5)]
                 (clojure.core/cons
                  (clojure.lang.Numbers/minus
                   (clojure.lang.RT/byteCast PLACEHOLDER-11)
                   48)
                  (PLACEHOLDER-2
                   (clojure.core/rest PLACEHOLDER-5))))))))))))))]
     (PLACEHOLDER-2 (str PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-15 PLACEHOLDER-15]
    (reduce * (repeat PLACEHOLDER-15 PLACEHOLDER-15)))))
 (def
  PLACEHOLDER-16
  (fn*
   ([PLACEHOLDER-17]
    (let*
     [PLACEHOLDER-17
      (PLACEHOLDER-1 PLACEHOLDER-17)
      PLACEHOLDER-18
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-19]
          (PLACEHOLDER-14
           PLACEHOLDER-19
           (clojure.lang.RT/count PLACEHOLDER-17))))
        PLACEHOLDER-17))]
     (clojure.lang.Util/equiv PLACEHOLDER-17 PLACEHOLDER-18))))))
