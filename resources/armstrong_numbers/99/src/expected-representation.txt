(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1] (PLACEHOLDER-1 PLACEHOLDER-1 []))
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-3
      (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
      PLACEHOLDER-4
      (mod PLACEHOLDER-2 10)
      PLACEHOLDER-5
      (cons PLACEHOLDER-4 PLACEHOLDER-3)]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-3 0)
      [(clojure.lang.RT/count PLACEHOLDER-5) PLACEHOLDER-5]
      (recur PLACEHOLDER-3 PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-8 PLACEHOLDER-8]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-8 0)
     1
     (reduce * (repeat PLACEHOLDER-8 PLACEHOLDER-8))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-10
      (PLACEHOLDER-1 PLACEHOLDER-10)
      PLACEHOLDER-12
      (clojure.lang.RT/nth PLACEHOLDER-10 0 nil)
      PLACEHOLDER-13
      (clojure.lang.RT/nth PLACEHOLDER-10 1 nil)
      PLACEHOLDER-14
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-14]
          (PLACEHOLDER-7 PLACEHOLDER-12 PLACEHOLDER-14)))
        PLACEHOLDER-13))
      PLACEHOLDER-16
      (clojure.lang.Util/equiv PLACEHOLDER-10 PLACEHOLDER-14)]
     PLACEHOLDER-16)))))
