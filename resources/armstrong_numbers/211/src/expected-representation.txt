(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  calc-armstrong
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2 (clojure.lang.RT/count (str PLACEHOLDER-1))]
     (loop*
      [PLACEHOLDER-3
       PLACEHOLDER-1
       PLACEHOLDER-4
       (clojure.lang.Numbers/remainder PLACEHOLDER-1 10)
       PLACEHOLDER-5
       (biginteger 0)]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-3)
       PLACEHOLDER-5
       (let*
        [PLACEHOLDER-6
         (clojure.lang.Numbers/quotient PLACEHOLDER-3 10)
         PLACEHOLDER-7
         PLACEHOLDER-4]
        (recur
         PLACEHOLDER-6
         (clojure.lang.Numbers/remainder PLACEHOLDER-6 10)
         (clojure.lang.Numbers/add
          PLACEHOLDER-5
          (.pow (biginteger PLACEHOLDER-7) PLACEHOLDER-2))))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (if
     (clojure.lang.Util/equiv
      PLACEHOLDER-8
      (calc-armstrong PLACEHOLDER-8))
     true
     false)))))
