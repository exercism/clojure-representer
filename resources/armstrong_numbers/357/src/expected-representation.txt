(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  calculate-armstrong
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (str/split (str PLACEHOLDER-1) (re-pattern ""))
      PLACEHOLDER-3
      (clojure.lang.RT/count PLACEHOLDER-2)]
     (reduce
      (fn*
       ([PLACEHOLDER-4 PLACEHOLDER-5]
        (clojure.lang.Numbers/add
         PLACEHOLDER-4
         (java.lang.Math/pow
          (java.lang.Integer/parseInt PLACEHOLDER-5)
          PLACEHOLDER-3))))
      0
      PLACEHOLDER-2)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (clojure.lang.RT/floatCast (calculate-armstrong PLACEHOLDER-6))]
     (if
      (clojure.lang.Util/equiv
       PLACEHOLDER-7
       (clojure.lang.RT/floatCast PLACEHOLDER-6))
      true
      false))))))
