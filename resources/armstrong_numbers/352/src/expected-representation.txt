(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  digits
  (fn*
   ([PLACEHOLDER-1]
    (if
     (not (clojure.lang.Numbers/isZero PLACEHOLDER-1))
     (concat
      (digits (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      [(mod PLACEHOLDER-1 10)])))))
 (def
  expt
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-3)
     1
     (clojure.lang.Numbers/multiply
      (expt PLACEHOLDER-2 (clojure.lang.Numbers/minus PLACEHOLDER-3 1))
      PLACEHOLDER-2)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      (digits PLACEHOLDER-4)
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-4
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-7] (expt PLACEHOLDER-7 PLACEHOLDER-6)))
        PLACEHOLDER-5))))))))
