(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4
      (let*
       [PLACEHOLDER-4
        (fn*
         PLACEHOLDER-4
         ([PLACEHOLDER-5]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-5 PLACEHOLDER-5]
              (let*
               [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-5)]
               (if
                PLACEHOLDER-6
                (let*
                 [PLACEHOLDER-7 PLACEHOLDER-6]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-7)
                  (let*
                   [PLACEHOLDER-8
                    (clojure.core/chunk-first PLACEHOLDER-7)
                    PLACEHOLDER-8
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-8))
                    PLACEHOLDER-9
                    (clojure.core/chunk-buffer PLACEHOLDER-8)]
                   (if
                    (loop*
                     [PLACEHOLDER-9 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-9
                       PLACEHOLDER-8)
                      (let*
                       [PLACEHOLDER-10
                        (.nth PLACEHOLDER-8 PLACEHOLDER-9)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-9
                         (clojure.lang.Numbers/minus
                          (clojure.lang.RT/intCast PLACEHOLDER-10)
                          (clojure.lang.RT/intCast \0)))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-9))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-9)
                     (PLACEHOLDER-4
                      (clojure.core/chunk-rest PLACEHOLDER-7)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-9)
                     nil)))
                  (let*
                   [PLACEHOLDER-13 (clojure.core/first PLACEHOLDER-7)]
                   (clojure.core/cons
                    (clojure.lang.Numbers/minus
                     (clojure.lang.RT/intCast PLACEHOLDER-13)
                     (clojure.lang.RT/intCast \0))
                    (PLACEHOLDER-4
                     (clojure.core/rest PLACEHOLDER-7))))))))))))))]
       (PLACEHOLDER-4 (str PLACEHOLDER-3)))
      PLACEHOLDER-16
      (clojure.lang.RT/count PLACEHOLDER-4)
      PLACEHOLDER-17
      (reduce
       (fn*
        ([PLACEHOLDER-18 PLACEHOLDER-18]
         (clojure.lang.Numbers/add
          PLACEHOLDER-18
          (PLACEHOLDER-1 PLACEHOLDER-18 PLACEHOLDER-16))))
       0
       PLACEHOLDER-4)]
     (clojure.lang.Util/equiv PLACEHOLDER-17 PLACEHOLDER-3))))))
