(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isPos PLACEHOLDER-1)
     (conj
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (mod PLACEHOLDER-1 10))
     []))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-3)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-3
      (PLACEHOLDER-2
       PLACEHOLDER-3
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6 (PLACEHOLDER-1 PLACEHOLDER-5)]
     (clojure.lang.Util/equiv
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-7]
          (PLACEHOLDER-2
           PLACEHOLDER-7
           (clojure.lang.RT/count PLACEHOLDER-6))))
        PLACEHOLDER-6))
      PLACEHOLDER-5))))))
