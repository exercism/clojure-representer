(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2]
       (clojure.lang.Numbers/minus
        (clojure.lang.RT/intCast PLACEHOLDER-2)
        48)))
     (seq (str PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-4 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-3
      (PLACEHOLDER-3
       PLACEHOLDER-3
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (PLACEHOLDER-1 PLACEHOLDER-6)
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (reduce
      (fn*
       ([PLACEHOLDER-9 PLACEHOLDER-10]
        (clojure.lang.Numbers/add
         PLACEHOLDER-9
         (PLACEHOLDER-3 PLACEHOLDER-10 PLACEHOLDER-8))))
      (clojure.lang.RT/longCast 0)
      PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     PLACEHOLDER-12
     (PLACEHOLDER-6 PLACEHOLDER-12))))))
