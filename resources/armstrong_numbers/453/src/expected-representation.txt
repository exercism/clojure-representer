(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  split-num
  (fn* ([PLACEHOLDER-3] (map str (seq (str PLACEHOLDER-3))))))
 (def
  get-pows
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-7
      (map
       (fn*
        ([PLACEHOLDER-6]
         (exp (new Integer PLACEHOLDER-6) PLACEHOLDER-5)))
       PLACEHOLDER-4)]
     (reduce + 0N PLACEHOLDER-7)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (split-num PLACEHOLDER-8)
      PLACEHOLDER-10
      (clojure.lang.RT/count PLACEHOLDER-9)
      PLACEHOLDER-11
      (get-pows PLACEHOLDER-9 PLACEHOLDER-10)]
     (clojure.lang.Numbers/equiv PLACEHOLDER-11 PLACEHOLDER-8))))))
