(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce
     *
     (clojure.lang.RT/longCast 1)
     (repeat
      PLACEHOLDER-2
      (clojure.lang.RT/longCast PLACEHOLDER-1))))))
 (def
  arm-sum
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce
     +
     (clojure.lang.RT/longCast 0)
     (map
      (fn* ([PLACEHOLDER-5] (pow PLACEHOLDER-5 PLACEHOLDER-3)))
      PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (clojure.lang.RT/count (str PLACEHOLDER-6))
      PLACEHOLDER-9
      (map
       (fn*
        ([PLACEHOLDER-8] (java.lang.Character/digit PLACEHOLDER-8 10)))
       (seq (str PLACEHOLDER-6)))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (arm-sum PLACEHOLDER-7 PLACEHOLDER-9)))))))
