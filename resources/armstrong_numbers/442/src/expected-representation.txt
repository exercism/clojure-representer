(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  digits
  (fn*
   ([PLACEHOLDER-3] (map (comp read-string str) (str PLACEHOLDER-3)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      PLACEHOLDER-4
      PLACEHOLDER-6
      (clojure.lang.RT/count (digits PLACEHOLDER-4))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-5
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-7] (exp PLACEHOLDER-7 PLACEHOLDER-6)))
        (digits PLACEHOLDER-4)))))))))
