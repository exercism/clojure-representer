(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  length-of-number
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.RT/count
     (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  numbers-in-numbers
  (fn*
   ([PLACEHOLDER-2]
    (map bigdec (str/split (str PLACEHOLDER-2) (re-pattern ""))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3)))))
 (def
  calculate-armstong-number
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (reduce
     +
     (map
      (fn* ([PLACEHOLDER-7] (exp PLACEHOLDER-7 PLACEHOLDER-6)))
      PLACEHOLDER-5)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (length-of-number PLACEHOLDER-8)
      PLACEHOLDER-10
      (numbers-in-numbers PLACEHOLDER-8)]
     (clojure.lang.Util/equiv
      (bigdec PLACEHOLDER-8)
      (calculate-armstong-number PLACEHOLDER-10 PLACEHOLDER-9)))))))
