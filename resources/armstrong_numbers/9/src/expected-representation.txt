(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.RT/count
     (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3]
    (map bigdec (str/split (str PLACEHOLDER-3) (re-pattern ""))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-7 PLACEHOLDER-7]
    (reduce
     +
     (map
      (fn*
       ([PLACEHOLDER-8] (PLACEHOLDER-4 PLACEHOLDER-8 PLACEHOLDER-7)))
      PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-10
      (PLACEHOLDER-1 PLACEHOLDER-10)
      PLACEHOLDER-12
      (PLACEHOLDER-2 PLACEHOLDER-10)]
     (clojure.lang.Util/equiv
      (bigdec PLACEHOLDER-10)
      (PLACEHOLDER-6 PLACEHOLDER-12 PLACEHOLDER-10)))))))
