(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-1)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-1
      (PLACEHOLDER-1
       PLACEHOLDER-1
       (clojure.lang.Numbers/dec PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-4]
    (clojure.lang.Numbers/quotient
     (mod
      PLACEHOLDER-4
      (PLACEHOLDER-1 10 (clojure.lang.Numbers/inc PLACEHOLDER-4)))
     (PLACEHOLDER-1 10 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7 (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (loop*
      [PLACEHOLDER-8 0 PLACEHOLDER-8 []]
      (if
       (not (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-7))
       (recur
        (clojure.lang.Numbers/inc PLACEHOLDER-8)
        (conj
         PLACEHOLDER-8
         (PLACEHOLDER-4 PLACEHOLDER-7 PLACEHOLDER-8)))
       PLACEHOLDER-8))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-12]
    (let*
     [PLACEHOLDER-12 (clojure.lang.RT/count (str PLACEHOLDER-12))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-12
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-12]
          (PLACEHOLDER-1 PLACEHOLDER-12 PLACEHOLDER-12)))
        (PLACEHOLDER-7 PLACEHOLDER-12)))))))))
