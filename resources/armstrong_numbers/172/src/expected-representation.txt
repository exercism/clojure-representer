(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2] (exp PLACEHOLDER-1 PLACEHOLDER-2 1))
   ([PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-4 0)
     PLACEHOLDER-5
     (exp
      PLACEHOLDER-3
      (clojure.lang.Numbers/minus PLACEHOLDER-4 1)
      (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-3))))))
 (def
  fexp
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-7]
    (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-6)))))
 (def
  digits
  (fn*
   ([PLACEHOLDER-8]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-8 10)
     [PLACEHOLDER-8]
     (conj
      (digits (clojure.lang.Numbers/quotient PLACEHOLDER-8 10))
      (clojure.lang.Numbers/remainder PLACEHOLDER-8 10))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-9]
    (let*
     [PLACEHOLDER-10 (digits PLACEHOLDER-9)]
     (if
      (clojure.lang.Util/equiv
       PLACEHOLDER-9
       (reduce
        +
        (map
         (fn*
          ([PLACEHOLDER-11]
           (exp
            PLACEHOLDER-11
            (clojure.lang.RT/count PLACEHOLDER-10))))
         PLACEHOLDER-10)))
      true
      false))))))
