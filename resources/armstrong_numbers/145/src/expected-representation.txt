(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.Util/equiv
     ((fn*
       ([PLACEHOLDER-4]
        (reduce
         (fn*
          ([PLACEHOLDER-5 PLACEHOLDER-6]
           (clojure.lang.Numbers/add
            (exp
             (java.lang.Integer/parseInt (.toString PLACEHOLDER-6))
             (:count PLACEHOLDER-4))
            PLACEHOLDER-5)))
         0
         (:coll PLACEHOLDER-4))))
      ((fn*
        ([PLACEHOLDER-7]
         (array-map
          :coll
          PLACEHOLDER-7
          :count
          (clojure.lang.RT/count PLACEHOLDER-7))))
       (str PLACEHOLDER-3)))
     PLACEHOLDER-3)))))
