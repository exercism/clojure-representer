(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 PLACEHOLDER-1]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-4
      (recur
       (clojure.lang.Numbers/dec PLACEHOLDER-3)
       (clojure.lang.Numbers/multiply
        PLACEHOLDER-4
        PLACEHOLDER-1)))))))
 (def
  div-mod
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    [(bigint (clojure.lang.Numbers/divide PLACEHOLDER-5 PLACEHOLDER-6))
     (mod PLACEHOLDER-5 PLACEHOLDER-6)])))
 (def
  armstrong-number
  (fn*
   ([PLACEHOLDER-7]
    (loop*
     [PLACEHOLDER-8 0 PLACEHOLDER-9 PLACEHOLDER-7 PLACEHOLDER-10 []]
     (let*
      [PLACEHOLDER-11
       (div-mod PLACEHOLDER-9 10)
       PLACEHOLDER-12
       (clojure.lang.RT/nth PLACEHOLDER-11 0 nil)
       PLACEHOLDER-13
       (clojure.lang.RT/nth PLACEHOLDER-11 1 nil)]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-12)
       (reduce
        +
        (map
         (fn* ([PLACEHOLDER-14] (pow PLACEHOLDER-14 PLACEHOLDER-8)))
         (cons PLACEHOLDER-13 PLACEHOLDER-10)))
       (recur
        (clojure.lang.Numbers/inc PLACEHOLDER-8)
        PLACEHOLDER-12
        (cons PLACEHOLDER-13 PLACEHOLDER-10))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-15]
    (clojure.lang.Util/equiv
     PLACEHOLDER-15
     (armstrong-number PLACEHOLDER-15))))))
