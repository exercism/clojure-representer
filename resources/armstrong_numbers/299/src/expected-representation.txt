(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1] (PLACEHOLDER-1 PLACEHOLDER-1 10))
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (loop*
     [PLACEHOLDER-3 PLACEHOLDER-3 PLACEHOLDER-4 nil]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-4
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-3 PLACEHOLDER-3)
       (cons
        (clojure.lang.Numbers/remainder PLACEHOLDER-3 PLACEHOLDER-3)
        PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7 PLACEHOLDER-8]
    (PLACEHOLDER-7 PLACEHOLDER-7 PLACEHOLDER-8 1))
   ([PLACEHOLDER-9 PLACEHOLDER-9 PLACEHOLDER-10]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-9 0)
     PLACEHOLDER-10
     (recur
      PLACEHOLDER-9
      (clojure.lang.Numbers/dec PLACEHOLDER-9)
      (clojure.lang.Numbers/multiply PLACEHOLDER-10 PLACEHOLDER-9))))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-12]
    (let*
     [PLACEHOLDER-13
      (PLACEHOLDER-1 PLACEHOLDER-12)
      PLACEHOLDER-14
      (clojure.lang.RT/count PLACEHOLDER-13)
      PLACEHOLDER-15
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-16]
          (PLACEHOLDER-7 PLACEHOLDER-16 PLACEHOLDER-14)))
        PLACEHOLDER-13))]
     (clojure.lang.Util/equiv PLACEHOLDER-15 PLACEHOLDER-12))))))
