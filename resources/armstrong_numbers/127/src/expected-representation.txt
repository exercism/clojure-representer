(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  toIntList
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (java.lang.Character/digit PLACEHOLDER-2 10)))
     (str PLACEHOLDER-1)))))
 (def
  **
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3)))))
 (def
  calcDigit
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6] (** PLACEHOLDER-5 PLACEHOLDER-6))))
 (def
  getArmstrongDigits
  (fn*
   ([PLACEHOLDER-7]
    (map
     (fn*
      ([PLACEHOLDER-8]
       (calcDigit
        PLACEHOLDER-8
        (clojure.lang.RT/count (str PLACEHOLDER-7)))))
     (toIntList PLACEHOLDER-7)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-9]
    (clojure.lang.Util/equiv
     PLACEHOLDER-9
     (reduce + (getArmstrongDigits PLACEHOLDER-9))))
   ([] false))))
