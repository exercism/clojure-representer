(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  digits
  (fn*
   ([PLACEHOLDER-1] (map (comp read-string str) (str PLACEHOLDER-1)))))
 (def
  pow
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  aggregate
  (fn*
   ([PLACEHOLDER-4]
    (reduce
     +
     (map
      (fn*
       ([PLACEHOLDER-5]
        (pow PLACEHOLDER-5 (clojure.lang.RT/count PLACEHOLDER-4))))
      PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (clojure.lang.Util/equiv
     PLACEHOLDER-6
     (aggregate (digits PLACEHOLDER-6)))))))
