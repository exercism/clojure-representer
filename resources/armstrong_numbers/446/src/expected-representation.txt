(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5 PLACEHOLDER-6]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-4 10)
     (clojure.lang.Util/equiv
      (clojure.lang.Numbers/add
       (exp PLACEHOLDER-4 PLACEHOLDER-5)
       PLACEHOLDER-6)
      PLACEHOLDER-3)
     (if
      :else
      (armstrong?
       PLACEHOLDER-3
       (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
       PLACEHOLDER-5
       (clojure.lang.Numbers/add
        (exp (mod PLACEHOLDER-4 10) PLACEHOLDER-5)
        PLACEHOLDER-6)))))
   ([PLACEHOLDER-7]
    (armstrong?
     PLACEHOLDER-7
     PLACEHOLDER-7
     (clojure.lang.RT/count (str PLACEHOLDER-7))
     0)))))
