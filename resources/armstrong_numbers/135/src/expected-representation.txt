(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-5
      (fn*
       ([PLACEHOLDER-2]
        (loop*
         [PLACEHOLDER-3 PLACEHOLDER-2 PLACEHOLDER-4 []]
         (if
          (clojure.lang.Numbers/isZero PLACEHOLDER-3)
          PLACEHOLDER-4
          (recur
           (clojure.lang.Numbers/quotient PLACEHOLDER-3 10)
           (conj
            PLACEHOLDER-4
            (clojure.lang.Numbers/remainder PLACEHOLDER-3 10)))))))
      PLACEHOLDER-8
      (fn*
       ([PLACEHOLDER-6 PLACEHOLDER-7]
        (apply * (repeat PLACEHOLDER-7 PLACEHOLDER-6))))
      PLACEHOLDER-9
      (clojure.lang.RT/count (PLACEHOLDER-5 PLACEHOLDER-1))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-1
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-10]
          (PLACEHOLDER-8 PLACEHOLDER-10 PLACEHOLDER-9)))
        (PLACEHOLDER-5 PLACEHOLDER-1)))))))))
