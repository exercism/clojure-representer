(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  split-digits
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2]
       (clojure.lang.Numbers/minus
        (clojure.lang.RT/intCast PLACEHOLDER-2)
        48)))
     (seq (str PLACEHOLDER-1))))))
 (def
  digits-count
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.RT/count (split-digits PLACEHOLDER-3)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (clojure.lang.Util/equiv
     PLACEHOLDER-4
     (clojure.lang.RT/longCast
      (reduce
       (fn*
        ([PLACEHOLDER-5 PLACEHOLDER-6]
         (clojure.lang.Numbers/add
          PLACEHOLDER-5
          (java.lang.Math/pow
           PLACEHOLDER-6
           (digits-count PLACEHOLDER-4)))))
       0
       (split-digits PLACEHOLDER-4))))))))
