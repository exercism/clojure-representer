(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-1 0)
     (clojure.lang.Numbers/inc
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)))
     0))))
 (def PLACEHOLDER-2 (biginteger 10))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-3 0)
     (.add
      (.pow (.remainder PLACEHOLDER-3 PLACEHOLDER-2) PLACEHOLDER-3)
      (PLACEHOLDER-2
       (.divide PLACEHOLDER-3 PLACEHOLDER-2)
       PLACEHOLDER-3))
     (biginteger 0)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-6
     (PLACEHOLDER-2
      (biginteger PLACEHOLDER-6)
      (PLACEHOLDER-1 PLACEHOLDER-6)))))))
