(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  num-digits
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-1 0)
     (clojure.lang.Numbers/inc
      (num-digits (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)))
     0))))
 (def big-ten (biginteger 10))
 (def
  armstrong-sum
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-2 0)
     (.add
      (.pow (.remainder PLACEHOLDER-2 big-ten) PLACEHOLDER-3)
      (armstrong-sum (.divide PLACEHOLDER-2 big-ten) PLACEHOLDER-3))
     (biginteger 0)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-4
     (armstrong-sum
      (biginteger PLACEHOLDER-4)
      (num-digits PLACEHOLDER-4)))))))
