(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1] (PLACEHOLDER-1 PLACEHOLDER-1 []))
   ([PLACEHOLDER-2 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-2 1)
     PLACEHOLDER-2
     (if
      :else
      (PLACEHOLDER-1
       (clojure.lang.Numbers/divide PLACEHOLDER-2 10)
       (conj
        PLACEHOLDER-2
        (clojure.lang.RT/intCast
         (clojure.lang.Numbers/remainder PLACEHOLDER-2 10)))))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-6]
    (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (PLACEHOLDER-1 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-8)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (reduce
       (fn*
        ([PLACEHOLDER-11 PLACEHOLDER-11]
         (clojure.lang.Numbers/add
          PLACEHOLDER-11
          (PLACEHOLDER-5 PLACEHOLDER-11 PLACEHOLDER-9))))
       0
       PLACEHOLDER-8)))))))
