(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  number-of-digits
  (fn*
   ([PLACEHOLDER-3]
    (loop*
     [PLACEHOLDER-4 PLACEHOLDER-3 PLACEHOLDER-5 0]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      PLACEHOLDER-5
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
       (clojure.lang.Numbers/inc PLACEHOLDER-5)))))))
 (def
  number-recur-sum
  (fn*
   ([PLACEHOLDER-6]
    (loop*
     [PLACEHOLDER-7
      PLACEHOLDER-6
      PLACEHOLDER-8
      (number-of-digits PLACEHOLDER-6)
      PLACEHOLDER-9
      0]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-7 0)
      PLACEHOLDER-9
      (let*
       [PLACEHOLDER-10
        (clojure.lang.Numbers/quotient PLACEHOLDER-7 10)
        PLACEHOLDER-11
        (clojure.lang.RT/longCast
         (exp (mod PLACEHOLDER-7 10) PLACEHOLDER-8))]
       (recur
        PLACEHOLDER-10
        PLACEHOLDER-8
        (clojure.lang.Numbers/add PLACEHOLDER-11 PLACEHOLDER-9))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-12
     (number-recur-sum PLACEHOLDER-12))))))
