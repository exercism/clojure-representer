(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (loop*
     [PLACEHOLDER-4 PLACEHOLDER-4 PLACEHOLDER-5 0]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      PLACEHOLDER-5
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
       (clojure.lang.Numbers/inc PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-7]
    (loop*
     [PLACEHOLDER-7
      PLACEHOLDER-7
      PLACEHOLDER-7
      (PLACEHOLDER-3 PLACEHOLDER-7)
      PLACEHOLDER-8
      0]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-7 0)
      PLACEHOLDER-8
      (let*
       [PLACEHOLDER-9
        (clojure.lang.Numbers/quotient PLACEHOLDER-7 10)
        PLACEHOLDER-10
        (clojure.lang.RT/longCast
         (PLACEHOLDER-1 (mod PLACEHOLDER-7 10) PLACEHOLDER-7))]
       (recur
        PLACEHOLDER-9
        PLACEHOLDER-7
        (clojure.lang.Numbers/add PLACEHOLDER-10 PLACEHOLDER-8))))))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-14]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-14
     (PLACEHOLDER-6 PLACEHOLDER-14))))))
