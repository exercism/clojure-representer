(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-1] (str "" PLACEHOLDER-1))))
 (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-3] (. PLACEHOLDER-3 length))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4]
    (map
     (fn*
      ([PLACEHOLDER-5]
       (java.lang.Integer/parseInt (str PLACEHOLDER-5))))
     PLACEHOLDER-4))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (reduce
     (fn*
      ([PLACEHOLDER-7 PLACEHOLDER-7]
       (clojure.lang.Numbers/add
        PLACEHOLDER-7
        (math/expt
         PLACEHOLDER-7
         (clojure.lang.RT/count PLACEHOLDER-6)))))
     0
     PLACEHOLDER-6))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-10]
    (clojure.lang.Util/equiv
     PLACEHOLDER-10
     (PLACEHOLDER-6 (PLACEHOLDER-4 (PLACEHOLDER-1 PLACEHOLDER-10))))))))
