(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isPos PLACEHOLDER-1)
     (conj
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (mod PLACEHOLDER-1 10))
     []))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-2]
    (let*
     [PLACEHOLDER-3
      (PLACEHOLDER-1 PLACEHOLDER-2)
      PLACEHOLDER-4
      (clojure.lang.RT/count (str PLACEHOLDER-2))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-2
      (apply
       +
       (let*
        [PLACEHOLDER-5
         (fn*
          PLACEHOLDER-5
          ([PLACEHOLDER-6]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-6 PLACEHOLDER-6]
               (let*
                [PLACEHOLDER-7 (clojure.core/seq PLACEHOLDER-6)]
                (if
                 PLACEHOLDER-7
                 (let*
                  [PLACEHOLDER-8 PLACEHOLDER-7]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-8)
                   (let*
                    [PLACEHOLDER-9
                     (clojure.core/chunk-first PLACEHOLDER-8)
                     PLACEHOLDER-9
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-9))
                     PLACEHOLDER-10
                     (clojure.core/chunk-buffer PLACEHOLDER-9)]
                    (if
                     (loop*
                      [PLACEHOLDER-10 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-10
                        PLACEHOLDER-9)
                       (let*
                        [PLACEHOLDER-11
                         (.nth PLACEHOLDER-9 PLACEHOLDER-10)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-10
                          (math/expt PLACEHOLDER-11 PLACEHOLDER-4))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-10))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-10)
                      (PLACEHOLDER-5
                       (clojure.core/chunk-rest PLACEHOLDER-8)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-10)
                      nil)))
                   (let*
                    [PLACEHOLDER-15 (clojure.core/first PLACEHOLDER-8)]
                    (clojure.core/cons
                     (math/expt PLACEHOLDER-15 PLACEHOLDER-4)
                     (PLACEHOLDER-5
                      (clojure.core/rest PLACEHOLDER-8))))))))))))))]
        (PLACEHOLDER-5 PLACEHOLDER-3)))))))))
