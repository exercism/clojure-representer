(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 1)
     identity
     (fn*
      ([PLACEHOLDER-2]
       (clojure.lang.Numbers/multiply
        PLACEHOLDER-2
        ((PLACEHOLDER-1 (clojure.lang.Numbers/dec PLACEHOLDER-1))
         PLACEHOLDER-2))))))))
 (def
  PLACEHOLDER-3
  (into
   {}
   (map
    (fn*
     ([PLACEHOLDER-4]
      (vec (list (first (str PLACEHOLDER-4)) PLACEHOLDER-4))))
    (take 10 (iterate inc 0)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-5
      (map PLACEHOLDER-3 (seq (str PLACEHOLDER-5)))
      PLACEHOLDER-7
      (PLACEHOLDER-1 (clojure.lang.RT/count PLACEHOLDER-5))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-5
      (apply + (map PLACEHOLDER-7 PLACEHOLDER-5))))))))
