(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (fn*
     ([PLACEHOLDER-2]
      (do
       (def
        PLACEHOLDER-2
        (bigdec (java.lang.Math/pow PLACEHOLDER-2 PLACEHOLDER-1)))
       (println PLACEHOLDER-2)
       PLACEHOLDER-2))))))
 (def
  PLACEHOLDER-5
  (fn* ([PLACEHOLDER-5] (java.lang.Integer/parseInt PLACEHOLDER-5))))
 (def
  PLACEHOLDER-6
  (fn* ([PLACEHOLDER-6] (map PLACEHOLDER-5 (map str PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-8]
    (do
     (def PLACEHOLDER-8 (str PLACEHOLDER-8))
     (def PLACEHOLDER-9 (clojure.lang.RT/count PLACEHOLDER-8))
     (println "number size:" PLACEHOLDER-9)
     (def PLACEHOLDER-11 (seq PLACEHOLDER-8))
     (def PLACEHOLDER-12 (PLACEHOLDER-6 PLACEHOLDER-11))
     (def
      PLACEHOLDER-13
      (map (PLACEHOLDER-1 PLACEHOLDER-9) PLACEHOLDER-12))
     (def PLACEHOLDER-15 (reduce + PLACEHOLDER-13))
     (println "sum_of_powers: " PLACEHOLDER-15)
     (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-15))))))
