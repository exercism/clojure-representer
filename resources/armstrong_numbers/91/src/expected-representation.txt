(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  power
  (fn*
   ([PLACEHOLDER-1]
    (fn*
     ([PLACEHOLDER-2]
      (do
       (def
        result
        (bigdec (java.lang.Math/pow PLACEHOLDER-2 PLACEHOLDER-1)))
       (println result)
       result))))))
 (def
  to_int
  (fn* ([PLACEHOLDER-3] (java.lang.Integer/parseInt PLACEHOLDER-3))))
 (def
  int_list
  (fn* ([PLACEHOLDER-4] (map to_int (map str PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (do
     (def number_string (str PLACEHOLDER-5))
     (def number_size (clojure.lang.RT/count number_string))
     (println "number size:" number_size)
     (def string_digits_list (seq number_string))
     (def digit_list (int_list string_digits_list))
     (def powered_list (map (power number_size) digit_list))
     (def sum_of_powers (reduce + powered_list))
     (println "sum_of_powers: " sum_of_powers)
     (clojure.lang.Util/equiv PLACEHOLDER-5 sum_of_powers))))))
