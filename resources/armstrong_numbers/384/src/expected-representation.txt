(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/equiv PLACEHOLDER-1 0)
     PLACEHOLDER-1
     (PLACEHOLDER-1
      (conj PLACEHOLDER-1 (mod PLACEHOLDER-1 10))
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-1 10)))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-6 PLACEHOLDER-6]
    (if
     (clojure.lang.Util/equiv (clojure.lang.RT/count PLACEHOLDER-6) 0)
     PLACEHOLDER-6
     (PLACEHOLDER-5
      (rest PLACEHOLDER-6)
      (clojure.lang.Numbers/add
       PLACEHOLDER-6
       (PLACEHOLDER-4 (first PLACEHOLDER-6) PLACEHOLDER-6))
      PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-11]
    (do
     (def PLACEHOLDER-11 (bigint PLACEHOLDER-11))
     (def PLACEHOLDER-12 (PLACEHOLDER-1 '() PLACEHOLDER-11))
     (def PLACEHOLDER-13 (clojure.lang.RT/count PLACEHOLDER-12))
     (def
      PLACEHOLDER-14
      (PLACEHOLDER-5 PLACEHOLDER-12 0 PLACEHOLDER-13))
     (clojure.lang.Numbers/equiv PLACEHOLDER-14 PLACEHOLDER-11))))))
