(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  getDigits
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/equiv PLACEHOLDER-2 0)
     PLACEHOLDER-1
     (getDigits
      (conj PLACEHOLDER-1 (mod PLACEHOLDER-2 10))
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-2 10)))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3)))))
 (def
  powAndSumList
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6 PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv (clojure.lang.RT/count PLACEHOLDER-5) 0)
     PLACEHOLDER-6
     (powAndSumList
      (rest PLACEHOLDER-5)
      (clojure.lang.Numbers/add
       PLACEHOLDER-6
       (exp (first PLACEHOLDER-5) PLACEHOLDER-7))
      PLACEHOLDER-7)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (do
     (def num2 (bigint PLACEHOLDER-8))
     (def digitList (getDigits '() num2))
     (def digitListCount (clojure.lang.RT/count digitList))
     (def res (powAndSumList digitList 0 digitListCount))
     (clojure.lang.Numbers/equiv res num2))))))
