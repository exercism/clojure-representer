(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  power
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 PLACEHOLDER-1 PLACEHOLDER-4 PLACEHOLDER-2]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-4 1)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/multiplyP PLACEHOLDER-3 PLACEHOLDER-1)
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6
      (str/split (str PLACEHOLDER-5) (re-pattern ""))
      PLACEHOLDER-8
      (map
       (fn*
        ([PLACEHOLDER-7]
         (power
          (java.lang.Integer/parseInt PLACEHOLDER-7)
          (clojure.lang.RT/count PLACEHOLDER-6))))
       PLACEHOLDER-6)
      PLACEHOLDER-9
      (apply +' PLACEHOLDER-8)]
     (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-9))))))
