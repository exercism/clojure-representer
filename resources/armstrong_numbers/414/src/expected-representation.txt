(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  one-tenth
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/divide
     (clojure.lang.Numbers/minus PLACEHOLDER-1 (mod PLACEHOLDER-1 10))
     10))))
 (def
  pow-by-reduction
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-4
     (let*
      [PLACEHOLDER-7
       (map
        (fn* ([PLACEHOLDER-5] (mod PLACEHOLDER-5 10)))
        (take-while
         (fn*
          ([PLACEHOLDER-6] (clojure.lang.Numbers/gte PLACEHOLDER-6 1)))
         (iterate one-tenth PLACEHOLDER-4)))]
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-8]
          (pow-by-reduction
           PLACEHOLDER-8
           (clojure.lang.RT/count PLACEHOLDER-7))))
        PLACEHOLDER-7))))))))
