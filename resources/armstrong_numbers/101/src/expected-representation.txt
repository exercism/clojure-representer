(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  split
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-3 ()]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-2)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
       (conj PLACEHOLDER-3 (mod PLACEHOLDER-2 10))))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (split PLACEHOLDER-6)
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (reduce
       (fn*
        ([PLACEHOLDER-9 PLACEHOLDER-10]
         (clojure.lang.Numbers/add
          PLACEHOLDER-9
          (exp PLACEHOLDER-10 PLACEHOLDER-8))))
       0
       PLACEHOLDER-7)))))))
