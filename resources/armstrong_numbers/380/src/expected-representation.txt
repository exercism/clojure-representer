(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def
      PLACEHOLDER-1
      (fn*
       ([PLACEHOLDER-1 PLACEHOLDER-2]
        (reduce * 1 (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
     (def
      PLACEHOLDER-3
      (loop*
       [PLACEHOLDER-4 0 PLACEHOLDER-4 PLACEHOLDER-1]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-4 0)
        (clojure.lang.Numbers/max PLACEHOLDER-4 1)
        (recur
         (clojure.lang.Numbers/inc PLACEHOLDER-4)
         (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)))))
     (loop*
      [PLACEHOLDER-6 1 PLACEHOLDER-7 PLACEHOLDER-1 PLACEHOLDER-7 0]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-7 0)
       (clojure.lang.Util/equiv PLACEHOLDER-7 PLACEHOLDER-1)
       (recur
        (clojure.lang.Numbers/inc PLACEHOLDER-6)
        (clojure.lang.Numbers/quotient PLACEHOLDER-7 10)
        (clojure.lang.Numbers/add
         PLACEHOLDER-7
         (PLACEHOLDER-1
          (clojure.lang.Numbers/remainder PLACEHOLDER-7 10)
          PLACEHOLDER-3))))))))))
