(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def
      pow
      (fn*
       ([PLACEHOLDER-2 PLACEHOLDER-3]
        (reduce * 1 (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
     (def
      digit-count
      (loop*
       [PLACEHOLDER-4 0 PLACEHOLDER-5 PLACEHOLDER-1]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-5 0)
        (clojure.lang.Numbers/max PLACEHOLDER-4 1)
        (recur
         (clojure.lang.Numbers/inc PLACEHOLDER-4)
         (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)))))
     (loop*
      [PLACEHOLDER-6 1 PLACEHOLDER-7 PLACEHOLDER-1 PLACEHOLDER-8 0]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-7 0)
       (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-1)
       (recur
        (clojure.lang.Numbers/inc PLACEHOLDER-6)
        (clojure.lang.Numbers/quotient PLACEHOLDER-7 10)
        (clojure.lang.Numbers/add
         PLACEHOLDER-8
         (pow
          (clojure.lang.Numbers/remainder PLACEHOLDER-7 10)
          digit-count))))))))))
