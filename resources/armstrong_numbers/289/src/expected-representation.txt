(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn* ([PLACEHOLDER-1] (java.lang.Integer/parseInt PLACEHOLDER-1))))
 (def
  PLACEHOLDER-2
  (fn* ([PLACEHOLDER-3] (java.math.BigInteger/valueOf PLACEHOLDER-3))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (.pow (PLACEHOLDER-2 PLACEHOLDER-4) PLACEHOLDER-5))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (map PLACEHOLDER-1 (map str (seq (str PLACEHOLDER-7)))))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-8 (PLACEHOLDER-7 PLACEHOLDER-8)]
     (reduce
      +
      (let*
       [PLACEHOLDER-10
        (fn*
         PLACEHOLDER-10
         ([PLACEHOLDER-11]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-11 PLACEHOLDER-11]
              (let*
               [PLACEHOLDER-12 (clojure.core/seq PLACEHOLDER-11)]
               (if
                PLACEHOLDER-12
                (let*
                 [PLACEHOLDER-12 PLACEHOLDER-12]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-12)
                  (let*
                   [PLACEHOLDER-13
                    (clojure.core/chunk-first PLACEHOLDER-12)
                    PLACEHOLDER-13
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-13))
                    PLACEHOLDER-14
                    (clojure.core/chunk-buffer PLACEHOLDER-13)]
                   (if
                    (loop*
                     [PLACEHOLDER-15 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-15
                       PLACEHOLDER-13)
                      (let*
                       [PLACEHOLDER-15
                        (.nth PLACEHOLDER-13 PLACEHOLDER-15)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-14
                         (PLACEHOLDER-4
                          PLACEHOLDER-15
                          (clojure.lang.RT/count PLACEHOLDER-8)))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-15))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-14)
                     (PLACEHOLDER-10
                      (clojure.core/chunk-rest PLACEHOLDER-12)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-14)
                     nil)))
                  (let*
                   [PLACEHOLDER-20 (clojure.core/first PLACEHOLDER-12)]
                   (clojure.core/cons
                    (PLACEHOLDER-4
                     PLACEHOLDER-20
                     (clojure.lang.RT/count PLACEHOLDER-8))
                    (PLACEHOLDER-10
                     (clojure.core/rest PLACEHOLDER-12))))))))))))))]
       (PLACEHOLDER-10 PLACEHOLDER-8)))))))
 (def
  PLACEHOLDER-24
  (fn*
   ([PLACEHOLDER-24]
    (clojure.lang.Util/equiv
     PLACEHOLDER-24
     (PLACEHOLDER-8 PLACEHOLDER-24))))))
