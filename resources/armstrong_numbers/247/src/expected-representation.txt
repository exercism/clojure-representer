(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * 1 (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  digitize
  (fn*
   ([PLACEHOLDER-3]
    (loop*
     [PLACEHOLDER-4 PLACEHOLDER-3 PLACEHOLDER-5 []]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-4 0)
      PLACEHOLDER-5
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
       (conj PLACEHOLDER-5 (mod PLACEHOLDER-4 10))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (digitize PLACEHOLDER-6)
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (reduce
       +
       0
       (map
        (fn* ([PLACEHOLDER-9] (pow PLACEHOLDER-9 PLACEHOLDER-8)))
        PLACEHOLDER-7))))))))
