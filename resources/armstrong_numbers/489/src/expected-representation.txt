(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  number-to-list
  (fn*
   ([PLACEHOLDER-1]
    (map
     read-string
     (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  count-digits
  (fn* ([PLACEHOLDER-4] (clojure.lang.RT/count (str PLACEHOLDER-4)))))
 (def
  exp-every-number
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (map
     (fn* ([PLACEHOLDER-7] (exp PLACEHOLDER-7 PLACEHOLDER-6)))
     PLACEHOLDER-5))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     PLACEHOLDER-8
     (reduce
      +
      (exp-every-number
       (number-to-list PLACEHOLDER-8)
       (count-digits PLACEHOLDER-8))))))))
