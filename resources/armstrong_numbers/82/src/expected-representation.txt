(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.math.numeric-tower :as math])
 (def
  calc
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     0
     (clojure.lang.Numbers/add
      (calc
       (clojure.lang.RT/longCast
        (clojure.lang.Numbers/divide PLACEHOLDER-1 10))
       PLACEHOLDER-2)
      (math/expt (mod PLACEHOLDER-1 10) PLACEHOLDER-2))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.Util/equiv
     PLACEHOLDER-3
     (calc
      PLACEHOLDER-3
      (clojure.lang.RT/count (str PLACEHOLDER-3)))))))
 (armstrong? 153)
 (clojure.lang.RT/longCast (clojure.lang.Numbers/divide 153 10))
 (math/expt 3 (mod 153 10))
 (calc 153 3)
 (math/expt 3 5)
 (mod 15 10)
 (math/expt 3 (mod 15 10)))
