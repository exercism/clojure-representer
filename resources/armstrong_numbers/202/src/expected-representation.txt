(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (if
     (clojure.lang.Util/equiv 0 PLACEHOLDER-3)
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-4]
         (PLACEHOLDER-1
          PLACEHOLDER-4
          (clojure.lang.RT/count PLACEHOLDER-3))))
       (reverse PLACEHOLDER-3)))
     (recur
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-3 10.0))
      (conj PLACEHOLDER-3 (mod PLACEHOLDER-3 10)))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (PLACEHOLDER-3 PLACEHOLDER-7 []))
     true
     false)))))
