(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     [PLACEHOLDER-1]
     (conj
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (clojure.lang.Numbers/remainder PLACEHOLDER-1 10))))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-3
      (PLACEHOLDER-1 PLACEHOLDER-3)
      PLACEHOLDER-4
      (clojure.lang.RT/count PLACEHOLDER-3)
      PLACEHOLDER-5
      (reduce
       (fn*
        ([PLACEHOLDER-6 PLACEHOLDER-6]
         (clojure.lang.Numbers/add
          PLACEHOLDER-6
          (clojure.lang.RT/longCast
           (java.lang.Math/pow PLACEHOLDER-6 PLACEHOLDER-4)))))
       0
       PLACEHOLDER-3)]
     (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-3))))))
