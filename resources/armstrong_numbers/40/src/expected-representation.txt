(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Util/equiv
     PLACEHOLDER-1
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-2]
         (clojure.lang.Numbers/multiply PLACEHOLDER-2 PLACEHOLDER-2)))
       (map
        (fn* ([PLACEHOLDER-3] (mod PLACEHOLDER-3 10)))
        (take-while
         pos?
         (iterate
          (fn*
           ([PLACEHOLDER-4]
            (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)))
          PLACEHOLDER-1)))))))))
 ((fn*
   ([PLACEHOLDER-5]
    (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-5)))
  5))
