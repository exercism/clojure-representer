(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     1
     (clojure.lang.Numbers/add
      1
      (PLACEHOLDER-1
       (bigint (clojure.lang.Numbers/divide PLACEHOLDER-1 10))))))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-2 10)
     (apply * (repeat PLACEHOLDER-2 PLACEHOLDER-2))
     (clojure.lang.Numbers/add
      (PLACEHOLDER-2
       (bigint (clojure.lang.Numbers/divide PLACEHOLDER-2 10))
       PLACEHOLDER-2)
      (apply * (repeat PLACEHOLDER-2 (mod PLACEHOLDER-2 10))))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (clojure.lang.Util/equiv
     PLACEHOLDER-5
     (PLACEHOLDER-2 PLACEHOLDER-5 (PLACEHOLDER-1 PLACEHOLDER-5)))))))
