(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  split-to-digits
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 [] PLACEHOLDER-3 PLACEHOLDER-1]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-2
      (let*
       [PLACEHOLDER-4
        (clojure.lang.Numbers/quotient PLACEHOLDER-3 10)
        PLACEHOLDER-5
        (mod PLACEHOLDER-3 10)]
       (recur (conj PLACEHOLDER-2 PLACEHOLDER-5) PLACEHOLDER-4)))))))
 (def
  power-of-digits
  (fn*
   ([PLACEHOLDER-6]
    (apply
     +
     (map
      (fn*
       ([PLACEHOLDER-7]
        (.pow
         (bigdec PLACEHOLDER-7)
         (clojure.lang.RT/count PLACEHOLDER-6))))
      PLACEHOLDER-6)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-8
     (power-of-digits (split-to-digits PLACEHOLDER-8))))))
 nil)
