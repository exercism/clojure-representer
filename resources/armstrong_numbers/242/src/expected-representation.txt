(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-1
     (reduce
      +
      (let*
       [PLACEHOLDER-13
        (fn*
         PLACEHOLDER-2
         ([PLACEHOLDER-3]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-4 PLACEHOLDER-3]
              (let*
               [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-4)]
               (if
                PLACEHOLDER-5
                (let*
                 [PLACEHOLDER-6 PLACEHOLDER-5]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-6)
                  (let*
                   [PLACEHOLDER-7
                    (clojure.core/chunk-first PLACEHOLDER-6)
                    PLACEHOLDER-8
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-7))
                    PLACEHOLDER-9
                    (clojure.core/chunk-buffer PLACEHOLDER-8)]
                   (if
                    (loop*
                     [PLACEHOLDER-10 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-10
                       PLACEHOLDER-8)
                      (let*
                       [PLACEHOLDER-11
                        (.nth PLACEHOLDER-7 PLACEHOLDER-10)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-9
                         (java.lang.Math/pow
                          (clojure.lang.Numbers/minus
                           (clojure.lang.RT/byteCast PLACEHOLDER-11)
                           48)
                          (clojure.lang.RT/count (str PLACEHOLDER-1))))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-10))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-9)
                     (PLACEHOLDER-2
                      (clojure.core/chunk-rest PLACEHOLDER-6)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-9)
                     nil)))
                  (let*
                   [PLACEHOLDER-12 (clojure.core/first PLACEHOLDER-6)]
                   (clojure.core/cons
                    (java.lang.Math/pow
                     (clojure.lang.Numbers/minus
                      (clojure.lang.RT/byteCast PLACEHOLDER-12)
                      48)
                     (clojure.lang.RT/count (str PLACEHOLDER-1)))
                    (PLACEHOLDER-2
                     (clojure.core/rest PLACEHOLDER-6))))))))))))))]
       (PLACEHOLDER-13 (str PLACEHOLDER-1)))))))))
