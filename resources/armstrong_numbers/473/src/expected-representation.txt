(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as string]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn* ([PLACEHOLDER-1] (clojure.lang.RT/count (str PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5]
    (if
     (re-matches (re-pattern "\\d+") PLACEHOLDER-5)
     (read-string PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6
      (PLACEHOLDER-1 PLACEHOLDER-6)
      PLACEHOLDER-8
      (string/split (str PLACEHOLDER-6) (re-pattern ""))
      PLACEHOLDER-9
      (map PLACEHOLDER-4 PLACEHOLDER-8)
      PLACEHOLDER-10
      (map
       (fn*
        ([PLACEHOLDER-11]
         (PLACEHOLDER-2 PLACEHOLDER-11 PLACEHOLDER-6)))
       PLACEHOLDER-9)
      PLACEHOLDER-13
      (reduce + PLACEHOLDER-10)]
     (clojure.lang.Util/equiv PLACEHOLDER-6 PLACEHOLDER-13))))))
