(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as string]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  count-digits
  (fn* ([PLACEHOLDER-1] (clojure.lang.RT/count (str PLACEHOLDER-1)))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  str->int
  (fn*
   ([PLACEHOLDER-4]
    (if
     (re-matches (re-pattern "\\d+") PLACEHOLDER-4)
     (read-string PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6
      (count-digits PLACEHOLDER-5)
      PLACEHOLDER-7
      (string/split (str PLACEHOLDER-5) (re-pattern ""))
      PLACEHOLDER-8
      (map str->int PLACEHOLDER-7)
      PLACEHOLDER-10
      (map
       (fn* ([PLACEHOLDER-9] (exp PLACEHOLDER-9 PLACEHOLDER-6)))
       PLACEHOLDER-8)
      PLACEHOLDER-11
      (reduce + PLACEHOLDER-10)]
     (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-11))))))
