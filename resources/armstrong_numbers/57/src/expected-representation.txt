(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-1
      (map
       (fn*
        ([PLACEHOLDER-2] (java.lang.Character/digit PLACEHOLDER-2 10)))
       (str PLACEHOLDER-1))]
     (clojure.lang.Numbers/equiv
      PLACEHOLDER-1
      (apply
       +
       (let*
        [PLACEHOLDER-3
         (fn*
          PLACEHOLDER-3
          ([PLACEHOLDER-4]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-4 PLACEHOLDER-4]
               (let*
                [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-4)]
                (if
                 PLACEHOLDER-5
                 (let*
                  [PLACEHOLDER-6 PLACEHOLDER-5]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-6)
                   (let*
                    [PLACEHOLDER-7
                     (clojure.core/chunk-first PLACEHOLDER-6)
                     PLACEHOLDER-8
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-7))
                     PLACEHOLDER-8
                     (clojure.core/chunk-buffer PLACEHOLDER-8)]
                    (if
                     (loop*
                      [PLACEHOLDER-8 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-8
                        PLACEHOLDER-8)
                       (let*
                        [PLACEHOLDER-9
                         (.nth PLACEHOLDER-7 PLACEHOLDER-8)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-8
                          (bigint
                           (java.lang.Math/pow
                            PLACEHOLDER-9
                            (clojure.lang.RT/count PLACEHOLDER-1))))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-8))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-8)
                      (PLACEHOLDER-3
                       (clojure.core/chunk-rest PLACEHOLDER-6)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-8)
                      nil)))
                   (let*
                    [PLACEHOLDER-12 (clojure.core/first PLACEHOLDER-6)]
                    (clojure.core/cons
                     (bigint
                      (java.lang.Math/pow
                       PLACEHOLDER-12
                       (clojure.lang.RT/count PLACEHOLDER-1)))
                     (PLACEHOLDER-3
                      (clojure.core/rest PLACEHOLDER-6))))))))))))))]
        (PLACEHOLDER-3 PLACEHOLDER-1)))))))))
