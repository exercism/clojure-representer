(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  power-function
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  get-digits
  (fn*
   ([PLACEHOLDER-3] (get-digits [] PLACEHOLDER-3))
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (<= 0 PLACEHOLDER-5 9)
     (conj PLACEHOLDER-4 PLACEHOLDER-5)
     (let*
      [PLACEHOLDER-6
       (mod PLACEHOLDER-5 10)
       PLACEHOLDER-7
       (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)]
      (recur (conj PLACEHOLDER-4 PLACEHOLDER-6) PLACEHOLDER-7))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (get-digits PLACEHOLDER-8)
      PLACEHOLDER-10
      (clojure.lang.RT/count PLACEHOLDER-9)
      PLACEHOLDER-12
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-11]
          (power-function PLACEHOLDER-11 PLACEHOLDER-10)))
        PLACEHOLDER-9))]
     (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-12))))))
