(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  split-number
  (fn*
   ([PLACEHOLDER-1] (split-number PLACEHOLDER-1 []))
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-2 0)
     (recur
      (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
      (cons (mod PLACEHOLDER-2 10) PLACEHOLDER-3))
     PLACEHOLDER-3))))
 (def
  armstrong-value
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      (split-number PLACEHOLDER-4)
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-7]
         (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-7))))
       PLACEHOLDER-5))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     PLACEHOLDER-8
     (armstrong-value PLACEHOLDER-8))))))
