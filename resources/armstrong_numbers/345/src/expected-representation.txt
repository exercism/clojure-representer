(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (clojure.string/split (str PLACEHOLDER-1) (re-pattern ""))]
     (map
      (fn* ([PLACEHOLDER-3] (new BigInteger PLACEHOLDER-3)))
      PLACEHOLDER-2)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-5]
    (.pow (bigdec PLACEHOLDER-5) PLACEHOLDER-5))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7
      (PLACEHOLDER-1 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (bigint
      (reduce
       (fn*
        ([PLACEHOLDER-10 PLACEHOLDER-10]
         (clojure.lang.Numbers/add
          PLACEHOLDER-10
          (PLACEHOLDER-4 PLACEHOLDER-10 PLACEHOLDER-9))))
       0
       PLACEHOLDER-7))))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-13]
    (clojure.lang.Util/equiv
     PLACEHOLDER-13
     (PLACEHOLDER-7 PLACEHOLDER-13))))))
