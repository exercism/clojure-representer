(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-3 1]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-2 0)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/dec PLACEHOLDER-2)
       (clojure.lang.Numbers/multiply
        PLACEHOLDER-3
        PLACEHOLDER-2)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (loop*
     [PLACEHOLDER-5
      (clojure.lang.RT/count (str PLACEHOLDER-5))
      PLACEHOLDER-6
      0]
     (if
      (clojure.lang.Numbers/gt PLACEHOLDER-5 0)
      (recur
       (clojure.lang.Numbers/dec PLACEHOLDER-5)
       (clojure.lang.Numbers/add
        PLACEHOLDER-6
        (PLACEHOLDER-1
         (clojure.lang.RT/count (str PLACEHOLDER-5))
         (read-string
          (str
           (clojure.lang.RT/nth
            (str PLACEHOLDER-5)
            (clojure.lang.Numbers/minus PLACEHOLDER-5 1)))))))
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-6)
       true
       false)))))))
