(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (bigint
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-1)
      1
      (java.lang.Math/pow PLACEHOLDER-1 PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-3
      (str PLACEHOLDER-3)
      PLACEHOLDER-4
      (clojure.lang.RT/count PLACEHOLDER-3)
      PLACEHOLDER-5
      (map (comp read-string str) PLACEHOLDER-3)]
     (let*
      [PLACEHOLDER-6 (clojure.lang.Numbers/isZero PLACEHOLDER-3)]
      (if
       PLACEHOLDER-6
       PLACEHOLDER-6
       (clojure.lang.Util/equiv
        PLACEHOLDER-3
        (apply
         +
         (map
          (fn*
           ([PLACEHOLDER-8]
            (PLACEHOLDER-1 PLACEHOLDER-8 PLACEHOLDER-4)))
          PLACEHOLDER-5))))))))))
