(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (java.lang.Math/pow PLACEHOLDER-1 PLACEHOLDER-2))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (map
     read-string
     (str/split (str PLACEHOLDER-4) (re-pattern ""))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (bigint
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-6] (PLACEHOLDER-1 PLACEHOLDER-6 PLACEHOLDER-6)))
       PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (PLACEHOLDER-3 PLACEHOLDER-8)
      PLACEHOLDER-10
      (clojure.lang.RT/count PLACEHOLDER-9)
      PLACEHOLDER-11
      (PLACEHOLDER-5 PLACEHOLDER-9 PLACEHOLDER-10)]
     (if
      (clojure.lang.Util/equiv (bigint PLACEHOLDER-8) PLACEHOLDER-11)
      true
      (if :else false)))))))
