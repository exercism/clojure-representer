(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-1
      (map
       (fn*
        ([PLACEHOLDER-2]
         (java.lang.Character/digit
          (clojure.lang.RT/charCast PLACEHOLDER-2)
          10)))
       (seq (str PLACEHOLDER-1)))
      PLACEHOLDER-3
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-3]
          (java.lang.Math/pow
           PLACEHOLDER-3
           (clojure.lang.RT/count PLACEHOLDER-1))))
        PLACEHOLDER-1))]
     (clojure.lang.Numbers/equiv PLACEHOLDER-1 PLACEHOLDER-3))))))
