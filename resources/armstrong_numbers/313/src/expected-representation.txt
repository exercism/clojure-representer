(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  num->digits
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     (list PLACEHOLDER-1)
     (cons
      (clojure.lang.Numbers/remainder PLACEHOLDER-1 10)
      (num->digits
       (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)))))))
 (def
  expt
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5 (num->digits PLACEHOLDER-4)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-4
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-6]
          (expt PLACEHOLDER-6 (clojure.lang.RT/count PLACEHOLDER-5))))
        PLACEHOLDER-5))))))))
