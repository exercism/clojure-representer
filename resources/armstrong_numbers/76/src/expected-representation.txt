(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def x (str/split (str PLACEHOLDER-1) (re-pattern "")))
     (def length (clojure.lang.RT/count x))
     (def
      String->Number
      (fn*
       ([PLACEHOLDER-2]
        (let*
         [PLACEHOLDER-3 (read-string PLACEHOLDER-2)]
         (if (number? PLACEHOLDER-3) PLACEHOLDER-3)))))
     (clojure.lang.Util/equiv
      (bigint PLACEHOLDER-1)
      (bigint
       (reduce
        +
        (let*
         [PLACEHOLDER-15
          (fn*
           PLACEHOLDER-4
           ([PLACEHOLDER-5]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-6 PLACEHOLDER-5]
                (let*
                 [PLACEHOLDER-7 (clojure.core/seq PLACEHOLDER-6)]
                 (if
                  PLACEHOLDER-7
                  (let*
                   [PLACEHOLDER-8 PLACEHOLDER-7]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-8)
                    (let*
                     [PLACEHOLDER-9
                      (clojure.core/chunk-first PLACEHOLDER-8)
                      PLACEHOLDER-10
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-9))
                      PLACEHOLDER-11
                      (clojure.core/chunk-buffer PLACEHOLDER-10)]
                     (if
                      (loop*
                       [PLACEHOLDER-12 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-12
                         PLACEHOLDER-10)
                        (let*
                         [PLACEHOLDER-13
                          (.nth PLACEHOLDER-9 PLACEHOLDER-12)]
                         (do
                          (clojure.core/chunk-append
                           PLACEHOLDER-11
                           (java.lang.Math/pow
                            (String->Number PLACEHOLDER-13)
                            length))
                          (recur
                           (clojure.lang.Numbers/unchecked_inc
                            PLACEHOLDER-12))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-11)
                       (PLACEHOLDER-4
                        (clojure.core/chunk-rest PLACEHOLDER-8)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-11)
                       nil)))
                    (let*
                     [PLACEHOLDER-14
                      (clojure.core/first PLACEHOLDER-8)]
                     (clojure.core/cons
                      (java.lang.Math/pow
                       (String->Number PLACEHOLDER-14)
                       length)
                      (PLACEHOLDER-4
                       (clojure.core/rest PLACEHOLDER-8))))))))))))))]
         (PLACEHOLDER-15 x))))))))))
