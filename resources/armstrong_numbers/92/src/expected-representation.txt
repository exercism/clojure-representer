(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (do
     (if
      (int? PLACEHOLDER-1)
      nil
      (throw
       (new
        java.lang.AssertionError
        (clojure.core/str
         "Assert failed: "
         (clojure.core/pr-str '(int? num))))))
     (loop*
      [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-2 ()]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-2)
       PLACEHOLDER-2
       (recur
        (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
        (conj
         PLACEHOLDER-2
         (clojure.lang.Numbers/remainder PLACEHOLDER-2 10)))))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-5]
    (apply *' (repeat PLACEHOLDER-5 PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7
      (PLACEHOLDER-1 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-10]
         (PLACEHOLDER-4 PLACEHOLDER-10 PLACEHOLDER-9)))
       PLACEHOLDER-7))))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     PLACEHOLDER-12
     (PLACEHOLDER-7 PLACEHOLDER-12))))))
