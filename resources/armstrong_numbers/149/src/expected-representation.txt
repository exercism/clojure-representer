(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  digits
  (fn*
   ([PLACEHOLDER-1]
    (letfn*
     [PLACEHOLDER-2
      (fn*
       PLACEHOLDER-3
       ([PLACEHOLDER-4] (java.lang.Character/digit PLACEHOLDER-4 10)))]
     (map PLACEHOLDER-2 (str PLACEHOLDER-1))))))
 (def
  pow
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (apply * (repeat PLACEHOLDER-6 PLACEHOLDER-5)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (digits PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-8)]
     (clojure.lang.Numbers/equiv
      PLACEHOLDER-7
      (apply
       +
       (map
        (fn* ([PLACEHOLDER-10] (pow PLACEHOLDER-10 PLACEHOLDER-9)))
        PLACEHOLDER-8))))))))
