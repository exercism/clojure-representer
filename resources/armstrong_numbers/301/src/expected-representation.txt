(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (seq
     (map
      (fn* ([PLACEHOLDER-4] (mod PLACEHOLDER-4 10)))
      (take-while
       pos?
       (iterate
        (fn*
         ([PLACEHOLDER-5]
          (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)))
        PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7 (clojure.lang.RT/count PLACEHOLDER-7)]
     (reduce
      (fn*
       ([PLACEHOLDER-8 PLACEHOLDER-9]
        (clojure.lang.Numbers/add
         PLACEHOLDER-8
         (PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-7))))
      0
      PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     (PLACEHOLDER-6 (PLACEHOLDER-3 PLACEHOLDER-12))
     PLACEHOLDER-12)))))
