(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  split-digits
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2]
       (clojure.lang.Numbers/minus
        (clojure.lang.RT/intCast PLACEHOLDER-2)
        48)))
     (str PLACEHOLDER-1)))))
 (def
  armstrong-calc
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4
      (split-digits PLACEHOLDER-3)
      PLACEHOLDER-5
      (clojure.lang.RT/count PLACEHOLDER-4)]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-6]
         (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-6))))
       PLACEHOLDER-4))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (clojure.lang.Util/equiv
     PLACEHOLDER-7
     (armstrong-calc PLACEHOLDER-7))))))
