(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  expt
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3
      1N
      PLACEHOLDER-4
      PLACEHOLDER-2
      PLACEHOLDER-5
      (bigint PLACEHOLDER-1)]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-4 0)
      PLACEHOLDER-3
      (recur
       (if
        (clojure.lang.Util/equiv
         (clojure.lang.Numbers/remainder PLACEHOLDER-4 2)
         0)
        PLACEHOLDER-3
        (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-5))
       (clojure.lang.Numbers/quotient PLACEHOLDER-4 2)
       (clojure.lang.Numbers/multiply
        PLACEHOLDER-5
        PLACEHOLDER-5)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (str PLACEHOLDER-6)
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-7)
      PLACEHOLDER-11
      (map
       (comp
        (fn* ([PLACEHOLDER-9] (expt PLACEHOLDER-9 PLACEHOLDER-8)))
        (fn*
         ([PLACEHOLDER-10]
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/intCast PLACEHOLDER-10)
           (clojure.lang.RT/intCast \0)))))
       PLACEHOLDER-7)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (apply + PLACEHOLDER-11)))))))
