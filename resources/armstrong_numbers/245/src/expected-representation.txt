(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  get-digits
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (str/split (str PLACEHOLDER-1) (re-pattern ""))
      PLACEHOLDER-4
      (map
       (fn*
        ([PLACEHOLDER-3] (java.lang.Integer/parseInt PLACEHOLDER-3)))
       PLACEHOLDER-2)]
     PLACEHOLDER-4))))
 (def
  digits-to-power
  (fn*
   ([PLACEHOLDER-5]
    (map
     (fn*
      ([PLACEHOLDER-6]
       (.pow
        (bigdec PLACEHOLDER-6)
        (clojure.lang.RT/count PLACEHOLDER-5))))
     PLACEHOLDER-5))))
 (def
  armstrong-number
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (get-digits PLACEHOLDER-7)
      PLACEHOLDER-9
      (digits-to-power PLACEHOLDER-8)
      PLACEHOLDER-10
      (reduce + PLACEHOLDER-9)]
     PLACEHOLDER-10))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-11]
    (clojure.lang.Util/equiv
     (bigdec PLACEHOLDER-11)
     (armstrong-number PLACEHOLDER-11))))))
