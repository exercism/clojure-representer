(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/minus
     (clojure.lang.RT/intCast PLACEHOLDER-1)
     48))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-5 (str PLACEHOLDER-5)]
     (reduce
      +
      (let*
       [PLACEHOLDER-6
        (fn*
         PLACEHOLDER-6
         ([PLACEHOLDER-6]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-7 PLACEHOLDER-6]
              (let*
               [PLACEHOLDER-8 (clojure.core/seq PLACEHOLDER-7)]
               (if
                PLACEHOLDER-8
                (let*
                 [PLACEHOLDER-9 PLACEHOLDER-8]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-9)
                  (let*
                   [PLACEHOLDER-10
                    (clojure.core/chunk-first PLACEHOLDER-9)
                    PLACEHOLDER-10
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-10))
                    PLACEHOLDER-10
                    (clojure.core/chunk-buffer PLACEHOLDER-10)]
                   (if
                    (loop*
                     [PLACEHOLDER-11 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-11
                       PLACEHOLDER-10)
                      (let*
                       [PLACEHOLDER-12
                        (.nth PLACEHOLDER-10 PLACEHOLDER-11)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-10
                         (PLACEHOLDER-2
                          (PLACEHOLDER-1 PLACEHOLDER-12)
                          (clojure.lang.RT/count PLACEHOLDER-5)))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-11))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-10)
                     (PLACEHOLDER-6
                      (clojure.core/chunk-rest PLACEHOLDER-9)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-10)
                     nil)))
                  (let*
                   [PLACEHOLDER-16 (clojure.core/first PLACEHOLDER-9)]
                   (clojure.core/cons
                    (PLACEHOLDER-2
                     (PLACEHOLDER-1 PLACEHOLDER-16)
                     (clojure.lang.RT/count PLACEHOLDER-5))
                    (PLACEHOLDER-6
                     (clojure.core/rest PLACEHOLDER-9))))))))))))))]
       (PLACEHOLDER-6 PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-20
  (fn*
   ([PLACEHOLDER-20]
    (clojure.lang.Util/equiv
     (PLACEHOLDER-5 PLACEHOLDER-20)
     PLACEHOLDER-20)))))
