(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  char-to-int
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/minus
     (clojure.lang.RT/intCast PLACEHOLDER-1)
     48))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (def
  convert
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5 (str PLACEHOLDER-4)]
     (reduce
      +
      (let*
       [PLACEHOLDER-17
        (fn*
         PLACEHOLDER-6
         ([PLACEHOLDER-7]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-8 PLACEHOLDER-7]
              (let*
               [PLACEHOLDER-9 (clojure.core/seq PLACEHOLDER-8)]
               (if
                PLACEHOLDER-9
                (let*
                 [PLACEHOLDER-10 PLACEHOLDER-9]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-10)
                  (let*
                   [PLACEHOLDER-11
                    (clojure.core/chunk-first PLACEHOLDER-10)
                    PLACEHOLDER-12
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-11))
                    PLACEHOLDER-13
                    (clojure.core/chunk-buffer PLACEHOLDER-12)]
                   (if
                    (loop*
                     [PLACEHOLDER-14 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-14
                       PLACEHOLDER-12)
                      (let*
                       [PLACEHOLDER-15
                        (.nth PLACEHOLDER-11 PLACEHOLDER-14)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-13
                         (exp
                          (char-to-int PLACEHOLDER-15)
                          (clojure.lang.RT/count PLACEHOLDER-5)))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-14))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-13)
                     (PLACEHOLDER-6
                      (clojure.core/chunk-rest PLACEHOLDER-10)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-13)
                     nil)))
                  (let*
                   [PLACEHOLDER-16 (clojure.core/first PLACEHOLDER-10)]
                   (clojure.core/cons
                    (exp
                     (char-to-int PLACEHOLDER-16)
                     (clojure.lang.RT/count PLACEHOLDER-5))
                    (PLACEHOLDER-6
                     (clojure.core/rest PLACEHOLDER-10))))))))))))))]
       (PLACEHOLDER-17 PLACEHOLDER-5)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-18]
    (clojure.lang.Util/equiv
     (convert PLACEHOLDER-18)
     PLACEHOLDER-18)))))
