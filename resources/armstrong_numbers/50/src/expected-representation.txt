(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (clojure.lang.Numbers/minus PLACEHOLDER-2 48)))
     (map int (seq (str PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-4]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-4 1)
     PLACEHOLDER-3
     (PLACEHOLDER-3
      (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-4)
      PLACEHOLDER-4
      (clojure.lang.Numbers/minus PLACEHOLDER-4 1))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7 PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv 0 PLACEHOLDER-7)
     1
     (PLACEHOLDER-3 PLACEHOLDER-7 PLACEHOLDER-7 PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-10 (into [] (PLACEHOLDER-1 PLACEHOLDER-10))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-10
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-12]
          (PLACEHOLDER-7
           PLACEHOLDER-12
           (clojure.lang.RT/count PLACEHOLDER-10))))
        PLACEHOLDER-10))))))))
