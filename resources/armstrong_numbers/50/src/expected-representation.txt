(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  string-to-numbers
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (clojure.lang.Numbers/minus PLACEHOLDER-2 48)))
     (map int (seq (str PLACEHOLDER-1)))))))
 (def
  expo-helper
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-5 1)
     PLACEHOLDER-3
     (expo-helper
      (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-4)
      PLACEHOLDER-4
      (clojure.lang.Numbers/minus PLACEHOLDER-5 1))))))
 (def
  expo
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv 0 PLACEHOLDER-7)
     1
     (expo-helper PLACEHOLDER-6 PLACEHOLDER-6 PLACEHOLDER-7)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9 (into [] (string-to-numbers PLACEHOLDER-8))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-8
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-10]
          (expo PLACEHOLDER-10 (clojure.lang.RT/count PLACEHOLDER-9))))
        PLACEHOLDER-9))))))))
