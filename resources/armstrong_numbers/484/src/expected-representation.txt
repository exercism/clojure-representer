(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-3
      (map
       (fn* ([PLACEHOLDER-2] (read-string (str PLACEHOLDER-2))))
       (seq (str PLACEHOLDER-1)))
      PLACEHOLDER-4
      (clojure.lang.RT/count PLACEHOLDER-3)]
     (if
      (clojure.lang.Util/equiv
       (reduce
        +
        (map
         (fn*
          ([PLACEHOLDER-5]
           (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-5))))
         PLACEHOLDER-3))
       PLACEHOLDER-1)
      true
      false))))))
