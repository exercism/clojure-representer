(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-2 1 PLACEHOLDER-3 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-2
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-2)
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-5
  (fn* ([PLACEHOLDER-6] (format "%d" PLACEHOLDER-6))))
 (def
  PLACEHOLDER-7
  (fn* ([PLACEHOLDER-7] (java.lang.Integer/parseInt PLACEHOLDER-7))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (map
     PLACEHOLDER-7
     (str/split (PLACEHOLDER-5 PLACEHOLDER-8) (re-pattern ""))))))
 (def PLACEHOLDER-10 (memoize PLACEHOLDER-8))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-11]
    (clojure.lang.Util/equiv
     (let*
      [PLACEHOLDER-12
       (PLACEHOLDER-10 PLACEHOLDER-11)
       PLACEHOLDER-13
       (clojure.lang.RT/count PLACEHOLDER-12)]
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-14]
          (PLACEHOLDER-1 PLACEHOLDER-14 PLACEHOLDER-13)))
        PLACEHOLDER-12)))
     PLACEHOLDER-11)))))
