(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 1 PLACEHOLDER-4 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-3)
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def n2s (fn* ([PLACEHOLDER-5] (format "%d" PLACEHOLDER-5))))
 (def
  s2n
  (fn* ([PLACEHOLDER-6] (java.lang.Integer/parseInt PLACEHOLDER-6))))
 (def
  _n2v
  (fn*
   ([PLACEHOLDER-7]
    (map s2n (str/split (n2s PLACEHOLDER-7) (re-pattern ""))))))
 (def n2v (memoize _n2v))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     (let*
      [PLACEHOLDER-9
       (n2v PLACEHOLDER-8)
       PLACEHOLDER-10
       (clojure.lang.RT/count PLACEHOLDER-9)]
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-11] (exp PLACEHOLDER-11 PLACEHOLDER-10)))
        PLACEHOLDER-9)))
     PLACEHOLDER-8)))))
