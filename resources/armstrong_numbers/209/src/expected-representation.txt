(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-1)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-1
      (PLACEHOLDER-1
       PLACEHOLDER-1
       (clojure.lang.Numbers/dec PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4]
    (map
     (fn*
      ([PLACEHOLDER-5] (java.lang.Character/digit PLACEHOLDER-5 10)))
     (str PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7
      (PLACEHOLDER-4 PLACEHOLDER-6)
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-7)]
     (apply
      +
      (map
       (fn*
        ([PLACEHOLDER-9] (PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-8)))
       PLACEHOLDER-7))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-11]
    (clojure.lang.Util/equiv
     PLACEHOLDER-11
     (PLACEHOLDER-6 PLACEHOLDER-11))))))
