(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-0)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-0 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-0))))
    nil)))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-0
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5 (clojure.lang.RT/count (str PLACEHOLDER-4))]
     (map
      (fn*
       ([PLACEHOLDER-6]
        (PLACEHOLDER-2 (mod PLACEHOLDER-6 10) PLACEHOLDER-5)))
      (take
       PLACEHOLDER-5
       (iterate
        (fn*
         ([PLACEHOLDER-7]
          (clojure.lang.Numbers/quotient PLACEHOLDER-7 10)))
        PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-10 (clojure.lang.RT/count (str PLACEHOLDER-10))]
     (clojure.lang.Numbers/equiv
      PLACEHOLDER-10
      (reduce + (PLACEHOLDER-0 PLACEHOLDER-10))))))))
