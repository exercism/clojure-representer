(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  armstrong-numbers
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4 (clojure.lang.RT/count (str PLACEHOLDER-3))]
     (map
      (fn*
       ([PLACEHOLDER-5] (exp (mod PLACEHOLDER-5 10) PLACEHOLDER-4)))
      (take
       PLACEHOLDER-4
       (iterate
        (fn*
         ([PLACEHOLDER-6]
          (clojure.lang.Numbers/quotient PLACEHOLDER-6 10)))
        PLACEHOLDER-3)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8 (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (clojure.lang.Numbers/equiv
      PLACEHOLDER-7
      (reduce + (armstrong-numbers PLACEHOLDER-7))))))))
