(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-2)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-1
      (exp PLACEHOLDER-1 (clojure.lang.Numbers/dec PLACEHOLDER-2)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-5
      (map
       (fn*
        ([PLACEHOLDER-4] (java.lang.Character/digit PLACEHOLDER-4 10)))
       (flatten (split-with (partial number?) (str PLACEHOLDER-3))))
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)
      PLACEHOLDER-8
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-7] (exp PLACEHOLDER-7 PLACEHOLDER-6)))
        PLACEHOLDER-5))]
     (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-3))))))
