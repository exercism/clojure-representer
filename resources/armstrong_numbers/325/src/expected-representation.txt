(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/minus
     (clojure.lang.RT/longCast PLACEHOLDER-1)
     (clojure.lang.RT/longCast \0)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-3]
    (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-5
      (java.lang.String/valueOf PLACEHOLDER-5)
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)
      PLACEHOLDER-7
      (reduce
       (fn*
        ([PLACEHOLDER-7 PLACEHOLDER-8]
         (clojure.lang.Numbers/addP
          PLACEHOLDER-7
          (clojure.lang.RT/longCast
           (PLACEHOLDER-2
            (PLACEHOLDER-1 PLACEHOLDER-8)
            PLACEHOLDER-6)))))
       0
       PLACEHOLDER-5)]
     (clojure.lang.Util/equiv PLACEHOLDER-7 PLACEHOLDER-5))))))
