(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as strs]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (apply * (repeat PLACEHOLDER-2 (bigdec PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-4
      (strs/split (str PLACEHOLDER-4) (re-pattern ""))
      PLACEHOLDER-5
      (clojure.lang.RT/count PLACEHOLDER-4)]
     (reduce
      (fn*
       ([PLACEHOLDER-6 PLACEHOLDER-6]
        (clojure.lang.Numbers/addP
         PLACEHOLDER-6
         (PLACEHOLDER-1
          (java.lang.Integer/parseInt PLACEHOLDER-6)
          PLACEHOLDER-5))))
      0
      PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-9]
    (clojure.lang.Numbers/equiv
     (bigdec PLACEHOLDER-9)
     (PLACEHOLDER-3 PLACEHOLDER-9))))))
