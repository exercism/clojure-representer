(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/import* "java.math.BigDecimal"))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (let*
     [PLACEHOLDER-2 (new BigDecimal PLACEHOLDER-1)]
     (.pow PLACEHOLDER-2 PLACEHOLDER-2)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      (fn*
       ([PLACEHOLDER-5 PLACEHOLDER-5]
        (if
         (clojure.lang.Numbers/isZero PLACEHOLDER-5)
         PLACEHOLDER-5
         (recur
          (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)
          (cons (mod PLACEHOLDER-5 10) PLACEHOLDER-5)))))]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      '(0)
      (PLACEHOLDER-5 PLACEHOLDER-4 '()))))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-9]
    (let*
     [PLACEHOLDER-9
      (new BigDecimal PLACEHOLDER-9)
      PLACEHOLDER-10
      (PLACEHOLDER-4 PLACEHOLDER-9)
      PLACEHOLDER-11
      (clojure.lang.RT/count PLACEHOLDER-10)
      PLACEHOLDER-12
      (reduce
       (fn*
        ([PLACEHOLDER-13 PLACEHOLDER-13]
         (clojure.lang.Numbers/add
          PLACEHOLDER-13
          (PLACEHOLDER-1 PLACEHOLDER-13 PLACEHOLDER-11))))
       0
       PLACEHOLDER-10)]
     (clojure.lang.Util/equiv PLACEHOLDER-9 PLACEHOLDER-12))))))
