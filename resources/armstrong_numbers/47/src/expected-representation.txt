(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-2 ()]
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-2 10)
      (conj PLACEHOLDER-2 PLACEHOLDER-2)
      (recur
       (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
       (conj PLACEHOLDER-2 (mod PLACEHOLDER-2 10))))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5]
    (clojure.lang.RT/count (PLACEHOLDER-1 PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-7 PLACEHOLDER-7]
    (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (reduce
     +
     (let*
      [PLACEHOLDER-8
       (fn*
        PLACEHOLDER-9
        ([PLACEHOLDER-9]
         (new
          clojure.lang.LazySeq
          (fn*
           ([]
            (loop*
             [PLACEHOLDER-10 PLACEHOLDER-9]
             (let*
              [PLACEHOLDER-11 (clojure.core/seq PLACEHOLDER-10)]
              (if
               PLACEHOLDER-11
               (let*
                [PLACEHOLDER-12 PLACEHOLDER-11]
                (if
                 (clojure.core/chunked-seq? PLACEHOLDER-12)
                 (let*
                  [PLACEHOLDER-12
                   (clojure.core/chunk-first PLACEHOLDER-12)
                   PLACEHOLDER-12
                   (clojure.lang.RT/intCast
                    (clojure.lang.RT/count PLACEHOLDER-12))
                   PLACEHOLDER-13
                   (clojure.core/chunk-buffer PLACEHOLDER-12)]
                  (if
                   (loop*
                    [PLACEHOLDER-14 (clojure.lang.RT/intCast 0)]
                    (if
                     (clojure.lang.Numbers/lt
                      PLACEHOLDER-14
                      PLACEHOLDER-12)
                     (let*
                      [PLACEHOLDER-15
                       (.nth PLACEHOLDER-12 PLACEHOLDER-14)]
                      (do
                       (clojure.core/chunk-append
                        PLACEHOLDER-13
                        (PLACEHOLDER-6
                         PLACEHOLDER-15
                         (PLACEHOLDER-4 PLACEHOLDER-8)))
                       (recur
                        (clojure.lang.Numbers/unchecked_inc
                         PLACEHOLDER-14))))
                     true))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-13)
                    (PLACEHOLDER-9
                     (clojure.core/chunk-rest PLACEHOLDER-12)))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-13)
                    nil)))
                 (let*
                  [PLACEHOLDER-19 (clojure.core/first PLACEHOLDER-12)]
                  (clojure.core/cons
                   (PLACEHOLDER-6
                    PLACEHOLDER-19
                    (PLACEHOLDER-4 PLACEHOLDER-8))
                   (PLACEHOLDER-9
                    (clojure.core/rest PLACEHOLDER-12))))))))))))))]
      (PLACEHOLDER-8 (PLACEHOLDER-1 PLACEHOLDER-8)))))))
 (def
  PLACEHOLDER-23
  (fn*
   ([PLACEHOLDER-23]
    (clojure.lang.Util/equiv
     PLACEHOLDER-23
     (PLACEHOLDER-8 PLACEHOLDER-23))))))
