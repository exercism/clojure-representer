(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require
         '[clojure.edn :as edn]
         '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce *' (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-3 (clojure.lang.RT/count (str PLACEHOLDER-3))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-3
      (let*
       [PLACEHOLDER-5
        PLACEHOLDER-3
        PLACEHOLDER-6
        (str PLACEHOLDER-5)
        PLACEHOLDER-7
        (str/split PLACEHOLDER-6 (re-pattern ""))
        PLACEHOLDER-8
        (map edn/read-string PLACEHOLDER-7)]
       (reduce
        (fn*
         ([PLACEHOLDER-9 PLACEHOLDER-9]
          (clojure.lang.Numbers/add
           PLACEHOLDER-9
           (PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-3))))
        0
        PLACEHOLDER-8))))))))
