(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  expt
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 1 PLACEHOLDER-4 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-3)
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (loop*
     [PLACEHOLDER-6
      0
      PLACEHOLDER-7
      PLACEHOLDER-5
      PLACEHOLDER-8
      (clojure.lang.RT/count (str PLACEHOLDER-5))
      PLACEHOLDER-9
      (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (let*
      [PLACEHOLDER-10
       (clojure.lang.RT/intCast
        (clojure.lang.Numbers/divide
         PLACEHOLDER-7
         (expt 10 (clojure.lang.Numbers/minus PLACEHOLDER-9 1))))]
      (if
       (let*
        [PLACEHOLDER-11 (clojure.lang.Util/equiv PLACEHOLDER-7 0)]
        (if
         PLACEHOLDER-11
         (clojure.lang.Util/equiv PLACEHOLDER-6 PLACEHOLDER-5)
         PLACEHOLDER-11))
       true
       (if
        (let*
         [PLACEHOLDER-12 (clojure.lang.Util/equiv PLACEHOLDER-7 0)]
         (if
          PLACEHOLDER-12
          (not (clojure.lang.Util/equiv PLACEHOLDER-6 PLACEHOLDER-5))
          PLACEHOLDER-12))
        false
        (if
         :else
         (recur
          (clojure.lang.Numbers/add
           (expt PLACEHOLDER-10 PLACEHOLDER-8)
           PLACEHOLDER-6)
          (clojure.lang.Numbers/minus
           PLACEHOLDER-7
           (clojure.lang.Numbers/multiply
            PLACEHOLDER-10
            (expt 10 (clojure.lang.Numbers/minus PLACEHOLDER-9 1))))
          PLACEHOLDER-8
          (clojure.lang.RT/count (str PLACEHOLDER-7))))))))))))
