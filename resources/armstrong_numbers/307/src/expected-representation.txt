(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-2 1 PLACEHOLDER-3 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-2
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-2)
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (loop*
     [PLACEHOLDER-5
      0
      PLACEHOLDER-5
      PLACEHOLDER-5
      PLACEHOLDER-6
      (clojure.lang.RT/count (str PLACEHOLDER-5))
      PLACEHOLDER-6
      (clojure.lang.RT/count (str PLACEHOLDER-5))]
     (let*
      [PLACEHOLDER-7
       (clojure.lang.RT/intCast
        (clojure.lang.Numbers/divide
         PLACEHOLDER-5
         (PLACEHOLDER-1
          10
          (clojure.lang.Numbers/minus PLACEHOLDER-6 1))))]
      (if
       (let*
        [PLACEHOLDER-7 (clojure.lang.Util/equiv PLACEHOLDER-5 0)]
        (if
         PLACEHOLDER-7
         (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-5)
         PLACEHOLDER-7))
       true
       (if
        (let*
         [PLACEHOLDER-9 (clojure.lang.Util/equiv PLACEHOLDER-5 0)]
         (if
          PLACEHOLDER-9
          (not (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-5))
          PLACEHOLDER-9))
        false
        (if
         :else
         (recur
          (clojure.lang.Numbers/add
           (PLACEHOLDER-1 PLACEHOLDER-7 PLACEHOLDER-6)
           PLACEHOLDER-5)
          (clojure.lang.Numbers/minus
           PLACEHOLDER-5
           (clojure.lang.Numbers/multiply
            PLACEHOLDER-7
            (PLACEHOLDER-1
             10
             (clojure.lang.Numbers/minus PLACEHOLDER-6 1))))
          PLACEHOLDER-6
          (clojure.lang.RT/count (str PLACEHOLDER-5))))))))))))
