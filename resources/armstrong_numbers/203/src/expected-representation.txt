(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isPos PLACEHOLDER-1)
     (conj
      (PLACEHOLDER-1 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (mod PLACEHOLDER-1 10))
     []))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.RT/count (PLACEHOLDER-1 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4]
    (reduce
     +
     (let*
      [PLACEHOLDER-4
       (fn*
        PLACEHOLDER-5
        ([PLACEHOLDER-5]
         (new
          clojure.lang.LazySeq
          (fn*
           ([]
            (loop*
             [PLACEHOLDER-6 PLACEHOLDER-5]
             (let*
              [PLACEHOLDER-7 (clojure.core/seq PLACEHOLDER-6)]
              (if
               PLACEHOLDER-7
               (let*
                [PLACEHOLDER-8 PLACEHOLDER-7]
                (if
                 (clojure.core/chunked-seq? PLACEHOLDER-8)
                 (let*
                  [PLACEHOLDER-8
                   (clojure.core/chunk-first PLACEHOLDER-8)
                   PLACEHOLDER-8
                   (clojure.lang.RT/intCast
                    (clojure.lang.RT/count PLACEHOLDER-8))
                   PLACEHOLDER-9
                   (clojure.core/chunk-buffer PLACEHOLDER-8)]
                  (if
                   (loop*
                    [PLACEHOLDER-10 (clojure.lang.RT/intCast 0)]
                    (if
                     (clojure.lang.Numbers/lt
                      PLACEHOLDER-10
                      PLACEHOLDER-8)
                     (let*
                      [PLACEHOLDER-11
                       (.nth PLACEHOLDER-8 PLACEHOLDER-10)]
                      (let*
                       [PLACEHOLDER-11
                        (.pow
                         (biginteger PLACEHOLDER-11)
                         (PLACEHOLDER-3 PLACEHOLDER-4))]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-9
                         PLACEHOLDER-11)
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-10)))))
                     true))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-9)
                    (PLACEHOLDER-5
                     (clojure.core/chunk-rest PLACEHOLDER-8)))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-9)
                    nil)))
                 (let*
                  [PLACEHOLDER-16 (clojure.core/first PLACEHOLDER-8)]
                  (let*
                   [PLACEHOLDER-17
                    (.pow
                     (biginteger PLACEHOLDER-16)
                     (PLACEHOLDER-3 PLACEHOLDER-4))]
                   (clojure.core/cons
                    PLACEHOLDER-17
                    (PLACEHOLDER-5
                     (clojure.core/rest PLACEHOLDER-8)))))))))))))))]
      (PLACEHOLDER-4 (PLACEHOLDER-1 PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-20
  (fn*
   ([PLACEHOLDER-20]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-20
     (PLACEHOLDER-4 PLACEHOLDER-20))))))
