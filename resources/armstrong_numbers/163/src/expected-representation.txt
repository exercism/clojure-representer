(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     PLACEHOLDER-1
     (PLACEHOLDER-1
      (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)
      (cons (mod PLACEHOLDER-1 10) PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6
      (PLACEHOLDER-1 PLACEHOLDER-6 '())
      PLACEHOLDER-7
      (clojure.lang.RT/count PLACEHOLDER-6)]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-6 0)
      true
      (clojure.lang.Util/equiv
       PLACEHOLDER-6
       (reduce
        (fn*
         ([PLACEHOLDER-9 PLACEHOLDER-10]
          (clojure.lang.Numbers/add
           PLACEHOLDER-9
           (PLACEHOLDER-4 PLACEHOLDER-10 PLACEHOLDER-7))))
        0
        PLACEHOLDER-6))))))))
