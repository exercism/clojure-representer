(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.math.numeric-tower :as math :refer [expt]])
 (def
  to-digits
  (fn*
   ([PLACEHOLDER-1] (to-digits PLACEHOLDER-1 []))
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/gt PLACEHOLDER-2 0)
     (recur
      (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
      (conj PLACEHOLDER-3 (mod PLACEHOLDER-2 10)))
     PLACEHOLDER-3))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5 (to-digits PLACEHOLDER-4)]
     (clojure.lang.Util/equiv
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-6]
          (expt PLACEHOLDER-6 (clojure.lang.RT/count PLACEHOLDER-5))))
        PLACEHOLDER-5))
      PLACEHOLDER-4))))))
