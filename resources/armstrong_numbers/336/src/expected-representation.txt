(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     PLACEHOLDER-2
     (recur
      PLACEHOLDER-1
      (clojure.lang.Numbers/minus PLACEHOLDER-1 1)
      (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-2))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4]
    (do
     (def
      PLACEHOLDER-5
      (into
       []
       (map
        (fn*
         ([PLACEHOLDER-5] (java.lang.Integer/parseInt PLACEHOLDER-5)))
        (into [] (map str (reduce conj [] (str PLACEHOLDER-4)))))))
     (if
      (clojure.lang.Util/equiv
       (reduce
        +
        (into
         []
         (map
          (fn*
           ([PLACEHOLDER-7]
            (PLACEHOLDER-1
             PLACEHOLDER-7
             (clojure.lang.RT/count PLACEHOLDER-5)
             1)))
          PLACEHOLDER-5)))
       PLACEHOLDER-4)
      true
      false))))))
