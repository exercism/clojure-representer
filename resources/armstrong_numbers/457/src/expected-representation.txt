(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require
         '[clojure.string :as string]
         '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-3
      (map
       (fn*
        ([PLACEHOLDER-2] (java.lang.Integer/parseInt PLACEHOLDER-2)))
       (string/split (str PLACEHOLDER-1) (re-pattern "")))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-1
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-4]
          (math/expt
           PLACEHOLDER-4
           (clojure.lang.RT/count PLACEHOLDER-3))))
        PLACEHOLDER-3))))))))
