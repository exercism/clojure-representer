(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-3
     (reduce
      +
      (let*
       [PLACEHOLDER-3
        (fn*
         PLACEHOLDER-4
         ([PLACEHOLDER-4]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-4 PLACEHOLDER-4]
              (let*
               [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-4)]
               (if
                PLACEHOLDER-5
                (let*
                 [PLACEHOLDER-7 PLACEHOLDER-5]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-7)
                  (let*
                   [PLACEHOLDER-8
                    (clojure.core/chunk-first PLACEHOLDER-7)
                    PLACEHOLDER-8
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-8))
                    PLACEHOLDER-8
                    (clojure.core/chunk-buffer PLACEHOLDER-8)]
                   (if
                    (loop*
                     [PLACEHOLDER-9 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-9
                       PLACEHOLDER-8)
                      (let*
                       [PLACEHOLDER-10
                        (.nth PLACEHOLDER-8 PLACEHOLDER-9)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-8
                         (clojure.lang.RT/longCast
                          (PLACEHOLDER-1
                           (clojure.lang.RT/longCast
                            (clojure.lang.Numbers/minus
                             (clojure.lang.RT/byteCast PLACEHOLDER-10)
                             48))
                           (clojure.lang.RT/count
                            (str PLACEHOLDER-3)))))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-9))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-8)
                     (PLACEHOLDER-4
                      (clojure.core/chunk-rest PLACEHOLDER-7)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-8)
                     nil)))
                  (let*
                   [PLACEHOLDER-13 (clojure.core/first PLACEHOLDER-7)]
                   (clojure.core/cons
                    (clojure.lang.RT/longCast
                     (PLACEHOLDER-1
                      (clojure.lang.RT/longCast
                       (clojure.lang.Numbers/minus
                        (clojure.lang.RT/byteCast PLACEHOLDER-13)
                        48))
                      (clojure.lang.RT/count (str PLACEHOLDER-3))))
                    (PLACEHOLDER-4
                     (clojure.core/rest PLACEHOLDER-7))))))))))))))]
       (PLACEHOLDER-3 (str PLACEHOLDER-3)))))))))
