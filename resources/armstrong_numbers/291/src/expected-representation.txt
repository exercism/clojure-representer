(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (str PLACEHOLDER-1)
      PLACEHOLDER-3
      (clojure.lang.RT/count PLACEHOLDER-2)]
     (letfn*
      [PLACEHOLDER-4
       (fn*
        PLACEHOLDER-6
        ([PLACEHOLDER-7]
         (clojure.lang.Numbers/minus
          (clojure.lang.RT/intCast PLACEHOLDER-7)
          48)))
       PLACEHOLDER-5
       (fn*
        PLACEHOLDER-8
        ([PLACEHOLDER-9]
         (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-9))))]
      (clojure.lang.Util/equiv
       PLACEHOLDER-1
       (reduce
        +
        (map (comp PLACEHOLDER-5 PLACEHOLDER-4) PLACEHOLDER-2)))))))))
