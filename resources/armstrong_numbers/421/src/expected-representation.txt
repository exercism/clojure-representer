(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  exp
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 1 PLACEHOLDER-4 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-4)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-3)
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6
      (clojure.lang.RT/count (str PLACEHOLDER-5))
      PLACEHOLDER-8
      (map
       (fn*
        ([PLACEHOLDER-7] (java.lang.Character/digit PLACEHOLDER-7 10)))
       (seq (str PLACEHOLDER-5)))]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-6 1)
      true
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-6 2)
       false
       (if
        (clojure.lang.Numbers/gte PLACEHOLDER-6 3)
        (if
         (clojure.lang.Util/equiv
          (reduce
           (fn*
            ([PLACEHOLDER-9 PLACEHOLDER-10]
             (clojure.lang.Numbers/add
              PLACEHOLDER-9
              (exp PLACEHOLDER-10 PLACEHOLDER-6))))
           0
           PLACEHOLDER-8)
          PLACEHOLDER-5)
         true
         false)
        (if :else false)))))))))
