(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-2 1 PLACEHOLDER-3 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-2
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-2)
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-5
      (clojure.lang.RT/count (str PLACEHOLDER-5))
      PLACEHOLDER-6
      (map
       (fn*
        ([PLACEHOLDER-6] (java.lang.Character/digit PLACEHOLDER-6 10)))
       (seq (str PLACEHOLDER-5)))]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-5 1)
      true
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-5 2)
       false
       (if
        (clojure.lang.Numbers/gte PLACEHOLDER-5 3)
        (if
         (clojure.lang.Util/equiv
          (reduce
           (fn*
            ([PLACEHOLDER-8 PLACEHOLDER-9]
             (clojure.lang.Numbers/add
              PLACEHOLDER-8
              (PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-5))))
           0
           PLACEHOLDER-6)
          PLACEHOLDER-5)
         true
         false)
        (if :else false)))))))))
