(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (map
     (fn* ([PLACEHOLDER-4] (java.lang.Integer/parseInt PLACEHOLDER-4)))
     (clojure.string/split (str PLACEHOLDER-4) (re-pattern ""))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6 (clojure.lang.RT/count PLACEHOLDER-6)]
     (reduce
      (fn*
       ([PLACEHOLDER-7 PLACEHOLDER-8]
        (clojure.lang.Numbers/add
         (PLACEHOLDER-1 PLACEHOLDER-8 PLACEHOLDER-6)
         PLACEHOLDER-7)))
      0
      PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-11]
    (let*
     [PLACEHOLDER-11 (PLACEHOLDER-3 PLACEHOLDER-11)]
     (clojure.lang.Util/equiv
      (PLACEHOLDER-5 PLACEHOLDER-11)
      PLACEHOLDER-11))))))
