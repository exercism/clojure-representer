(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn* ([PLACEHOLDER-4] ((comp long /) PLACEHOLDER-4 10))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-5]
    ((comp inc long) (java.lang.Math/log10 PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6] (PLACEHOLDER-6 PLACEHOLDER-6 ()))
   ([PLACEHOLDER-7 PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-8
      (PLACEHOLDER-3 PLACEHOLDER-7)
      PLACEHOLDER-9
      (conj PLACEHOLDER-8 (mod PLACEHOLDER-7 10))]
     (if
      (clojure.lang.Numbers/lte PLACEHOLDER-7 9)
      PLACEHOLDER-9
      (recur PLACEHOLDER-8 PLACEHOLDER-9))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-11]
    (let*
     [PLACEHOLDER-12 (clojure.lang.Numbers/lte PLACEHOLDER-11 9)]
     (if
      PLACEHOLDER-12
      PLACEHOLDER-12
      (let*
       [PLACEHOLDER-14
        (PLACEHOLDER-5 PLACEHOLDER-11)
        PLACEHOLDER-15
        (partial reduce +)
        PLACEHOLDER-16
        (partial
         map
         (fn*
          ([PLACEHOLDER-16]
           (PLACEHOLDER-1 PLACEHOLDER-16 PLACEHOLDER-14))))]
       (clojure.lang.Util/equiv
        PLACEHOLDER-11
        ((comp PLACEHOLDER-15 PLACEHOLDER-16 PLACEHOLDER-6)
         PLACEHOLDER-11)))))))))
