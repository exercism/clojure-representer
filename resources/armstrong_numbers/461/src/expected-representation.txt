(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-1))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-2]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-2 0)
     1
     (if
      (even? PLACEHOLDER-2)
      (PLACEHOLDER-1
       (PLACEHOLDER-2
        PLACEHOLDER-2
        (clojure.lang.Numbers/divide PLACEHOLDER-2 2)))
      (if
       :else
       (clojure.lang.Numbers/multiply
        PLACEHOLDER-2
        (PLACEHOLDER-2
         PLACEHOLDER-2
         (clojure.lang.Numbers/dec PLACEHOLDER-2)))))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6] (map (comp read-string str) (str PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8 (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-9] (PLACEHOLDER-2 PLACEHOLDER-9 PLACEHOLDER-8)))
        (PLACEHOLDER-5 PLACEHOLDER-7)))))))))
