(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  get-digits
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (java.lang.Character/digit PLACEHOLDER-2 10)))
     (seq (str PLACEHOLDER-1))))))
 (def
  get-expt-sum
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.RT/longCast
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-4]
         (math/expt
          PLACEHOLDER-4
          (clojure.lang.RT/count PLACEHOLDER-3))))
       PLACEHOLDER-3))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6
      (get-digits PLACEHOLDER-5)
      PLACEHOLDER-7
      (get-expt-sum PLACEHOLDER-6)]
     (clojure.lang.Util/equiv PLACEHOLDER-7 PLACEHOLDER-5))))))
