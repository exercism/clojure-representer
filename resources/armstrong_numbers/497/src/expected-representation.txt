(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  power-of
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-3 PLACEHOLDER-1 PLACEHOLDER-4 PLACEHOLDER-2]
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-4 1)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-1)
       (clojure.lang.Numbers/dec PLACEHOLDER-4)))))))
 (def
  digits-count
  (fn*
   ([PLACEHOLDER-5]
    (clojure.lang.RT/count (.toString PLACEHOLDER-5)))))
 (def
  digits
  (fn*
   ([PLACEHOLDER-6]
    (loop*
     [PLACEHOLDER-7
      []
      PLACEHOLDER-8
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-6 10))
      PLACEHOLDER-9
      (mod PLACEHOLDER-6 10)]
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-8 1)
      (conj PLACEHOLDER-7 PLACEHOLDER-9)
      (recur
       (cons PLACEHOLDER-9 PLACEHOLDER-7)
       (bigint (clojure.lang.Numbers/divide PLACEHOLDER-8 10))
       (mod PLACEHOLDER-8 10)))))))
 (def
  armstrong
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-11
      (digits PLACEHOLDER-10)
      PLACEHOLDER-12
      (clojure.lang.RT/count PLACEHOLDER-11)]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-13] (power-of PLACEHOLDER-13 PLACEHOLDER-12)))
       PLACEHOLDER-11))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-14]
    (clojure.lang.Util/equiv
     PLACEHOLDER-14
     (armstrong PLACEHOLDER-14))))))
