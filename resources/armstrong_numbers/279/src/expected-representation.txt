(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn* ([PLACEHOLDER-2] (bigint PLACEHOLDER-2)))
     (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-3))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-4]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-4 0)
     1N
     (if
      (clojure.lang.Util/equiv PLACEHOLDER-4 1N)
      (bigint PLACEHOLDER-4)
      (if
       (even? PLACEHOLDER-4)
       (PLACEHOLDER-3
        (PLACEHOLDER-4
         PLACEHOLDER-4
         (clojure.lang.Numbers/divide PLACEHOLDER-4 2)))
       (if
        :else
        (clojure.lang.Numbers/multiply
         PLACEHOLDER-4
         (PLACEHOLDER-4
          PLACEHOLDER-4
          (clojure.lang.Numbers/dec PLACEHOLDER-4))))))))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (PLACEHOLDER-1 PLACEHOLDER-8)
      PLACEHOLDER-10
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-11]
          (PLACEHOLDER-4
           PLACEHOLDER-11
           (clojure.lang.RT/count PLACEHOLDER-9))))
        PLACEHOLDER-9))]
     (clojure.lang.Util/equiv PLACEHOLDER-8 PLACEHOLDER-10))))))
