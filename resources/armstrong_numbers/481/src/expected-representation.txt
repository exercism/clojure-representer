(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (.pow
     (java.math.BigInteger/valueOf PLACEHOLDER-1)
     PLACEHOLDER-2))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-4]
    (reduce
     +
     (let*
      [PLACEHOLDER-4
       (fn*
        PLACEHOLDER-5
        ([PLACEHOLDER-5]
         (new
          clojure.lang.LazySeq
          (fn*
           ([]
            (loop*
             [PLACEHOLDER-5 PLACEHOLDER-5]
             (let*
              [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-5)]
              (if
               PLACEHOLDER-6
               (let*
                [PLACEHOLDER-8 PLACEHOLDER-6]
                (if
                 (clojure.core/chunked-seq? PLACEHOLDER-8)
                 (let*
                  [PLACEHOLDER-9
                   (clojure.core/chunk-first PLACEHOLDER-8)
                   PLACEHOLDER-9
                   (clojure.lang.RT/intCast
                    (clojure.lang.RT/count PLACEHOLDER-9))
                   PLACEHOLDER-9
                   (clojure.core/chunk-buffer PLACEHOLDER-9)]
                  (if
                   (loop*
                    [PLACEHOLDER-10 (clojure.lang.RT/intCast 0)]
                    (if
                     (clojure.lang.Numbers/lt
                      PLACEHOLDER-10
                      PLACEHOLDER-9)
                     (let*
                      [PLACEHOLDER-11
                       (.nth PLACEHOLDER-9 PLACEHOLDER-10)]
                      (do
                       (clojure.core/chunk-append
                        PLACEHOLDER-9
                        (PLACEHOLDER-1
                         (java.lang.Character/getNumericValue
                          PLACEHOLDER-11)
                         PLACEHOLDER-4))
                       (recur
                        (clojure.lang.Numbers/unchecked_inc
                         PLACEHOLDER-10))))
                     true))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-9)
                    (PLACEHOLDER-5
                     (clojure.core/chunk-rest PLACEHOLDER-8)))
                   (clojure.core/chunk-cons
                    (clojure.core/chunk PLACEHOLDER-9)
                    nil)))
                 (let*
                  [PLACEHOLDER-14 (clojure.core/first PLACEHOLDER-8)]
                  (clojure.core/cons
                   (PLACEHOLDER-1
                    (java.lang.Character/getNumericValue
                     PLACEHOLDER-14)
                    PLACEHOLDER-4)
                   (PLACEHOLDER-5
                    (clojure.core/rest PLACEHOLDER-8))))))))))))))]
      (PLACEHOLDER-4 (str PLACEHOLDER-4)))))))
 (def
  PLACEHOLDER-18
  (fn*
   ([PLACEHOLDER-18]
    (clojure.lang.Util/equiv
     PLACEHOLDER-18
     (bigint
      (PLACEHOLDER-3
       PLACEHOLDER-18
       (clojure.lang.RT/count (str PLACEHOLDER-18)))))))))
