(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  num-to-digits
  (fn*
   ([PLACEHOLDER-1]
    (map bigint (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  pow-digits
  (fn*
   ([PLACEHOLDER-2]
    (map
     (fn*
      ([PLACEHOLDER-3]
       (clojure.lang.Numbers/num
        (.pow
         (bigdec PLACEHOLDER-3)
         (clojure.lang.RT/count PLACEHOLDER-2)))))
     PLACEHOLDER-2))))
 (def
  sum-pow-digits
  (fn* ([PLACEHOLDER-4] (reduce + (pow-digits PLACEHOLDER-4)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (clojure.lang.Util/equiv
     (bigdec PLACEHOLDER-5)
     (sum-pow-digits (num-to-digits PLACEHOLDER-5)))))))
