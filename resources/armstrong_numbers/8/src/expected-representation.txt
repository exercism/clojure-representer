(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as s]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1] (s/split (str PLACEHOLDER-1) (re-pattern "")))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3]
    (loop*
     [PLACEHOLDER-3 (PLACEHOLDER-1 PLACEHOLDER-3) PLACEHOLDER-4 []]
     (if
      (empty? PLACEHOLDER-3)
      PLACEHOLDER-4
      (let*
       [PLACEHOLDER-5
        PLACEHOLDER-3
        PLACEHOLDER-6
        (clojure.core/seq PLACEHOLDER-5)
        PLACEHOLDER-7
        (clojure.core/first PLACEHOLDER-6)
        PLACEHOLDER-8
        (clojure.core/next PLACEHOLDER-6)
        PLACEHOLDER-9
        PLACEHOLDER-7
        PLACEHOLDER-10
        PLACEHOLDER-8]
       (recur
        PLACEHOLDER-10
        (conj PLACEHOLDER-4 (new Integer PLACEHOLDER-9)))))))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-13]
    (loop* [PLACEHOLDER-13 (PLACEHOLDER-1 PLACEHOLDER-13)] nil)))))
