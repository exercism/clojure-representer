(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  quot10
  (fn*
   ([PLACEHOLDER-3] (clojure.lang.Numbers/quotient PLACEHOLDER-3 10))))
 (def
  mod10
  (fn*
   ([PLACEHOLDER-4]
    (clojure.lang.Numbers/remainder PLACEHOLDER-4 10))))
 (def
  armstrong-sum
  (fn*
   ([PLACEHOLDER-5]
    (reduce
     +
     (map
      pow
      PLACEHOLDER-5
      (repeat (clojure.lang.RT/count PLACEHOLDER-5)))))))
 (def
  split-digits
  (fn*
   ([PLACEHOLDER-6]
    (map mod10 (take-while pos? (iterate quot10 PLACEHOLDER-6))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (clojure.lang.Util/equiv
     PLACEHOLDER-7
     (armstrong-sum (split-digits PLACEHOLDER-7)))))))
