(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/import* "java.lang.Math"))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (bigint (.pow (biginteger PLACEHOLDER-1) PLACEHOLDER-2)))))
 (def floor (fn* ([PLACEHOLDER-3] (bigint PLACEHOLDER-3))))
 (def
  nth-digit
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6
      (pow 10 PLACEHOLDER-5)
      PLACEHOLDER-7
      (clojure.lang.Numbers/divide PLACEHOLDER-4 PLACEHOLDER-6)
      PLACEHOLDER-8
      (floor PLACEHOLDER-7)
      PLACEHOLDER-9
      (mod PLACEHOLDER-8 10)]
     (bigint PLACEHOLDER-9)))))
 (def
  iterations
  (fn*
   ([PLACEHOLDER-10]
    (clojure.lang.Numbers/add
     1
     (bigint (java.lang.Math/log10 PLACEHOLDER-10))))))
 (def
  calc-one
  (fn*
   ([PLACEHOLDER-11 PLACEHOLDER-12 PLACEHOLDER-13]
    (let*
     [PLACEHOLDER-14
      (nth-digit PLACEHOLDER-12 PLACEHOLDER-13)
      PLACEHOLDER-15
      (iterations PLACEHOLDER-12)
      PLACEHOLDER-16
      (pow PLACEHOLDER-14 PLACEHOLDER-15)
      PLACEHOLDER-17
      (clojure.lang.Numbers/add PLACEHOLDER-11 PLACEHOLDER-16)]
     PLACEHOLDER-17))))
 (def
  calcthething
  (fn*
   ([PLACEHOLDER-18]
    (let*
     [PLACEHOLDER-19 (iterations PLACEHOLDER-18)]
     (loop*
      [PLACEHOLDER-20
       (clojure.lang.Numbers/minus (iterations PLACEHOLDER-18) 1)
       PLACEHOLDER-21
       0]
      (if
       (clojure.lang.Numbers/lt PLACEHOLDER-20 0)
       PLACEHOLDER-21
       (recur
        (clojure.lang.Numbers/minus PLACEHOLDER-20 1)
        (calc-one PLACEHOLDER-21 PLACEHOLDER-18 PLACEHOLDER-20))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-22]
    (let*
     [PLACEHOLDER-23 (clojure.lang.Util/equiv 0 PLACEHOLDER-22)]
     (if
      PLACEHOLDER-23
      PLACEHOLDER-23
      (clojure.lang.Util/equiv
       PLACEHOLDER-22
       (calcthething PLACEHOLDER-22))))))))
