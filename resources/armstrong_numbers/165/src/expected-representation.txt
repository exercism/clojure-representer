(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  digits
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-3 '()]
     (let*
      [PLACEHOLDER-4
       (clojure.lang.Numbers/remainder PLACEHOLDER-2 10)
       PLACEHOLDER-5
       (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
       PLACEHOLDER-6
       (cons PLACEHOLDER-4 PLACEHOLDER-3)]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-5)
       PLACEHOLDER-6
       (recur PLACEHOLDER-5 PLACEHOLDER-6)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (digits PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-8)
      PLACEHOLDER-11
      (fn*
       ([PLACEHOLDER-10]
        (reduce * (repeat PLACEHOLDER-9 PLACEHOLDER-10))))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (reduce + (map PLACEHOLDER-11 PLACEHOLDER-8))))))))
