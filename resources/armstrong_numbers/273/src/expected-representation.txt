(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as str]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  convert-number-to-list
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn* ([PLACEHOLDER-2] (java.lang.Integer/parseInt PLACEHOLDER-2)))
     (str/split PLACEHOLDER-1 (re-pattern ""))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6 (convert-number-to-list (str PLACEHOLDER-5))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-5
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-7]
          (exp PLACEHOLDER-7 (clojure.lang.RT/count PLACEHOLDER-6))))
        PLACEHOLDER-6))))))))
