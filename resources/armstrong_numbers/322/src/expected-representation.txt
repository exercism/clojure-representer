(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/minus
     (clojure.lang.RT/intCast PLACEHOLDER-1)
     (clojure.lang.RT/intCast \0)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-3] (map PLACEHOLDER-1 (seq (str PLACEHOLDER-3))))))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-5]
    (fn*
     ([PLACEHOLDER-5] (PLACEHOLDER-4 PLACEHOLDER-5 PLACEHOLDER-5))))
   ([PLACEHOLDER-7 PLACEHOLDER-7]
    (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-9]
    (let*
     [PLACEHOLDER-9
      (PLACEHOLDER-2 PLACEHOLDER-9)
      PLACEHOLDER-11
      (clojure.lang.RT/count PLACEHOLDER-9)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-9
      (reduce
       +
       (map (PLACEHOLDER-4 PLACEHOLDER-11) PLACEHOLDER-9))))))))
