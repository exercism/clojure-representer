(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (loop*
     [PLACEHOLDER-3
      (map
       (fn*
        ([PLACEHOLDER-4]
         (clojure.lang.Numbers/minus
          (clojure.lang.RT/intCast PLACEHOLDER-4)
          (clojure.lang.RT/intCast \0))))
       (str PLACEHOLDER-3))
      PLACEHOLDER-5
      (clojure.lang.RT/count (seq (str PLACEHOLDER-3)))
      PLACEHOLDER-6
      0
      PLACEHOLDER-6
      0]
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-6 PLACEHOLDER-5)
      (recur
       (rest PLACEHOLDER-3)
       PLACEHOLDER-5
       (clojure.lang.Numbers/inc PLACEHOLDER-6)
       (clojure.lang.Numbers/add
        (PLACEHOLDER-1 (first PLACEHOLDER-3) PLACEHOLDER-5)
        PLACEHOLDER-6))
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-3 PLACEHOLDER-6)
       true
       false)))))))
