(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-1
      (PLACEHOLDER-1
       PLACEHOLDER-1
       (clojure.lang.Numbers/dec PLACEHOLDER-1)))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-3]
    (if
     (empty? PLACEHOLDER-3)
     0
     (clojure.lang.Numbers/add
      (first PLACEHOLDER-3)
      (PLACEHOLDER-3 (rest PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6
      (map
       (fn*
        ([PLACEHOLDER-7] (java.lang.Character/digit PLACEHOLDER-7 10)))
       (str PLACEHOLDER-6))
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-6)
      PLACEHOLDER-9
      (map
       (fn*
        ([PLACEHOLDER-10]
         (PLACEHOLDER-1 PLACEHOLDER-10 PLACEHOLDER-8)))
       PLACEHOLDER-6)]
     (PLACEHOLDER-3 PLACEHOLDER-9)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     PLACEHOLDER-12
     (PLACEHOLDER-6 PLACEHOLDER-12))))))
