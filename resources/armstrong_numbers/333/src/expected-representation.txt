(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  number-as-list
  (fn*
   ([PLACEHOLDER-1]
    (number-as-list
     PLACEHOLDER-1
     (if (clojure.lang.Util/equiv PLACEHOLDER-1 0) '(0) '())))
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4 (bigint PLACEHOLDER-2)]
     (if
      (clojure.lang.Util/equiv 0 PLACEHOLDER-4)
      PLACEHOLDER-3
      (recur
       (clojure.lang.Numbers/divide PLACEHOLDER-4 10)
       (cons (mod PLACEHOLDER-4 10) PLACEHOLDER-3)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6 (bigint PLACEHOLDER-5)]
     (let*
      [PLACEHOLDER-7
       (number-as-list PLACEHOLDER-6)
       PLACEHOLDER-10
       (reduce
        (fn*
         ([PLACEHOLDER-8 PLACEHOLDER-9]
          (clojure.lang.Numbers/addP
           PLACEHOLDER-8
           (.pow
            (bigdec PLACEHOLDER-9)
            (clojure.lang.RT/count PLACEHOLDER-7)))))
        0N
        PLACEHOLDER-7)
       PLACEHOLDER-11
       (bigint PLACEHOLDER-10)]
      (clojure.lang.Util/equiv PLACEHOLDER-6 PLACEHOLDER-11)))))))
