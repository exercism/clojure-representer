(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (loop*
     [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-2 []]
     (let*
      [PLACEHOLDER-3
       (clojure.lang.RT/intCast
        (clojure.lang.Numbers/divide PLACEHOLDER-2 10))
       PLACEHOLDER-3
       (clojure.lang.RT/intCast (mod PLACEHOLDER-2 10))]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-3 0)
       (conj PLACEHOLDER-2 PLACEHOLDER-3)
       (recur PLACEHOLDER-3 (conj PLACEHOLDER-2 PLACEHOLDER-3))))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-7 PLACEHOLDER-7]
    (loop*
     [PLACEHOLDER-8 1 PLACEHOLDER-8 PLACEHOLDER-7]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-8)
      PLACEHOLDER-8
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-8 PLACEHOLDER-7)
       (clojure.lang.Numbers/dec PLACEHOLDER-8)))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-11]
    (let*
     [PLACEHOLDER-11
      (PLACEHOLDER-1 PLACEHOLDER-11)
      PLACEHOLDER-12
      (clojure.lang.RT/count PLACEHOLDER-11)
      PLACEHOLDER-13
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-14]
          (PLACEHOLDER-6 PLACEHOLDER-14 PLACEHOLDER-12)))
        PLACEHOLDER-11))]
     (clojure.lang.Util/equiv PLACEHOLDER-11 PLACEHOLDER-13)))))
 (def
  PLACEHOLDER-18
  (fn* ([& PLACEHOLDER-18] (println (PLACEHOLDER-10 153))))))
