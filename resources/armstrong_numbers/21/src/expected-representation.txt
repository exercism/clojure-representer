(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce
     *
     (repeat
      (clojure.lang.RT/intCast PLACEHOLDER-2)
      (clojure.lang.RT/intCast PLACEHOLDER-1))))))
 (def
  int-digits
  (fn*
   ([PLACEHOLDER-3]
    (map
     (fn*
      ([PLACEHOLDER-4] (java.lang.Character/digit PLACEHOLDER-4 10)))
     (str PLACEHOLDER-3)))))
 (def
  digits-raised-to-length
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6 (clojure.lang.RT/count (str PLACEHOLDER-5))]
     (map
      (fn* ([PLACEHOLDER-7] (pow PLACEHOLDER-7 PLACEHOLDER-6)))
      (int-digits PLACEHOLDER-5))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     (reduce + (digits-raised-to-length PLACEHOLDER-8))
     PLACEHOLDER-8)))))
