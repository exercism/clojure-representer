(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-1]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-1 0)
     PLACEHOLDER-1
     (PLACEHOLDER-1
      (clojure.lang.Numbers/quotient PLACEHOLDER-1 10)
      (conj
       PLACEHOLDER-1
       (clojure.lang.Numbers/remainder PLACEHOLDER-1 10)))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-4
      (PLACEHOLDER-1 PLACEHOLDER-4 [])
      PLACEHOLDER-5
      (clojure.lang.RT/count PLACEHOLDER-4)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-4
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-7] (math/expt PLACEHOLDER-7 PLACEHOLDER-5)))
        PLACEHOLDER-4))))))))
