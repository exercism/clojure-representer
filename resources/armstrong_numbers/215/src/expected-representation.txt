(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.Numbers/equiv
     PLACEHOLDER-1
     (loop*
      [PLACEHOLDER-2
       (bigint PLACEHOLDER-1)
       PLACEHOLDER-3
       (bigint 0)
       PLACEHOLDER-4
       (clojure.lang.RT/count (str PLACEHOLDER-1))]
      (if
       (clojure.lang.Numbers/lt PLACEHOLDER-2 10)
       (clojure.lang.Numbers/add
        PLACEHOLDER-3
        (.pow (bigdec (mod PLACEHOLDER-2 10)) PLACEHOLDER-4))
       (recur
        (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
        (clojure.lang.Numbers/add
         PLACEHOLDER-3
         (.pow (bigdec (mod PLACEHOLDER-2 10)) PLACEHOLDER-4))
        PLACEHOLDER-4))))))))
