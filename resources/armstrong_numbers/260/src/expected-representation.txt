(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (loop*
     [PLACEHOLDER-2 1 PLACEHOLDER-3 PLACEHOLDER-2]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-3)
      PLACEHOLDER-2
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-1 PLACEHOLDER-2)
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (clojure.string/split (str PLACEHOLDER-6) (re-pattern "")))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7 (read-string PLACEHOLDER-7)]
     (if (number? PLACEHOLDER-7) PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-9]
    (let*
     [PLACEHOLDER-10 (clojure.lang.RT/count (str PLACEHOLDER-9))]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-11]
         (PLACEHOLDER-1 PLACEHOLDER-11 PLACEHOLDER-10)))
       (map PLACEHOLDER-7 (PLACEHOLDER-5 PLACEHOLDER-9))))))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-14]
    (if
     (clojure.lang.Util/equiv
      PLACEHOLDER-14
      (PLACEHOLDER-9 PLACEHOLDER-14))
     true
     false)))))
