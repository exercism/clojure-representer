(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (do (def PLACEHOLDER-1))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-2)))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4]
    (clojure.lang.Util/equiv
     (bigint PLACEHOLDER-4)
     (bigint (PLACEHOLDER-1 PLACEHOLDER-4))))))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-5]
    (let*
     [PLACEHOLDER-6 (clojure.lang.RT/count (str PLACEHOLDER-5))]
     (PLACEHOLDER-1 PLACEHOLDER-5 PLACEHOLDER-6 PLACEHOLDER-6 0)))
   ([PLACEHOLDER-8 PLACEHOLDER-8 PLACEHOLDER-9 PLACEHOLDER-9]
    (let*
     [PLACEHOLDER-10
      (clojure.lang.Numbers/dec PLACEHOLDER-9)
      PLACEHOLDER-10
      (clojure.lang.Numbers/add
       PLACEHOLDER-9
       (clojure.lang.RT/longCast
        (PLACEHOLDER-1 (mod PLACEHOLDER-8 10) PLACEHOLDER-8)))]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-10)
      PLACEHOLDER-10
      (recur
       (clojure.lang.RT/longCast
        (clojure.lang.Numbers/divide PLACEHOLDER-8 10))
       PLACEHOLDER-8
       PLACEHOLDER-10
       PLACEHOLDER-10)))))))
