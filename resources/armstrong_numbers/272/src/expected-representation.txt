(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2]
       (clojure.lang.Numbers/minus
        PLACEHOLDER-2
        (clojure.lang.RT/intCast \0))))
     (map int (str PLACEHOLDER-1))))))
 (def
  PLACEHOLDER-3
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-4]
    (apply * (repeat PLACEHOLDER-4 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6 (PLACEHOLDER-1 PLACEHOLDER-6)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (apply
       +
       (map
        (fn*
         ([PLACEHOLDER-8]
          (PLACEHOLDER-3
           PLACEHOLDER-8
           (clojure.lang.RT/count PLACEHOLDER-6))))
        PLACEHOLDER-6))))))))
