(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (if
     (number? PLACEHOLDER-1)
     (let*
      [PLACEHOLDER-1
       (vec (str PLACEHOLDER-1))
       PLACEHOLDER-2
       (map str PLACEHOLDER-1)
       PLACEHOLDER-3
       (let*
        [PLACEHOLDER-4
         (fn*
          PLACEHOLDER-4
          ([PLACEHOLDER-4]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-5 PLACEHOLDER-4]
               (let*
                [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-5)]
                (if
                 PLACEHOLDER-6
                 (let*
                  [PLACEHOLDER-7 PLACEHOLDER-6]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-7)
                   (let*
                    [PLACEHOLDER-8
                     (clojure.core/chunk-first PLACEHOLDER-7)
                     PLACEHOLDER-8
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-8))
                     PLACEHOLDER-8
                     (clojure.core/chunk-buffer PLACEHOLDER-8)]
                    (if
                     (loop*
                      [PLACEHOLDER-9 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-9
                        PLACEHOLDER-8)
                       (let*
                        [PLACEHOLDER-10
                         (.nth PLACEHOLDER-8 PLACEHOLDER-9)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-8
                          (new BigInteger PLACEHOLDER-10))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-9))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-8)
                      (PLACEHOLDER-4
                       (clojure.core/chunk-rest PLACEHOLDER-7)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-8)
                      nil)))
                   (let*
                    [PLACEHOLDER-13 (clojure.core/first PLACEHOLDER-7)]
                    (clojure.core/cons
                     (new BigInteger PLACEHOLDER-13)
                     (PLACEHOLDER-4
                      (clojure.core/rest PLACEHOLDER-7))))))))))))))]
        (PLACEHOLDER-4 PLACEHOLDER-2))
       PLACEHOLDER-16
       (clojure.lang.RT/count PLACEHOLDER-3)
       PLACEHOLDER-17
       (let*
        [PLACEHOLDER-17
         (fn*
          PLACEHOLDER-17
          ([PLACEHOLDER-18]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-18 PLACEHOLDER-18]
               (let*
                [PLACEHOLDER-19 (clojure.core/seq PLACEHOLDER-18)]
                (if
                 PLACEHOLDER-19
                 (let*
                  [PLACEHOLDER-20 PLACEHOLDER-19]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-20)
                   (let*
                    [PLACEHOLDER-21
                     (clojure.core/chunk-first PLACEHOLDER-20)
                     PLACEHOLDER-22
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-21))
                     PLACEHOLDER-22
                     (clojure.core/chunk-buffer PLACEHOLDER-22)]
                    (if
                     (loop*
                      [PLACEHOLDER-22 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-22
                        PLACEHOLDER-22)
                       (let*
                        [PLACEHOLDER-23
                         (.nth PLACEHOLDER-21 PLACEHOLDER-22)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-22
                          (.pow PLACEHOLDER-23 PLACEHOLDER-16))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-22))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-22)
                      (PLACEHOLDER-17
                       (clojure.core/chunk-rest PLACEHOLDER-20)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-22)
                      nil)))
                   (let*
                    [PLACEHOLDER-26
                     (clojure.core/first PLACEHOLDER-20)]
                    (clojure.core/cons
                     (.pow PLACEHOLDER-26 PLACEHOLDER-16)
                     (PLACEHOLDER-17
                      (clojure.core/rest PLACEHOLDER-20))))))))))))))]
        (PLACEHOLDER-17 PLACEHOLDER-3))]
      (if
       (clojure.lang.Util/equiv
        (reduce + PLACEHOLDER-17)
        PLACEHOLDER-1)
       true
       false))
     false))))
 nil)
