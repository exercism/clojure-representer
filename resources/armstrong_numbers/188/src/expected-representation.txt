(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (letfn*
     [PLACEHOLDER-2
      (fn*
       PLACEHOLDER-3
       ([PLACEHOLDER-3 PLACEHOLDER-4]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-4 0)
         PLACEHOLDER-3
         (PLACEHOLDER-3
          (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-1)
          (clojure.lang.Numbers/dec PLACEHOLDER-4)))))]
     (PLACEHOLDER-2 1 PLACEHOLDER-2)))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-7 (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-9]
          (PLACEHOLDER-1
           (new Integer (str PLACEHOLDER-9))
           PLACEHOLDER-7)))
        (seq (str PLACEHOLDER-7))))))))))
