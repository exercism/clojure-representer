(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  pow
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (letfn*
     [PLACEHOLDER-3
      (fn*
       PLACEHOLDER-4
       ([PLACEHOLDER-5 PLACEHOLDER-6]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-6 0)
         PLACEHOLDER-5
         (PLACEHOLDER-4
          (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-1)
          (clojure.lang.Numbers/dec PLACEHOLDER-6)))))]
     (PLACEHOLDER-3 1 PLACEHOLDER-2)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8 (clojure.lang.RT/count (str PLACEHOLDER-7))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-9]
          (pow (new Integer (str PLACEHOLDER-9)) PLACEHOLDER-8)))
        (seq (str PLACEHOLDER-7))))))))))
