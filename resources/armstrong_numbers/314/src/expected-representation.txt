(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  digits
  (fn*
   ([PLACEHOLDER-1]
    (rseq
     (mapv
      (fn* ([PLACEHOLDER-2] (mod PLACEHOLDER-2 10)))
      (take-while
       (fn*
        ([PLACEHOLDER-3] (clojure.lang.Numbers/gt PLACEHOLDER-3 0)))
       (iterate
        (fn*
         ([PLACEHOLDER-4]
          (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)))
        PLACEHOLDER-1)))))))
 (def
  exp
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (loop*
     [PLACEHOLDER-7 1 PLACEHOLDER-8 PLACEHOLDER-6]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-8)
      PLACEHOLDER-7
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-5 PLACEHOLDER-7)
       (clojure.lang.Numbers/dec PLACEHOLDER-8)))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-9]
    (clojure.lang.Util/equiv
     PLACEHOLDER-9
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-10]
         (clojure.lang.RT/longCast
          (exp
           (clojure.lang.RT/longCast PLACEHOLDER-10)
           (clojure.lang.RT/longCast
            (clojure.lang.RT/count (digits PLACEHOLDER-9)))))))
       (digits PLACEHOLDER-9))))))))
