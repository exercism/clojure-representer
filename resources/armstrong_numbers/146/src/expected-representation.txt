(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  calculate-number
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (java.lang.Math/pow
     (java.lang.Integer/parseInt PLACEHOLDER-2)
     PLACEHOLDER-1))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-3]
    (let*
     [PLACEHOLDER-4
      (clojure.lang.RT/count (str PLACEHOLDER-3))
      PLACEHOLDER-5
      (partial calculate-number PLACEHOLDER-4)]
     (clojure.lang.Numbers/equiv
      PLACEHOLDER-3
      (reduce
       +
       (map
        (fn* ([PLACEHOLDER-6] (PLACEHOLDER-5 (str PLACEHOLDER-6))))
        (seq (str PLACEHOLDER-3))))))))))
