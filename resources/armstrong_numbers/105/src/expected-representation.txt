(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  number-of-digits
  (fn*
   ([PLACEHOLDER-1]
    (clojure.lang.RT/intCast
     (java.lang.Math/floor
      (clojure.lang.Numbers/inc
       (java.lang.Math/log10 PLACEHOLDER-1)))))))
 (def
  armstrong-iter
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (reduce
     +
     (map
      (fn* ([PLACEHOLDER-4] (.pow PLACEHOLDER-4 PLACEHOLDER-2)))
      (map
       biginteger
       (map
        (fn*
         ([PLACEHOLDER-5]
          (clojure.lang.Numbers/remainder PLACEHOLDER-5 10)))
        PLACEHOLDER-3)))))))
 (def
  armstrong
  (fn*
   ([PLACEHOLDER-6]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-6)
     0
     (let*
      [PLACEHOLDER-7 (number-of-digits PLACEHOLDER-6)]
      (armstrong-iter
       PLACEHOLDER-7
       (take-while
        pos?
        (iterate
         (fn*
          ([PLACEHOLDER-8]
           (clojure.lang.Numbers/quotient PLACEHOLDER-8 10)))
         PLACEHOLDER-6))))))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-9]
    (clojure.lang.Util/equiv
     (armstrong PLACEHOLDER-9)
     PLACEHOLDER-9)))))
