(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.math.numeric-tower :as math]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  string-to-number
  (fn*
   ([PLACEHOLDER-1] (java.lang.Integer/parseInt (str PLACEHOLDER-1)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-2]
    (clojure.lang.Util/equiv
     PLACEHOLDER-2
     (let*
      [PLACEHOLDER-3
       (seq (str PLACEHOLDER-2))
       PLACEHOLDER-4
       (clojure.lang.RT/count PLACEHOLDER-3)]
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-5]
          (math/expt (string-to-number PLACEHOLDER-5) PLACEHOLDER-4)))
        PLACEHOLDER-3))))))))
