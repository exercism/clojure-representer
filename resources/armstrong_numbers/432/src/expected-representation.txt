(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def
      PLACEHOLDER-1
      (into
       []
       (map read-string (map str (reverse (str PLACEHOLDER-1))))))
     (loop*
      [PLACEHOLDER-2
       (clojure.lang.Numbers/dec (clojure.lang.RT/count PLACEHOLDER-1))
       PLACEHOLDER-2
       0]
      (if
       (not (clojure.lang.Numbers/isNeg PLACEHOLDER-2))
       (recur
        (clojure.lang.Numbers/dec PLACEHOLDER-2)
        (clojure.lang.Numbers/add
         PLACEHOLDER-2
         (reduce
          *
          (repeat
           (clojure.lang.RT/count PLACEHOLDER-1)
           (clojure.lang.RT/get PLACEHOLDER-1 PLACEHOLDER-2)))))
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-2 PLACEHOLDER-1)
        true
        false))))))))
