(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  to-int-arr
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (java.lang.Character/digit PLACEHOLDER-2 10)))
     (seq (str PLACEHOLDER-1))))))
 (def
  n-digits
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.RT/count (to-int-arr PLACEHOLDER-3)))))
 (def
  pow
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (map
     (fn*
      ([PLACEHOLDER-6]
       (. (.pow PLACEHOLDER-6 PLACEHOLDER-5) longValue)))
     (map bigdec PLACEHOLDER-4)))))
 (def
  armstrong-sum
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (to-int-arr PLACEHOLDER-7)
      PLACEHOLDER-9
      (n-digits PLACEHOLDER-7)
      PLACEHOLDER-10
      (pow PLACEHOLDER-8 PLACEHOLDER-9)]
     (reduce + PLACEHOLDER-10)))))
 (def
  armstrong?
  (fn*
   ([PLACEHOLDER-11]
    (clojure.lang.Util/equiv
     (armstrong-sum PLACEHOLDER-11)
     PLACEHOLDER-11)))))
