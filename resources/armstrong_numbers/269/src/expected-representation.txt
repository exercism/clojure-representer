(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-1
  (fn*
   ([PLACEHOLDER-1] (java.lang.Integer/parseInt (str PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-2
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (last
     (take
      PLACEHOLDER-3
      (iterate
       (fn*
        ([PLACEHOLDER-4]
         (clojure.lang.Numbers/multiply PLACEHOLDER-2 PLACEHOLDER-4)))
       PLACEHOLDER-2))))))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-6
      (map PLACEHOLDER-1 (str PLACEHOLDER-6))
      PLACEHOLDER-8
      (clojure.lang.RT/count PLACEHOLDER-6)]
     (reduce
      (fn*
       ([PLACEHOLDER-9 PLACEHOLDER-9]
        (clojure.lang.Numbers/add
         PLACEHOLDER-9
         (PLACEHOLDER-2 PLACEHOLDER-9 PLACEHOLDER-8))))
      0
      PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     PLACEHOLDER-12
     (PLACEHOLDER-6 PLACEHOLDER-12))))))
