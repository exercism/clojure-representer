(do
 (do
  (clojure.core/in-ns 'two-fer)
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'two-fer))))
    nil)))
 (def
  two-fer
  (fn*
   ([] (two-fer "you"))
   ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me."))))
 (two-fer)
 (two-fer "Zaphod")
 (def
  two-fer-var-arg
  (fn*
   ([& PLACEHOLDER-2]
    (if
     (empty? PLACEHOLDER-2)
     "One for you, one for me."
     (str "One for " (first PLACEHOLDER-2) ", one for me.")))))
 (two-fer-var-arg)
 (two-fer-var-arg "Ford")
 (def
  two-fer-var-arg-apply
  (fn*
   ([& PLACEHOLDER-3]
    (if
     (empty? PLACEHOLDER-3)
     "One for you, one for me."
     (str "One for " (apply str PLACEHOLDER-3) ", one for me.")))))
 (two-fer-var-arg-apply)
 (two-fer-var-arg-apply "Ford")
 (def
  two-fer-var-arg-apply-when-let
  (fn*
   ([& PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-6
      (let*
       [PLACEHOLDER-5 (first PLACEHOLDER-4)]
       (if PLACEHOLDER-5 PLACEHOLDER-5 "you"))]
     (str "One for " PLACEHOLDER-6 ", one for me.")))))
 (two-fer-var-arg-apply-when-let)
 (two-fer-var-arg-apply-when-let "Arthur"))
