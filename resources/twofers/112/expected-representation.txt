(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-0)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-0 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-0))))
    nil)))
 (def
  PLACEHOLDER-0
  (fn*
   ([] (PLACEHOLDER-0 "you"))
   ([PLACEHOLDER-3] (str "One for " PLACEHOLDER-3 ", one for me."))))
 (PLACEHOLDER-0)
 (PLACEHOLDER-0 "Zaphod")
 (def
  PLACEHOLDER-4
  (fn*
   ([& PLACEHOLDER-5]
    (if
     (empty? PLACEHOLDER-5)
     "One for you, one for me."
     (str "One for " (first PLACEHOLDER-5) ", one for me.")))))
 (PLACEHOLDER-4)
 (PLACEHOLDER-4 "Ford")
 (def
  PLACEHOLDER-7
  (fn*
   ([& PLACEHOLDER-7]
    (if
     (empty? PLACEHOLDER-7)
     "One for you, one for me."
     (str "One for " (apply str PLACEHOLDER-7) ", one for me.")))))
 (PLACEHOLDER-7)
 (PLACEHOLDER-7 "Ford")
 (def
  PLACEHOLDER-7
  (fn*
   ([& PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-8
      (let*
       [PLACEHOLDER-8 (first PLACEHOLDER-8)]
       (if PLACEHOLDER-8 PLACEHOLDER-8 "you"))]
     (str "One for " PLACEHOLDER-8 ", one for me.")))))
 (PLACEHOLDER-7)
 (PLACEHOLDER-7 "Arthur"))
