(do
 (do
  (clojure.core/in-ns 'two-fer)
  (if
   (.equals 'two-fer 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'two-fer))))
    nil)))
 (def
  sentence
  (fn*
   ([& PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (string/join ", " PLACEHOLDER-1)
      PLACEHOLDER-3
      (clojure.core/seq PLACEHOLDER-2)
      PLACEHOLDER-4
      (clojure.core/first PLACEHOLDER-3)
      PLACEHOLDER-5
      (clojure.core/next PLACEHOLDER-3)
      PLACEHOLDER-6
      PLACEHOLDER-4
      PLACEHOLDER-7
      PLACEHOLDER-5]
     (str
      (string/upper-case PLACEHOLDER-6)
      (apply str PLACEHOLDER-7)
      ".")))))
 (def
  one-fer
  (fn*
   ([] (one-fer "me"))
   ([PLACEHOLDER-8] (string/join " " ["one for" PLACEHOLDER-8]))))
 (def
  two-fer
  (fn*
   ([] (two-fer "you"))
   ([PLACEHOLDER-9] (sentence (one-fer PLACEHOLDER-9) (one-fer)))))
 (def
  two-fer-unflexible
  (fn*
   ([] (two-fer-unflexible "you"))
   ([PLACEHOLDER-10] (str "One for " PLACEHOLDER-10 ", one for me.")))))
