#{(do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10573
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10573))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    decoded-string-to-vector
    (fn*
     ([PLACEHOLDER-10574]
      (reduce
       (fn*
        ([PLACEHOLDER-10575 PLACEHOLDER-10576]
         (if
          (clojure.lang.Util/equiv
           (first (last PLACEHOLDER-10575))
           PLACEHOLDER-10576)
          (update-in
           PLACEHOLDER-10575
           [(clojure.lang.Numbers/dec
             (clojure.lang.RT/count PLACEHOLDER-10575))
            1]
           inc)
          (conj PLACEHOLDER-10575 [PLACEHOLDER-10576 1]))))
       []
       PLACEHOLDER-10574))))
   (def
    vector-to-encoded-string
    (fn*
     ([PLACEHOLDER-10577]
      (reduce
       (fn*
        ([PLACEHOLDER-10578 PLACEHOLDER-10579]
         (let*
          [PLACEHOLDER-10580
           PLACEHOLDER-10579
           PLACEHOLDER-10581
           (clojure.lang.RT/nth PLACEHOLDER-10580 0 nil)
           PLACEHOLDER-10582
           (clojure.lang.RT/nth PLACEHOLDER-10580 1 nil)]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-10582 1)
           (str PLACEHOLDER-10578 PLACEHOLDER-10581)
           (str
            PLACEHOLDER-10578
            PLACEHOLDER-10582
            PLACEHOLDER-10581)))))
       ""
       PLACEHOLDER-10577))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10583]
      (vector-to-encoded-string
       (decoded-string-to-vector (seq PLACEHOLDER-10583))))))
   (def
    num-or-1
    (fn*
     ([PLACEHOLDER-10584]
      (if
       (str/blank? PLACEHOLDER-10584)
       1
       (read-string PLACEHOLDER-10584)))))
   (def
    encoded-string-to-vector
    (fn*
     ([PLACEHOLDER-10585]
      (encoded-string-to-vector PLACEHOLDER-10585 []))
     ([PLACEHOLDER-10586 PLACEHOLDER-10587]
      (let*
       [PLACEHOLDER-10588
        (re-matches
         (re-pattern "(\\d*)([a-zA-Z\\s])(.*)")
         PLACEHOLDER-10586)
        PLACEHOLDER-10589
        (clojure.lang.RT/nth PLACEHOLDER-10588 0 nil)
        PLACEHOLDER-10590
        (clojure.lang.RT/nth PLACEHOLDER-10588 1 nil)
        PLACEHOLDER-10591
        (clojure.lang.RT/nth PLACEHOLDER-10588 2 nil)
        PLACEHOLDER-10592
        (clojure.lang.RT/nth PLACEHOLDER-10588 3 nil)
        PLACEHOLDER-10593
        (num-or-1 PLACEHOLDER-10590)
        PLACEHOLDER-10594
        (first (clojure.lang.Numbers/char_array PLACEHOLDER-10591))]
       (if
        PLACEHOLDER-10592
        (recur
         PLACEHOLDER-10592
         (conj
          PLACEHOLDER-10587
          [PLACEHOLDER-10594 PLACEHOLDER-10593]))
        PLACEHOLDER-10587)))))
   (def
    pair-to-decoded-string
    (fn*
     ([PLACEHOLDER-10595 PLACEHOLDER-10596]
      (apply str (repeat PLACEHOLDER-10596 (str PLACEHOLDER-10595))))))
   (def
    vector-to-decoded-string
    (fn*
     ([PLACEHOLDER-10597]
      (reduce
       (fn*
        ([PLACEHOLDER-10598 PLACEHOLDER-10599]
         (let*
          [PLACEHOLDER-10600
           PLACEHOLDER-10599
           PLACEHOLDER-10601
           (clojure.lang.RT/nth PLACEHOLDER-10600 0 nil)
           PLACEHOLDER-10602
           (clojure.lang.RT/nth PLACEHOLDER-10600 1 nil)]
          (str
           PLACEHOLDER-10598
           (pair-to-decoded-string
            PLACEHOLDER-10601
            PLACEHOLDER-10602)))))
       ""
       PLACEHOLDER-10597))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10603]
      (vector-to-decoded-string
       (encoded-string-to-vector PLACEHOLDER-10603))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13178
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13178))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13179]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13180]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-13180)
             1)
            (clojure.lang.RT/count PLACEHOLDER-13180)
            "")
           (first PLACEHOLDER-13180))))
        (partition-by identity PLACEHOLDER-13179))))))
   (def
    number-in-char?
    (fn*
     ([PLACEHOLDER-13181]
      (let*
       [PLACEHOLDER-13182
        (clojure.lang.Numbers/lte
         (clojure.lang.RT/intCast PLACEHOLDER-13181)
         57)]
       (if
        PLACEHOLDER-13182
        (clojure.lang.Numbers/gte
         (clojure.lang.RT/intCast PLACEHOLDER-13181)
         48)
        PLACEHOLDER-13182)))))
   (def
    repeat-char
    (fn*
     ([PLACEHOLDER-13183 PLACEHOLDER-13184]
      (apply
       str
       (repeat
        (java.lang.Integer/parseInt PLACEHOLDER-13183)
        PLACEHOLDER-13184)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13185]
      (first
       (reduce
        (fn*
         ([PLACEHOLDER-13186 PLACEHOLDER-13187]
          (let*
           [PLACEHOLDER-13188
            PLACEHOLDER-13186
            PLACEHOLDER-13189
            (clojure.lang.RT/nth PLACEHOLDER-13188 0 nil)
            PLACEHOLDER-13190
            (clojure.lang.RT/nth PLACEHOLDER-13188 1 nil)]
           (if
            (number-in-char? PLACEHOLDER-13187)
            [(str PLACEHOLDER-13189 "")
             (str PLACEHOLDER-13190 PLACEHOLDER-13187)]
            [(str
              PLACEHOLDER-13189
              (if
               (clojure.lang.Util/equiv PLACEHOLDER-13190 "0")
               PLACEHOLDER-13187
               (repeat-char PLACEHOLDER-13190 PLACEHOLDER-13187)))
             "0"]))))
        ["" "0"]
        PLACEHOLDER-13185))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14137
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14137))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14138]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14139]
          (let*
           [PLACEHOLDER-14140
            PLACEHOLDER-14139
            PLACEHOLDER-14141
            (clojure.lang.RT/nth PLACEHOLDER-14140 0 nil)
            PLACEHOLDER-14142
            PLACEHOLDER-14140]
           (let*
            [PLACEHOLDER-14143
             (clojure.lang.RT/count PLACEHOLDER-14142)]
            [(if
              (clojure.lang.Numbers/gt PLACEHOLDER-14143 1)
              PLACEHOLDER-14143)
             PLACEHOLDER-14141]))))
        (partition-by identity PLACEHOLDER-14138))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14144]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14145]
          (let*
           [PLACEHOLDER-14146
            PLACEHOLDER-14145
            PLACEHOLDER-14147
            (clojure.lang.RT/nth PLACEHOLDER-14146 0 nil)
            PLACEHOLDER-14148
            (clojure.lang.RT/nth PLACEHOLDER-14146 1 nil)
            PLACEHOLDER-14149
            (clojure.lang.RT/nth PLACEHOLDER-14146 2 nil)]
           (repeat
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-14148 "")
             1
             (java.lang.Integer/parseInt PLACEHOLDER-14148))
            PLACEHOLDER-14149))))
        (re-seq (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-14144)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8697
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8697))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as str])
   (def
    str->int
    (fn*
     ([PLACEHOLDER-8698 PLACEHOLDER-8699]
      (let*
       [PLACEHOLDER-8700
        (re-find (re-pattern "[0-9]*") PLACEHOLDER-8698)]
       (if
        (empty? PLACEHOLDER-8700)
        PLACEHOLDER-8699
        (java.lang.Integer/parseInt PLACEHOLDER-8700))))
     ([PLACEHOLDER-8701] (str->int PLACEHOLDER-8701 0))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8702]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8703]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-8703)
             1)
            (clojure.lang.RT/count PLACEHOLDER-8703))
           (first PLACEHOLDER-8703))))
        (partition-by identity (seq PLACEHOLDER-8702)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8704]
      (apply
       str
       (reduce
        (fn*
         ([PLACEHOLDER-8705 PLACEHOLDER-8706]
          (let*
           [PLACEHOLDER-8707
            (clojure.lang.RT/get PLACEHOLDER-8706 1)
            PLACEHOLDER-8708
            (clojure.lang.RT/get PLACEHOLDER-8706 2)]
           (conj
            PLACEHOLDER-8705
            (reduce
             str
             (repeat
              (str->int PLACEHOLDER-8707 1)
              PLACEHOLDER-8708))))))
        []
        (re-seq
         (re-pattern "(\\d*)([\\S\\s]{1,1})")
         PLACEHOLDER-8704)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15110
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15110))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15111]
      (let*
       [PLACEHOLDER-15121
        (let*
         [PLACEHOLDER-15112
          PLACEHOLDER-15111
          PLACEHOLDER-15115
          (if
           (clojure.lang.Util/identical PLACEHOLDER-15112 nil)
           nil
           (reduce
            (fn*
             ([PLACEHOLDER-15113 PLACEHOLDER-15114]
              (if
               (clojure.lang.Util/equiv
                PLACEHOLDER-15114
                (first (last PLACEHOLDER-15113)))
               (update-in
                PLACEHOLDER-15113
                [(clojure.lang.Numbers/dec
                  (clojure.lang.RT/count PLACEHOLDER-15113))
                 1]
                inc)
               (conj PLACEHOLDER-15113 [PLACEHOLDER-15114 1]))))
            []
            PLACEHOLDER-15112))
          PLACEHOLDER-15120
          (if
           (clojure.lang.Util/identical PLACEHOLDER-15115 nil)
           nil
           (map
            (fn*
             ([PLACEHOLDER-15116]
              (let*
               [PLACEHOLDER-15117
                PLACEHOLDER-15116
                PLACEHOLDER-15118
                (clojure.lang.RT/nth PLACEHOLDER-15117 0 nil)
                PLACEHOLDER-15119
                (clojure.lang.RT/nth PLACEHOLDER-15117 1 nil)]
               (if
                (clojure.lang.Util/equiv PLACEHOLDER-15119 1)
                (str PLACEHOLDER-15118)
                (str PLACEHOLDER-15119 PLACEHOLDER-15118)))))
            PLACEHOLDER-15115))]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-15120 nil)
          nil
          (apply str PLACEHOLDER-15120)))]
       (if PLACEHOLDER-15121 PLACEHOLDER-15121 "")))))
   (def
    try-int
    (fn*
     ([PLACEHOLDER-15122]
      (try
       (java.lang.Integer/parseInt (str PLACEHOLDER-15122))
       (catch Exception PLACEHOLDER-15123 PLACEHOLDER-15122)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15124]
      (let*
       [PLACEHOLDER-15126
        (fn*
         ([PLACEHOLDER-15125] (conj [] (identity PLACEHOLDER-15125))))
        PLACEHOLDER-15128
        (fn*
         ([PLACEHOLDER-15127]
          (partial repeat (read-string PLACEHOLDER-15127))))]
       (let*
        [PLACEHOLDER-15139
         (let*
          [PLACEHOLDER-15129
           PLACEHOLDER-15124
           PLACEHOLDER-15131
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15129 nil)
            nil
            (partition-by
             (fn*
              ([PLACEHOLDER-15130]
               (number? (try-int PLACEHOLDER-15130))))
             PLACEHOLDER-15129))
           PLACEHOLDER-15133
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15131 nil)
            nil
            (map
             (fn* ([PLACEHOLDER-15132] (apply str PLACEHOLDER-15132)))
             PLACEHOLDER-15131))
           PLACEHOLDER-15136
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15133 nil)
            nil
            (reduce
             (fn*
              ([PLACEHOLDER-15134 PLACEHOLDER-15135]
               (if
                (number? (try-int PLACEHOLDER-15135))
                (update
                 PLACEHOLDER-15134
                 :acc
                 (constantly (PLACEHOLDER-15128 PLACEHOLDER-15135)))
                {:r
                 (conj
                  (:r PLACEHOLDER-15134)
                  (concat
                   ((:acc PLACEHOLDER-15134) (first PLACEHOLDER-15135))
                   (rest PLACEHOLDER-15135))),
                 :acc PLACEHOLDER-15126})))
             {:r [], :acc PLACEHOLDER-15126}
             PLACEHOLDER-15133))
           PLACEHOLDER-15137
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15136 nil)
            nil
            (:r PLACEHOLDER-15136))
           PLACEHOLDER-15138
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15137 nil)
            nil
            (flatten PLACEHOLDER-15137))]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-15138 nil)
           nil
           (apply str PLACEHOLDER-15138)))]
        (if PLACEHOLDER-15139 PLACEHOLDER-15139 "")))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11823
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11823))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11824]
      (java.lang.String/join
       ""
       (map
        str
        (filter
         (fn*
          ([PLACEHOLDER-11825]
           (not (clojure.lang.Util/equiv 1 PLACEHOLDER-11825))))
         (flatten
          (map
           (fn*
            ([PLACEHOLDER-11826]
             (list
              (clojure.lang.RT/count PLACEHOLDER-11826)
              (first PLACEHOLDER-11826))))
           (partition-by identity PLACEHOLDER-11824)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11827]
      (java.lang.String/join
       ""
       (let*
        [PLACEHOLDER-11843
         (fn*
          PLACEHOLDER-11828
          ([PLACEHOLDER-11829]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-11830 PLACEHOLDER-11829]
               (let*
                [PLACEHOLDER-11831
                 (clojure.core/seq PLACEHOLDER-11830)]
                (if
                 PLACEHOLDER-11831
                 (let*
                  [PLACEHOLDER-11832 PLACEHOLDER-11831]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-11832)
                   (let*
                    [PLACEHOLDER-11833
                     (clojure.core/chunk-first PLACEHOLDER-11832)
                     PLACEHOLDER-11834
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-11833))
                     PLACEHOLDER-11835
                     (clojure.core/chunk-buffer PLACEHOLDER-11834)]
                    (if
                     (loop*
                      [PLACEHOLDER-11836 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-11836
                        PLACEHOLDER-11834)
                       (let*
                        [PLACEHOLDER-11837
                         (.nth PLACEHOLDER-11833 PLACEHOLDER-11836)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-11835
                          (let*
                           [PLACEHOLDER-11838
                            (re-find
                             (re-pattern "\\d++")
                             PLACEHOLDER-11837)
                            PLACEHOLDER-11839
                            (str (last PLACEHOLDER-11837))]
                           (if
                            (clojure.lang.Util/identical
                             PLACEHOLDER-11838
                             nil)
                            PLACEHOLDER-11839
                            (java.lang.String/join
                             ""
                             (repeat
                              (java.lang.Integer/parseInt
                               PLACEHOLDER-11838)
                              PLACEHOLDER-11839)))))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-11836))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-11835)
                      (PLACEHOLDER-11828
                       (clojure.core/chunk-rest PLACEHOLDER-11832)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-11835)
                      nil)))
                   (let*
                    [PLACEHOLDER-11840
                     (clojure.core/first PLACEHOLDER-11832)]
                    (clojure.core/cons
                     (let*
                      [PLACEHOLDER-11841
                       (re-find (re-pattern "\\d++") PLACEHOLDER-11840)
                       PLACEHOLDER-11842
                       (str (last PLACEHOLDER-11840))]
                      (if
                       (clojure.lang.Util/identical
                        PLACEHOLDER-11841
                        nil)
                       PLACEHOLDER-11842
                       (java.lang.String/join
                        ""
                        (repeat
                         (java.lang.Integer/parseInt PLACEHOLDER-11841)
                         PLACEHOLDER-11842))))
                     (PLACEHOLDER-11828
                      (clojure.core/rest
                       PLACEHOLDER-11832))))))))))))))]
        (PLACEHOLDER-11843
         (re-seq (re-pattern "\\d*+[\\w\\s]") PLACEHOLDER-11827))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8269
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8269))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-single-char
    (fn*
     ([PLACEHOLDER-8270 PLACEHOLDER-8271 PLACEHOLDER-8272]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-8270 1)
       (str PLACEHOLDER-8272 PLACEHOLDER-8271)
       (str PLACEHOLDER-8272 PLACEHOLDER-8270 PLACEHOLDER-8271)))))
   (def
    intermediate-encoded-result
    (fn*
     ([PLACEHOLDER-8273]
      (reduce
       (fn*
        ([PLACEHOLDER-8274 PLACEHOLDER-8275]
         (let*
          [PLACEHOLDER-8276
           PLACEHOLDER-8274
           PLACEHOLDER-8277
           (if
            (clojure.core/seq? PLACEHOLDER-8276)
            (if
             (clojure.core/next PLACEHOLDER-8276)
             (clojure.lang.PersistentArrayMap/createAsIfByAssoc
              (clojure.core/to-array PLACEHOLDER-8276))
             (if
              (clojure.core/seq PLACEHOLDER-8276)
              (clojure.core/first PLACEHOLDER-8276)
              clojure.lang.PersistentArrayMap/EMPTY))
            PLACEHOLDER-8276)
           PLACEHOLDER-8278
           PLACEHOLDER-8277
           PLACEHOLDER-8279
           (clojure.lang.RT/get PLACEHOLDER-8277 :amount)
           PLACEHOLDER-8280
           (clojure.lang.RT/get PLACEHOLDER-8277 :next)]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-8280 PLACEHOLDER-8275)
           (update PLACEHOLDER-8278 :amount inc)
           (assoc
            (assoc
             (update
              PLACEHOLDER-8278
              :result
              (partial
               encode-single-char
               PLACEHOLDER-8279
               PLACEHOLDER-8280))
             :next
             PLACEHOLDER-8275)
            :amount
            1)))))
       {:amount 1, :next (first PLACEHOLDER-8273), :result ""}
       (rest PLACEHOLDER-8273)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8281]
      (let*
       [PLACEHOLDER-8282
        (intermediate-encoded-result PLACEHOLDER-8281)
        PLACEHOLDER-8283
        (if
         (clojure.core/seq? PLACEHOLDER-8282)
         (if
          (clojure.core/next PLACEHOLDER-8282)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-8282))
          (if
           (clojure.core/seq PLACEHOLDER-8282)
           (clojure.core/first PLACEHOLDER-8282)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-8282)
        PLACEHOLDER-8284
        PLACEHOLDER-8283
        PLACEHOLDER-8285
        (clojure.lang.RT/get PLACEHOLDER-8283 :amount)
        PLACEHOLDER-8286
        (clojure.lang.RT/get PLACEHOLDER-8283 :next)]
       (:result
        (update
         PLACEHOLDER-8284
         :result
         (partial
          encode-single-char
          PLACEHOLDER-8285
          PLACEHOLDER-8286)))))))
   (def
    repetitions
    (fn*
     ([PLACEHOLDER-8287]
      (if
       (empty? PLACEHOLDER-8287)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-8287)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8288]
      (:result
       (reduce
        (fn*
         ([PLACEHOLDER-8289 PLACEHOLDER-8290]
          (let*
           [PLACEHOLDER-8291
            PLACEHOLDER-8289
            PLACEHOLDER-8292
            (if
             (clojure.core/seq? PLACEHOLDER-8291)
             (if
              (clojure.core/next PLACEHOLDER-8291)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-8291))
              (if
               (clojure.core/seq PLACEHOLDER-8291)
               (clojure.core/first PLACEHOLDER-8291)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-8291)
            PLACEHOLDER-8293
            PLACEHOLDER-8292
            PLACEHOLDER-8294
            (clojure.lang.RT/get PLACEHOLDER-8292 :digits)
            PLACEHOLDER-8295
            (clojure.lang.RT/get PLACEHOLDER-8292 :result)]
           (if
            (clojure.lang.Numbers/gt
             (java.lang.Character/digit PLACEHOLDER-8290 10)
             0)
            (update
             PLACEHOLDER-8293
             :digits
             (fn*
              ([PLACEHOLDER-8296]
               (str PLACEHOLDER-8296 PLACEHOLDER-8290))))
            {:digits "",
             :result
             (apply
              str
              PLACEHOLDER-8295
              (repeat
               (repetitions PLACEHOLDER-8294)
               PLACEHOLDER-8290))}))))
        {:digits "", :result ""}
        PLACEHOLDER-8288))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14499
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14499))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-partition
    (fn*
     ([PLACEHOLDER-14500]
      (let*
       [PLACEHOLDER-14501 (clojure.lang.RT/count PLACEHOLDER-14500)]
       (str
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-14501 1)
         PLACEHOLDER-14501)
        (first PLACEHOLDER-14500))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14502]
      (apply
       str
       (map
        encode-partition
        (partition-by identity PLACEHOLDER-14502))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14503]
      (let*
       [PLACEHOLDER-14504
        (re-seq (re-pattern "\\d+|.") PLACEHOLDER-14503)
        PLACEHOLDER-14505
        PLACEHOLDER-14504
        PLACEHOLDER-14506
        (clojure.core/seq PLACEHOLDER-14505)
        PLACEHOLDER-14507
        (clojure.core/first PLACEHOLDER-14506)
        PLACEHOLDER-14508
        (clojure.core/next PLACEHOLDER-14506)
        PLACEHOLDER-14509
        PLACEHOLDER-14507
        PLACEHOLDER-14510
        PLACEHOLDER-14508
        PLACEHOLDER-14511
        1
        PLACEHOLDER-14512
        ""]
       (loop*
        [PLACEHOLDER-14513
         PLACEHOLDER-14504
         PLACEHOLDER-14514
         PLACEHOLDER-14511
         PLACEHOLDER-14515
         PLACEHOLDER-14512]
        (let*
         [PLACEHOLDER-14516
          PLACEHOLDER-14513
          PLACEHOLDER-14517
          (clojure.core/seq PLACEHOLDER-14516)
          PLACEHOLDER-14518
          (clojure.core/first PLACEHOLDER-14517)
          PLACEHOLDER-14519
          (clojure.core/next PLACEHOLDER-14517)
          PLACEHOLDER-14520
          PLACEHOLDER-14518
          PLACEHOLDER-14521
          PLACEHOLDER-14519
          PLACEHOLDER-14522
          PLACEHOLDER-14514
          PLACEHOLDER-14523
          PLACEHOLDER-14515]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-14520 nil)
          PLACEHOLDER-14523
          (if
           (re-matches (re-pattern "\\d+") PLACEHOLDER-14520)
           (recur
            PLACEHOLDER-14521
            (java.lang.Integer/parseInt PLACEHOLDER-14520)
            PLACEHOLDER-14523)
           (recur
            PLACEHOLDER-14521
            1
            (apply
             str
             PLACEHOLDER-14523
             (repeat PLACEHOLDER-14522 PLACEHOLDER-14520))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9258
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9258))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-9259]
      (let*
       [PLACEHOLDER-9260 (clojure.lang.RT/count PLACEHOLDER-9259)]
       (str
        (if
         (clojure.lang.Numbers/lt 1 PLACEHOLDER-9260)
         PLACEHOLDER-9260
         "")
        (first PLACEHOLDER-9259))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9261]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-9262] (encode-chunk (first PLACEHOLDER-9262))))
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-9261))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-9263]
      (let*
       [PLACEHOLDER-9264
        PLACEHOLDER-9263
        PLACEHOLDER-9265
        (clojure.lang.RT/nth PLACEHOLDER-9264 0 nil)
        PLACEHOLDER-9266
        (clojure.lang.RT/nth PLACEHOLDER-9264 1 nil)
        PLACEHOLDER-9267
        (if
         PLACEHOLDER-9265
         (java.lang.Integer/parseInt PLACEHOLDER-9265)
         1)]
       (clojure.string/join
        (repeat PLACEHOLDER-9267 PLACEHOLDER-9266))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9268]
      (reduce
       (fn*
        ([PLACEHOLDER-9269 PLACEHOLDER-9270]
         (str
          PLACEHOLDER-9269
          (decode-chunk (rest PLACEHOLDER-9270)))))
       ""
       (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-9268))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12428
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12428))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12429]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-12430]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-12430)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-12429)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12431]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-12432]
          (let*
           [PLACEHOLDER-12433
            PLACEHOLDER-12432
            PLACEHOLDER-12434
            (clojure.lang.RT/nth PLACEHOLDER-12433 0 nil)
            PLACEHOLDER-12435
            (clojure.lang.RT/nth PLACEHOLDER-12433 1 nil)
            PLACEHOLDER-12436
            (clojure.lang.RT/nth PLACEHOLDER-12433 2 nil)]
           (if
            (empty? PLACEHOLDER-12435)
            PLACEHOLDER-12436
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-12435)
             PLACEHOLDER-12436)))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-12431)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14669
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14669))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14670]
      (let*
       [PLACEHOLDER-14677
        (reduce
         (fn*
          ([PLACEHOLDER-14671 PLACEHOLDER-14672]
           (let*
            [PLACEHOLDER-14673
             PLACEHOLDER-14671
             PLACEHOLDER-14674
             (clojure.lang.RT/nth PLACEHOLDER-14673 0 nil)
             PLACEHOLDER-14675
             (clojure.lang.RT/nth PLACEHOLDER-14673 1 nil)
             PLACEHOLDER-14676
             (clojure.lang.RT/nth PLACEHOLDER-14673 2 nil)]
            (if
             (empty? PLACEHOLDER-14675)
             [PLACEHOLDER-14674
              (list PLACEHOLDER-14672)
              PLACEHOLDER-14672]
             (if
              (not= PLACEHOLDER-14676 PLACEHOLDER-14672)
              [(conj PLACEHOLDER-14674 PLACEHOLDER-14675)
               (list PLACEHOLDER-14672)
               PLACEHOLDER-14672]
              (if
               :else
               [PLACEHOLDER-14674
                (conj PLACEHOLDER-14675 PLACEHOLDER-14672)
                PLACEHOLDER-14672]))))))
         [() () nil]
         PLACEHOLDER-14670)
        PLACEHOLDER-14678
        (clojure.lang.RT/nth PLACEHOLDER-14677 0 nil)
        PLACEHOLDER-14679
        (clojure.lang.RT/nth PLACEHOLDER-14677 1 nil)
        PLACEHOLDER-14680
        (reverse (conj PLACEHOLDER-14678 PLACEHOLDER-14679))]
       (reduce
        (fn*
         ([PLACEHOLDER-14681 PLACEHOLDER-14682]
          (str
           PLACEHOLDER-14681
           (let*
            [PLACEHOLDER-14683
             (clojure.lang.RT/count PLACEHOLDER-14682)]
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-14683 1)
             PLACEHOLDER-14683
             ""))
           (first PLACEHOLDER-14682))))
        ""
        PLACEHOLDER-14680)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14684]
      (reduce
       (fn*
        ([PLACEHOLDER-14685 PLACEHOLDER-14686]
         (let*
          [PLACEHOLDER-14687
           PLACEHOLDER-14686
           PLACEHOLDER-14688
           (clojure.lang.RT/nth PLACEHOLDER-14687 0 nil)
           PLACEHOLDER-14689
           (clojure.lang.RT/nth PLACEHOLDER-14687 1 nil)
           PLACEHOLDER-14690
           (clojure.lang.RT/nth PLACEHOLDER-14687 2 nil)
           PLACEHOLDER-14691
           (clojure.lang.RT/nth PLACEHOLDER-14687 3 nil)]
          (str
           PLACEHOLDER-14685
           (if
            (clojure.lang.Util/identical PLACEHOLDER-14689 nil)
            PLACEHOLDER-14691
            (apply
             str
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-14689)
              PLACEHOLDER-14690)))))))
       ""
       (re-seq (re-pattern "(\\d+)(.)|(.)") PLACEHOLDER-14684))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8937
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8937))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8938]
      (do
       (def ch (first PLACEHOLDER-8938))
       (def cnt 0)
       (def encoded "")
       (def
        cut
        (fn*
         ([PLACEHOLDER-8939]
          (do
           (if
            (clojure.lang.Numbers/gt cnt 1)
            (def encoded (str encoded cnt ch))
            (def encoded (str encoded ch)))
           (def cnt 1)
           (def ch PLACEHOLDER-8939)))))
       (loop*
        [PLACEHOLDER-8940
         (clojure.core/seq PLACEHOLDER-8938)
         PLACEHOLDER-8941
         nil
         PLACEHOLDER-8942
         0
         PLACEHOLDER-8943
         0]
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-8943 PLACEHOLDER-8942)
         (let*
          [PLACEHOLDER-8944 (.nth PLACEHOLDER-8941 PLACEHOLDER-8943)]
          (do
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-8944 ch)
            (def cnt (clojure.lang.Numbers/inc cnt))
            (cut PLACEHOLDER-8944))
           (recur
            PLACEHOLDER-8940
            PLACEHOLDER-8941
            PLACEHOLDER-8942
            (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-8943))))
         (let*
          [PLACEHOLDER-8945 (clojure.core/seq PLACEHOLDER-8940)]
          (if
           PLACEHOLDER-8945
           (let*
            [PLACEHOLDER-8946 PLACEHOLDER-8945]
            (if
             (clojure.core/chunked-seq? PLACEHOLDER-8946)
             (let*
              [PLACEHOLDER-8947
               (clojure.core/chunk-first PLACEHOLDER-8946)]
              (recur
               (clojure.core/chunk-rest PLACEHOLDER-8946)
               PLACEHOLDER-8947
               (clojure.lang.RT/intCast
                (clojure.lang.RT/count PLACEHOLDER-8947))
               (clojure.lang.RT/intCast 0)))
             (let*
              [PLACEHOLDER-8948 (clojure.core/first PLACEHOLDER-8946)]
              (do
               (if
                (clojure.lang.Util/equiv PLACEHOLDER-8948 ch)
                (def cnt (clojure.lang.Numbers/inc cnt))
                (cut PLACEHOLDER-8948))
               (recur
                (clojure.core/next PLACEHOLDER-8946)
                nil
                0
                0)))))))))
       (cut nil)
       encoded))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8949]
      (do
       (def cnt 0)
       (def decoded "")
       (def
        build
        (fn*
         ([PLACEHOLDER-8950]
          (def
           cnt
           (clojure.lang.Numbers/add
            (clojure.lang.Numbers/multiply cnt 10)
            PLACEHOLDER-8950)))))
       (def
        cut
        (fn*
         ([PLACEHOLDER-8951]
          (do
           (def
            decoded
            (str
             decoded
             (apply
              str
              (repeat
               (if (clojure.lang.Util/equiv cnt 0) 1 cnt)
               PLACEHOLDER-8951))))
           (def cnt 0)))))
       (loop*
        [PLACEHOLDER-8952
         (clojure.core/seq PLACEHOLDER-8949)
         PLACEHOLDER-8953
         nil
         PLACEHOLDER-8954
         0
         PLACEHOLDER-8955
         0]
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-8955 PLACEHOLDER-8954)
         (let*
          [PLACEHOLDER-8956 (.nth PLACEHOLDER-8953 PLACEHOLDER-8955)]
          (do
           (do
            (def
             candidate
             (re-matches (re-pattern "[0-9]") (str PLACEHOLDER-8956)))
            (if
             candidate
             (build
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first candidate))
               48))
             (cut PLACEHOLDER-8956)))
           (recur
            PLACEHOLDER-8952
            PLACEHOLDER-8953
            PLACEHOLDER-8954
            (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-8955))))
         (let*
          [PLACEHOLDER-8957 (clojure.core/seq PLACEHOLDER-8952)]
          (if
           PLACEHOLDER-8957
           (let*
            [PLACEHOLDER-8958 PLACEHOLDER-8957]
            (if
             (clojure.core/chunked-seq? PLACEHOLDER-8958)
             (let*
              [PLACEHOLDER-8959
               (clojure.core/chunk-first PLACEHOLDER-8958)]
              (recur
               (clojure.core/chunk-rest PLACEHOLDER-8958)
               PLACEHOLDER-8959
               (clojure.lang.RT/intCast
                (clojure.lang.RT/count PLACEHOLDER-8959))
               (clojure.lang.RT/intCast 0)))
             (let*
              [PLACEHOLDER-8960 (clojure.core/first PLACEHOLDER-8958)]
              (do
               (do
                (def
                 candidate
                 (re-matches
                  (re-pattern "[0-9]")
                  (str PLACEHOLDER-8960)))
                (if
                 candidate
                 (build
                  (clojure.lang.Numbers/minus
                   (clojure.lang.RT/intCast (first candidate))
                   48))
                 (cut PLACEHOLDER-8960)))
               (recur
                (clojure.core/next PLACEHOLDER-8958)
                nil
                0
                0)))))))))
       decoded)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12877
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12877))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    find-run-count
    (fn*
     ([PLACEHOLDER-12878]
      (let*
       [PLACEHOLDER-12879 (first PLACEHOLDER-12878)]
       (clojure.lang.RT/count
        (take-while
         (fn*
          ([PLACEHOLDER-12880]
           (clojure.lang.Util/equiv
            PLACEHOLDER-12880
            PLACEHOLDER-12879)))
         PLACEHOLDER-12878))))))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-12881 PLACEHOLDER-12882]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-12882 1)
       (str PLACEHOLDER-12881)
       (str PLACEHOLDER-12882 PLACEHOLDER-12881)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12883]
      (loop*
       [PLACEHOLDER-12884 PLACEHOLDER-12883 PLACEHOLDER-12885 ""]
       (if
        (clojure.core/not (empty? PLACEHOLDER-12884))
        (let*
         [PLACEHOLDER-12886 (find-run-count PLACEHOLDER-12884)]
         (recur
          (subs PLACEHOLDER-12884 PLACEHOLDER-12886)
          (str
           PLACEHOLDER-12885
           (encode-run (first PLACEHOLDER-12884) PLACEHOLDER-12886))))
        PLACEHOLDER-12885)))))
   (def rle-match (re-pattern "(\\d*)([^\\d])"))
   (def
    expand-rle
    (fn*
     ([PLACEHOLDER-12887]
      (let*
       [PLACEHOLDER-12888
        PLACEHOLDER-12887
        PLACEHOLDER-12889
        (clojure.lang.RT/nth PLACEHOLDER-12888 0 nil)
        PLACEHOLDER-12890
        (clojure.lang.RT/nth PLACEHOLDER-12888 1 nil)
        PLACEHOLDER-12891
        (clojure.lang.RT/nth PLACEHOLDER-12888 2 nil)]
       (if
        (clojure.core/not (empty? PLACEHOLDER-12890))
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-12890)
          PLACEHOLDER-12891))
        PLACEHOLDER-12891)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12892]
      (if
       (empty? PLACEHOLDER-12892)
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-12893 PLACEHOLDER-12894]
          (str PLACEHOLDER-12893 (expand-rle PLACEHOLDER-12894))))
        ""
        (re-seq rle-match PLACEHOLDER-12892)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12001
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12001))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress-str
    (fn*
     ([PLACEHOLDER-12002]
      (let*
       [PLACEHOLDER-12003 (clojure.lang.RT/count PLACEHOLDER-12002)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-12003 1)
        (str PLACEHOLDER-12003 (first PLACEHOLDER-12002))
        (str (first PLACEHOLDER-12002)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12004]
      (apply
       str
       (map compress-str (partition-by identity PLACEHOLDER-12004))))))
   (def
    take-number-part
    (fn*
     ([PLACEHOLDER-12005]
      (let*
       [PLACEHOLDER-12006
        PLACEHOLDER-12005
        PLACEHOLDER-12008
        (take-while
         (fn*
          ([PLACEHOLDER-12007]
           (java.lang.Character/isDigit PLACEHOLDER-12007)))
         PLACEHOLDER-12006)
        PLACEHOLDER-12009
        (apply str PLACEHOLDER-12008)]
       (if
        (empty? PLACEHOLDER-12009)
        1
        (java.lang.Integer/parseInt PLACEHOLDER-12009))))))
   (def
    decompress-str
    (fn*
     ([PLACEHOLDER-12010]
      (let*
       [PLACEHOLDER-12011
        (clojure.lang.RT/count PLACEHOLDER-12010)
        PLACEHOLDER-12012
        (last PLACEHOLDER-12010)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-12011 1)
        (apply
         str
         (repeat
          (take-number-part PLACEHOLDER-12010)
          PLACEHOLDER-12012))
        (str PLACEHOLDER-12012))))))
   (def
    chunked-seq
    (fn*
     ([PLACEHOLDER-12013] (chunked-seq PLACEHOLDER-12013 "" []))
     ([PLACEHOLDER-12014 PLACEHOLDER-12015 PLACEHOLDER-12016]
      (let*
       [PLACEHOLDER-12017 (first PLACEHOLDER-12014)]
       (if
        (empty? PLACEHOLDER-12014)
        PLACEHOLDER-12016
        (if
         (java.lang.Character/isDigit PLACEHOLDER-12017)
         (chunked-seq
          (rest PLACEHOLDER-12014)
          (str PLACEHOLDER-12015 PLACEHOLDER-12017)
          PLACEHOLDER-12016)
         (if
          :else
          (chunked-seq
           (rest PLACEHOLDER-12014)
           ""
           (conj
            PLACEHOLDER-12016
            (str PLACEHOLDER-12015 PLACEHOLDER-12017))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12018]
      (apply
       str
       (map decompress-str (chunked-seq PLACEHOLDER-12018)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13112
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13112))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13113]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13114]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-13114))
           PLACEHOLDER-13114
           [(clojure.lang.RT/count PLACEHOLDER-13114)
            (first PLACEHOLDER-13114)])))
        (partition-by identity PLACEHOLDER-13113))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13115]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13116]
          (let*
           [PLACEHOLDER-13117
            (re-seq (re-pattern "\\d+|[A-Za-z\\s]") PLACEHOLDER-13116)]
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-13117))
            PLACEHOLDER-13117
            (repeat
             (java.lang.Integer/parseInt (first PLACEHOLDER-13117))
             (last PLACEHOLDER-13117))))))
        (re-seq
         (re-pattern "\\d+[A-Za-z\\s]|[A-Za-z\\s]")
         PLACEHOLDER-13115)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13971
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13971))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress-coll
    (fn*
     ([PLACEHOLDER-13972]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-13972)
        1)
       (str
        (clojure.lang.RT/count PLACEHOLDER-13972)
        (first PLACEHOLDER-13972))
       (str (first PLACEHOLDER-13972))))))
   (def
    char->int
    (fn*
     ([PLACEHOLDER-13973]
      (try
       (java.lang.Integer/parseInt (str PLACEHOLDER-13973))
       (catch
        NumberFormatException
        PLACEHOLDER-13974
        PLACEHOLDER-13973)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13975]
      (apply
       str
       (map
        compress-coll
        (partition-by identity PLACEHOLDER-13975))))))
   (def
    decompress-str
    (fn*
     ([PLACEHOLDER-13976 PLACEHOLDER-13977]
      (let*
       [PLACEHOLDER-13978
        (take PLACEHOLDER-13976 (repeat (first PLACEHOLDER-13977)))]
       (concat PLACEHOLDER-13978 (rest PLACEHOLDER-13977))))))
   (def
    split-cipher-text
    (fn*
     ([PLACEHOLDER-13979]
      (map
       char->int
       (map
        (fn* ([PLACEHOLDER-13980] (apply str PLACEHOLDER-13980)))
        (partition-by int? (map char->int PLACEHOLDER-13979)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13981]
      (let*
       [PLACEHOLDER-13982
        []
        PLACEHOLDER-13983
        (split-cipher-text PLACEHOLDER-13981)
        PLACEHOLDER-13984
        PLACEHOLDER-13983
        PLACEHOLDER-13985
        (clojure.core/seq PLACEHOLDER-13984)
        PLACEHOLDER-13986
        (clojure.core/first PLACEHOLDER-13985)
        PLACEHOLDER-13987
        (clojure.core/next PLACEHOLDER-13985)
        PLACEHOLDER-13988
        PLACEHOLDER-13986
        PLACEHOLDER-13989
        PLACEHOLDER-13987]
       (loop*
        [PLACEHOLDER-13990
         PLACEHOLDER-13982
         PLACEHOLDER-13991
         PLACEHOLDER-13983]
        (let*
         [PLACEHOLDER-13992
          PLACEHOLDER-13990
          PLACEHOLDER-13993
          PLACEHOLDER-13991
          PLACEHOLDER-13994
          (clojure.core/seq PLACEHOLDER-13993)
          PLACEHOLDER-13995
          (clojure.core/first PLACEHOLDER-13994)
          PLACEHOLDER-13996
          (clojure.core/next PLACEHOLDER-13994)
          PLACEHOLDER-13997
          PLACEHOLDER-13995
          PLACEHOLDER-13998
          PLACEHOLDER-13996]
         (if
          (clojure.lang.RT/booleanCast PLACEHOLDER-13997)
          (if
           (int? PLACEHOLDER-13997)
           (recur
            (into
             PLACEHOLDER-13992
             (decompress-str
              PLACEHOLDER-13997
              (first PLACEHOLDER-13998)))
            (rest PLACEHOLDER-13998))
           (recur
            (conj PLACEHOLDER-13992 PLACEHOLDER-13997)
            PLACEHOLDER-13998))
          (apply str PLACEHOLDER-13992)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11263
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11263))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11264]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11265]
          (let*
           [PLACEHOLDER-11266
            (clojure.lang.RT/get PLACEHOLDER-11265 0)
            PLACEHOLDER-11267
            (clojure.lang.RT/get PLACEHOLDER-11265 1)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-11266 1)
            (str PLACEHOLDER-11267)
            (if :else (str PLACEHOLDER-11266 PLACEHOLDER-11267))))))
        (map
         (fn*
          ([PLACEHOLDER-11268]
           (vector
            (clojure.lang.RT/count PLACEHOLDER-11268)
            (first PLACEHOLDER-11268))))
         (partition-by identity PLACEHOLDER-11264)))))))
   (def
    is-number?
    (fn*
     ([PLACEHOLDER-11269]
      (not= (java.lang.Character/digit PLACEHOLDER-11269 10) -1))))
   (def
    all-number?
    (fn* ([PLACEHOLDER-11270] (every? is-number? PLACEHOLDER-11270))))
   (def
    case-reducer
    (fn*
     ([PLACEHOLDER-11271 PLACEHOLDER-11272]
      (if
       (all-number? PLACEHOLDER-11272)
       (flatten
        [PLACEHOLDER-11271
         (repeat
          (clojure.lang.Numbers/minus
           (java.lang.Integer/parseInt
            (apply str (reverse PLACEHOLDER-11272)))
           1)
          (last PLACEHOLDER-11271))])
       (flatten [PLACEHOLDER-11271 PLACEHOLDER-11272])))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11273]
      (if
       (clojure.lang.Numbers/isZero
        (clojure.lang.RT/count PLACEHOLDER-11273))
       ""
       (apply
        str
        (reverse
         (reduce
          case-reducer
          (map
           reverse
           (reverse
            (partition-by is-number? PLACEHOLDER-11273)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12845
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12845))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit-to-int
    (fn*
     ([PLACEHOLDER-12846]
      (let*
       [PLACEHOLDER-12847 48]
       (clojure.lang.Numbers/minus
        (clojure.lang.RT/intCast PLACEHOLDER-12846)
        PLACEHOLDER-12847)))))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-12848]
      (let*
       [PLACEHOLDER-12849
        (clojure.lang.RT/intCast \0)
        PLACEHOLDER-12850
        (clojure.lang.RT/intCast \9)]
       (<=
        PLACEHOLDER-12849
        (clojure.lang.RT/intCast PLACEHOLDER-12848)
        PLACEHOLDER-12850)))))
   (def
    push-digit
    (fn*
     ([PLACEHOLDER-12851 PLACEHOLDER-12852]
      (let*
       [PLACEHOLDER-12853 (digit-to-int PLACEHOLDER-12852)]
       (if
        PLACEHOLDER-12851
        (clojure.lang.Numbers/add
         (clojure.lang.Numbers/multiply 10 PLACEHOLDER-12851)
         PLACEHOLDER-12853)
        PLACEHOLDER-12853)))))
   (def
    expand-char
    (fn*
     ([PLACEHOLDER-12854 PLACEHOLDER-12855]
      (if
       PLACEHOLDER-12854
       (repeat PLACEHOLDER-12854 PLACEHOLDER-12855)
       [PLACEHOLDER-12855]))))
   (def
    push-expanded
    (fn*
     ([PLACEHOLDER-12856 PLACEHOLDER-12857 PLACEHOLDER-12858]
      (if
       (is-digit? PLACEHOLDER-12858)
       PLACEHOLDER-12856
       (concat
        PLACEHOLDER-12856
        (expand-char PLACEHOLDER-12857 PLACEHOLDER-12858))))))
   (def
    push-encoded
    (fn*
     ([PLACEHOLDER-12859 PLACEHOLDER-12860]
      (if
       (empty? PLACEHOLDER-12859)
       [[PLACEHOLDER-12860 1]]
       (let*
        [PLACEHOLDER-12861
         (last PLACEHOLDER-12859)
         PLACEHOLDER-12862
         (clojure.lang.RT/nth PLACEHOLDER-12861 0 nil)
         PLACEHOLDER-12863
         (clojure.lang.RT/nth PLACEHOLDER-12861 1 nil)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-12862 PLACEHOLDER-12860)
         (conj
          (pop PLACEHOLDER-12859)
          [PLACEHOLDER-12860
           (clojure.lang.Numbers/inc PLACEHOLDER-12863)])
         (conj PLACEHOLDER-12859 [PLACEHOLDER-12860 1])))))))
   (def
    runlength-token
    (fn*
     ([PLACEHOLDER-12864]
      (let*
       [PLACEHOLDER-12865
        PLACEHOLDER-12864
        PLACEHOLDER-12866
        (clojure.lang.RT/nth PLACEHOLDER-12865 0 nil)
        PLACEHOLDER-12867
        (clojure.lang.RT/nth PLACEHOLDER-12865 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12867 1)
        PLACEHOLDER-12866
        (str PLACEHOLDER-12867 PLACEHOLDER-12866))))))
   (def
    collapse-enc
    (fn*
     ([PLACEHOLDER-12868]
      (apply str (map runlength-token PLACEHOLDER-12868)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12869]
      (loop*
       [PLACEHOLDER-12870 [] PLACEHOLDER-12871 PLACEHOLDER-12869]
       (if
        (empty? PLACEHOLDER-12871)
        (collapse-enc PLACEHOLDER-12870)
        (recur
         (push-encoded PLACEHOLDER-12870 (first PLACEHOLDER-12871))
         (rest PLACEHOLDER-12871)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12872]
      (loop*
       [PLACEHOLDER-12873
        []
        PLACEHOLDER-12874
        nil
        PLACEHOLDER-12875
        PLACEHOLDER-12872]
       (let*
        [PLACEHOLDER-12876 (first PLACEHOLDER-12875)]
        (if
         (empty? PLACEHOLDER-12875)
         (apply str PLACEHOLDER-12873)
         (recur
          (push-expanded
           PLACEHOLDER-12873
           PLACEHOLDER-12874
           PLACEHOLDER-12876)
          (if
           (is-digit? PLACEHOLDER-12876)
           (push-digit PLACEHOLDER-12874 PLACEHOLDER-12876))
          (rest PLACEHOLDER-12875)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11451
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11451))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    text-split-helper
    (fn*
     ([PLACEHOLDER-11452]
      (split-with
       (fn*
        ([PLACEHOLDER-11453]
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-11452)
          PLACEHOLDER-11453)))
       PLACEHOLDER-11452))))
   (def
    stuff
    (map
     (fn*
      ([PLACEHOLDER-11454]
       (apply
        str
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/count PLACEHOLDER-11454)
          1)
         PLACEHOLDER-11454
         [(clojure.lang.RT/count PLACEHOLDER-11454)
          (first PLACEHOLDER-11454)]))))))
   (def
    text-splitter
    (fn*
     ([PLACEHOLDER-11455]
      (loop*
       [PLACEHOLDER-11456
        (text-split-helper PLACEHOLDER-11455)
        PLACEHOLDER-11457
        []]
       (if
        (empty? (first PLACEHOLDER-11456))
        PLACEHOLDER-11457
        (recur
         (text-split-helper (second PLACEHOLDER-11456))
         (conj PLACEHOLDER-11457 (first PLACEHOLDER-11456))))))))
   (def
    number-split-helper
    (fn*
     ([PLACEHOLDER-11458]
      (split-with
       (fn*
        ([PLACEHOLDER-11459]
         (java.lang.Character/isDigit PLACEHOLDER-11459)))
       PLACEHOLDER-11458))))
   (def
    number-splitter
    (fn*
     ([PLACEHOLDER-11460]
      (loop*
       [PLACEHOLDER-11461
        (number-split-helper PLACEHOLDER-11460)
        PLACEHOLDER-11462
        []]
       (if
        (empty? (first PLACEHOLDER-11461))
        PLACEHOLDER-11462
        (recur
         (number-split-helper (str (second PLACEHOLDER-11461)))
         (conj PLACEHOLDER-11462 (first PLACEHOLDER-11461))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11463]
      (join (into [] stuff (text-splitter PLACEHOLDER-11463))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-11464] (number-splitter PLACEHOLDER-11464)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14034
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14034))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14035]
      (let*
       [PLACEHOLDER-14036
        PLACEHOLDER-14035
        PLACEHOLDER-14037
        (clojure.core/seq PLACEHOLDER-14036)
        PLACEHOLDER-14038
        (clojure.core/first PLACEHOLDER-14037)
        PLACEHOLDER-14039
        (clojure.core/next PLACEHOLDER-14037)
        PLACEHOLDER-14040
        PLACEHOLDER-14038
        PLACEHOLDER-14041
        PLACEHOLDER-14039
        PLACEHOLDER-14042
        PLACEHOLDER-14036]
       (let*
        [PLACEHOLDER-14043 PLACEHOLDER-14040]
        (if
         PLACEHOLDER-14041
         (str
          (clojure.lang.RT/count PLACEHOLDER-14042)
          PLACEHOLDER-14043)
         PLACEHOLDER-14043))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14044]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-14044))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14045]
      (let*
       [PLACEHOLDER-14046
        PLACEHOLDER-14045
        PLACEHOLDER-14047
        (clojure.lang.RT/nth PLACEHOLDER-14046 0 nil)
        PLACEHOLDER-14048
        (clojure.lang.RT/nth PLACEHOLDER-14046 1 nil)
        PLACEHOLDER-14049
        (clojure.lang.RT/nth PLACEHOLDER-14046 2 nil)]
       (let*
        [PLACEHOLDER-14050 PLACEHOLDER-14049]
        (if
         (seq PLACEHOLDER-14048)
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-14048)
          PLACEHOLDER-14050)
         PLACEHOLDER-14050))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14051]
      (apply
       str
       (mapcat
        decode
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-14051)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12751
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12751))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-12752]
      (let*
       [PLACEHOLDER-12753
        PLACEHOLDER-12752
        PLACEHOLDER-12754
        (clojure.core/seq PLACEHOLDER-12753)
        PLACEHOLDER-12755
        (clojure.core/first PLACEHOLDER-12754)
        PLACEHOLDER-12756
        (clojure.core/next PLACEHOLDER-12754)
        PLACEHOLDER-12757
        PLACEHOLDER-12755
        PLACEHOLDER-12758
        PLACEHOLDER-12756
        PLACEHOLDER-12759
        PLACEHOLDER-12753]
       (let*
        [PLACEHOLDER-12760 PLACEHOLDER-12757]
        (if
         PLACEHOLDER-12758
         (str
          (clojure.lang.RT/count PLACEHOLDER-12759)
          PLACEHOLDER-12760)
         PLACEHOLDER-12760))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12761]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-12761))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12762]
      (let*
       [PLACEHOLDER-12763
        PLACEHOLDER-12762
        PLACEHOLDER-12764
        (clojure.lang.RT/nth PLACEHOLDER-12763 0 nil)
        PLACEHOLDER-12765
        (clojure.lang.RT/nth PLACEHOLDER-12763 1 nil)
        PLACEHOLDER-12766
        (clojure.lang.RT/nth PLACEHOLDER-12763 2 nil)]
       (if
        (empty? PLACEHOLDER-12765)
        PLACEHOLDER-12766
        (if
         :else
         (apply
          str
          (repeat
           (read-string PLACEHOLDER-12765)
           PLACEHOLDER-12766))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12767]
      (apply
       str
       (map
        decode
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-12767)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14181
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14181))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14182]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14183]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-14183)
             1)
            (clojure.lang.RT/count PLACEHOLDER-14183))
           (first PLACEHOLDER-14183))))
        (map
         first
         (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14182)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14184]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-14185]
           (if
            (clojure.lang.Util/identical (first PLACEHOLDER-14185) nil)
            (last PLACEHOLDER-14185)
            (repeat
             (bigint (apply str (first PLACEHOLDER-14185)))
             (last PLACEHOLDER-14185)))))
         (map
          (fn*
           ([PLACEHOLDER-14186]
            (list
             (butlast PLACEHOLDER-14186)
             (last PLACEHOLDER-14186))))
          (re-seq (re-pattern "\\d*.") PLACEHOLDER-14184)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14656
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14656))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-letters
    (fn*
     ([PLACEHOLDER-14657]
      (let*
       [PLACEHOLDER-14658
        (clojure.lang.RT/count PLACEHOLDER-14657)
        PLACEHOLDER-14659
        (first PLACEHOLDER-14657)]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-14658)
        ""
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-14658)
         PLACEHOLDER-14659
         (if :else (str PLACEHOLDER-14658 PLACEHOLDER-14659))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14660]
      (string/join
       (map
        encode-letters
        (partition-by identity PLACEHOLDER-14660))))))
   (def
    decode-segment
    (fn*
     ([PLACEHOLDER-14661]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-14661))
       PLACEHOLDER-14661
       (let*
        [PLACEHOLDER-14662
         (re-matches
          (re-pattern "([0-9]+)([a-zA-Z ]+)")
          PLACEHOLDER-14661)
         PLACEHOLDER-14663
         (clojure.lang.RT/nth PLACEHOLDER-14662 0 nil)
         PLACEHOLDER-14664
         (clojure.lang.RT/nth PLACEHOLDER-14662 1 nil)
         PLACEHOLDER-14665
         (clojure.lang.RT/nth PLACEHOLDER-14662 2 nil)
         PLACEHOLDER-14666
         (java.lang.Integer/parseInt PLACEHOLDER-14664)]
        (string/join (repeat PLACEHOLDER-14666 PLACEHOLDER-14665)))))))
   (def
    text->segments
    (fn*
     ([PLACEHOLDER-14667]
      (re-seq
       (re-pattern "[0-9]+[a-zA-Z ]|[a-zA-Z ]")
       PLACEHOLDER-14667))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14668]
      (string/join
       (map decode-segment (text->segments PLACEHOLDER-14668)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11535
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11535))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11536]
      (let*
       [PLACEHOLDER-11537
        (partition-by identity PLACEHOLDER-11536)
        PLACEHOLDER-11538
        (map count PLACEHOLDER-11537)]
       (apply
        str
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-11539 PLACEHOLDER-11540]
            (let*
             [PLACEHOLDER-11541
              PLACEHOLDER-11539
              PLACEHOLDER-11542
              (clojure.lang.RT/nth PLACEHOLDER-11541 0 nil)]
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-11540 1)
              [PLACEHOLDER-11540 PLACEHOLDER-11542]
              PLACEHOLDER-11542))))
          PLACEHOLDER-11537
          PLACEHOLDER-11538)))))))
   (def
    unpack-prefix
    (fn*
     ([PLACEHOLDER-11543 PLACEHOLDER-11544]
      (conj
       PLACEHOLDER-11543
       (let*
        [PLACEHOLDER-11547
         (let*
          [PLACEHOLDER-11546
           (every?
            (fn*
             ([PLACEHOLDER-11545]
              (java.lang.Character/isDigit PLACEHOLDER-11545)))
            PLACEHOLDER-11544)]
          (if
           PLACEHOLDER-11546
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-11544))
           PLACEHOLDER-11546))]
        (if
         PLACEHOLDER-11547
         (let*
          [PLACEHOLDER-11548 PLACEHOLDER-11547]
          (repeat
           (clojure.lang.Numbers/dec PLACEHOLDER-11548)
           (first (last PLACEHOLDER-11543))))
         PLACEHOLDER-11544))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11549]
      (apply
       str
       (flatten
        (reverse
         (reduce
          unpack-prefix
          []
          (reverse
           (partition-by
            (fn*
             ([PLACEHOLDER-11550]
              (java.lang.Character/isDigit PLACEHOLDER-11550)))
            PLACEHOLDER-11549))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    (.resetMeta
     (clojure.lang.Namespace/find 'run-length-encoding)
     {:doc
      "Run-length encoding (RLE) is a simple form of data compression,\n  where runs (consecutive data elements) are replaced by just\n  one data value and count.\n  Example: AABCCCDEEEE  ->  2AB3CD4E  ->  AABCCCDEEEE"})
    ((fn*
      PLACEHOLDER-14068
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14068))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14069]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-14070]
          (clojure.lang.Util/equiv PLACEHOLDER-14070 1)))
        (apply
         concat
         (map
          (juxt count first)
          (partition-by identity PLACEHOLDER-14069))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14071]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14072]
          (apply
           str
           (repeat
            (first PLACEHOLDER-14072)
            (last PLACEHOLDER-14072)))))
        (map
         (fn*
          ([PLACEHOLDER-14073]
           (update
            PLACEHOLDER-14073
            0
            (fn*
             ([PLACEHOLDER-14074]
              (java.lang.Integer/parseInt PLACEHOLDER-14074))))))
         (map
          (fn*
           ([PLACEHOLDER-14075]
            (str/split PLACEHOLDER-14075 (re-pattern "(?=[\\D])"))))
          (map
           (fn*
            ([PLACEHOLDER-14076]
             (str/replace
              PLACEHOLDER-14076
              (re-pattern "(^\\D)")
              "1$1")))
           (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-14071)))))))))
   (re-seq (re-pattern "\\d*\\D") "2AB3CD4E")
   (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB")
   (map
    (fn*
     ([PLACEHOLDER-14077]
      (str/replace PLACEHOLDER-14077 (re-pattern "(^\\D)") "1$1")))
    (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB"))
   (map
    (fn*
     ([PLACEHOLDER-14078]
      (str/replace PLACEHOLDER-14078 (re-pattern "(^\\D)") "1$1")))
    (re-seq (re-pattern "\\d*\\D") "XYZ"))
   (str/split "12 " (re-pattern "(?=[\\D])"))
   (map
    (fn*
     ([PLACEHOLDER-14079]
      (str/split PLACEHOLDER-14079 (re-pattern "(?=[\\D])"))))
    (map
     (fn*
      ([PLACEHOLDER-14080]
       (str/replace PLACEHOLDER-14080 (re-pattern "(^\\D)") "1$1")))
     (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB")))
   (update
    ["12" "W"]
    0
    (fn*
     ([PLACEHOLDER-14081]
      (java.lang.Integer/parseInt PLACEHOLDER-14081))))
   (map
    (fn*
     ([PLACEHOLDER-14082]
      (update
       PLACEHOLDER-14082
       0
       (fn*
        ([PLACEHOLDER-14083]
         (java.lang.Integer/parseInt PLACEHOLDER-14083))))))
    (map
     (fn*
      ([PLACEHOLDER-14084]
       (str/split PLACEHOLDER-14084 (re-pattern "(?=[\\D])"))))
     (map
      (fn*
       ([PLACEHOLDER-14085]
        (str/replace PLACEHOLDER-14085 (re-pattern "(^\\D)") "1$1")))
      (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB"))))
   (repeat (first [3 "C"]) (last [3 "C"]))
   (apply str (repeat (first [3 "C"]) (last [3 "C"])))
   (map
    (fn*
     ([PLACEHOLDER-14086]
      (apply
       str
       (repeat (first PLACEHOLDER-14086) (last PLACEHOLDER-14086)))))
    [[2 "A"] [3 "C"]])
   (map
    (fn*
     ([PLACEHOLDER-14087]
      (apply
       str
       (repeat (first PLACEHOLDER-14087) (last PLACEHOLDER-14087)))))
    (map
     (fn*
      ([PLACEHOLDER-14088]
       (update
        PLACEHOLDER-14088
        0
        (fn*
         ([PLACEHOLDER-14089]
          (java.lang.Integer/parseInt PLACEHOLDER-14089))))))
     (map
      (fn*
       ([PLACEHOLDER-14090]
        (str/split PLACEHOLDER-14090 (re-pattern "(?=[\\D])"))))
      (map
       (fn*
        ([PLACEHOLDER-14091]
         (str/replace PLACEHOLDER-14091 (re-pattern "(^\\D)") "1$1")))
       (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB")))))
   (apply
    str
    (map
     (fn*
      ([PLACEHOLDER-14092]
       (apply
        str
        (repeat (first PLACEHOLDER-14092) (last PLACEHOLDER-14092)))))
     (map
      (fn*
       ([PLACEHOLDER-14093]
        (update
         PLACEHOLDER-14093
         0
         (fn*
          ([PLACEHOLDER-14094]
           (java.lang.Integer/parseInt PLACEHOLDER-14094))))))
      (map
       (fn*
        ([PLACEHOLDER-14095]
         (str/split PLACEHOLDER-14095 (re-pattern "(?=[\\D])"))))
       (map
        (fn*
         ([PLACEHOLDER-14096]
          (str/replace PLACEHOLDER-14096 (re-pattern "(^\\D)") "1$1")))
        (re-seq (re-pattern "\\d*\\D") "12WB12W3B24WB"))))))
   (partition-by identity "AABCCCDEEEE")
   (map (juxt count first) (partition-by identity "AABCCCDEEEE"))
   (apply
    concat
    (map (juxt count first) (partition-by identity "AABCCCDEEEE")))
   (remove
    (fn*
     ([PLACEHOLDER-14097]
      (clojure.lang.Util/equiv PLACEHOLDER-14097 1)))
    (apply
     concat
     (map (juxt count first) (partition-by identity "AABCCCDEEEE"))))
   (apply
    str
    (remove
     (fn*
      ([PLACEHOLDER-14098]
       (clojure.lang.Util/equiv PLACEHOLDER-14098 1)))
     (apply
      concat
      (map (juxt count first) (partition-by identity "AABCCCDEEEE")))))
   (apply
    str
    (remove
     (fn*
      ([PLACEHOLDER-14099]
       (clojure.lang.Util/equiv PLACEHOLDER-14099 1)))
     (apply
      concat
      (map
       (juxt count first)
       (partition-by identity "AABCCCDEEEE"))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12977
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12977))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12978]
      (let*
       [PLACEHOLDER-12979
        (partition-by identity "aaabbbssssq")
        PLACEHOLDER-12981
        (map
         (fn*
          ([PLACEHOLDER-12980]
           (if
            (clojure.lang.Numbers/lt
             1
             (clojure.lang.RT/count PLACEHOLDER-12980))
            (clojure.lang.RT/count PLACEHOLDER-12980)
            "")))
         PLACEHOLDER-12979)
        PLACEHOLDER-12982
        (map first PLACEHOLDER-12979)]
       (apply str (map str PLACEHOLDER-12981 PLACEHOLDER-12982))))))
   nil
   (def run-length-decode (fn* ([PLACEHOLDER-12983] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11358
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11358))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11359]
      (s/join
       (filter
        (fn* ([PLACEHOLDER-11360] (not= 1 PLACEHOLDER-11360)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-11359)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11361]
      (s/join
       (mapcat
        (fn*
         ([PLACEHOLDER-11362]
          (let*
           [PLACEHOLDER-11363
            PLACEHOLDER-11362
            PLACEHOLDER-11364
            (clojure.lang.RT/nth PLACEHOLDER-11363 0 nil)
            PLACEHOLDER-11365
            (clojure.lang.RT/nth PLACEHOLDER-11363 1 nil)
            PLACEHOLDER-11366
            (clojure.lang.RT/nth PLACEHOLDER-11363 2 nil)]
           (repeat
            (if
             (identity PLACEHOLDER-11365)
             (java.lang.Integer/parseInt PLACEHOLDER-11365)
             1)
            PLACEHOLDER-11366))))
        (re-seq (re-pattern "(\\d+)?([\\D])") PLACEHOLDER-11361)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11728
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11728))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    classic-encode
    (fn*
     ([PLACEHOLDER-11729]
      (apply
       str
       (mapcat
        (juxt count first)
        (partition-by identity PLACEHOLDER-11729))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11730]
      (apply
       str
       (remove (set "1") (classic-encode PLACEHOLDER-11730))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11731]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11732]
          (let*
           [PLACEHOLDER-11733
            PLACEHOLDER-11732
            PLACEHOLDER-11734
            (clojure.lang.RT/nth PLACEHOLDER-11733 0 nil)
            PLACEHOLDER-11735
            (clojure.lang.RT/nth PLACEHOLDER-11733 1 nil)
            PLACEHOLDER-11736
            (clojure.lang.RT/nth PLACEHOLDER-11733 2 nil)]
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-11735)
            PLACEHOLDER-11736))))
        (re-seq (re-pattern "(\\d+)([A-Z])") PLACEHOLDER-11731)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14150
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14150))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14151]
      (let*
       [PLACEHOLDER-14152
        (partition-by identity PLACEHOLDER-14151)
        PLACEHOLDER-14153
        (map count PLACEHOLDER-14152)
        PLACEHOLDER-14155
        (map
         (fn*
          ([PLACEHOLDER-14154]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-14154 1)
            (str PLACEHOLDER-14154)
            "")))
         PLACEHOLDER-14153)
        PLACEHOLDER-14156
        (map (comp str first) PLACEHOLDER-14152)]
       (apply str (interleave PLACEHOLDER-14155 PLACEHOLDER-14156))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14157]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-14158]
           (repeat
            (if
             (empty? (first PLACEHOLDER-14158))
             1
             (read-string (first PLACEHOLDER-14158)))
            (second PLACEHOLDER-14158))))
         (map
          rest
          (re-seq
           (re-pattern "(\\d*)(\\w|\\s)")
           PLACEHOLDER-14157)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12169
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12169))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    my-count
    (fn*
     ([PLACEHOLDER-12170]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-12170))
       ""
       (if :else (clojure.lang.RT/count PLACEHOLDER-12170))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12171]
      (let*
       [PLACEHOLDER-12173
        (fn*
         ([PLACEHOLDER-12172]
          (str
           (my-count PLACEHOLDER-12172)
           (last PLACEHOLDER-12172))))]
       (apply
        str
        (map
         PLACEHOLDER-12173
         (partition-by str PLACEHOLDER-12171)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12174]
      (let*
       [PLACEHOLDER-12175 (re-pattern "(\\d+)*([A-Z]|[a-z]| )")]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12176]
           (apply
            str
            (repeat
             (read-string
              (let*
               [PLACEHOLDER-12177
                (re-find (re-pattern "\\d+") PLACEHOLDER-12176)]
               (if PLACEHOLDER-12177 PLACEHOLDER-12177 "1")))
             (last PLACEHOLDER-12176)))))
         (map
          first
          (re-seq PLACEHOLDER-12175 PLACEHOLDER-12174)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12193
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12193))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12194]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-12194)
       ""
       (clojure.string/join
        ""
        (map
         (fn*
          ([PLACEHOLDER-12195]
           (let*
            [PLACEHOLDER-12196
             PLACEHOLDER-12195
             PLACEHOLDER-12197
             (clojure.core/seq PLACEHOLDER-12196)
             PLACEHOLDER-12198
             (clojure.core/first PLACEHOLDER-12197)
             PLACEHOLDER-12199
             (clojure.core/next PLACEHOLDER-12197)
             PLACEHOLDER-12200
             PLACEHOLDER-12198
             PLACEHOLDER-12201
             PLACEHOLDER-12199]
            (if
             (empty? PLACEHOLDER-12201)
             (str PLACEHOLDER-12200)
             (format
              "%d%s"
              (clojure.lang.Numbers/inc
               (clojure.lang.RT/count PLACEHOLDER-12201))
              PLACEHOLDER-12200)))))
         (partition-by identity PLACEHOLDER-12194)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12202]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-12202)
       ""
       (do
        (def
         re-cipher
         (re-seq (re-pattern "([0-9]*)([a-zA-Z ])") PLACEHOLDER-12202))
        (def
         strings
         (map
          (fn*
           ([PLACEHOLDER-12203]
            (let*
             [PLACEHOLDER-12204
              PLACEHOLDER-12203
              PLACEHOLDER-12205
              (clojure.lang.RT/nth PLACEHOLDER-12204 0 nil)
              PLACEHOLDER-12206
              (clojure.lang.RT/nth PLACEHOLDER-12204 1 nil)
              PLACEHOLDER-12207
              (clojure.lang.RT/nth PLACEHOLDER-12204 2 nil)]
             (let*
              [PLACEHOLDER-12208
               (if
                (clojure.lang.Util/equiv "" PLACEHOLDER-12206)
                1
                (new Integer PLACEHOLDER-12206))]
              (clojure.string/join
               ""
               (take PLACEHOLDER-12208 (repeat PLACEHOLDER-12207)))))))
          re-cipher))
        (clojure.string/join "" strings)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10623
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10623))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]])
          (clojure.core/require '[clojure.pprint :refer [pprint]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    trace
    (fn*
     ([PLACEHOLDER-10624]
      (do (pprint PLACEHOLDER-10624) PLACEHOLDER-10624))))
   (def
    flatten
    (fn*
     ([PLACEHOLDER-10625 PLACEHOLDER-10626]
      (let*
       [PLACEHOLDER-10627 PLACEHOLDER-10626]
       (if
        PLACEHOLDER-10627
        (conj
         (flatten
          PLACEHOLDER-10625
          (PLACEHOLDER-10625 PLACEHOLDER-10626))
         (dissoc PLACEHOLDER-10626 PLACEHOLDER-10625))
        PLACEHOLDER-10627)))))
   (def
    encode-step
    (fn*
     ([PLACEHOLDER-10628 PLACEHOLDER-10629]
      (let*
       [PLACEHOLDER-10630
        PLACEHOLDER-10628
        PLACEHOLDER-10631
        (if
         (clojure.core/seq? PLACEHOLDER-10630)
         (if
          (clojure.core/next PLACEHOLDER-10630)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-10630))
          (if
           (clojure.core/seq PLACEHOLDER-10630)
           (clojure.core/first PLACEHOLDER-10630)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-10630)
        PLACEHOLDER-10632
        PLACEHOLDER-10631
        PLACEHOLDER-10633
        (clojure.lang.RT/get PLACEHOLDER-10631 :letter)
        PLACEHOLDER-10634
        (clojure.lang.RT/get PLACEHOLDER-10631 :previous-state)
        PLACEHOLDER-10635
        (clojure.lang.RT/get PLACEHOLDER-10631 :count)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10629 PLACEHOLDER-10633)
        (update PLACEHOLDER-10632 :count inc)
        {:letter PLACEHOLDER-10629,
         :previous-state PLACEHOLDER-10632,
         :count 1})))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10636]
      (join
       (map
        (fn*
         ([PLACEHOLDER-10637]
          (str
           (let*
            [PLACEHOLDER-10638 (:count PLACEHOLDER-10637)]
            (if
             (clojure.lang.Util/equiv 1 PLACEHOLDER-10638)
             nil
             PLACEHOLDER-10638))
           (:letter PLACEHOLDER-10637))))
        (rseq
         (vec
          (flatten
           :previous-state
           (reduce encode-step nil PLACEHOLDER-10636)))))))))
   (def
    initial-decode-state
    {:letter nil,
     :previous-state nil,
     :count nil,
     :last-chr-is-digit nil})
   (def
    decode-step
    (fn*
     ([PLACEHOLDER-10639 PLACEHOLDER-10640]
      (let*
       [PLACEHOLDER-10641
        PLACEHOLDER-10639
        PLACEHOLDER-10642
        (if
         (clojure.core/seq? PLACEHOLDER-10641)
         (if
          (clojure.core/next PLACEHOLDER-10641)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-10641))
          (if
           (clojure.core/seq PLACEHOLDER-10641)
           (clojure.core/first PLACEHOLDER-10641)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-10641)
        PLACEHOLDER-10643
        PLACEHOLDER-10642
        PLACEHOLDER-10644
        (clojure.lang.RT/get PLACEHOLDER-10642 :letter)
        PLACEHOLDER-10645
        (clojure.lang.RT/get PLACEHOLDER-10642 :previous-state)
        PLACEHOLDER-10646
        (clojure.lang.RT/get PLACEHOLDER-10642 :count)
        PLACEHOLDER-10647
        (clojure.lang.RT/get PLACEHOLDER-10642 :last-chr-is-digit)]
       (do
        (pprint PLACEHOLDER-10643)
        (merge
         PLACEHOLDER-10643
         (if
          (java.lang.Character/isDigit PLACEHOLDER-10640)
          (let*
           [PLACEHOLDER-10648
            (java.lang.Character/digit PLACEHOLDER-10640 10)]
           (if
            PLACEHOLDER-10647
            {:count
             (clojure.lang.Numbers/add
              PLACEHOLDER-10648
              (clojure.lang.Numbers/multiply 10 PLACEHOLDER-10646))}
            {:letter nil,
             :previous-state PLACEHOLDER-10643,
             :count PLACEHOLDER-10648,
             :last-chr-is-digit true}))
          (if
           PLACEHOLDER-10647
           {:letter PLACEHOLDER-10640, :last-chr-is-digit false}
           {:letter PLACEHOLDER-10640,
            :previous-state PLACEHOLDER-10643,
            :count 1}))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10649]
      (join
       (map
        (fn*
         ([PLACEHOLDER-10650]
          (apply
           str
           (repeat
            (let*
             [PLACEHOLDER-10651 (:count PLACEHOLDER-10650)]
             (if PLACEHOLDER-10651 PLACEHOLDER-10651 1))
            (:letter PLACEHOLDER-10650)))))
        (rseq
         (vec
          (flatten
           :previous-state
           (reduce decode-step nil PLACEHOLDER-10649))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11521
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11521))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-11522]
      (java.lang.Character/isDigit PLACEHOLDER-11522))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11523]
      (string/join
       (map
        (fn*
         ([PLACEHOLDER-11524]
          (let*
           [PLACEHOLDER-11525
            (first PLACEHOLDER-11524)
            PLACEHOLDER-11526
            (clojure.lang.RT/count PLACEHOLDER-11524)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-11526 1)
            (str PLACEHOLDER-11525)
            (format "%s%s" PLACEHOLDER-11526 PLACEHOLDER-11525)))))
        (partition-by identity PLACEHOLDER-11523))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11527]
      (let*
       [PLACEHOLDER-11528 (seq PLACEHOLDER-11527)]
       (if
        PLACEHOLDER-11528
        (let*
         [PLACEHOLDER-11529 PLACEHOLDER-11528]
         (let*
          [PLACEHOLDER-11530
           (take-while digit? PLACEHOLDER-11529)
           PLACEHOLDER-11531
           (clojure.lang.RT/count PLACEHOLDER-11530)
           PLACEHOLDER-11532
           (if
            (empty? PLACEHOLDER-11530)
            1
            (bigint (string/join PLACEHOLDER-11530)))
           PLACEHOLDER-11533
           (first (drop PLACEHOLDER-11531 PLACEHOLDER-11529))
           PLACEHOLDER-11534
           (clojure.lang.Numbers/add
            PLACEHOLDER-11531
            (if
             (clojure.lang.Util/identical PLACEHOLDER-11533 nil)
             0
             1))]
          (string/join
           (cons
            (string/join (repeat PLACEHOLDER-11532 PLACEHOLDER-11533))
            (run-length-decode
             (drop PLACEHOLDER-11534 PLACEHOLDER-11529))))))
        PLACEHOLDER-11527))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9881
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9881))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-9882]
      (let*
       [PLACEHOLDER-9883
        (clojure.lang.Numbers/gte
         0
         (clojure.lang.Util/compare \0 PLACEHOLDER-9882))]
       (if
        PLACEHOLDER-9883
        (clojure.lang.Numbers/gte
         0
         (clojure.lang.Util/compare PLACEHOLDER-9882 \9))
        PLACEHOLDER-9883)))))
   (def
    get-number
    (fn*
     ([PLACEHOLDER-9884]
      (loop*
       [PLACEHOLDER-9885 PLACEHOLDER-9884 PLACEHOLDER-9886 []]
       (if
        (not (digit? (first PLACEHOLDER-9885)))
        [(read-string (apply str PLACEHOLDER-9886)) PLACEHOLDER-9885]
        (recur
         (rest PLACEHOLDER-9885)
         (concat PLACEHOLDER-9886 [(first PLACEHOLDER-9885)])))))))
   (def
    decode-letter
    (fn*
     ([PLACEHOLDER-9887]
      (if
       (not (digit? (first PLACEHOLDER-9887)))
       [(str (first PLACEHOLDER-9887)) (rest PLACEHOLDER-9887)]
       (let*
        [PLACEHOLDER-9888
         (get-number PLACEHOLDER-9887)
         PLACEHOLDER-9889
         (clojure.lang.RT/nth PLACEHOLDER-9888 0 nil)
         PLACEHOLDER-9890
         (clojure.lang.RT/nth PLACEHOLDER-9888 1 nil)]
        [(apply str (repeat PLACEHOLDER-9889 (first PLACEHOLDER-9890)))
         (rest PLACEHOLDER-9890)])))))
   (def
    encode-letter
    (fn*
     ([PLACEHOLDER-9891]
      (loop*
       [PLACEHOLDER-9892
        PLACEHOLDER-9891
        PLACEHOLDER-9893
        0
        PLACEHOLDER-9894
        (first PLACEHOLDER-9891)]
       (if
        (clojure.lang.Util/equiv
         (first PLACEHOLDER-9892)
         PLACEHOLDER-9894)
        (recur
         (rest PLACEHOLDER-9892)
         (clojure.lang.Numbers/inc PLACEHOLDER-9893)
         PLACEHOLDER-9894)
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-9893)
         [(str PLACEHOLDER-9894) PLACEHOLDER-9892]
         [(str PLACEHOLDER-9893 PLACEHOLDER-9894)
          PLACEHOLDER-9892]))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9895]
      (if
       (empty? PLACEHOLDER-9895)
       ""
       (loop*
        [PLACEHOLDER-9896 PLACEHOLDER-9895 PLACEHOLDER-9897 ""]
        (if
         (empty? PLACEHOLDER-9896)
         PLACEHOLDER-9897
         (let*
          [PLACEHOLDER-9898
           (encode-letter PLACEHOLDER-9896)
           PLACEHOLDER-9899
           (clojure.lang.RT/nth PLACEHOLDER-9898 0 nil)
           PLACEHOLDER-9900
           (clojure.lang.RT/nth PLACEHOLDER-9898 1 nil)]
          (recur
           PLACEHOLDER-9900
           (clojure.string/join
            [PLACEHOLDER-9897 PLACEHOLDER-9899])))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9901]
      (if
       (empty? PLACEHOLDER-9901)
       ""
       (loop*
        [PLACEHOLDER-9902 PLACEHOLDER-9901 PLACEHOLDER-9903 ""]
        (if
         (empty? PLACEHOLDER-9902)
         PLACEHOLDER-9903
         (let*
          [PLACEHOLDER-9904
           (decode-letter PLACEHOLDER-9902)
           PLACEHOLDER-9905
           (clojure.lang.RT/nth PLACEHOLDER-9904 0 nil)
           PLACEHOLDER-9906
           (clojure.lang.RT/nth PLACEHOLDER-9904 1 nil)]
          (recur
           PLACEHOLDER-9906
           (clojure.string/join
            [PLACEHOLDER-9903 PLACEHOLDER-9905]))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13877
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13877))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13878]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-13879]
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-13879)
             1)
            PLACEHOLDER-13879
            [(clojure.lang.RT/count PLACEHOLDER-13879)
             (first PLACEHOLDER-13879)])))
         (partition-by identity PLACEHOLDER-13878)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13880]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-13881]
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-13881)
             1)
            PLACEHOLDER-13881
            (repeat
             (apply
              read-string
              (re-seq (re-pattern "\\d+") PLACEHOLDER-13881))
             (last PLACEHOLDER-13881)))))
         (re-seq
          (re-pattern "\\d*\\s|\\d*\\w")
          PLACEHOLDER-13880))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15162
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15162))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15163]
      (clojure.string/join
       ""
       (filter
        (fn* ([PLACEHOLDER-15164] (not= "1" PLACEHOLDER-15164)))
        (map
         str
         (flatten
          (map
           (fn*
            ([PLACEHOLDER-15165]
             (list
              (clojure.lang.RT/count PLACEHOLDER-15165)
              (first PLACEHOLDER-15165))))
           (partition-by identity PLACEHOLDER-15163)))))))))
   (def
    get-number
    (fn*
     ([PLACEHOLDER-15166]
      (if
       (blank? PLACEHOLDER-15166)
       1
       (read-string PLACEHOLDER-15166)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15167]
      (join
       (mapcat
        (fn*
         ([PLACEHOLDER-15168]
          (let*
           [PLACEHOLDER-15169
            PLACEHOLDER-15168
            PLACEHOLDER-15170
            (clojure.lang.RT/nth PLACEHOLDER-15169 0 nil)
            PLACEHOLDER-15171
            (clojure.lang.RT/nth PLACEHOLDER-15169 1 nil)
            PLACEHOLDER-15172
            (clojure.lang.RT/nth PLACEHOLDER-15169 2 nil)]
           (repeat (get-number PLACEHOLDER-15171) PLACEHOLDER-15172))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-15167)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9339
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9339))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9340]
      (apply
       str
       (mapcat
        (juxt count first)
        (partition-by identity PLACEHOLDER-9340))))))
   (def
    unpack-symbol
    (fn*
     ([PLACEHOLDER-9341]
      (let*
       [PLACEHOLDER-9342
        PLACEHOLDER-9341
        PLACEHOLDER-9343
        (clojure.lang.RT/nth PLACEHOLDER-9342 0 nil)
        PLACEHOLDER-9344
        (clojure.lang.RT/nth PLACEHOLDER-9342 1 nil)
        PLACEHOLDER-9345
        (clojure.lang.RT/nth PLACEHOLDER-9342 2 nil)]
       (repeat
        (java.lang.Integer/parseInt PLACEHOLDER-9344)
        PLACEHOLDER-9345)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9346]
      (apply
       str
       (mapcat
        unpack-symbol
        (re-seq (re-pattern "(\\d+)([A-Z])") PLACEHOLDER-9346)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11509
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11509))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11510]
      (reduce
       (fn*
        ([PLACEHOLDER-11511 PLACEHOLDER-11512]
         (let*
          [PLACEHOLDER-11513 (clojure.lang.RT/count PLACEHOLDER-11512)]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-11513 1)
           (str PLACEHOLDER-11511 (str (first PLACEHOLDER-11512)))
           (str
            PLACEHOLDER-11511
            PLACEHOLDER-11513
            (first PLACEHOLDER-11512))))))
       ""
       (partition-by identity PLACEHOLDER-11510)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11514]
      (let*
       [PLACEHOLDER-11516
        (partition-by
         (fn*
          ([PLACEHOLDER-11515]
           (java.lang.Character/isDigit PLACEHOLDER-11515)))
         PLACEHOLDER-11514)
        PLACEHOLDER-11518
        (reverse
         (map
          (fn* ([PLACEHOLDER-11517] (str/join "" PLACEHOLDER-11517)))
          PLACEHOLDER-11516))]
       (reduce
        (fn*
         ([PLACEHOLDER-11519 PLACEHOLDER-11520]
          (if
           (re-matches (re-pattern "\\d+") PLACEHOLDER-11520)
           (str
            (str/join
             ""
             (repeat
              (clojure.lang.Numbers/dec
               (read-string PLACEHOLDER-11520))
              (first PLACEHOLDER-11519)))
            PLACEHOLDER-11519)
           (str PLACEHOLDER-11520 PLACEHOLDER-11519))))
        ""
        PLACEHOLDER-11518))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9033
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9033))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-letters
    (fn*
     ([PLACEHOLDER-9034]
      (let*
       [PLACEHOLDER-9035
        (first PLACEHOLDER-9034)
        PLACEHOLDER-9036
        (rest PLACEHOLDER-9034)]
       (loop*
        [PLACEHOLDER-9037
         1
         PLACEHOLDER-9038
         PLACEHOLDER-9035
         PLACEHOLDER-9039
         PLACEHOLDER-9036]
        (if
         (not
          (clojure.lang.Util/equiv
           PLACEHOLDER-9038
           (first PLACEHOLDER-9039)))
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-9037 1)
          {:parsed PLACEHOLDER-9038, :rest PLACEHOLDER-9039}
          {:parsed (str PLACEHOLDER-9037 PLACEHOLDER-9038),
           :rest PLACEHOLDER-9039})
         (recur
          (clojure.lang.Numbers/add PLACEHOLDER-9037 1)
          PLACEHOLDER-9038
          (rest PLACEHOLDER-9039))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9040]
      (let*
       [PLACEHOLDER-9041 PLACEHOLDER-9040]
       (loop*
        [PLACEHOLDER-9042
         {:parsed "", :rest PLACEHOLDER-9041}
         PLACEHOLDER-9043
         (:parsed PLACEHOLDER-9042)]
        (if
         (empty? (:rest PLACEHOLDER-9042))
         (str PLACEHOLDER-9043 (:parsed PLACEHOLDER-9042))
         (recur
          (count-letters (:rest PLACEHOLDER-9042))
          (str PLACEHOLDER-9043 (:parsed PLACEHOLDER-9042)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9044]
      (loop*
       [PLACEHOLDER-9045 PLACEHOLDER-9044 PLACEHOLDER-9046 ""]
       (let*
        [PLACEHOLDER-9047
         (re-find
          (re-pattern "(^[0-9]*[a-zA-Z ])(.*)$")
          PLACEHOLDER-9045)
         PLACEHOLDER-9048
         (clojure.lang.RT/nth PLACEHOLDER-9047 0 nil)
         PLACEHOLDER-9049
         (clojure.lang.RT/nth PLACEHOLDER-9047 1 nil)
         PLACEHOLDER-9050
         (clojure.lang.RT/nth PLACEHOLDER-9047 2 nil)]
        (if
         (empty? PLACEHOLDER-9048)
         PLACEHOLDER-9046
         (let*
          [PLACEHOLDER-9051
           (re-find (re-pattern "(^[0-9]*)(.*)$") PLACEHOLDER-9049)
           PLACEHOLDER-9052
           (clojure.lang.RT/nth PLACEHOLDER-9051 0 nil)
           PLACEHOLDER-9053
           (clojure.lang.RT/nth PLACEHOLDER-9051 1 nil)
           PLACEHOLDER-9054
           (clojure.lang.RT/nth PLACEHOLDER-9051 2 nil)
           PLACEHOLDER-9055
           ((fn*
             ([]
              (if
               (empty? PLACEHOLDER-9053)
               1
               (java.lang.Integer/parseInt PLACEHOLDER-9053)))))
           PLACEHOLDER-9056
           (str
            PLACEHOLDER-9046
            (apply str (repeat PLACEHOLDER-9055 PLACEHOLDER-9054)))]
          (recur PLACEHOLDER-9050 PLACEHOLDER-9056)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9842
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9842))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    shrink-col
    (fn*
     ([PLACEHOLDER-9843]
      (let*
       [PLACEHOLDER-9844 (clojure.lang.RT/count PLACEHOLDER-9843)]
       [(if
         (clojure.lang.Numbers/gt PLACEHOLDER-9844 1)
         PLACEHOLDER-9844)
        (first PLACEHOLDER-9843)]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9845]
      (let*
       [PLACEHOLDER-9846 (partition-by identity PLACEHOLDER-9845)]
       (apply str (mapcat shrink-col PLACEHOLDER-9846))))))
   (def
    expand-col
    (fn*
     ([PLACEHOLDER-9847]
      (let*
       [PLACEHOLDER-9848
        (re-matches (re-pattern "(\\d*)(\\D)") PLACEHOLDER-9847)
        PLACEHOLDER-9849
        (clojure.lang.RT/nth PLACEHOLDER-9848 0 nil)
        PLACEHOLDER-9850
        (clojure.lang.RT/nth PLACEHOLDER-9848 1 nil)
        PLACEHOLDER-9851
        (clojure.lang.RT/nth PLACEHOLDER-9848 2 nil)
        PLACEHOLDER-9852
        (if
         (clojure.lang.Util/equiv "" PLACEHOLDER-9850)
         1
         (read-string PLACEHOLDER-9850))]
       (apply str (repeat PLACEHOLDER-9852 PLACEHOLDER-9851))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9853]
      (let*
       [PLACEHOLDER-9854
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-9853)]
       (apply str (map expand-col PLACEHOLDER-9854)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14620
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14620))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14621]
      (let*
       [PLACEHOLDER-14622
        PLACEHOLDER-14621
        PLACEHOLDER-14623
        (clojure.core/seq PLACEHOLDER-14622)
        PLACEHOLDER-14624
        (clojure.core/first PLACEHOLDER-14623)
        PLACEHOLDER-14625
        (clojure.core/next PLACEHOLDER-14623)
        PLACEHOLDER-14626
        PLACEHOLDER-14624
        PLACEHOLDER-14627
        PLACEHOLDER-14625
        PLACEHOLDER-14628
        PLACEHOLDER-14622]
       (let*
        [PLACEHOLDER-14629 PLACEHOLDER-14626]
        (if
         (seq PLACEHOLDER-14627)
         (str
          (clojure.lang.RT/count PLACEHOLDER-14628)
          PLACEHOLDER-14629)
         PLACEHOLDER-14629))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14630]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-14630))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14631]
      (let*
       [PLACEHOLDER-14632
        PLACEHOLDER-14631
        PLACEHOLDER-14633
        (clojure.lang.RT/nth PLACEHOLDER-14632 0 nil)
        PLACEHOLDER-14634
        (clojure.lang.RT/nth PLACEHOLDER-14632 1 nil)
        PLACEHOLDER-14635
        (clojure.lang.RT/nth PLACEHOLDER-14632 2 nil)]
       (let*
        [PLACEHOLDER-14636 PLACEHOLDER-14635]
        (if
         ((complement empty?) PLACEHOLDER-14634)
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-14634)
          PLACEHOLDER-14636)
         PLACEHOLDER-14636))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14637]
      (apply
       str
       (mapcat
        decode
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z ])")
         PLACEHOLDER-14637)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8403
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8403))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    one?
    (fn*
     ([PLACEHOLDER-8404]
      (clojure.lang.Util/equiv PLACEHOLDER-8404 1))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8405]
      (if
       (empty? PLACEHOLDER-8405)
       PLACEHOLDER-8405
       (let*
        [PLACEHOLDER-8406
         (partition-by identity PLACEHOLDER-8405)
         PLACEHOLDER-8407
         (into [] cat (map frequencies PLACEHOLDER-8406))]
        (join
         (map
          (fn*
           ([PLACEHOLDER-8408]
            (let*
             [PLACEHOLDER-8409
              PLACEHOLDER-8408
              PLACEHOLDER-8410
              (clojure.lang.RT/nth PLACEHOLDER-8409 0 nil)
              PLACEHOLDER-8411
              (clojure.lang.RT/nth PLACEHOLDER-8409 1 nil)]
             (str
              (if (one? PLACEHOLDER-8411) "" PLACEHOLDER-8411)
              PLACEHOLDER-8410))))
          PLACEHOLDER-8407)))))))
   (def sample "12WB12W3B24WB")
   (def
    digit?
    (fn*
     ([PLACEHOLDER-8412]
      (java.lang.Character/isDigit PLACEHOLDER-8412))))
   (def
    letter?
    (fn*
     ([PLACEHOLDER-8413]
      (java.lang.Character/isLetter PLACEHOLDER-8413))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8414]
      (loop*
       [PLACEHOLDER-8415 PLACEHOLDER-8414 PLACEHOLDER-8416 []]
       (if
        (empty? PLACEHOLDER-8415)
        (join (map (partial apply str) PLACEHOLDER-8416))
        (let*
         [PLACEHOLDER-8417
          (take-while digit? PLACEHOLDER-8415)
          PLACEHOLDER-8418
          (clojure.lang.RT/count PLACEHOLDER-8417)
          PLACEHOLDER-8419
          (take 1 (drop PLACEHOLDER-8418 PLACEHOLDER-8415))
          PLACEHOLDER-8420
          (clojure.lang.RT/count PLACEHOLDER-8419)
          PLACEHOLDER-8421
          (drop
           (clojure.lang.Numbers/add PLACEHOLDER-8418 PLACEHOLDER-8420)
           PLACEHOLDER-8415)
          PLACEHOLDER-8422
          (java.lang.Integer/parseInt
           (if
            (empty? PLACEHOLDER-8417)
            "1"
            (apply str PLACEHOLDER-8417)))
          PLACEHOLDER-8423
          (apply str PLACEHOLDER-8419)]
         (recur
          PLACEHOLDER-8421
          (conj
           PLACEHOLDER-8416
           (repeat PLACEHOLDER-8422 PLACEHOLDER-8423))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10393
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10393))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10394]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-10395]
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-10395)
             1)
            (first PLACEHOLDER-10395)
            [(clojure.lang.RT/count PLACEHOLDER-10395)
             (first PLACEHOLDER-10395)])))
         (partition-by identity PLACEHOLDER-10394)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10396] (run-length-decode PLACEHOLDER-10396 []))
     ([PLACEHOLDER-10397 PLACEHOLDER-10398]
      (if
       (empty? PLACEHOLDER-10397)
       (apply str (flatten PLACEHOLDER-10398))
       (let*
        [PLACEHOLDER-10399
         (re-find (re-pattern "^(\\d+)(\\D)(.*)") PLACEHOLDER-10397)]
        (if
         PLACEHOLDER-10399
         (let*
          [PLACEHOLDER-10400
           PLACEHOLDER-10399
           PLACEHOLDER-10401
           (clojure.lang.RT/nth PLACEHOLDER-10400 0 nil)
           PLACEHOLDER-10402
           (clojure.lang.RT/nth PLACEHOLDER-10400 1 nil)
           PLACEHOLDER-10403
           (clojure.lang.RT/nth PLACEHOLDER-10400 2 nil)
           PLACEHOLDER-10404
           (clojure.lang.RT/nth PLACEHOLDER-10400 3 nil)]
          (recur
           PLACEHOLDER-10404
           (conj
            PLACEHOLDER-10398
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-10402)
             PLACEHOLDER-10403))))
         (recur
          (.substring PLACEHOLDER-10397 1)
          (conj
           PLACEHOLDER-10398
           (.substring PLACEHOLDER-10397 0 1))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10252
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10252))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10253]
      (do
       (def
        encode-repeated-char
        (fn*
         ([PLACEHOLDER-10254]
          (let*
           [PLACEHOLDER-10255
            (clojure.lang.RT/count PLACEHOLDER-10254)
            PLACEHOLDER-10256
            (first PLACEHOLDER-10254)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-10255 1)
            PLACEHOLDER-10256
            (str PLACEHOLDER-10255 PLACEHOLDER-10256))))))
       (apply
        str
        (map
         encode-repeated-char
         (partition-by identity (seq PLACEHOLDER-10253))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10257]
      (do
       (def
        decode-repeated-char
        (fn*
         ([PLACEHOLDER-10258]
          (let*
           [PLACEHOLDER-10259
            PLACEHOLDER-10258
            PLACEHOLDER-10260
            (clojure.lang.RT/nth PLACEHOLDER-10259 0 nil)
            PLACEHOLDER-10261
            (clojure.lang.RT/nth PLACEHOLDER-10259 1 nil)
            PLACEHOLDER-10262
            (clojure.lang.RT/nth PLACEHOLDER-10261 0 nil)]
           (let*
            [PLACEHOLDER-10263
             (apply str PLACEHOLDER-10260)
             PLACEHOLDER-10264
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-10263 "")
              1
              (new Integer PLACEHOLDER-10263))]
            (repeat PLACEHOLDER-10264 PLACEHOLDER-10262))))))
       (apply
        str
        (mapcat
         decode-repeated-char
         (partition
          2
          (partition-by
           (fn*
            ([PLACEHOLDER-10265]
             (let*
              [PLACEHOLDER-10266
               (clojure.lang.Util/equiv "" PLACEHOLDER-10265)]
              (if
               PLACEHOLDER-10266
               PLACEHOLDER-10266
               (java.lang.Character/isDigit PLACEHOLDER-10265)))))
           (mapcat
            (fn*
             ([PLACEHOLDER-10267]
              (if
               (java.lang.Character/isDigit PLACEHOLDER-10267)
               (vector PLACEHOLDER-10267)
               (vector "" PLACEHOLDER-10267))))
            (seq PLACEHOLDER-10257)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9974
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9974))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    update-output
    (fn*
     ([PLACEHOLDER-9975 PLACEHOLDER-9976 PLACEHOLDER-9977]
      (str
       PLACEHOLDER-9975
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-9977 1)
        ""
        PLACEHOLDER-9977)
       PLACEHOLDER-9976))))
   (def char-to-number (fn* ([PLACEHOLDER-9978] nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-9979
       PLACEHOLDER-9980
       PLACEHOLDER-9981
       PLACEHOLDER-9982]
      (if
       (empty? PLACEHOLDER-9979)
       (update-output
        PLACEHOLDER-9982
        PLACEHOLDER-9980
        PLACEHOLDER-9981)
       (let*
        [PLACEHOLDER-9983
         PLACEHOLDER-9979
         PLACEHOLDER-9984
         (clojure.core/seq PLACEHOLDER-9983)
         PLACEHOLDER-9985
         (clojure.core/first PLACEHOLDER-9984)
         PLACEHOLDER-9986
         (clojure.core/next PLACEHOLDER-9984)
         PLACEHOLDER-9987
         PLACEHOLDER-9985
         PLACEHOLDER-9988
         PLACEHOLDER-9986]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-9987 PLACEHOLDER-9980)
         (recur
          PLACEHOLDER-9988
          PLACEHOLDER-9987
          (clojure.lang.Numbers/inc PLACEHOLDER-9981)
          PLACEHOLDER-9982)
         (recur
          PLACEHOLDER-9988
          PLACEHOLDER-9987
          1
          (update-output
           PLACEHOLDER-9982
           PLACEHOLDER-9980
           PLACEHOLDER-9981))))))))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-9989]
      (java.lang.Character/isDigit PLACEHOLDER-9989))))
   (def
    to-number
    (fn*
     ([PLACEHOLDER-9990]
      (if
       (empty? PLACEHOLDER-9990)
       1
       (new Integer (apply str PLACEHOLDER-9990))))))
   (def
    repeat-char
    (fn*
     ([PLACEHOLDER-9991 PLACEHOLDER-9992]
      (apply str (repeat PLACEHOLDER-9991 PLACEHOLDER-9992)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9993 PLACEHOLDER-9994]
      (if
       (empty? PLACEHOLDER-9993)
       PLACEHOLDER-9994
       (let*
        [PLACEHOLDER-9995
         (split-with is-digit? PLACEHOLDER-9993)
         PLACEHOLDER-9996
         (clojure.lang.RT/nth PLACEHOLDER-9995 0 nil)
         PLACEHOLDER-9997
         (clojure.lang.RT/nth PLACEHOLDER-9995 1 nil)
         PLACEHOLDER-9998
         PLACEHOLDER-9997
         PLACEHOLDER-9999
         (clojure.core/seq PLACEHOLDER-9998)
         PLACEHOLDER-10000
         (clojure.core/first PLACEHOLDER-9999)
         PLACEHOLDER-10001
         (clojure.core/next PLACEHOLDER-9999)
         PLACEHOLDER-10002
         PLACEHOLDER-10000
         PLACEHOLDER-10003
         PLACEHOLDER-10001
         PLACEHOLDER-10004
         (to-number PLACEHOLDER-9996)]
        (recur
         PLACEHOLDER-10003
         (str
          PLACEHOLDER-9994
          (repeat-char PLACEHOLDER-10004 PLACEHOLDER-10002))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10005]
      (encode PLACEHOLDER-10005 (first PLACEHOLDER-10005) 0 ""))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-10006] (decode PLACEHOLDER-10006 "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10652
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10652))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    num-chars
    (fn*
     ([PLACEHOLDER-10653]
      (let*
       [PLACEHOLDER-10654 (clojure.lang.RT/count PLACEHOLDER-10653)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-10654 1)
        PLACEHOLDER-10654)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10655]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-10656]
          (str
           (num-chars PLACEHOLDER-10656)
           (first PLACEHOLDER-10656))))
        (partition-by identity PLACEHOLDER-10655))))))
   (def
    parse-cipher-pairs
    (fn*
     ([PLACEHOLDER-10657] (parse-cipher-pairs [] PLACEHOLDER-10657))
     ([PLACEHOLDER-10658 PLACEHOLDER-10659]
      (if
       (empty? PLACEHOLDER-10659)
       PLACEHOLDER-10658
       (let*
        [PLACEHOLDER-10661
         (split-with
          (fn*
           ([PLACEHOLDER-10660]
            (java.lang.Character/isDigit
             (clojure.lang.RT/intCast PLACEHOLDER-10660))))
          PLACEHOLDER-10659)
         PLACEHOLDER-10662
         (clojure.lang.RT/nth PLACEHOLDER-10661 0 nil)
         PLACEHOLDER-10663
         (clojure.lang.RT/nth PLACEHOLDER-10661 1 nil)
         PLACEHOLDER-10664
         PLACEHOLDER-10663
         PLACEHOLDER-10665
         (clojure.core/seq PLACEHOLDER-10664)
         PLACEHOLDER-10666
         (clojure.core/first PLACEHOLDER-10665)
         PLACEHOLDER-10667
         (clojure.core/next PLACEHOLDER-10665)
         PLACEHOLDER-10668
         PLACEHOLDER-10666
         PLACEHOLDER-10669
         PLACEHOLDER-10667]
        (if
         (empty? PLACEHOLDER-10662)
         (recur
          (conj PLACEHOLDER-10658 [1 PLACEHOLDER-10668])
          PLACEHOLDER-10669)
         (let*
          [PLACEHOLDER-10670
           (read-string (str/join PLACEHOLDER-10662))]
          (recur
           (conj
            PLACEHOLDER-10658
            [PLACEHOLDER-10670 PLACEHOLDER-10668])
           PLACEHOLDER-10669))))))))
   (def
    unroll-pair
    (fn*
     ([PLACEHOLDER-10671]
      (let*
       [PLACEHOLDER-10672
        PLACEHOLDER-10671
        PLACEHOLDER-10673
        (clojure.lang.RT/nth PLACEHOLDER-10672 0 nil)
        PLACEHOLDER-10674
        (clojure.lang.RT/nth PLACEHOLDER-10672 1 nil)]
       (repeat PLACEHOLDER-10673 PLACEHOLDER-10674)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10675]
      (str/join
       (flatten
        (map unroll-pair (parse-cipher-pairs PLACEHOLDER-10675))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8091
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8091))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    unencoded-string->cnt+chars
    (fn*
     ([PLACEHOLDER-8092]
      (map
       (fn*
        ([PLACEHOLDER-8093] (update-in PLACEHOLDER-8093 [0] count)))
       (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8092)))))
   (def
    parse-count
    (fn*
     ([PLACEHOLDER-8094]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-8094)
       1
       (new Integer PLACEHOLDER-8094)))))
   (def
    encoded-string->cnt+chars
    (fn*
     ([PLACEHOLDER-8095]
      (map
       (comp
        (fn*
         ([PLACEHOLDER-8096]
          (update-in PLACEHOLDER-8096 [0] parse-count)))
        (fn* ([PLACEHOLDER-8097] (apply vector PLACEHOLDER-8097)))
        (fn* ([PLACEHOLDER-8098] (rest PLACEHOLDER-8098))))
       (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-8095)))))
   (def
    cnt+char->encoded-pair
    (fn*
     ([PLACEHOLDER-8099]
      (let*
       [PLACEHOLDER-8100
        PLACEHOLDER-8099
        PLACEHOLDER-8101
        (clojure.lang.RT/nth PLACEHOLDER-8100 0 nil)
        PLACEHOLDER-8102
        (clojure.lang.RT/nth PLACEHOLDER-8100 1 nil)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-8101 1)
        (str PLACEHOLDER-8101 PLACEHOLDER-8102)
        PLACEHOLDER-8102)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8103]
      (apply
       str
       (map
        cnt+char->encoded-pair
        (unencoded-string->cnt+chars PLACEHOLDER-8103))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8104]
      (apply
       str
       (mapcat
        (fn* ([PLACEHOLDER-8105] (apply repeat PLACEHOLDER-8105)))
        (encoded-string->cnt+chars PLACEHOLDER-8104)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8182
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8182))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8183]
      (reduce
       str
       (map
        (fn*
         ([PLACEHOLDER-8184]
          (let*
           [PLACEHOLDER-8185
            PLACEHOLDER-8184
            PLACEHOLDER-8186
            (clojure.lang.RT/nth PLACEHOLDER-8185 0 nil)
            PLACEHOLDER-8187
            (clojure.lang.RT/nth PLACEHOLDER-8185 1 nil)
            PLACEHOLDER-8188
            (clojure.lang.RT/count PLACEHOLDER-8186)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-8188 1)
             PLACEHOLDER-8188
             "")
            PLACEHOLDER-8187))))
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8183))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8189]
      (reduce
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8190]
          (let*
           [PLACEHOLDER-8191
            PLACEHOLDER-8190
            PLACEHOLDER-8192
            (clojure.lang.RT/nth PLACEHOLDER-8191 0 nil)
            PLACEHOLDER-8193
            (clojure.lang.RT/nth PLACEHOLDER-8191 1 nil)
            PLACEHOLDER-8194
            (clojure.lang.RT/nth PLACEHOLDER-8191 2 nil)
            PLACEHOLDER-8195
            (if
             (clojure.core/not (empty? PLACEHOLDER-8193))
             (java.lang.Integer/parseInt PLACEHOLDER-8193)
             1)]
           (repeat PLACEHOLDER-8195 PLACEHOLDER-8194))))
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-8189)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14784
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14784))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14785]
      (do
       (def
        iter
        (fn*
         ([PLACEHOLDER-14786
           PLACEHOLDER-14787
           PLACEHOLDER-14788
           PLACEHOLDER-14789]
          (if
           (let*
            [PLACEHOLDER-14790
             (clojure.lang.Util/equiv
              (clojure.lang.RT/count PLACEHOLDER-14787)
              0)]
            (if
             PLACEHOLDER-14790
             (clojure.lang.Numbers/lte PLACEHOLDER-14789 1)
             PLACEHOLDER-14790))
           (str PLACEHOLDER-14786 PLACEHOLDER-14788)
           (if
            (let*
             [PLACEHOLDER-14791
              (clojure.lang.Util/equiv
               (clojure.lang.RT/count PLACEHOLDER-14787)
               0)]
             (if
              PLACEHOLDER-14791
              (clojure.lang.Numbers/gt PLACEHOLDER-14789 1)
              PLACEHOLDER-14791))
            (str PLACEHOLDER-14786 PLACEHOLDER-14789 PLACEHOLDER-14788)
            (if
             (clojure.lang.Util/equiv
              (first PLACEHOLDER-14787)
              PLACEHOLDER-14788)
             (iter
              PLACEHOLDER-14786
              (rest PLACEHOLDER-14787)
              PLACEHOLDER-14788
              (clojure.lang.Numbers/add PLACEHOLDER-14789 1))
             (if
              (let*
               [PLACEHOLDER-14792
                (not
                 (clojure.lang.Util/equiv
                  (first PLACEHOLDER-14787)
                  PLACEHOLDER-14788))]
               (if
                PLACEHOLDER-14792
                (clojure.lang.Numbers/lte PLACEHOLDER-14789 1)
                PLACEHOLDER-14792))
              (iter
               (str PLACEHOLDER-14786 PLACEHOLDER-14788)
               (rest PLACEHOLDER-14787)
               (first PLACEHOLDER-14787)
               1)
              (if
               :else
               (iter
                (str
                 PLACEHOLDER-14786
                 PLACEHOLDER-14789
                 PLACEHOLDER-14788)
                (rest PLACEHOLDER-14787)
                (first PLACEHOLDER-14787)
                1)))))))))
       (iter
        ""
        (seq PLACEHOLDER-14785)
        (first PLACEHOLDER-14785)
        0)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14793]
      (do
       (def
        asdf
        (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14793)))
       (def
        iter
        (fn*
         ([PLACEHOLDER-14794
           PLACEHOLDER-14795
           PLACEHOLDER-14796
           PLACEHOLDER-14797]
          (if
           (let*
            [PLACEHOLDER-14798
             (clojure.lang.Util/equiv
              (clojure.lang.RT/count PLACEHOLDER-14795)
              0)]
            (if
             PLACEHOLDER-14798
             (clojure.lang.Numbers/gt PLACEHOLDER-14797 1)
             PLACEHOLDER-14798))
           (str
            PLACEHOLDER-14794
            (apply str (repeat PLACEHOLDER-14797 PLACEHOLDER-14796)))
           (if
            (let*
             [PLACEHOLDER-14799
              (clojure.lang.Util/equiv
               (clojure.lang.RT/count PLACEHOLDER-14795)
               0)]
             (if
              PLACEHOLDER-14799
              (clojure.lang.Numbers/lte PLACEHOLDER-14797 1)
              PLACEHOLDER-14799))
            PLACEHOLDER-14794
            (if
             (let*
              [PLACEHOLDER-14800
               (not
                (re-find
                 (re-pattern "[a-zA-Z ]")
                 (first PLACEHOLDER-14795)))]
              (if
               PLACEHOLDER-14800
               (clojure.lang.Util/equiv PLACEHOLDER-14796 -1)
               PLACEHOLDER-14800))
             (recur
              PLACEHOLDER-14794
              (rest PLACEHOLDER-14795)
              (first PLACEHOLDER-14795)
              (clojure.lang.Numbers/add
               (clojure.lang.Numbers/multiply PLACEHOLDER-14797 10)
               (java.lang.Integer/parseInt (first PLACEHOLDER-14795))))
             (if
              (not
               (re-find
                (re-pattern "[a-zA-Z ]")
                (first PLACEHOLDER-14795)))
              (recur
               PLACEHOLDER-14794
               (rest PLACEHOLDER-14795)
               -1
               (java.lang.Integer/parseInt (first PLACEHOLDER-14795)))
              (if
               :else
               (recur
                (str
                 PLACEHOLDER-14794
                 (apply
                  str
                  (repeat
                   PLACEHOLDER-14797
                   (first PLACEHOLDER-14795))))
                (rest PLACEHOLDER-14795)
                (first PLACEHOLDER-14795)
                1)))))))))
       (iter "" (map str (seq PLACEHOLDER-14793)) "" 1))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-7942
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-7942))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-7943]
      (reduce
       (fn*
        ([PLACEHOLDER-7944 PLACEHOLDER-7945]
         (apply str PLACEHOLDER-7944 PLACEHOLDER-7945)))
       ""
       (map
        (fn*
         ([PLACEHOLDER-7946]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-7946)
            1)
           PLACEHOLDER-7946
           [(clojure.lang.RT/count PLACEHOLDER-7946)
            (first PLACEHOLDER-7946)])))
        (partition-by identity PLACEHOLDER-7943))))))
   (def run-length-decode (fn* ([PLACEHOLDER-7947] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10763
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10763))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10764]
      (let*
       [PLACEHOLDER-10767
        (fn*
         ([PLACEHOLDER-10765 PLACEHOLDER-10766]
          (str
           PLACEHOLDER-10765
           (if
            (clojure.lang.Numbers/gt (last PLACEHOLDER-10766) 1)
            (last PLACEHOLDER-10766))
           (first PLACEHOLDER-10766))))]
       (reduce
        PLACEHOLDER-10767
        ""
        (reduce
         (fn*
          ([PLACEHOLDER-10768 PLACEHOLDER-10769]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-10769
             (first (last PLACEHOLDER-10768)))
            (update-in
             PLACEHOLDER-10768
             [(clojure.lang.Numbers/minus
               (clojure.lang.RT/count PLACEHOLDER-10768)
               1)
              1]
             inc)
            (conj PLACEHOLDER-10768 [PLACEHOLDER-10769 1]))))
         [[(first PLACEHOLDER-10764) 1]]
         (rest PLACEHOLDER-10764)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10770]
      (let*
       [PLACEHOLDER-10771
        (re-seq (re-pattern "\\d*[a-zA-Z\\s]{1}") PLACEHOLDER-10770)
        PLACEHOLDER-10775
        (fn*
         ([PLACEHOLDER-10772]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-10772)
            1)
           PLACEHOLDER-10772
           (apply
            str
            (apply
             (fn*
              ([PLACEHOLDER-10773 PLACEHOLDER-10774]
               (repeat
                (new Integer PLACEHOLDER-10773)
                PLACEHOLDER-10774)))
             (re-seq
              (re-pattern "\\d+|[a-zA-Z\\s]{1}")
              PLACEHOLDER-10772))))))]
       (do
        (if nil? PLACEHOLDER-10771)
        ""
        (reduce str "" (map PLACEHOLDER-10775 PLACEHOLDER-10771))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9393
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9393))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as string])
   (def
    encode
    (fn*
     ([PLACEHOLDER-9394]
      (let*
       [PLACEHOLDER-9395
        (clojure.lang.RT/count PLACEHOLDER-9394)
        PLACEHOLDER-9396
        (first PLACEHOLDER-9394)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-9395 1)
        (str PLACEHOLDER-9395 PLACEHOLDER-9396)
        PLACEHOLDER-9396)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9397]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-9397))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9398]
      (let*
       [PLACEHOLDER-9399
        (new Integer (re-find (re-pattern "\\d+") PLACEHOLDER-9398))
        PLACEHOLDER-9400
        (last (string/split PLACEHOLDER-9398 (re-pattern "\\d+")))]
       (string/join (repeat PLACEHOLDER-9399 PLACEHOLDER-9400))))))
   (def
    map-decode
    (fn*
     ([PLACEHOLDER-9401]
      (let*
       [PLACEHOLDER-9402 (last PLACEHOLDER-9401)]
       (if
        PLACEHOLDER-9402
        PLACEHOLDER-9402
        (decode (first PLACEHOLDER-9401)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9403]
      (let*
       [PLACEHOLDER-9404
        (map
         map-decode
         (re-seq
          (re-pattern "(\\d+.)|([A-z]+|\\s)")
          PLACEHOLDER-9403))]
       (string/join PLACEHOLDER-9404))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12937
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12937))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.inspector])
   (def
    get-leading-matches
    (fn*
     ([PLACEHOLDER-12938 PLACEHOLDER-12939]
      (if
       (empty? PLACEHOLDER-12939)
       0
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-12938
         (first PLACEHOLDER-12939))
        (clojure.lang.Numbers/add
         1
         (get-leading-matches
          PLACEHOLDER-12938
          (rest PLACEHOLDER-12939)))
        (if :else 0))))))
   (def
    explode-into-rep-counts
    (fn*
     ([PLACEHOLDER-12940]
      (loop*
       [PLACEHOLDER-12941 PLACEHOLDER-12940 PLACEHOLDER-12942 []]
       (if
        (empty? PLACEHOLDER-12941)
        PLACEHOLDER-12942
        (let*
         [PLACEHOLDER-12943
          (first PLACEHOLDER-12941)
          PLACEHOLDER-12944
          (get-leading-matches
           PLACEHOLDER-12943
           (rest PLACEHOLDER-12941))]
         (recur
          (subs
           PLACEHOLDER-12941
           (clojure.lang.Numbers/add 1 PLACEHOLDER-12944))
          (conj
           PLACEHOLDER-12942
           {:repeats PLACEHOLDER-12944, :c PLACEHOLDER-12943}))))))))
   (def
    number-to-vector-of-digit-chars
    (fn*
     ([PLACEHOLDER-12945]
      (into [] (concat (seq (str PLACEHOLDER-12945)) [\A \B])))))
   (def
    char-map-to-char-vector
    (fn*
     ([PLACEHOLDER-12946]
      (let*
       [PLACEHOLDER-12947
        (:c PLACEHOLDER-12946)
        PLACEHOLDER-12948
        (:repeats PLACEHOLDER-12946)]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-12948)
        [PLACEHOLDER-12947]
        (concat
         (seq (str (clojure.lang.Numbers/add 1 PLACEHOLDER-12948)))
         [PLACEHOLDER-12947]))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12949]
      (let*
       [PLACEHOLDER-12950 (explode-into-rep-counts PLACEHOLDER-12949)]
       (loop*
        [PLACEHOLDER-12951 PLACEHOLDER-12950 PLACEHOLDER-12952 '()]
        (if
         (empty? PLACEHOLDER-12951)
         (apply str PLACEHOLDER-12952)
         (let*
          [PLACEHOLDER-12953 (first PLACEHOLDER-12951)]
          (recur
           (rest PLACEHOLDER-12951)
           (concat
            PLACEHOLDER-12952
            (char-map-to-char-vector PLACEHOLDER-12953))))))))))
   (def
    member?
    (fn*
     ([PLACEHOLDER-12954 PLACEHOLDER-12955]
      (if
       (empty? PLACEHOLDER-12955)
       false
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-12954
         (first PLACEHOLDER-12955))
        true
        (member? PLACEHOLDER-12954 (rest PLACEHOLDER-12955)))))))
   (def
    numeric-character?
    (fn*
     ([PLACEHOLDER-12956]
      (member? PLACEHOLDER-12956 '(\0 \1 \2 \3 \4 \5 \6 \7 \8 \9)))))
   (def
    get-first-non-numeric-pos
    (fn*
     ([PLACEHOLDER-12957]
      (if
       (not (numeric-character? (first PLACEHOLDER-12957)))
       0
       (clojure.lang.Numbers/add
        1
        (get-first-non-numeric-pos (rest PLACEHOLDER-12957)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12958]
      (do
       (println (type PLACEHOLDER-12958))
       (if
        (empty? PLACEHOLDER-12958)
        ""
        (loop*
         [PLACEHOLDER-12959 "" PLACEHOLDER-12960 PLACEHOLDER-12958]
         (if
          (empty? PLACEHOLDER-12960)
          PLACEHOLDER-12959
          (if
           (numeric-character? (first PLACEHOLDER-12960))
           (let*
            [PLACEHOLDER-12961
             (get-first-non-numeric-pos PLACEHOLDER-12960)]
            (let*
             [PLACEHOLDER-12962
              (java.lang.Integer/parseInt
               (subs
                (apply str PLACEHOLDER-12960)
                0
                PLACEHOLDER-12961))
              PLACEHOLDER-12963
              (first
               (subs (apply str PLACEHOLDER-12960) PLACEHOLDER-12961))]
             (recur
              (str
               PLACEHOLDER-12959
               (apply
                str
                (take PLACEHOLDER-12962 (repeat PLACEHOLDER-12963))))
              (subs
               (apply str PLACEHOLDER-12960)
               (clojure.lang.Numbers/add PLACEHOLDER-12961 1)))))
           (recur
            (str PLACEHOLDER-12959 (first PLACEHOLDER-12960))
            (rest PLACEHOLDER-12960)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10970
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10970))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    find-first-num
    (fn*
     ([PLACEHOLDER-10971]
      (let*
       [PLACEHOLDER-10972
        (re-find (re-pattern "\\d+") PLACEHOLDER-10971)]
       (if
        PLACEHOLDER-10972
        (let*
         [PLACEHOLDER-10973 PLACEHOLDER-10972]
         (new Integer PLACEHOLDER-10973)))))))
   (def
    find-first-non-digit-char
    (fn*
     ([PLACEHOLDER-10974]
      (re-find (re-pattern "\\D") PLACEHOLDER-10974))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-10975 PLACEHOLDER-10976]
      (if
       (empty? PLACEHOLDER-10975)
       (conj PLACEHOLDER-10975 (str PLACEHOLDER-10976))
       (let*
        [PLACEHOLDER-10977
         (str PLACEHOLDER-10976)
         PLACEHOLDER-10978
         (first PLACEHOLDER-10975)
         PLACEHOLDER-10979
         (find-first-non-digit-char PLACEHOLDER-10978)
         PLACEHOLDER-10980
         (find-first-num PLACEHOLDER-10978)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-10977 PLACEHOLDER-10979)
         (cons
          (str
           (clojure.lang.Numbers/inc
            (let*
             [PLACEHOLDER-10981 PLACEHOLDER-10980]
             (if PLACEHOLDER-10981 PLACEHOLDER-10981 1)))
           PLACEHOLDER-10979)
          (rest PLACEHOLDER-10975))
         (conj PLACEHOLDER-10975 (str PLACEHOLDER-10977))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10982]
      (apply str (reverse (reduce encode '() PLACEHOLDER-10982))))))
   (def
    split-code-patterns
    (fn*
     ([PLACEHOLDER-10983]
      (str/split
       PLACEHOLDER-10983
       (re-pattern "(?<=\\D+)(?=\\d)|(?<=\\d+\\D)")))))
   (def
    replace-numb
    (fn*
     ([PLACEHOLDER-10984 PLACEHOLDER-10985]
      (let*
       [PLACEHOLDER-10986 (find-first-num PLACEHOLDER-10985)]
       (if
        PLACEHOLDER-10986
        (let*
         [PLACEHOLDER-10987 PLACEHOLDER-10986]
         (let*
          [PLACEHOLDER-10988
           (find-first-non-digit-char PLACEHOLDER-10985)
           PLACEHOLDER-10989
           (apply
            str
            (repeat
             (clojure.lang.Numbers/dec PLACEHOLDER-10987)
             PLACEHOLDER-10988))
           PLACEHOLDER-10990
           (str/replace
            PLACEHOLDER-10985
            (re-pattern "\\d+")
            PLACEHOLDER-10989)]
          (str PLACEHOLDER-10984 PLACEHOLDER-10990)))
        (str PLACEHOLDER-10984 PLACEHOLDER-10985))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10991]
      (reduce
       replace-numb
       ""
       (split-code-patterns PLACEHOLDER-10991))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13246
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13246))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13247]
      (let*
       [PLACEHOLDER-13248
        (partition-by identity PLACEHOLDER-13247)
        PLACEHOLDER-13250
        (map
         (fn*
          ([PLACEHOLDER-13249] ((juxt first count) PLACEHOLDER-13249)))
         PLACEHOLDER-13248)]
       (reduce
        (fn*
         ([PLACEHOLDER-13251 PLACEHOLDER-13252]
          (let*
           [PLACEHOLDER-13253
            PLACEHOLDER-13252
            PLACEHOLDER-13254
            (clojure.lang.RT/nth PLACEHOLDER-13253 0 nil)
            PLACEHOLDER-13255
            (clojure.lang.RT/nth PLACEHOLDER-13253 1 nil)]
           (let*
            [PLACEHOLDER-13256
             PLACEHOLDER-13255
             PLACEHOLDER-13257
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-13256 1)
              PLACEHOLDER-13256
              "")]
            (str
             PLACEHOLDER-13251
             PLACEHOLDER-13257
             PLACEHOLDER-13254)))))
        ""
        PLACEHOLDER-13250)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13258]
      (let*
       [PLACEHOLDER-13259
        (map
         rest
         (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13258))
        PLACEHOLDER-13264
        (map
         (fn*
          ([PLACEHOLDER-13260]
           (let*
            [PLACEHOLDER-13261
             PLACEHOLDER-13260
             PLACEHOLDER-13262
             (clojure.lang.RT/nth PLACEHOLDER-13261 0 nil)
             PLACEHOLDER-13263
             (clojure.lang.RT/nth PLACEHOLDER-13261 1 nil)]
            [(if
              (clojure.lang.Util/equiv PLACEHOLDER-13262 "")
              1
              (java.lang.Integer/parseInt PLACEHOLDER-13262))
             PLACEHOLDER-13263])))
         PLACEHOLDER-13259)]
       (reduce
        (fn*
         ([PLACEHOLDER-13265 PLACEHOLDER-13266]
          (let*
           [PLACEHOLDER-13267
            PLACEHOLDER-13266
            PLACEHOLDER-13268
            (clojure.lang.RT/nth PLACEHOLDER-13267 0 nil)
            PLACEHOLDER-13269
            (clojure.lang.RT/nth PLACEHOLDER-13267 1 nil)]
           (str
            PLACEHOLDER-13265
            (apply
             str
             (repeat PLACEHOLDER-13268 PLACEHOLDER-13269))))))
        ""
        PLACEHOLDER-13264))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11855
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11855))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-replacer
    (fn*
     ([PLACEHOLDER-11856]
      (str
       (clojure.lang.RT/count (first PLACEHOLDER-11856))
       (second PLACEHOLDER-11856)))))
   (def
    decode-replacer
    (fn*
     ([PLACEHOLDER-11857]
      (let*
       [PLACEHOLDER-11858
        (java.lang.Integer/parseInt
         (clojure.lang.RT/get PLACEHOLDER-11857 1))
        PLACEHOLDER-11859
        (clojure.lang.RT/get PLACEHOLDER-11857 2)]
       (apply str (repeat PLACEHOLDER-11858 PLACEHOLDER-11859))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11860]
      (string/replace
       PLACEHOLDER-11860
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-11861] (encode-replacer PLACEHOLDER-11861)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11862]
      (string/replace
       PLACEHOLDER-11862
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-11863] (decode-replacer PLACEHOLDER-11863))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10335
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10335))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    is-next-same?
    (fn*
     ([PLACEHOLDER-10336]
      (let*
       [PLACEHOLDER-10337
        PLACEHOLDER-10336
        PLACEHOLDER-10338
        (clojure.core/seq PLACEHOLDER-10337)
        PLACEHOLDER-10339
        (clojure.core/first PLACEHOLDER-10338)
        PLACEHOLDER-10340
        (clojure.core/next PLACEHOLDER-10338)
        PLACEHOLDER-10341
        PLACEHOLDER-10339
        PLACEHOLDER-10342
        PLACEHOLDER-10340]
       (clojure.lang.Util/equiv
        PLACEHOLDER-10341
        (first PLACEHOLDER-10342))))))
   (def
    count-same
    (fn*
     ([PLACEHOLDER-10343]
      (loop*
       [PLACEHOLDER-10344 PLACEHOLDER-10343 PLACEHOLDER-10345 1]
       (if
        (clojure.core/not (is-next-same? PLACEHOLDER-10344))
        PLACEHOLDER-10345
        (recur
         (subs PLACEHOLDER-10344 1)
         (clojure.lang.Numbers/inc PLACEHOLDER-10345)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10346]
      (loop*
       [PLACEHOLDER-10347 PLACEHOLDER-10346 PLACEHOLDER-10348 ""]
       (if
        (empty? PLACEHOLDER-10347)
        PLACEHOLDER-10348
        (let*
         [PLACEHOLDER-10349 (count-same PLACEHOLDER-10347)]
         (recur
          (subs PLACEHOLDER-10347 PLACEHOLDER-10349)
          (str
           PLACEHOLDER-10348
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-10349 1)
            ""
            PLACEHOLDER-10349)
           (first PLACEHOLDER-10347)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10350]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10351]
          (apply
           str
           (repeat
            (new
             Integer
             (if
              (clojure.lang.Util/identical
               (re-find (re-pattern "\\d+") PLACEHOLDER-10351)
               nil)
              1
              (re-find (re-pattern "\\d+") PLACEHOLDER-10351)))
            (re-find (re-pattern "[A-Z a-z]") PLACEHOLDER-10351)))))
        (re-seq (re-pattern "\\d*[A-Z a-z]") PLACEHOLDER-10350)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12807
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12807))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12808]
      (let*
       [PLACEHOLDER-12809
        (map
         first
         (re-seq (re-pattern "([a-zA-Z ])\\1*") PLACEHOLDER-12808))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12810]
           (str
            (if
             (clojure.lang.Numbers/lt
              1
              (clojure.lang.RT/count PLACEHOLDER-12810))
             (clojure.lang.RT/count PLACEHOLDER-12810))
            (first PLACEHOLDER-12810))))
         PLACEHOLDER-12809))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12811]
      (apply
       str
       (let*
        [PLACEHOLDER-12831
         (fn*
          PLACEHOLDER-12812
          ([PLACEHOLDER-12813]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-12814 PLACEHOLDER-12813]
               (let*
                [PLACEHOLDER-12815
                 (clojure.core/seq PLACEHOLDER-12814)]
                (if
                 PLACEHOLDER-12815
                 (let*
                  [PLACEHOLDER-12816 PLACEHOLDER-12815]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-12816)
                   (let*
                    [PLACEHOLDER-12817
                     (clojure.core/chunk-first PLACEHOLDER-12816)
                     PLACEHOLDER-12818
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-12817))
                     PLACEHOLDER-12819
                     (clojure.core/chunk-buffer PLACEHOLDER-12818)]
                    (if
                     (loop*
                      [PLACEHOLDER-12820 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-12820
                        PLACEHOLDER-12818)
                       (let*
                        [PLACEHOLDER-12821
                         (.nth PLACEHOLDER-12817 PLACEHOLDER-12820)
                         PLACEHOLDER-12822
                         (clojure.lang.RT/nth PLACEHOLDER-12821 0 nil)
                         PLACEHOLDER-12823
                         (clojure.lang.RT/nth PLACEHOLDER-12821 1 nil)
                         PLACEHOLDER-12824
                         (clojure.lang.RT/nth PLACEHOLDER-12821 2 nil)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-12819
                          (let*
                           [PLACEHOLDER-12825
                            (if
                             (empty? PLACEHOLDER-12823)
                             1
                             (java.lang.Integer/parseInt
                              PLACEHOLDER-12823))]
                           (apply
                            str
                            (repeat
                             PLACEHOLDER-12825
                             PLACEHOLDER-12824))))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-12820))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-12819)
                      (PLACEHOLDER-12812
                       (clojure.core/chunk-rest PLACEHOLDER-12816)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-12819)
                      nil)))
                   (let*
                    [PLACEHOLDER-12826
                     (clojure.core/first PLACEHOLDER-12816)
                     PLACEHOLDER-12827
                     (clojure.lang.RT/nth PLACEHOLDER-12826 0 nil)
                     PLACEHOLDER-12828
                     (clojure.lang.RT/nth PLACEHOLDER-12826 1 nil)
                     PLACEHOLDER-12829
                     (clojure.lang.RT/nth PLACEHOLDER-12826 2 nil)]
                    (clojure.core/cons
                     (let*
                      [PLACEHOLDER-12830
                       (if
                        (empty? PLACEHOLDER-12828)
                        1
                        (java.lang.Integer/parseInt
                         PLACEHOLDER-12828))]
                      (apply
                       str
                       (repeat PLACEHOLDER-12830 PLACEHOLDER-12829)))
                     (PLACEHOLDER-12812
                      (clojure.core/rest
                       PLACEHOLDER-12816))))))))))))))]
        (PLACEHOLDER-12831
         (re-seq
          (re-pattern "(\\d*)([a-zA-Z ])")
          PLACEHOLDER-12811))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11168
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11168))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group-with
    (fn*
     ([PLACEHOLDER-11169 PLACEHOLDER-11170]
      (reduce
       (fn*
        ([PLACEHOLDER-11171 PLACEHOLDER-11172]
         (let*
          [PLACEHOLDER-11173
           PLACEHOLDER-11171
           PLACEHOLDER-11174
           (clojure.core/seq PLACEHOLDER-11173)
           PLACEHOLDER-11175
           (clojure.core/first PLACEHOLDER-11174)
           PLACEHOLDER-11176
           (clojure.core/next PLACEHOLDER-11174)
           PLACEHOLDER-11177
           PLACEHOLDER-11175
           PLACEHOLDER-11178
           PLACEHOLDER-11176]
          (if
           (true?
            (PLACEHOLDER-11169 PLACEHOLDER-11177 PLACEHOLDER-11172))
           (conj
            PLACEHOLDER-11178
            (conj PLACEHOLDER-11177 PLACEHOLDER-11172))
           (if
            (clojure.lang.Util/identical PLACEHOLDER-11177 nil)
            (conj PLACEHOLDER-11178 (list PLACEHOLDER-11172))
            (if
             :else
             (conj
              PLACEHOLDER-11178
              PLACEHOLDER-11177
              (list PLACEHOLDER-11172))))))))
       []
       PLACEHOLDER-11170))))
   (def
    count-chars
    (fn*
     ([PLACEHOLDER-11179]
      (map
       (fn*
        ([PLACEHOLDER-11180]
         (let*
          [PLACEHOLDER-11181
           PLACEHOLDER-11180
           PLACEHOLDER-11182
           (clojure.core/seq PLACEHOLDER-11181)
           PLACEHOLDER-11183
           (clojure.core/first PLACEHOLDER-11182)
           PLACEHOLDER-11184
           (clojure.core/next PLACEHOLDER-11182)
           PLACEHOLDER-11185
           PLACEHOLDER-11183
           PLACEHOLDER-11186
           PLACEHOLDER-11184
           PLACEHOLDER-11187
           PLACEHOLDER-11181]
          (if
           (clojure.lang.Numbers/isZero
            (clojure.lang.RT/count PLACEHOLDER-11186))
           (str PLACEHOLDER-11185)
           (str
            (clojure.lang.RT/count PLACEHOLDER-11187)
            PLACEHOLDER-11185)))))
       PLACEHOLDER-11179))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11188]
      (apply
       str
       (count-chars
        (reverse
         (group-with
          (fn*
           ([PLACEHOLDER-11189 PLACEHOLDER-11190]
            (clojure.lang.Util/equiv
             (first PLACEHOLDER-11189)
             PLACEHOLDER-11190)))
          PLACEHOLDER-11188)))))))
   (def
    render
    (fn*
     ([PLACEHOLDER-11191 PLACEHOLDER-11192]
      (let*
       [PLACEHOLDER-11193
        (:count PLACEHOLDER-11191)
        PLACEHOLDER-11194
        (if
         (clojure.lang.Util/identical PLACEHOLDER-11193 nil)
         1
         (java.lang.Integer/parseInt PLACEHOLDER-11193))]
       {:count nil,
        :res
        (into
         (:res PLACEHOLDER-11191)
         (repeat PLACEHOLDER-11194 PLACEHOLDER-11192))}))))
   (def
    build
    (fn*
     ([PLACEHOLDER-11195]
      (reduce
       (fn*
        ([PLACEHOLDER-11196 PLACEHOLDER-11197]
         (if
          (java.lang.Character/isDigit PLACEHOLDER-11197)
          (assoc-in
           PLACEHOLDER-11196
           [:count]
           (str (:count PLACEHOLDER-11196) PLACEHOLDER-11197))
          (if :else (render PLACEHOLDER-11196 PLACEHOLDER-11197)))))
       {:count nil, :res []}
       PLACEHOLDER-11195))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11198]
      (apply str (:res (build PLACEHOLDER-11198)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10176
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10176))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10177]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10178]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-10178)
            1)
           (apply str PLACEHOLDER-10178)
           (str
            (clojure.lang.RT/count PLACEHOLDER-10178)
            (first PLACEHOLDER-10178)))))
        (partition-by identity PLACEHOLDER-10177))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10179]
      (let*
       [PLACEHOLDER-10181
        (partition-by
         (fn*
          ([PLACEHOLDER-10180]
           (java.lang.Character/isDigit PLACEHOLDER-10180)))
         PLACEHOLDER-10179)
        PLACEHOLDER-10182
        (partition 2 PLACEHOLDER-10181)
        PLACEHOLDER-10183
        (clojure.lang.Numbers/lt
         2
         (clojure.lang.RT/count PLACEHOLDER-10182))
        PLACEHOLDER-10194
        (apply
         str
         (map
          (fn*
           ([PLACEHOLDER-10184]
            (let*
             [PLACEHOLDER-10185
              PLACEHOLDER-10184
              PLACEHOLDER-10186
              (clojure.lang.RT/nth PLACEHOLDER-10185 0 nil)
              PLACEHOLDER-10187
              (clojure.lang.RT/nth PLACEHOLDER-10185 1 nil)
              PLACEHOLDER-10188
              (clojure.core/seq PLACEHOLDER-10187)
              PLACEHOLDER-10189
              (clojure.core/first PLACEHOLDER-10188)
              PLACEHOLDER-10190
              (clojure.core/next PLACEHOLDER-10188)
              PLACEHOLDER-10191
              PLACEHOLDER-10189
              PLACEHOLDER-10192
              PLACEHOLDER-10190]
             (let*
              [PLACEHOLDER-10193
               (java.lang.Integer/parseInt
                (apply str PLACEHOLDER-10186))]
              (apply
               str
               (flatten
                (cons
                 (repeat PLACEHOLDER-10193 PLACEHOLDER-10191)
                 PLACEHOLDER-10192)))))))
          PLACEHOLDER-10182))]
       (if PLACEHOLDER-10183 PLACEHOLDER-10194 PLACEHOLDER-10179))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11156
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11156))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11157]
      (let*
       [PLACEHOLDER-11158 (partition-by identity PLACEHOLDER-11157)]
       (s/join
        (map
         (fn*
          ([PLACEHOLDER-11159]
           (let*
            [PLACEHOLDER-11160
             (clojure.lang.RT/count PLACEHOLDER-11159)]
            (str
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-11160 1)
              ""
              PLACEHOLDER-11160)
             (first PLACEHOLDER-11159)))))
         PLACEHOLDER-11158))))))
   (def
    to-num
    (fn*
     ([PLACEHOLDER-11161]
      (let*
       [PLACEHOLDER-11162 (s/trim PLACEHOLDER-11161)]
       (if
        (empty? PLACEHOLDER-11162)
        1
        (java.lang.Integer/parseInt PLACEHOLDER-11162))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11163]
      (let*
       [PLACEHOLDER-11164
        (re-matcher (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-11163)]
       (if
        PLACEHOLDER-11164
        (let*
         [PLACEHOLDER-11165 PLACEHOLDER-11164]
         (loop*
          [PLACEHOLDER-11166
           (re-find PLACEHOLDER-11165)
           PLACEHOLDER-11167
           ""]
          (if
           (clojure.core/not PLACEHOLDER-11166)
           PLACEHOLDER-11167
           (recur
            (re-find PLACEHOLDER-11165)
            (str
             PLACEHOLDER-11167
             (apply
              str
              (repeat
               (to-num (PLACEHOLDER-11166 1))
               (PLACEHOLDER-11166 2)))))))))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9762
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9762))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9763]
      (loop*
       [PLACEHOLDER-9764 PLACEHOLDER-9763 PLACEHOLDER-9765 ""]
       (if
        (empty? PLACEHOLDER-9764)
        PLACEHOLDER-9765
        (let*
         [PLACEHOLDER-9766
          (first PLACEHOLDER-9764)
          PLACEHOLDER-9768
          (clojure.lang.RT/count
           (take-while
            (fn*
             ([PLACEHOLDER-9767]
              (clojure.lang.Util/equiv
               PLACEHOLDER-9767
               PLACEHOLDER-9766)))
            PLACEHOLDER-9764))
          PLACEHOLDER-9769
          (if
           (clojure.lang.Util/equiv 1 PLACEHOLDER-9768)
           PLACEHOLDER-9766
           (str PLACEHOLDER-9768 PLACEHOLDER-9766))
          PLACEHOLDER-9770
          (drop PLACEHOLDER-9768 PLACEHOLDER-9764)]
         (recur
          PLACEHOLDER-9770
          (str PLACEHOLDER-9765 PLACEHOLDER-9769))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9771]
      (loop*
       [PLACEHOLDER-9772 PLACEHOLDER-9771 PLACEHOLDER-9773 ""]
       (if
        (empty? PLACEHOLDER-9772)
        PLACEHOLDER-9773
        (let*
         [PLACEHOLDER-9775
          (apply
           str
           (take-while
            (fn*
             ([PLACEHOLDER-9774]
              (java.lang.Character/isDigit PLACEHOLDER-9774)))
            PLACEHOLDER-9772))
          PLACEHOLDER-9776
          (if
           (empty? PLACEHOLDER-9775)
           1
           (new Integer PLACEHOLDER-9775))
          PLACEHOLDER-9778
          (drop-while
           (fn*
            ([PLACEHOLDER-9777]
             (java.lang.Character/isDigit PLACEHOLDER-9777)))
           PLACEHOLDER-9772)
          PLACEHOLDER-9779
          (first PLACEHOLDER-9778)
          PLACEHOLDER-9780
          (apply str (repeat PLACEHOLDER-9776 PLACEHOLDER-9779))]
         (recur
          (rest PLACEHOLDER-9778)
          (str PLACEHOLDER-9773 PLACEHOLDER-9780)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9941
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9941))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9942]
      (loop*
       [PLACEHOLDER-9943 PLACEHOLDER-9942 PLACEHOLDER-9944 ""]
       (if
        (clojure.lang.Numbers/isZero
         (clojure.lang.RT/count PLACEHOLDER-9943))
        PLACEHOLDER-9944
        (let*
         [PLACEHOLDER-9946
          (split-with
           (fn*
            ([PLACEHOLDER-9945]
             (clojure.lang.Util/equiv
              (clojure.lang.RT/charCast (first PLACEHOLDER-9943))
              PLACEHOLDER-9945)))
           PLACEHOLDER-9943)
          PLACEHOLDER-9947
          (clojure.lang.RT/nth PLACEHOLDER-9946 0 nil)
          PLACEHOLDER-9948
          (clojure.lang.RT/nth PLACEHOLDER-9946 1 nil)]
         (recur
          (apply str PLACEHOLDER-9948)
          (str
           PLACEHOLDER-9944
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-9947)
             1)
            (str
             (clojure.lang.RT/count PLACEHOLDER-9947)
             (first PLACEHOLDER-9947))
            (first PLACEHOLDER-9947))))))))))
   (def number? #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9})
   (def
    chars->int
    (fn*
     ([PLACEHOLDER-9949] (new Integer (apply str PLACEHOLDER-9949)))))
   (def
    repeat-it
    (fn*
     ([PLACEHOLDER-9950 PLACEHOLDER-9951]
      (apply
       str
       (repeat (chars->int PLACEHOLDER-9950) PLACEHOLDER-9951)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9952]
      (loop*
       [PLACEHOLDER-9953 PLACEHOLDER-9952 PLACEHOLDER-9954 ""]
       (if
        (not (seq PLACEHOLDER-9953))
        PLACEHOLDER-9954
        (let*
         [PLACEHOLDER-9955
          (split-with number? PLACEHOLDER-9953)
          PLACEHOLDER-9956
          (clojure.lang.RT/nth PLACEHOLDER-9955 0 nil)
          PLACEHOLDER-9957
          (clojure.lang.RT/nth PLACEHOLDER-9955 1 nil)]
         (recur
          (rest PLACEHOLDER-9957)
          (str
           PLACEHOLDER-9954
           (if
            (seq PLACEHOLDER-9956)
            (repeat-it PLACEHOLDER-9956 (first PLACEHOLDER-9957))
            (first PLACEHOLDER-9957)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12895
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12895))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12896]
      (clojure.string/join
       (flatten
        (loop*
         [PLACEHOLDER-12897
          []
          PLACEHOLDER-12898
          []
          PLACEHOLDER-12899
          (vec PLACEHOLDER-12896)]
         (if
          (empty? PLACEHOLDER-12899)
          (conj
           PLACEHOLDER-12897
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-12898)
             1)
            [(clojure.lang.RT/count PLACEHOLDER-12898)
             (last PLACEHOLDER-12898)]
            (last PLACEHOLDER-12898)))
          (if
           (clojure.lang.Util/equiv
            (last PLACEHOLDER-12898)
            (first PLACEHOLDER-12899))
           (recur
            PLACEHOLDER-12897
            (conj PLACEHOLDER-12898 (first PLACEHOLDER-12899))
            (rest PLACEHOLDER-12899))
           (recur
            (if
             (not
              (clojure.lang.Util/identical
               (last PLACEHOLDER-12898)
               nil))
             (conj
              PLACEHOLDER-12897
              (if
               (clojure.lang.Numbers/gt
                (clojure.lang.RT/count PLACEHOLDER-12898)
                1)
               [(clojure.lang.RT/count PLACEHOLDER-12898)
                (last PLACEHOLDER-12898)]
               (last PLACEHOLDER-12898)))
             PLACEHOLDER-12897)
            (conj [] (first PLACEHOLDER-12899))
            (rest PLACEHOLDER-12899))))))))))
   (def
    add-decoded-chars
    (fn*
     ([PLACEHOLDER-12900 PLACEHOLDER-12901]
      (if
       (not (clojure.lang.Util/equiv "" PLACEHOLDER-12900))
       (clojure.string/join
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-12900)
         PLACEHOLDER-12901))
       PLACEHOLDER-12901))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12902]
      (loop*
       [PLACEHOLDER-12903
        (vec PLACEHOLDER-12902)
        PLACEHOLDER-12904
        ""
        PLACEHOLDER-12905
        ""]
       (if
        (empty? PLACEHOLDER-12903)
        (str
         PLACEHOLDER-12905
         (add-decoded-chars
          PLACEHOLDER-12904
          (first PLACEHOLDER-12903)))
        (let*
         [PLACEHOLDER-12906 (first PLACEHOLDER-12903)]
         (if
          (java.lang.Character/isDigit PLACEHOLDER-12906)
          (recur
           (rest PLACEHOLDER-12903)
           (str PLACEHOLDER-12904 PLACEHOLDER-12906)
           PLACEHOLDER-12905)
          (recur
           (rest PLACEHOLDER-12903)
           ""
           (str
            PLACEHOLDER-12905
            (add-decoded-chars
             PLACEHOLDER-12904
             PLACEHOLDER-12906)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13304
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13304))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    one->blank
    (fn*
     ([PLACEHOLDER-13305]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-13305))
       ""
       (clojure.lang.RT/count PLACEHOLDER-13305)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13306]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13307]
          (str
           (one->blank PLACEHOLDER-13307)
           (first PLACEHOLDER-13307))))
        (partition-by identity PLACEHOLDER-13306))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13308]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13309]
          (let*
           [PLACEHOLDER-13310
            PLACEHOLDER-13309
            PLACEHOLDER-13311
            (clojure.lang.RT/nth PLACEHOLDER-13310 0 nil)
            PLACEHOLDER-13312
            (clojure.lang.RT/nth PLACEHOLDER-13310 1 nil)]
           (if
            (empty? PLACEHOLDER-13311)
            PLACEHOLDER-13312
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-13311)
             PLACEHOLDER-13312)))))
        (map
         rest
         (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13308))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12594
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12594))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12595]
      (if
       (empty? PLACEHOLDER-12595)
       ""
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12596]
           (str
            (if
             (clojure.lang.Util/equiv
              1
              (clojure.lang.RT/count PLACEHOLDER-12596))
             nil
             (clojure.lang.RT/count PLACEHOLDER-12596))
            (first PLACEHOLDER-12596))))
         (str/split
          PLACEHOLDER-12595
          (re-pattern "(?<=(.))(?!\\1)"))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12597]
      (reduce
       str
       (map
        (fn* ([PLACEHOLDER-12598] (reduce str PLACEHOLDER-12598)))
        (map
         (fn*
          ([PLACEHOLDER-12599]
           (repeat
            (if
             (empty? (clojure.lang.RT/get PLACEHOLDER-12599 1))
             1
             (java.lang.Integer/parseInt
              (clojure.lang.RT/get PLACEHOLDER-12599 1)))
            (clojure.lang.RT/get PLACEHOLDER-12599 2))))
         (re-seq
          (re-pattern "(?i)(\\d*)([a-z ])")
          PLACEHOLDER-12597))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12651
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12651))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12652]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-12653]
          (str/replace PLACEHOLDER-12653 (re-pattern "^1$") "")))
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-12654]
            (seq
             (clojure.set/map-invert
              (apply merge-with + PLACEHOLDER-12654)))))
          (partition-by
           identity
           (let*
            [PLACEHOLDER-12666
             (fn*
              PLACEHOLDER-12655
              ([PLACEHOLDER-12656]
               (new
                clojure.lang.LazySeq
                (fn*
                 ([]
                  (loop*
                   [PLACEHOLDER-12657 PLACEHOLDER-12656]
                   (let*
                    [PLACEHOLDER-12658
                     (clojure.core/seq PLACEHOLDER-12657)]
                    (if
                     PLACEHOLDER-12658
                     (let*
                      [PLACEHOLDER-12659 PLACEHOLDER-12658]
                      (if
                       (clojure.core/chunked-seq? PLACEHOLDER-12659)
                       (let*
                        [PLACEHOLDER-12660
                         (clojure.core/chunk-first PLACEHOLDER-12659)
                         PLACEHOLDER-12661
                         (clojure.lang.RT/intCast
                          (clojure.lang.RT/count PLACEHOLDER-12660))
                         PLACEHOLDER-12662
                         (clojure.core/chunk-buffer PLACEHOLDER-12661)]
                        (if
                         (loop*
                          [PLACEHOLDER-12663
                           (clojure.lang.RT/intCast 0)]
                          (if
                           (clojure.lang.Numbers/lt
                            PLACEHOLDER-12663
                            PLACEHOLDER-12661)
                           (let*
                            [PLACEHOLDER-12664
                             (.nth
                              PLACEHOLDER-12660
                              PLACEHOLDER-12663)]
                            (do
                             (clojure.core/chunk-append
                              PLACEHOLDER-12662
                              {PLACEHOLDER-12664 1})
                             (recur
                              (clojure.lang.Numbers/unchecked_inc
                               PLACEHOLDER-12663))))
                           true))
                         (clojure.core/chunk-cons
                          (clojure.core/chunk PLACEHOLDER-12662)
                          (PLACEHOLDER-12655
                           (clojure.core/chunk-rest
                            PLACEHOLDER-12659)))
                         (clojure.core/chunk-cons
                          (clojure.core/chunk PLACEHOLDER-12662)
                          nil)))
                       (let*
                        [PLACEHOLDER-12665
                         (clojure.core/first PLACEHOLDER-12659)]
                        (clojure.core/cons
                         {PLACEHOLDER-12665 1}
                         (PLACEHOLDER-12655
                          (clojure.core/rest
                           PLACEHOLDER-12659))))))))))))))]
            (PLACEHOLDER-12666
             (map
              (fn* ([PLACEHOLDER-12667] (str PLACEHOLDER-12667)))
              PLACEHOLDER-12652)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12668]
      (str/join
       (flatten
        (let*
         [PLACEHOLDER-12682
          (fn*
           PLACEHOLDER-12669
           ([PLACEHOLDER-12670]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-12671 PLACEHOLDER-12670]
                (let*
                 [PLACEHOLDER-12672
                  (clojure.core/seq PLACEHOLDER-12671)]
                 (if
                  PLACEHOLDER-12672
                  (let*
                   [PLACEHOLDER-12673 PLACEHOLDER-12672]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-12673)
                    (let*
                     [PLACEHOLDER-12674
                      (clojure.core/chunk-first PLACEHOLDER-12673)
                      PLACEHOLDER-12675
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-12674))
                      PLACEHOLDER-12676
                      (clojure.core/chunk-buffer PLACEHOLDER-12675)]
                     (if
                      (loop*
                       [PLACEHOLDER-12677 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-12677
                         PLACEHOLDER-12675)
                        (let*
                         [PLACEHOLDER-12678
                          (.nth PLACEHOLDER-12674 PLACEHOLDER-12677)]
                         (do
                          (clojure.core/chunk-append
                           PLACEHOLDER-12676
                           (if
                            (clojure.lang.Numbers/gt
                             (clojure.lang.RT/count PLACEHOLDER-12678)
                             1)
                            (repeat
                             (java.lang.Integer/parseInt
                              (str/join
                               (map
                                (fn*
                                 ([PLACEHOLDER-12679]
                                  (str PLACEHOLDER-12679)))
                                (butlast PLACEHOLDER-12678))))
                             (str (last PLACEHOLDER-12678)))
                            PLACEHOLDER-12678))
                          (recur
                           (clojure.lang.Numbers/unchecked_inc
                            PLACEHOLDER-12677))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-12676)
                       (PLACEHOLDER-12669
                        (clojure.core/chunk-rest PLACEHOLDER-12673)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-12676)
                       nil)))
                    (let*
                     [PLACEHOLDER-12680
                      (clojure.core/first PLACEHOLDER-12673)]
                     (clojure.core/cons
                      (if
                       (clojure.lang.Numbers/gt
                        (clojure.lang.RT/count PLACEHOLDER-12680)
                        1)
                       (repeat
                        (java.lang.Integer/parseInt
                         (str/join
                          (map
                           (fn*
                            ([PLACEHOLDER-12681]
                             (str PLACEHOLDER-12681)))
                           (butlast PLACEHOLDER-12680))))
                        (str (last PLACEHOLDER-12680)))
                       PLACEHOLDER-12680)
                      (PLACEHOLDER-12669
                       (clojure.core/rest
                        PLACEHOLDER-12673))))))))))))))]
         (PLACEHOLDER-12682
          (str/split
           PLACEHOLDER-12668
           (re-pattern "(?<=\\D+)"))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15101
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15101))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15102]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-15103]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-15103)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-15102)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15104]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-15105]
          (let*
           [PLACEHOLDER-15106
            PLACEHOLDER-15105
            PLACEHOLDER-15107
            (clojure.lang.RT/nth PLACEHOLDER-15106 0 nil)
            PLACEHOLDER-15108
            (clojure.lang.RT/nth PLACEHOLDER-15106 1 nil)
            PLACEHOLDER-15109
            (clojure.lang.RT/nth PLACEHOLDER-15106 2 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-15108 nil)
            PLACEHOLDER-15109
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-15108)
             PLACEHOLDER-15109)))))
        (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-15104)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13680
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13680))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-if-gt-1
    (fn*
     ([PLACEHOLDER-13681]
      (let*
       [PLACEHOLDER-13682 (clojure.lang.RT/count PLACEHOLDER-13681)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-13682)
        ""
        PLACEHOLDER-13682)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13683]
      (apply
       str
       (mapcat
        (juxt count-if-gt-1 first)
        (partition-by identity PLACEHOLDER-13683))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-13684]
      (some?
       (re-matches (re-pattern "\\d") (str PLACEHOLDER-13684))))))
   (def
    repeat-token
    (fn*
     ([PLACEHOLDER-13685]
      (let*
       [PLACEHOLDER-13686
        PLACEHOLDER-13685
        PLACEHOLDER-13687
        (clojure.lang.RT/nth PLACEHOLDER-13686 0 nil)
        PLACEHOLDER-13688
        (clojure.lang.RT/nth PLACEHOLDER-13686 1 nil)]
       (let*
        [PLACEHOLDER-13689
         (split-with digit? PLACEHOLDER-13688)
         PLACEHOLDER-13690
         (clojure.lang.RT/nth PLACEHOLDER-13689 0 nil)
         PLACEHOLDER-13691
         (clojure.lang.RT/nth PLACEHOLDER-13689 1 nil)
         PLACEHOLDER-13692
         (if
          (seq PLACEHOLDER-13690)
          (java.lang.Long/parseLong (apply str PLACEHOLDER-13690))
          1)]
        [(concat
          PLACEHOLDER-13687
          (repeat PLACEHOLDER-13692 (first PLACEHOLDER-13691)))
         (rest PLACEHOLDER-13691)])))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13693]
      (apply
       str
       (ffirst
        (drop-while
         (fn* ([PLACEHOLDER-13694] (seq (last PLACEHOLDER-13694))))
         (iterate repeat-token ["" PLACEHOLDER-13693]))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10302
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10302))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10303]
      (letfn*
       [PLACEHOLDER-10304
        (fn*
         PLACEHOLDER-10305
         ([PLACEHOLDER-10306 PLACEHOLDER-10307]
          (let*
           [PLACEHOLDER-10308
            PLACEHOLDER-10306
            PLACEHOLDER-10309
            (clojure.core/seq PLACEHOLDER-10308)
            PLACEHOLDER-10310
            (clojure.core/first PLACEHOLDER-10309)
            PLACEHOLDER-10311
            (clojure.core/next PLACEHOLDER-10309)
            PLACEHOLDER-10312
            PLACEHOLDER-10310
            PLACEHOLDER-10313
            (clojure.lang.RT/nth PLACEHOLDER-10312 0 nil)
            PLACEHOLDER-10314
            (clojure.lang.RT/nth PLACEHOLDER-10312 1 nil)
            PLACEHOLDER-10315
            PLACEHOLDER-10311
            PLACEHOLDER-10316
            PLACEHOLDER-10308]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-10307
             PLACEHOLDER-10314)
            (conj
             PLACEHOLDER-10315
             [(clojure.lang.Numbers/inc PLACEHOLDER-10313)
              PLACEHOLDER-10314])
            (conj PLACEHOLDER-10316 [1 PLACEHOLDER-10307])))))]
       (let*
        [PLACEHOLDER-10317
         PLACEHOLDER-10303
         PLACEHOLDER-10318
         (reduce PLACEHOLDER-10304 '() PLACEHOLDER-10317)
         PLACEHOLDER-10319
         (reverse PLACEHOLDER-10318)
         PLACEHOLDER-10320
         (flatten PLACEHOLDER-10319)
         PLACEHOLDER-10322
         (remove
          (fn*
           ([PLACEHOLDER-10321]
            (clojure.lang.Util/equiv 1 PLACEHOLDER-10321)))
          PLACEHOLDER-10320)]
        (apply str PLACEHOLDER-10322))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10323]
      (letfn*
       [PLACEHOLDER-10324
        (fn*
         PLACEHOLDER-10325
         ([PLACEHOLDER-10326 PLACEHOLDER-10327]
          (let*
           [PLACEHOLDER-10328
            PLACEHOLDER-10326
            PLACEHOLDER-10329
            (clojure.lang.RT/nth PLACEHOLDER-10328 0 nil)
            PLACEHOLDER-10330
            (clojure.lang.RT/nth PLACEHOLDER-10328 1 nil)]
           (let*
            [PLACEHOLDER-10331
             (java.lang.Character/digit PLACEHOLDER-10327 10)]
            (if
             (clojure.lang.Util/equiv -1 PLACEHOLDER-10331)
             (if
              (clojure.lang.Util/equiv -1 PLACEHOLDER-10330)
              [(conj PLACEHOLDER-10329 PLACEHOLDER-10327) -1]
              [(apply
                conj
                PLACEHOLDER-10329
                (repeat PLACEHOLDER-10330 PLACEHOLDER-10327))
               -1])
             (if
              (clojure.lang.Util/equiv -1 PLACEHOLDER-10330)
              [PLACEHOLDER-10329 PLACEHOLDER-10331]
              [PLACEHOLDER-10329
               (clojure.lang.Numbers/add
                PLACEHOLDER-10331
                (clojure.lang.Numbers/multiply
                 10
                 PLACEHOLDER-10330))]))))))]
       (let*
        [PLACEHOLDER-10332
         PLACEHOLDER-10323
         PLACEHOLDER-10333
         (reduce PLACEHOLDER-10324 [[] -1] PLACEHOLDER-10332)
         PLACEHOLDER-10334
         (first PLACEHOLDER-10333)]
        (apply str PLACEHOLDER-10334)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13202
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13202))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13203]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-13204]
          (str
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-13204))
            ""
            (clojure.lang.RT/count PLACEHOLDER-13204))
           (first PLACEHOLDER-13204))))
        (partition-by identity PLACEHOLDER-13203))))))
   (def digits #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9})
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13205]
      (if
       (clojure.lang.Util/equiv
        0
        (clojure.lang.RT/count PLACEHOLDER-13205))
       ""
       (let*
        [PLACEHOLDER-13206
         (apply str (take-while digits PLACEHOLDER-13205))
         PLACEHOLDER-13207
         (clojure.lang.RT/count PLACEHOLDER-13206)
         PLACEHOLDER-13208
         (if
          (clojure.lang.Util/equiv 0 PLACEHOLDER-13207)
          1
          (java.lang.Integer/parseInt PLACEHOLDER-13206))
         PLACEHOLDER-13209
         (apply str (drop PLACEHOLDER-13207 PLACEHOLDER-13205))
         PLACEHOLDER-13210
         (first (take 1 PLACEHOLDER-13209))
         PLACEHOLDER-13211
         (apply str (drop 1 PLACEHOLDER-13209))
         PLACEHOLDER-13212
         (apply str (repeat PLACEHOLDER-13208 PLACEHOLDER-13210))]
        (str
         PLACEHOLDER-13212
         (run-length-decode PLACEHOLDER-13211))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10107
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10107))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10108]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10109]
          (let*
           [PLACEHOLDER-10110
            (clojure.lang.RT/count PLACEHOLDER-10109)
            PLACEHOLDER-10111
            (first PLACEHOLDER-10109)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-10110 1)
            PLACEHOLDER-10111
            (str PLACEHOLDER-10110 PLACEHOLDER-10111)))))
        (partition-by identity PLACEHOLDER-10108))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10112]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10113]
          (let*
           [PLACEHOLDER-10114
            PLACEHOLDER-10113
            PLACEHOLDER-10115
            (clojure.lang.RT/nth PLACEHOLDER-10114 0 nil)
            PLACEHOLDER-10116
            (clojure.lang.RT/nth PLACEHOLDER-10114 1 nil)
            PLACEHOLDER-10117
            (clojure.lang.RT/nth PLACEHOLDER-10114 2 nil)]
           (if
            (seq PLACEHOLDER-10116)
            (repeat (read-string PLACEHOLDER-10116) PLACEHOLDER-10117)
            PLACEHOLDER-10117))))
        (re-seq
         (re-pattern "(\\d*)([A-Za-z\\s])")
         PLACEHOLDER-10112)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11649
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11649))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11650]
      (do
       (def
        get-freq
        (fn*
         ([PLACEHOLDER-11651]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-11651 1)
           ""
           PLACEHOLDER-11651))))
       (loop*
        [PLACEHOLDER-11652
         (rest PLACEHOLDER-11650)
         PLACEHOLDER-11653
         (first PLACEHOLDER-11650)
         PLACEHOLDER-11654
         1
         PLACEHOLDER-11655
         ""]
        (if
         (empty? PLACEHOLDER-11652)
         (str
          PLACEHOLDER-11655
          (get-freq PLACEHOLDER-11654)
          PLACEHOLDER-11653)
         (if
          (clojure.lang.Util/equiv
           (first PLACEHOLDER-11652)
           PLACEHOLDER-11653)
          (recur
           (rest PLACEHOLDER-11652)
           PLACEHOLDER-11653
           (clojure.lang.Numbers/inc PLACEHOLDER-11654)
           PLACEHOLDER-11655)
          (if
           :else
           (recur
            (rest PLACEHOLDER-11652)
            (first PLACEHOLDER-11652)
            1
            (str
             PLACEHOLDER-11655
             (get-freq PLACEHOLDER-11654)
             PLACEHOLDER-11653))))))))))
   (def
    decode-char
    (fn*
     ([PLACEHOLDER-11656]
      (let*
       [PLACEHOLDER-11657
        (first (re-seq (re-pattern "\\d+") PLACEHOLDER-11656))
        PLACEHOLDER-11658
        (str (last PLACEHOLDER-11656))]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-11657 nil)
        PLACEHOLDER-11658
        (reduce
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-11657)
          PLACEHOLDER-11658)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11659]
      (reduce
       str
       (map
        decode-char
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-11659)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11224
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11224))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11225]
      (str/replace
       PLACEHOLDER-11225
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-11226]
         (let*
          [PLACEHOLDER-11227
           PLACEHOLDER-11226
           PLACEHOLDER-11228
           (clojure.lang.RT/nth PLACEHOLDER-11227 0 nil)
           PLACEHOLDER-11229
           (clojure.lang.RT/nth PLACEHOLDER-11227 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-11228)
           PLACEHOLDER-11229))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11230]
      (str/replace
       PLACEHOLDER-11230
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-11231]
         (let*
          [PLACEHOLDER-11232
           PLACEHOLDER-11231
           PLACEHOLDER-11233
           (clojure.lang.RT/nth PLACEHOLDER-11232 0 nil)
           PLACEHOLDER-11234
           (clojure.lang.RT/nth PLACEHOLDER-11232 1 nil)
           PLACEHOLDER-11235
           (clojure.lang.RT/nth PLACEHOLDER-11232 2 nil)]
          (apply
           str
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-11234)
            PLACEHOLDER-11235))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14391
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14391))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    text-to-pairs
    (fn*
     ([PLACEHOLDER-14392 PLACEHOLDER-14393 PLACEHOLDER-14394]
      (if
       (let*
        [PLACEHOLDER-14395
         (clojure.lang.Util/equiv () PLACEHOLDER-14392)]
        (if
         PLACEHOLDER-14395
         (clojure.lang.Util/identical PLACEHOLDER-14393 nil)
         PLACEHOLDER-14395))
       []
       (if
        (let*
         [PLACEHOLDER-14396
          (clojure.lang.Util/equiv () PLACEHOLDER-14392)]
         (if
          PLACEHOLDER-14396
          (not (clojure.lang.Util/identical PLACEHOLDER-14393 nil))
          PLACEHOLDER-14396))
        [[PLACEHOLDER-14393 PLACEHOLDER-14394]]
        (if
         (let*
          [PLACEHOLDER-14397 (not= () PLACEHOLDER-14392)]
          (if
           PLACEHOLDER-14397
           (clojure.lang.Util/identical PLACEHOLDER-14393 nil)
           PLACEHOLDER-14397))
         (text-to-pairs
          (rest PLACEHOLDER-14392)
          (first PLACEHOLDER-14392)
          1)
         (if
          (let*
           [PLACEHOLDER-14398 (not= () PLACEHOLDER-14392)]
           (if
            PLACEHOLDER-14398
            (clojure.lang.Util/equiv
             (first PLACEHOLDER-14392)
             PLACEHOLDER-14393)
            PLACEHOLDER-14398))
          (text-to-pairs
           (rest PLACEHOLDER-14392)
           PLACEHOLDER-14393
           (clojure.lang.Numbers/inc PLACEHOLDER-14394))
          (if
           (let*
            [PLACEHOLDER-14399 (not= () PLACEHOLDER-14392)]
            (if
             PLACEHOLDER-14399
             (not= (first PLACEHOLDER-14392) PLACEHOLDER-14393)
             PLACEHOLDER-14399))
           (conj
            (text-to-pairs
             (rest PLACEHOLDER-14392)
             (first PLACEHOLDER-14392)
             1)
            [PLACEHOLDER-14393 PLACEHOLDER-14394])))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14400]
      (apply
       str
       (let*
        [PLACEHOLDER-14401
         (reverse (text-to-pairs (seq PLACEHOLDER-14400) nil 0))]
        (let*
         [PLACEHOLDER-14417
          (fn*
           PLACEHOLDER-14402
           ([PLACEHOLDER-14403]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-14404 PLACEHOLDER-14403]
                (let*
                 [PLACEHOLDER-14405
                  (clojure.core/seq PLACEHOLDER-14404)]
                 (if
                  PLACEHOLDER-14405
                  (let*
                   [PLACEHOLDER-14406 PLACEHOLDER-14405]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-14406)
                    (let*
                     [PLACEHOLDER-14407
                      (clojure.core/chunk-first PLACEHOLDER-14406)
                      PLACEHOLDER-14408
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-14407))
                      PLACEHOLDER-14409
                      (clojure.core/chunk-buffer PLACEHOLDER-14408)]
                     (if
                      (loop*
                       [PLACEHOLDER-14410 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-14410
                         PLACEHOLDER-14408)
                        (let*
                         [PLACEHOLDER-14411
                          (.nth PLACEHOLDER-14407 PLACEHOLDER-14410)]
                         (do
                          (clojure.core/chunk-append
                           PLACEHOLDER-14409
                           (let*
                            [PLACEHOLDER-14412
                             (first PLACEHOLDER-14411)
                             PLACEHOLDER-14413
                             (last PLACEHOLDER-14411)]
                            (if
                             (clojure.lang.Numbers/gt
                              PLACEHOLDER-14413
                              1)
                             (str PLACEHOLDER-14413 PLACEHOLDER-14412)
                             PLACEHOLDER-14412)))
                          (recur
                           (clojure.lang.Numbers/unchecked_inc
                            PLACEHOLDER-14410))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-14409)
                       (PLACEHOLDER-14402
                        (clojure.core/chunk-rest PLACEHOLDER-14406)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-14409)
                       nil)))
                    (let*
                     [PLACEHOLDER-14414
                      (clojure.core/first PLACEHOLDER-14406)]
                     (clojure.core/cons
                      (let*
                       [PLACEHOLDER-14415
                        (first PLACEHOLDER-14414)
                        PLACEHOLDER-14416
                        (last PLACEHOLDER-14414)]
                       (if
                        (clojure.lang.Numbers/gt PLACEHOLDER-14416 1)
                        (str PLACEHOLDER-14416 PLACEHOLDER-14415)
                        PLACEHOLDER-14415))
                      (PLACEHOLDER-14402
                       (clojure.core/rest
                        PLACEHOLDER-14406))))))))))))))]
         (PLACEHOLDER-14417 PLACEHOLDER-14401)))))))
   (def
    repeat-char
    (fn*
     ([PLACEHOLDER-14418 PLACEHOLDER-14419]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-14419 0)
       ""
       (str
        PLACEHOLDER-14418
        (repeat-char
         PLACEHOLDER-14418
         (clojure.lang.Numbers/minus PLACEHOLDER-14419 1)))))))
   (def
    codon-to-text
    (fn*
     ([PLACEHOLDER-14420]
      (let*
       [PLACEHOLDER-14421
        (re-seq (re-pattern "[0-9]+") PLACEHOLDER-14420)]
       (let*
        [PLACEHOLDER-14422
         (if
          (clojure.lang.Util/identical PLACEHOLDER-14421 nil)
          1
          (new Integer (first PLACEHOLDER-14421)))]
        (repeat-char
         (str (last PLACEHOLDER-14420))
         PLACEHOLDER-14422))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14423]
      (apply
       str
       (map
        codon-to-text
        (re-seq (re-pattern "[0-9]*[^0-9]") PLACEHOLDER-14423)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13732
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13732))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    div-text
    (fn*
     ([PLACEHOLDER-13733]
      (loop*
       [PLACEHOLDER-13734 PLACEHOLDER-13733 PLACEHOLDER-13735 ""]
       (if
        (empty? PLACEHOLDER-13734)
        PLACEHOLDER-13735
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-13734)
          (last PLACEHOLDER-13735))
         (recur
          (rest PLACEHOLDER-13734)
          (str PLACEHOLDER-13735 (first PLACEHOLDER-13734)))
         (recur
          (rest PLACEHOLDER-13734)
          (str PLACEHOLDER-13735 ":" (first PLACEHOLDER-13734)))))))))
   (def
    delimit-text
    (fn* ([PLACEHOLDER-13736] (subs (div-text PLACEHOLDER-13736) 1))))
   (def
    map-text-count
    (fn*
     ([PLACEHOLDER-13737]
      (let*
       [PLACEHOLDER-13738
        (clojure.string/split
         (delimit-text PLACEHOLDER-13737)
         (re-pattern ":"))
        PLACEHOLDER-13739
        (map count PLACEHOLDER-13738)
        PLACEHOLDER-13740
        (map first PLACEHOLDER-13738)]
       (interleave PLACEHOLDER-13739 PLACEHOLDER-13740)))))
   (def
    make-rle
    (fn*
     ([PLACEHOLDER-13741]
      (let*
       [PLACEHOLDER-13742 (replace {1 ""} PLACEHOLDER-13741)]
       (reduce str PLACEHOLDER-13742)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13743]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-13743)
       ""
       (let*
        [PLACEHOLDER-13744 (map-text-count PLACEHOLDER-13743)]
        (make-rle PLACEHOLDER-13744))))))
   (def
    div-cipher
    (fn*
     ([PLACEHOLDER-13745]
      (loop*
       [PLACEHOLDER-13746 PLACEHOLDER-13745 PLACEHOLDER-13747 ""]
       (if
        (empty? PLACEHOLDER-13746)
        PLACEHOLDER-13747
        (if
         (integer?
          (try
           (java.lang.Integer/parseInt (str (first PLACEHOLDER-13746)))
           (catch Exception PLACEHOLDER-13748 nil)))
         (recur
          (rest PLACEHOLDER-13746)
          (str PLACEHOLDER-13747 (first PLACEHOLDER-13746)))
         (recur
          (rest PLACEHOLDER-13746)
          (str PLACEHOLDER-13747 (first PLACEHOLDER-13746) ":"))))))))
   (def
    extract
    (fn*
     ([PLACEHOLDER-13749]
      (let*
       [PLACEHOLDER-13750
        (clojure.lang.Util/equiv
         (first PLACEHOLDER-13749)
         (last PLACEHOLDER-13749))]
       (if
        PLACEHOLDER-13750
        PLACEHOLDER-13749
        (let*
         [PLACEHOLDER-13751
          (java.lang.Integer/parseInt
           (subs
            PLACEHOLDER-13749
            0
            (clojure.lang.Numbers/minus
             (clojure.lang.RT/count PLACEHOLDER-13749)
             1)))]
         (reduce
          str
          (take
           PLACEHOLDER-13751
           (repeat (str (last PLACEHOLDER-13749)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13752]
      (if
       (re-find (re-pattern "[0-9]") PLACEHOLDER-13752)
       (let*
        [PLACEHOLDER-13753
         (div-cipher PLACEHOLDER-13752)
         PLACEHOLDER-13754
         (clojure.string/split PLACEHOLDER-13753 (re-pattern ":"))
         PLACEHOLDER-13755
         (remove empty? (map extract PLACEHOLDER-13754))]
        (reduce str PLACEHOLDER-13755))
       PLACEHOLDER-13752)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9642
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9642))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9643]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9644]
          (let*
           [PLACEHOLDER-9645 (clojure.lang.RT/count PLACEHOLDER-9644)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-9645 1)
             PLACEHOLDER-9645)
            (first PLACEHOLDER-9644)))))
        (partition-by identity PLACEHOLDER-9643))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9646]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9647]
          (let*
           [PLACEHOLDER-9648
            (re-find (re-pattern "\\d*") PLACEHOLDER-9647)
            PLACEHOLDER-9649
            (last PLACEHOLDER-9647)]
           (if
            (clojure.string/blank? PLACEHOLDER-9648)
            PLACEHOLDER-9649
            (apply
             str
             (take
              (java.lang.Integer/parseInt PLACEHOLDER-9648)
              (repeatedly (fn* ([] (identity PLACEHOLDER-9649))))))))))
        (re-seq
         (re-pattern "\\d*[a-zA-Z]|\\d*\\s")
         PLACEHOLDER-9646)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9405
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9405))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9406]
      (loop*
       [PLACEHOLDER-9407
        (first PLACEHOLDER-9406)
        PLACEHOLDER-9408
        PLACEHOLDER-9406
        PLACEHOLDER-9409
        ""]
       (if
        (empty? PLACEHOLDER-9408)
        PLACEHOLDER-9409
        (let*
         [PLACEHOLDER-9411
          (take-while
           (fn*
            ([PLACEHOLDER-9410]
             (clojure.lang.Util/equiv
              PLACEHOLDER-9407
              PLACEHOLDER-9410)))
           PLACEHOLDER-9408)
          PLACEHOLDER-9413
          (drop-while
           (fn*
            ([PLACEHOLDER-9412]
             (clojure.lang.Util/equiv
              PLACEHOLDER-9407
              PLACEHOLDER-9412)))
           PLACEHOLDER-9408)
          PLACEHOLDER-9414
          (clojure.lang.RT/count PLACEHOLDER-9411)
          PLACEHOLDER-9415
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-9414 1)
           (str PLACEHOLDER-9409 PLACEHOLDER-9407)
           (str PLACEHOLDER-9409 PLACEHOLDER-9414 PLACEHOLDER-9407))]
         (recur
          (first PLACEHOLDER-9413)
          PLACEHOLDER-9413
          PLACEHOLDER-9415)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9416]
      (loop*
       [PLACEHOLDER-9417 PLACEHOLDER-9416 PLACEHOLDER-9418 ""]
       (if
        (empty? PLACEHOLDER-9417)
        PLACEHOLDER-9418
        (let*
         [PLACEHOLDER-9420
          (str/join
           (take-while
            (fn*
             ([PLACEHOLDER-9419]
              (java.lang.Character/isDigit PLACEHOLDER-9419)))
            PLACEHOLDER-9417))
          PLACEHOLDER-9421
          (if
           (empty? PLACEHOLDER-9420)
           1
           (java.lang.Integer/parseInt PLACEHOLDER-9420))
          PLACEHOLDER-9423
          (drop-while
           (fn*
            ([PLACEHOLDER-9422]
             (java.lang.Character/isDigit PLACEHOLDER-9422)))
           PLACEHOLDER-9417)
          PLACEHOLDER-9424
          (first PLACEHOLDER-9423)
          PLACEHOLDER-9425
          (next PLACEHOLDER-9423)]
         (recur
          PLACEHOLDER-9425
          (apply
           str
           PLACEHOLDER-9418
           (take PLACEHOLDER-9421 (repeat PLACEHOLDER-9424)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14235
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14235))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14236]
      (reduce
       (fn*
        ([PLACEHOLDER-14237 PLACEHOLDER-14238]
         (let*
          [PLACEHOLDER-14239
           PLACEHOLDER-14238
           PLACEHOLDER-14240
           (clojure.lang.RT/nth PLACEHOLDER-14239 0 nil)
           PLACEHOLDER-14241
           (clojure.lang.RT/nth PLACEHOLDER-14239 1 nil)]
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-14240 1)
           (str PLACEHOLDER-14237 PLACEHOLDER-14240 PLACEHOLDER-14241)
           (str PLACEHOLDER-14237 PLACEHOLDER-14241)))))
       ""
       (:result
        (reduce
         (fn*
          ([PLACEHOLDER-14242 PLACEHOLDER-14243]
           (if
            (not= PLACEHOLDER-14243 (:current PLACEHOLDER-14242))
            {:result
             (conj (:result PLACEHOLDER-14242) [1 PLACEHOLDER-14243]),
             :current PLACEHOLDER-14243}
            {:result
             (conj
              (pop (vec (:result PLACEHOLDER-14242)))
              [(clojure.lang.Numbers/inc
                (first (last (:result PLACEHOLDER-14242))))
               (last (last (:result PLACEHOLDER-14242)))]),
             :current PLACEHOLDER-14243})))
         {:string "", :result [], :current nil}
         PLACEHOLDER-14236))))))
   (def
    string-number?
    (fn*
     ([PLACEHOLDER-14244]
      (if
       (let*
        [PLACEHOLDER-14245 (not (string? PLACEHOLDER-14244))]
        (if
         PLACEHOLDER-14245
         PLACEHOLDER-14245
         (clojure.string/blank? PLACEHOLDER-14244)))
       false
       (let*
        [PLACEHOLDER-14246 (read-string PLACEHOLDER-14244)]
        (if (number? PLACEHOLDER-14246) true false))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14247]
      (reduce
       (fn*
        ([PLACEHOLDER-14248 PLACEHOLDER-14249]
         (let*
          [PLACEHOLDER-14250
           PLACEHOLDER-14249
           PLACEHOLDER-14251
           (clojure.lang.RT/nth PLACEHOLDER-14250 0 nil)
           PLACEHOLDER-14252
           (clojure.lang.RT/nth PLACEHOLDER-14250 1 nil)]
          (apply
           str
           PLACEHOLDER-14248
           (repeat
            (read-string PLACEHOLDER-14251)
            PLACEHOLDER-14252)))))
       ""
       (partition
        2
        (rest
         (:result
          (reduce
           (fn*
            ([PLACEHOLDER-14253 PLACEHOLDER-14254]
             (if
              (let*
               [PLACEHOLDER-14255 (string-number? PLACEHOLDER-14254)]
               (if
                PLACEHOLDER-14255
                (string-number? (:prev_value PLACEHOLDER-14253))
                PLACEHOLDER-14255))
              {:result
               (conj
                (pop (:result PLACEHOLDER-14253))
                (str
                 (last (:result PLACEHOLDER-14253))
                 PLACEHOLDER-14254)),
               :prev_value PLACEHOLDER-14254}
              (if
               (let*
                [PLACEHOLDER-14256
                 (string-number? (:prev_value PLACEHOLDER-14253))]
                (if
                 PLACEHOLDER-14256
                 (not (string-number? PLACEHOLDER-14254))
                 PLACEHOLDER-14256))
               {:result
                (conj (:result PLACEHOLDER-14253) PLACEHOLDER-14254),
                :prev_value PLACEHOLDER-14254}
               (if
                (let*
                 [PLACEHOLDER-14257
                  (not
                   (string-number? (:prev_value PLACEHOLDER-14253)))]
                 (if
                  PLACEHOLDER-14257
                  (not (string-number? PLACEHOLDER-14254))
                  PLACEHOLDER-14257))
                {:result
                 (conj
                  (:result PLACEHOLDER-14253)
                  "1"
                  PLACEHOLDER-14254),
                 :prev_value PLACEHOLDER-14254}
                (if
                 :else
                 {:result
                  (conj (:result PLACEHOLDER-14253) PLACEHOLDER-14254),
                  :prev_value PLACEHOLDER-14254}))))))
           {:result ["#"], :prev_value 1}
           (clojure.string/split
            PLACEHOLDER-14247
            (re-pattern "")))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13756
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13756))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13757]
      (loop*
       [PLACEHOLDER-13758
        PLACEHOLDER-13757
        PLACEHOLDER-13759
        1
        PLACEHOLDER-13760
        ""]
       (if
        (empty? PLACEHOLDER-13758)
        PLACEHOLDER-13760
        (let*
         [PLACEHOLDER-13761
          (first PLACEHOLDER-13758)
          PLACEHOLDER-13762
          (clojure.lang.Util/equiv
           PLACEHOLDER-13761
           (second PLACEHOLDER-13758))]
         (recur
          (rest PLACEHOLDER-13758)
          (if
           PLACEHOLDER-13762
           (clojure.lang.Numbers/inc PLACEHOLDER-13759)
           1)
          (if
           PLACEHOLDER-13762
           PLACEHOLDER-13760
           (str
            PLACEHOLDER-13760
            (if
             (clojure.lang.Util/equiv 1 PLACEHOLDER-13759)
             nil
             PLACEHOLDER-13759)
            PLACEHOLDER-13761)))))))))
   (def
    create-char-segment
    (fn*
     ([PLACEHOLDER-13763 PLACEHOLDER-13764]
      (apply
       str
       (repeat
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-13764 "0")
         1
         (java.lang.Integer/parseInt PLACEHOLDER-13764))
        PLACEHOLDER-13763)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13765]
      (loop*
       [PLACEHOLDER-13766
        PLACEHOLDER-13765
        PLACEHOLDER-13767
        "0"
        PLACEHOLDER-13768
        ""]
       (if
        (empty? PLACEHOLDER-13766)
        PLACEHOLDER-13768
        (let*
         [PLACEHOLDER-13769
          (first PLACEHOLDER-13766)
          PLACEHOLDER-13770
          (java.lang.Character/isDigit PLACEHOLDER-13769)]
         (recur
          (rest PLACEHOLDER-13766)
          (if
           PLACEHOLDER-13770
           (str PLACEHOLDER-13767 PLACEHOLDER-13769)
           "0")
          (if
           PLACEHOLDER-13770
           PLACEHOLDER-13768
           (format
            "%s%s"
            PLACEHOLDER-13768
            (create-char-segment
             PLACEHOLDER-13769
             PLACEHOLDER-13767)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14477
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14477))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-14478]
      (<=
       (clojure.lang.RT/intCast \0)
       (clojure.lang.RT/intCast PLACEHOLDER-14478)
       (clojure.lang.RT/intCast \9)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14479]
      (if
       (not-empty PLACEHOLDER-14479)
       (let*
        [PLACEHOLDER-14480
         (first PLACEHOLDER-14479)
         PLACEHOLDER-14482
         (take-while
          (fn*
           ([PLACEHOLDER-14481]
            (clojure.lang.Util/equiv
             PLACEHOLDER-14480
             PLACEHOLDER-14481)))
          PLACEHOLDER-14479)
         PLACEHOLDER-14483
         (clojure.lang.RT/count PLACEHOLDER-14482)]
        (str
         (if
          (clojure.lang.Numbers/lte PLACEHOLDER-14483 1)
          ""
          PLACEHOLDER-14483)
         PLACEHOLDER-14480
         (run-length-encode
          (subs PLACEHOLDER-14479 PLACEHOLDER-14483))))
       ""))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14484]
      (if
       (not-empty PLACEHOLDER-14484)
       (let*
        [PLACEHOLDER-14485
         (apply str (take-while digit? PLACEHOLDER-14484))
         PLACEHOLDER-14486
         (if
          (not-empty PLACEHOLDER-14485)
          (java.lang.Integer/parseInt PLACEHOLDER-14485)
          1)
         PLACEHOLDER-14487
         (clojure.lang.RT/get
          PLACEHOLDER-14484
          (clojure.lang.RT/count PLACEHOLDER-14485))]
        (str
         (apply str (repeat PLACEHOLDER-14486 PLACEHOLDER-14487))
         (run-length-decode
          (subs
           PLACEHOLDER-14484
           (clojure.lang.Numbers/inc
            (clojure.lang.RT/count PLACEHOLDER-14485))))))
       "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12530
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12530))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12531]
      (loop*
       [PLACEHOLDER-12532
        (first PLACEHOLDER-12531)
        PLACEHOLDER-12533
        (apply str (rest PLACEHOLDER-12531))
        PLACEHOLDER-12534
        0
        PLACEHOLDER-12535
        ""]
       (let*
        [PLACEHOLDER-12536
         (empty? PLACEHOLDER-12533)
         PLACEHOLDER-12537
         (clojure.lang.Numbers/isZero PLACEHOLDER-12534)
         PLACEHOLDER-12538
         (clojure.lang.Util/equiv
          PLACEHOLDER-12532
          (first PLACEHOLDER-12533))]
        (if
         (let*
          [PLACEHOLDER-12539 PLACEHOLDER-12536]
          (if PLACEHOLDER-12539 PLACEHOLDER-12537 PLACEHOLDER-12539))
         (str PLACEHOLDER-12535 PLACEHOLDER-12532)
         (if
          PLACEHOLDER-12536
          (str
           PLACEHOLDER-12535
           (clojure.lang.Numbers/inc PLACEHOLDER-12534)
           PLACEHOLDER-12532)
          (if
           PLACEHOLDER-12538
           (recur
            PLACEHOLDER-12532
            (rest PLACEHOLDER-12533)
            (clojure.lang.Numbers/inc PLACEHOLDER-12534)
            PLACEHOLDER-12535)
           (if
            PLACEHOLDER-12537
            (recur
             (first PLACEHOLDER-12533)
             (rest PLACEHOLDER-12533)
             0
             (str PLACEHOLDER-12535 PLACEHOLDER-12532))
            (if
             :else
             (recur
              (first PLACEHOLDER-12533)
              (rest PLACEHOLDER-12533)
              0
              (str
               PLACEHOLDER-12535
               (clojure.lang.Numbers/inc PLACEHOLDER-12534)
               PLACEHOLDER-12532))))))))))))
   (def
    seq-to-string
    (fn*
     ([PLACEHOLDER-12540]
      (if
       (clojure.lang.Util/identical (second PLACEHOLDER-12540) nil)
       (first PLACEHOLDER-12540)
       (apply
        str
        (take
         (java.lang.Integer/parseInt (first PLACEHOLDER-12540))
         (repeat (second PLACEHOLDER-12540))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12541]
      (apply
       str
       (map
        (fn* ([PLACEHOLDER-12542] (seq-to-string PLACEHOLDER-12542)))
        (map
         (fn*
          ([PLACEHOLDER-12543]
           (re-seq (re-pattern "\\d+|[\\w|\\s]") PLACEHOLDER-12543)))
         (re-seq (re-pattern "\\d*[\\w|\\s]") PLACEHOLDER-12541))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8881
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8881))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.edn :as edn])
   (require '[clojure.string :as str])
   (def
    string->common
    (fn*
     ([PLACEHOLDER-8882]
      (map
       (fn*
        ([PLACEHOLDER-8883]
         {:letter (first PLACEHOLDER-8883),
          :count (clojure.lang.RT/count PLACEHOLDER-8883)}))
       (map
        (fn* ([PLACEHOLDER-8884] (first PLACEHOLDER-8884)))
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8882))))))
   (def
    with-numbers->common
    (fn*
     ([PLACEHOLDER-8885]
      (let*
       [PLACEHOLDER-8887
        (fn*
         ([PLACEHOLDER-8886]
          (if
           (clojure.lang.Util/identical (butlast PLACEHOLDER-8886) nil)
           1
           (edn/read-string (str/join (butlast PLACEHOLDER-8886))))))]
       (map
        (fn*
         ([PLACEHOLDER-8888]
          {:letter (last PLACEHOLDER-8888),
           :count (PLACEHOLDER-8887 PLACEHOLDER-8888)}))
        (map
         first
         (re-seq
          (re-pattern "([0-9]*[A-Za-z\\s])")
          PLACEHOLDER-8885)))))))
   (def
    common->string
    (fn*
     ([PLACEHOLDER-8889]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-8890]
          (str/join
           (repeat
            (PLACEHOLDER-8890 :count)
            (PLACEHOLDER-8890 :letter)))))
        PLACEHOLDER-8889)))))
   (def
    common->with-numbers
    (fn*
     ([PLACEHOLDER-8891]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-8892]
          (str
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/get PLACEHOLDER-8892 :count)
             1)
            ""
            (clojure.lang.RT/get PLACEHOLDER-8892 :count))
           (clojure.lang.RT/get PLACEHOLDER-8892 :letter))))
        PLACEHOLDER-8891)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8893]
      (common->with-numbers (string->common PLACEHOLDER-8893)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8894]
      (common->string (with-numbers->common PLACEHOLDER-8894))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15201
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15201))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-group
    (fn*
     ([PLACEHOLDER-15202]
      (let*
       [PLACEHOLDER-15203
        (clojure.lang.RT/count PLACEHOLDER-15202)
        PLACEHOLDER-15204
        (first PLACEHOLDER-15202)]
       (str
        (if (not= 1 PLACEHOLDER-15203) PLACEHOLDER-15203)
        PLACEHOLDER-15204)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15205]
      (apply
       str
       (map encode-group (partition-by identity PLACEHOLDER-15205))))))
   (def
    decode-group
    (fn*
     ([PLACEHOLDER-15206]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-15206))
       (apply str PLACEHOLDER-15206)
       (let*
        [PLACEHOLDER-15207
         (first (re-seq (re-pattern "([0-9]+)(.)") PLACEHOLDER-15206))
         PLACEHOLDER-15208
         (clojure.lang.RT/nth PLACEHOLDER-15207 0 nil)
         PLACEHOLDER-15209
         (clojure.lang.RT/nth PLACEHOLDER-15207 1 nil)
         PLACEHOLDER-15210
         (clojure.lang.RT/nth PLACEHOLDER-15207 2 nil)]
        (apply
         str
         (repeat
          (read-string PLACEHOLDER-15209)
          PLACEHOLDER-15210)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15211]
      (let*
       [PLACEHOLDER-15212
        (re-seq (re-pattern "[0-9]*[^0-9]") PLACEHOLDER-15211)]
       (apply str (map decode-group PLACEHOLDER-15212)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10286
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10286))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10287]
      (if
       (empty? PLACEHOLDER-10287)
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-10288 PLACEHOLDER-10289]
          (let*
           [PLACEHOLDER-10290
            PLACEHOLDER-10289
            PLACEHOLDER-10291
            (clojure.lang.RT/nth PLACEHOLDER-10290 0 nil)
            PLACEHOLDER-10292
            (clojure.lang.RT/nth PLACEHOLDER-10290 1 nil)
            PLACEHOLDER-10293
            (clojure.lang.RT/nth PLACEHOLDER-10290 2 nil)]
           (let*
            [PLACEHOLDER-10294
             (clojure.lang.RT/count PLACEHOLDER-10291)]
            (str
             PLACEHOLDER-10288
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-10294 1)
              PLACEHOLDER-10292
              (format "%d%s" PLACEHOLDER-10294 PLACEHOLDER-10292)))))))
        ""
        (re-seq (re-pattern "(.)(\\1*)") PLACEHOLDER-10287))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10295]
      (if
       (empty? PLACEHOLDER-10295)
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-10296 PLACEHOLDER-10297]
          (let*
           [PLACEHOLDER-10298
            PLACEHOLDER-10297
            PLACEHOLDER-10299
            (clojure.lang.RT/nth PLACEHOLDER-10298 0 nil)
            PLACEHOLDER-10300
            (clojure.lang.RT/nth PLACEHOLDER-10298 1 nil)
            PLACEHOLDER-10301
            (clojure.lang.RT/nth PLACEHOLDER-10298 2 nil)]
           (str
            PLACEHOLDER-10296
            (if
             (empty? PLACEHOLDER-10300)
             PLACEHOLDER-10301
             (str/join
              (repeat
               (new Integer PLACEHOLDER-10300)
               PLACEHOLDER-10301)))))))
        ""
        (re-seq (re-pattern "([0-9]*)(.)") PLACEHOLDER-10295)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11367
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11367))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11368]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11369]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-11369)
             1)
            (clojure.lang.RT/count PLACEHOLDER-11369))
           (first PLACEHOLDER-11369))))
        (partition-by identity PLACEHOLDER-11368))))))
   (def
    find-repeat
    (fn*
     ([PLACEHOLDER-11370]
      (re-seq (re-pattern "\\d+[^0-9]") PLACEHOLDER-11370))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11371]
      (loop*
       [PLACEHOLDER-11372 PLACEHOLDER-11371 PLACEHOLDER-11373 0]
       (if
        (clojure.lang.Numbers/gte
         PLACEHOLDER-11373
         (clojure.lang.RT/count (find-repeat PLACEHOLDER-11371)))
        PLACEHOLDER-11372
        (recur
         (str/replace
          PLACEHOLDER-11372
          (re-pattern
           (clojure.lang.RT/nth
            (find-repeat PLACEHOLDER-11371)
            PLACEHOLDER-11373))
          (fn*
           ([PLACEHOLDER-11374]
            (apply
             str
             (take
              (new Integer (apply str (butlast PLACEHOLDER-11374)))
              (repeat (str (last PLACEHOLDER-11374))))))))
         (clojure.lang.Numbers/inc PLACEHOLDER-11373))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12832
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12832))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12833]
      (let*
       [PLACEHOLDER-12834
        (partition-by identity PLACEHOLDER-12833)
        PLACEHOLDER-12836
        (map
         (fn* ([PLACEHOLDER-12835] (first PLACEHOLDER-12835)))
         PLACEHOLDER-12834)
        PLACEHOLDER-12838
        (map
         (fn*
          ([PLACEHOLDER-12837]
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-12837)
             1)
            (clojure.lang.RT/count PLACEHOLDER-12837)
            "")))
         PLACEHOLDER-12834)]
       (apply str (map str PLACEHOLDER-12838 PLACEHOLDER-12836))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12839]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-12840]
          (let*
           [PLACEHOLDER-12841
            PLACEHOLDER-12840
            PLACEHOLDER-12842
            (clojure.lang.RT/nth PLACEHOLDER-12841 0 nil)
            PLACEHOLDER-12843
            (clojure.lang.RT/nth PLACEHOLDER-12841 1 nil)
            PLACEHOLDER-12844
            (clojure.lang.RT/nth PLACEHOLDER-12841 2 nil)]
           (repeat
            (if
             PLACEHOLDER-12843
             (java.lang.Integer/parseInt PLACEHOLDER-12843)
             1)
            PLACEHOLDER-12844))))
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-12839)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15012
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15012))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-15013 PLACEHOLDER-15014 PLACEHOLDER-15015]
      (let*
       [PLACEHOLDER-15016 PLACEHOLDER-15015]
       (case*
        PLACEHOLDER-15016
        0
        0
        (str PLACEHOLDER-15013 PLACEHOLDER-15015 PLACEHOLDER-15014)
        {0 [0 PLACEHOLDER-15013],
         1 [1 (str PLACEHOLDER-15013 PLACEHOLDER-15014)]}
        :compact
        :int
        nil)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15017]
      (let*
       [PLACEHOLDER-15018
        PLACEHOLDER-15017
        PLACEHOLDER-15019
        PLACEHOLDER-15018
        PLACEHOLDER-15020
        (clojure.core/seq PLACEHOLDER-15019)
        PLACEHOLDER-15021
        (clojure.core/first PLACEHOLDER-15020)
        PLACEHOLDER-15022
        (clojure.core/next PLACEHOLDER-15020)
        PLACEHOLDER-15023
        PLACEHOLDER-15021
        PLACEHOLDER-15024
        PLACEHOLDER-15022
        PLACEHOLDER-15025
        ""
        PLACEHOLDER-15026
        nil
        PLACEHOLDER-15027
        0]
       (loop*
        [PLACEHOLDER-15028
         PLACEHOLDER-15018
         PLACEHOLDER-15029
         PLACEHOLDER-15025
         PLACEHOLDER-15030
         PLACEHOLDER-15026
         PLACEHOLDER-15031
         PLACEHOLDER-15027]
        (let*
         [PLACEHOLDER-15032
          PLACEHOLDER-15028
          PLACEHOLDER-15033
          (clojure.core/seq PLACEHOLDER-15032)
          PLACEHOLDER-15034
          (clojure.core/first PLACEHOLDER-15033)
          PLACEHOLDER-15035
          (clojure.core/next PLACEHOLDER-15033)
          PLACEHOLDER-15036
          PLACEHOLDER-15034
          PLACEHOLDER-15037
          PLACEHOLDER-15035
          PLACEHOLDER-15038
          PLACEHOLDER-15029
          PLACEHOLDER-15039
          PLACEHOLDER-15030
          PLACEHOLDER-15040
          PLACEHOLDER-15031]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-15036 nil)
          (encode
           PLACEHOLDER-15038
           PLACEHOLDER-15039
           PLACEHOLDER-15040)
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-15039
            PLACEHOLDER-15036)
           (recur
            PLACEHOLDER-15037
            PLACEHOLDER-15038
            PLACEHOLDER-15036
            (clojure.lang.Numbers/inc PLACEHOLDER-15040))
           (if
            :else
            (recur
             PLACEHOLDER-15037
             (encode
              PLACEHOLDER-15038
              PLACEHOLDER-15039
              PLACEHOLDER-15040)
             PLACEHOLDER-15036
             1))))))))))
   (def digit? #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9})
   (def
    decode
    (fn*
     ([PLACEHOLDER-15041 PLACEHOLDER-15042 PLACEHOLDER-15043]
      (if
       (some? PLACEHOLDER-15043)
       (apply
        str
        PLACEHOLDER-15041
        (repeat
         (java.lang.Integer/valueOf PLACEHOLDER-15043)
         PLACEHOLDER-15042))
       (str PLACEHOLDER-15041 PLACEHOLDER-15042)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15044]
      (let*
       [PLACEHOLDER-15045
        PLACEHOLDER-15044
        PLACEHOLDER-15046
        PLACEHOLDER-15045
        PLACEHOLDER-15047
        (clojure.core/seq PLACEHOLDER-15046)
        PLACEHOLDER-15048
        (clojure.core/first PLACEHOLDER-15047)
        PLACEHOLDER-15049
        (clojure.core/next PLACEHOLDER-15047)
        PLACEHOLDER-15050
        PLACEHOLDER-15048
        PLACEHOLDER-15051
        PLACEHOLDER-15049
        PLACEHOLDER-15052
        ""
        PLACEHOLDER-15053
        nil]
       (loop*
        [PLACEHOLDER-15054
         PLACEHOLDER-15045
         PLACEHOLDER-15055
         PLACEHOLDER-15052
         PLACEHOLDER-15056
         PLACEHOLDER-15053]
        (let*
         [PLACEHOLDER-15057
          PLACEHOLDER-15054
          PLACEHOLDER-15058
          (clojure.core/seq PLACEHOLDER-15057)
          PLACEHOLDER-15059
          (clojure.core/first PLACEHOLDER-15058)
          PLACEHOLDER-15060
          (clojure.core/next PLACEHOLDER-15058)
          PLACEHOLDER-15061
          PLACEHOLDER-15059
          PLACEHOLDER-15062
          PLACEHOLDER-15060
          PLACEHOLDER-15063
          PLACEHOLDER-15055
          PLACEHOLDER-15064
          PLACEHOLDER-15056]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-15061 nil)
          PLACEHOLDER-15063
          (if
           (digit? PLACEHOLDER-15061)
           (recur
            PLACEHOLDER-15062
            PLACEHOLDER-15063
            (str PLACEHOLDER-15064 PLACEHOLDER-15061))
           (if
            :else
            (recur
             PLACEHOLDER-15062
             (decode
              PLACEHOLDER-15063
              PLACEHOLDER-15061
              PLACEHOLDER-15064)
             nil)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14600
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14600))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14601]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-14602]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-14602)
            1)
           (first PLACEHOLDER-14602)
           (if
            :else
            (str
             (clojure.lang.RT/count PLACEHOLDER-14602)
             (first PLACEHOLDER-14602))))))
        (partition-by identity PLACEHOLDER-14601))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14603]
      (:s
       (reduce
        (fn*
         ([PLACEHOLDER-14604 PLACEHOLDER-14605]
          (let*
           [PLACEHOLDER-14606
            PLACEHOLDER-14604
            PLACEHOLDER-14607
            (if
             (clojure.core/seq? PLACEHOLDER-14606)
             (if
              (clojure.core/next PLACEHOLDER-14606)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-14606))
              (if
               (clojure.core/seq PLACEHOLDER-14606)
               (clojure.core/first PLACEHOLDER-14606)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-14606)
            PLACEHOLDER-14608
            (clojure.lang.RT/get PLACEHOLDER-14607 :n)
            PLACEHOLDER-14609
            (clojure.lang.RT/get PLACEHOLDER-14607 :s)]
           (if
            (java.lang.Character/isDigit
             (clojure.lang.RT/intCast PLACEHOLDER-14605))
            {:n (str PLACEHOLDER-14608 PLACEHOLDER-14605),
             :s PLACEHOLDER-14609}
            (if
             :else
             {:s
              (str
               PLACEHOLDER-14609
               (str/join
                (repeat
                 (read-string
                  (let*
                   [PLACEHOLDER-14610 PLACEHOLDER-14608]
                   (if PLACEHOLDER-14610 PLACEHOLDER-14610 "1")))
                 PLACEHOLDER-14605)))})))))
        {}
        PLACEHOLDER-14603)
       "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15140
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15140))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15141]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-15142]
          (s/replace
           PLACEHOLDER-15142
           (re-pattern "^1(?=[A-Za-z ])")
           "")))
        (map
         (fn*
          ([PLACEHOLDER-15143]
           (str
            (clojure.lang.RT/count PLACEHOLDER-15143)
            (first PLACEHOLDER-15143))))
         (partition-by identity PLACEHOLDER-15141)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15144]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-15145]
          (if
           (let*
            [PLACEHOLDER-15146
             (java.lang.Character/isLetter (first PLACEHOLDER-15145))]
            (if
             PLACEHOLDER-15146
             PLACEHOLDER-15146
             (java.lang.Character/isSpace (first PLACEHOLDER-15145))))
           PLACEHOLDER-15145
           (let*
            [PLACEHOLDER-15147
             (java.lang.Integer/parseInt
              (re-find (re-pattern "\\d+") PLACEHOLDER-15145))
             PLACEHOLDER-15148
             (re-find (re-pattern "[A-Za-z ]") PLACEHOLDER-15145)]
            (apply
             str
             (take PLACEHOLDER-15147 (cycle PLACEHOLDER-15148)))))))
        (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-15144)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8211
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8211))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    re-one-or-more
    (fn* ([PLACEHOLDER-8212] (re-pattern (str PLACEHOLDER-8212 "+")))))
   (def
    starting-char-chain
    (fn*
     ([PLACEHOLDER-8213]
      (re-find
       (re-one-or-more (first PLACEHOLDER-8213))
       PLACEHOLDER-8213))))
   (def
    starting-rl-element
    (fn*
     ([PLACEHOLDER-8214]
      (re-find (re-pattern "[0-9]*[a-zA-Z\\s]") PLACEHOLDER-8214))))
   (def
    rl-encode-char-chain-count
    (fn*
     ([PLACEHOLDER-8215]
      (let*
       [PLACEHOLDER-8216 (clojure.lang.RT/count PLACEHOLDER-8215)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-8216 1)
        ""
        PLACEHOLDER-8216)))))
   (def
    rl-decode-rl-element-count
    (fn*
     ([PLACEHOLDER-8217]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-8217))
       1
       (java.lang.Integer/parseInt
        (clojure.string/join (drop-last PLACEHOLDER-8217)))))))
   (def
    rl-encode-char-chain
    (fn*
     ([PLACEHOLDER-8218]
      (str
       (rl-encode-char-chain-count PLACEHOLDER-8218)
       (first PLACEHOLDER-8218)))))
   (def
    rl-decode-rl-element
    (fn*
     ([PLACEHOLDER-8219]
      (clojure.string/join
       (repeat
        (rl-decode-rl-element-count PLACEHOLDER-8219)
        (last PLACEHOLDER-8219))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8220]
      (loop*
       [PLACEHOLDER-8221 PLACEHOLDER-8220 PLACEHOLDER-8222 ""]
       (if
        (empty? PLACEHOLDER-8221)
        PLACEHOLDER-8222
        (let*
         [PLACEHOLDER-8223 (starting-char-chain PLACEHOLDER-8221)]
         (recur
          (subs
           PLACEHOLDER-8221
           (clojure.lang.RT/count PLACEHOLDER-8223))
          (str
           PLACEHOLDER-8222
           (rl-encode-char-chain PLACEHOLDER-8223)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8224]
      (loop*
       [PLACEHOLDER-8225 PLACEHOLDER-8224 PLACEHOLDER-8226 ""]
       (if
        (empty? PLACEHOLDER-8225)
        PLACEHOLDER-8226
        (let*
         [PLACEHOLDER-8227 (starting-rl-element PLACEHOLDER-8225)]
         (recur
          (subs
           PLACEHOLDER-8225
           (clojure.lang.RT/count PLACEHOLDER-8227))
          (str
           PLACEHOLDER-8226
           (rl-decode-rl-element PLACEHOLDER-8227))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12443
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12443))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    extract-consecutive-reps
    (partial re-seq (re-pattern "([\\sa-zA-Z])\\1*")))
   (def
    extract-encoded-reps
    (partial re-seq (re-pattern "(:?\\d+)?[\\sa-zA-Z]")))
   (def
    compress-string
    (fn*
     ([PLACEHOLDER-12444]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-12444))
       PLACEHOLDER-12444
       (str
        (clojure.lang.RT/count PLACEHOLDER-12444)
        (clojure.lang.RT/nth PLACEHOLDER-12444 0))))))
   (def
    expand-string
    (fn*
     ([PLACEHOLDER-12445]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-12445))
       PLACEHOLDER-12445
       (let*
        [PLACEHOLDER-12446
         (new Integer (re-find (re-pattern "\\d+") PLACEHOLDER-12445))
         PLACEHOLDER-12447
         (re-find (re-pattern "[\\sa-zA-Z]") PLACEHOLDER-12445)]
        (apply
         str
         (take PLACEHOLDER-12446 (repeat PLACEHOLDER-12447))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12448]
      (apply
       str
       (map
        compress-string
        (map
         (fn*
          ([PLACEHOLDER-12449]
           (clojure.lang.RT/nth PLACEHOLDER-12449 0)))
         (extract-consecutive-reps PLACEHOLDER-12448)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12450]
      (apply
       str
       (map
        expand-string
        (map
         (fn*
          ([PLACEHOLDER-12451]
           (clojure.lang.RT/nth PLACEHOLDER-12451 0)))
         (extract-encoded-reps PLACEHOLDER-12450))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12768
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12768))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12769]
      (loop*
       [PLACEHOLDER-12770
        nil
        PLACEHOLDER-12771
        0
        PLACEHOLDER-12772
        ""
        PLACEHOLDER-12773
        PLACEHOLDER-12769]
       (let*
        [PLACEHOLDER-12774 (first PLACEHOLDER-12773)]
        (if
         PLACEHOLDER-12774
         (let*
          [PLACEHOLDER-12775 PLACEHOLDER-12774]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-12770
            PLACEHOLDER-12775)
           (recur
            PLACEHOLDER-12775
            (clojure.lang.Numbers/inc PLACEHOLDER-12771)
            PLACEHOLDER-12772
            (rest PLACEHOLDER-12773))
           (recur
            PLACEHOLDER-12775
            1
            (str
             PLACEHOLDER-12772
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-12771 1)
              PLACEHOLDER-12771)
             PLACEHOLDER-12770)
            (rest PLACEHOLDER-12773))))
         (if
          PLACEHOLDER-12770
          (str
           PLACEHOLDER-12772
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-12771 1)
            PLACEHOLDER-12771)
           PLACEHOLDER-12770)
          PLACEHOLDER-12772)))))))
   (def
    digits-end-index
    (fn*
     ([PLACEHOLDER-12776 PLACEHOLDER-12777]
      (if
       (java.lang.Character/isDigit
        (clojure.lang.RT/nth PLACEHOLDER-12776 PLACEHOLDER-12777))
       (loop*
        [PLACEHOLDER-12778 PLACEHOLDER-12777]
        (if
         (let*
          [PLACEHOLDER-12779
           (clojure.lang.Numbers/lt
            PLACEHOLDER-12778
            (clojure.lang.RT/count PLACEHOLDER-12776))]
          (if
           PLACEHOLDER-12779
           (java.lang.Character/isDigit
            (clojure.lang.RT/nth PLACEHOLDER-12776 PLACEHOLDER-12778))
           PLACEHOLDER-12779))
         (recur (clojure.lang.Numbers/inc PLACEHOLDER-12778))
         PLACEHOLDER-12778))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12780]
      (let*
       [PLACEHOLDER-12781 (clojure.lang.RT/count PLACEHOLDER-12780)]
       (loop*
        [PLACEHOLDER-12782 0 PLACEHOLDER-12783 ""]
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-12782 PLACEHOLDER-12781)
         (let*
          [PLACEHOLDER-12784
           (digits-end-index PLACEHOLDER-12780 PLACEHOLDER-12782)]
          (if
           PLACEHOLDER-12784
           (let*
            [PLACEHOLDER-12785 PLACEHOLDER-12784]
            (let*
             [PLACEHOLDER-12786
              (java.lang.Integer/valueOf
               (subs
                PLACEHOLDER-12780
                PLACEHOLDER-12782
                PLACEHOLDER-12785))]
             (do
              (println
               PLACEHOLDER-12786
               "of"
               (clojure.lang.RT/nth
                PLACEHOLDER-12780
                PLACEHOLDER-12785))
              (recur
               (clojure.lang.Numbers/inc PLACEHOLDER-12785)
               (apply
                str
                PLACEHOLDER-12783
                (repeat
                 PLACEHOLDER-12786
                 (clojure.lang.RT/nth
                  PLACEHOLDER-12780
                  PLACEHOLDER-12785)))))))
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-12782)
            (str
             PLACEHOLDER-12783
             (clojure.lang.RT/nth
              PLACEHOLDER-12780
              PLACEHOLDER-12782)))))
         PLACEHOLDER-12783))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12019
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12019))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as str])
   (def
    test-string
    "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB")
   (def test-encode "2AB3CD4E")
   (def
    nil-match
    (fn*
     ([PLACEHOLDER-12020]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-12020 nil)
       1
       (identity PLACEHOLDER-12020)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12021]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-12021)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12022]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-12023]
          (let*
           [PLACEHOLDER-12024
            PLACEHOLDER-12023
            PLACEHOLDER-12025
            (clojure.lang.RT/nth PLACEHOLDER-12024 0 nil)
            PLACEHOLDER-12026
            (clojure.lang.RT/nth PLACEHOLDER-12024 1 nil)
            PLACEHOLDER-12027
            (clojure.lang.RT/nth PLACEHOLDER-12024 2 nil)]
           (repeat
            (bigint (nil-match PLACEHOLDER-12026))
            PLACEHOLDER-12027))))
        (re-seq (re-pattern "(\\d+)?(\\D)") PLACEHOLDER-12022)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9200
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9200))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-letter-run
    (fn*
     ([PLACEHOLDER-9201]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-9201))
       (str (first PLACEHOLDER-9201))
       (if
        :else
        (str
         (clojure.lang.RT/count PLACEHOLDER-9201)
         (first PLACEHOLDER-9201)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9202]
      (loop*
       [PLACEHOLDER-9203 "" PLACEHOLDER-9204 PLACEHOLDER-9202]
       (if
        (empty? PLACEHOLDER-9204)
        PLACEHOLDER-9203
        (let*
         [PLACEHOLDER-9205 (first PLACEHOLDER-9204)]
         (recur
          (str
           PLACEHOLDER-9203
           (encode-letter-run
            (take-while
             (fn*
              ([PLACEHOLDER-9206]
               (clojure.lang.Util/equiv
                PLACEHOLDER-9205
                PLACEHOLDER-9206)))
             PLACEHOLDER-9204)))
          (drop-while
           (fn*
            ([PLACEHOLDER-9207]
             (clojure.lang.Util/equiv
              PLACEHOLDER-9205
              PLACEHOLDER-9207)))
           PLACEHOLDER-9204))))))))
   (def
    expand-single-decode
    (fn*
     ([PLACEHOLDER-9208 PLACEHOLDER-9209]
      (apply str (repeat PLACEHOLDER-9209 PLACEHOLDER-9208)))))
   (def
    is-digit
    (fn*
     ([PLACEHOLDER-9210]
      (java.lang.Character/isDigit PLACEHOLDER-9210))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9211]
      (loop*
       [PLACEHOLDER-9212 "" PLACEHOLDER-9213 PLACEHOLDER-9211]
       (if
        (empty? PLACEHOLDER-9213)
        PLACEHOLDER-9212
        (let*
         [PLACEHOLDER-9215
          (take-while
           (fn* ([PLACEHOLDER-9214] (is-digit PLACEHOLDER-9214)))
           PLACEHOLDER-9213)
          PLACEHOLDER-9216
          (if
           (clojure.core/not (empty? PLACEHOLDER-9215))
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-9215))
           1)
          PLACEHOLDER-9218
          (first
           (drop-while
            (fn* ([PLACEHOLDER-9217] (is-digit PLACEHOLDER-9217)))
            PLACEHOLDER-9213))]
         (recur
          (str
           PLACEHOLDER-9212
           (expand-single-decode PLACEHOLDER-9218 PLACEHOLDER-9216))
          (rest
           (drop-while
            (fn* ([PLACEHOLDER-9219] (is-digit PLACEHOLDER-9219)))
            PLACEHOLDER-9213))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12415
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12415))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress-token
    (fn*
     ([PLACEHOLDER-12416]
      (str
       (if
        (next PLACEHOLDER-12416)
        (clojure.lang.RT/count PLACEHOLDER-12416))
       (first PLACEHOLDER-12416)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12417]
      (apply
       str
       (map
        compress-token
        (partition-by identity PLACEHOLDER-12417))))))
   (def
    expand-token
    (fn*
     ([PLACEHOLDER-12418]
      (let*
       [PLACEHOLDER-12419
        (clojure.lang.Numbers/dec
         (clojure.lang.RT/count PLACEHOLDER-12418))
        PLACEHOLDER-12420
        (if
         (clojure.core/not
          (clojure.lang.Numbers/isZero PLACEHOLDER-12419))
         (java.lang.Integer/parseInt
          (subs PLACEHOLDER-12418 0 PLACEHOLDER-12419))
         1)
        PLACEHOLDER-12421
        (clojure.lang.RT/nth PLACEHOLDER-12418 PLACEHOLDER-12419)]
       (repeat PLACEHOLDER-12420 PLACEHOLDER-12421)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12422]
      (apply
       str
       (mapcat
        expand-token
        (re-seq (re-pattern "\\d*[A-Za-z ]") PLACEHOLDER-12422)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10026
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10026))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-10027]
      (let*
       [PLACEHOLDER-10028
        (clojure.lang.RT/count PLACEHOLDER-10027)
        PLACEHOLDER-10029
        (first PLACEHOLDER-10027)]
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-10028 1)
        PLACEHOLDER-10029
        (str PLACEHOLDER-10028 PLACEHOLDER-10029))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-10030]
      (letfn*
       [PLACEHOLDER-10031
        (fn*
         PLACEHOLDER-10032
         ([PLACEHOLDER-10033]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-10033))
           1
           (java.lang.Integer/parseInt
            (subs
             PLACEHOLDER-10033
             0
             (clojure.lang.Numbers/minus
              (clojure.lang.RT/count PLACEHOLDER-10033)
              1))))))]
       (let*
        [PLACEHOLDER-10034
         (PLACEHOLDER-10031 PLACEHOLDER-10030)
         PLACEHOLDER-10035
         (last PLACEHOLDER-10030)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-10034 1)
         PLACEHOLDER-10035
         (apply
          str
          (take PLACEHOLDER-10034 (repeat PLACEHOLDER-10035)))))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-10036]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-10036 nil)
       false
       (let*
        [PLACEHOLDER-10037
         (clojure.lang.Numbers/gte
          (clojure.lang.RT/intCast PLACEHOLDER-10036)
          (clojure.lang.RT/intCast \0))]
        (if
         PLACEHOLDER-10037
         (clojure.lang.Numbers/lte
          (clojure.lang.RT/intCast PLACEHOLDER-10036)
          (clojure.lang.RT/intCast \9))
         PLACEHOLDER-10037))))))
   (def
    process-encode-token
    (fn*
     ([PLACEHOLDER-10038 PLACEHOLDER-10039]
      (if
       (clojure.lang.Util/equiv
        (last PLACEHOLDER-10038)
        PLACEHOLDER-10039)
       {:flush nil, :token (str PLACEHOLDER-10038 PLACEHOLDER-10039)}
       {:flush (encode PLACEHOLDER-10038),
        :token (str PLACEHOLDER-10039)}))))
   (def
    process-decode-token
    (fn*
     ([PLACEHOLDER-10040 PLACEHOLDER-10041]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-10040 nil)
       {:flush nil, :token (str PLACEHOLDER-10041)}
       (if
        (let*
         [PLACEHOLDER-10042 (digit? (last PLACEHOLDER-10040))]
         (if
          PLACEHOLDER-10042
          (digit? PLACEHOLDER-10041)
          PLACEHOLDER-10042))
        {:flush nil, :token (str PLACEHOLDER-10040 PLACEHOLDER-10041)}
        (if
         (let*
          [PLACEHOLDER-10043 (digit? (last PLACEHOLDER-10040))]
          (if
           PLACEHOLDER-10043
           (not (digit? PLACEHOLDER-10041))
           PLACEHOLDER-10043))
         {:flush (decode (str PLACEHOLDER-10040 PLACEHOLDER-10041)),
          :token nil}
         (if
          (not (digit? (last PLACEHOLDER-10040)))
          {:flush PLACEHOLDER-10040,
           :token (str PLACEHOLDER-10041)})))))))
   (def
    walk-symbols
    (fn*
     ([PLACEHOLDER-10044
       PLACEHOLDER-10045
       PLACEHOLDER-10046
       PLACEHOLDER-10047
       PLACEHOLDER-10048]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-10044 nil)
       (str
        PLACEHOLDER-10047
        (clojure.lang.RT/get
         (PLACEHOLDER-10048 PLACEHOLDER-10046 PLACEHOLDER-10044)
         :flush))
       (let*
        [PLACEHOLDER-10049
         (PLACEHOLDER-10048 PLACEHOLDER-10046 PLACEHOLDER-10044)]
        (recur
         (first PLACEHOLDER-10045)
         (rest PLACEHOLDER-10045)
         (clojure.lang.RT/get PLACEHOLDER-10049 :token)
         (str
          PLACEHOLDER-10047
          (clojure.lang.RT/get PLACEHOLDER-10049 :flush))
         PLACEHOLDER-10048))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10050]
      (walk-symbols
       (first PLACEHOLDER-10050)
       (rest PLACEHOLDER-10050)
       ""
       ""
       process-encode-token))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10051]
      (walk-symbols
       (first PLACEHOLDER-10051)
       (rest PLACEHOLDER-10051)
       ""
       ""
       process-decode-token)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14963
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14963))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    str->encoded-map
    (fn*
     ([PLACEHOLDER-14964]
      (reduce
       (fn*
        ([PLACEHOLDER-14965 PLACEHOLDER-14966]
         (let*
          [PLACEHOLDER-14967
           (last PLACEHOLDER-14965)
           PLACEHOLDER-14968
           (clojure.lang.RT/nth PLACEHOLDER-14967 0 nil)
           PLACEHOLDER-14969
           (clojure.lang.RT/nth PLACEHOLDER-14967 1 nil)]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-14966
            PLACEHOLDER-14968)
           (conj
            (into [] (drop-last PLACEHOLDER-14965))
            [PLACEHOLDER-14968
             (clojure.lang.Numbers/inc PLACEHOLDER-14969)])
           (conj PLACEHOLDER-14965 [PLACEHOLDER-14966 1])))))
       []
       (into
        []
        (re-seq (re-pattern "[A-Za-z\\s]") PLACEHOLDER-14964))))))
   (def
    encoded-map->str
    (fn*
     ([PLACEHOLDER-14970]
      (reduce
       (fn*
        ([PLACEHOLDER-14971 PLACEHOLDER-14972]
         (let*
          [PLACEHOLDER-14973
           PLACEHOLDER-14972
           PLACEHOLDER-14974
           (clojure.lang.RT/nth PLACEHOLDER-14973 0 nil)
           PLACEHOLDER-14975
           (clojure.lang.RT/nth PLACEHOLDER-14973 1 nil)]
          (str
           PLACEHOLDER-14971
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-14975 1)
            PLACEHOLDER-14974
            (str PLACEHOLDER-14975 PLACEHOLDER-14974))))))
       ""
       PLACEHOLDER-14970))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14976]
      (encoded-map->str (str->encoded-map PLACEHOLDER-14976)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14977]
      (reduce
       (fn*
        ([PLACEHOLDER-14978 PLACEHOLDER-14979]
         (str
          PLACEHOLDER-14978
          (apply
           str
           (repeat
            (if
             (empty? (drop-last PLACEHOLDER-14979))
             1
             (java.lang.Integer/parseInt
              (apply str (drop-last PLACEHOLDER-14979))))
            (str (last PLACEHOLDER-14979)))))))
       ""
       (re-seq
        (re-pattern "(?:\\d+)?[A-Za-z\\s]")
        PLACEHOLDER-14977))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14325
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14325))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14326]
      (apply
       str
       (filter
        (fn* ([PLACEHOLDER-14327] (not= 1 PLACEHOLDER-14327)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-14326)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14328]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14329]
          (let*
           [PLACEHOLDER-14330
            PLACEHOLDER-14329
            PLACEHOLDER-14331
            (clojure.lang.RT/nth PLACEHOLDER-14330 0 nil)
            PLACEHOLDER-14332
            (clojure.lang.RT/nth PLACEHOLDER-14330 1 nil)
            PLACEHOLDER-14333
            (clojure.lang.RT/nth PLACEHOLDER-14330 2 nil)]
           (if
            (not (clojure.lang.Util/identical PLACEHOLDER-14332 nil))
            (repeat (bigint PLACEHOLDER-14332) PLACEHOLDER-14333)
            PLACEHOLDER-14333))))
        (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-14328)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11335
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11335))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    rle-add
    (fn*
     ([PLACEHOLDER-11336 PLACEHOLDER-11337 PLACEHOLDER-11338]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-11338 nil)
       PLACEHOLDER-11336
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11337 1)
        (conj PLACEHOLDER-11336 PLACEHOLDER-11338)
        (if
         :else
         (conj
          PLACEHOLDER-11336
          PLACEHOLDER-11337
          PLACEHOLDER-11338)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11339]
      (string/join
       (loop*
        [PLACEHOLDER-11340
         []
         PLACEHOLDER-11341
         PLACEHOLDER-11339
         PLACEHOLDER-11342
         nil
         PLACEHOLDER-11343
         0]
        (if
         (empty? PLACEHOLDER-11341)
         (rle-add
          PLACEHOLDER-11340
          PLACEHOLDER-11343
          PLACEHOLDER-11342)
         (if
          (clojure.lang.Util/equiv
           (first PLACEHOLDER-11341)
           PLACEHOLDER-11342)
          (recur
           PLACEHOLDER-11340
           (rest PLACEHOLDER-11341)
           PLACEHOLDER-11342
           (clojure.lang.Numbers/inc PLACEHOLDER-11343))
          (recur
           (rle-add
            PLACEHOLDER-11340
            PLACEHOLDER-11343
            PLACEHOLDER-11342)
           (rest PLACEHOLDER-11341)
           (first PLACEHOLDER-11341)
           1))))))))
   (def
    split-leading-digits
    (fn*
     ([PLACEHOLDER-11344]
      (split-with
       (fn*
        ([PLACEHOLDER-11345]
         (java.lang.Character/isDigit PLACEHOLDER-11345)))
       PLACEHOLDER-11344))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11346]
      (string/join
       (loop*
        [PLACEHOLDER-11347 [] PLACEHOLDER-11348 PLACEHOLDER-11346]
        (if
         (empty? PLACEHOLDER-11348)
         PLACEHOLDER-11347
         (let*
          [PLACEHOLDER-11349
           (split-leading-digits PLACEHOLDER-11348)
           PLACEHOLDER-11350
           (clojure.lang.RT/nth PLACEHOLDER-11349 0 nil)
           PLACEHOLDER-11351
           (clojure.lang.RT/nth PLACEHOLDER-11349 1 nil)]
          (if
           (empty? PLACEHOLDER-11350)
           (recur
            (conj PLACEHOLDER-11347 (first PLACEHOLDER-11351))
            (rest PLACEHOLDER-11351))
           (let*
            [PLACEHOLDER-11352
             (java.lang.Integer/parseInt
              (string/join PLACEHOLDER-11350))]
            (recur
             (into
              PLACEHOLDER-11347
              (repeat PLACEHOLDER-11352 (first PLACEHOLDER-11351)))
             (rest PLACEHOLDER-11351))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12388
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12388))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    to-digit
    (fn*
     ([PLACEHOLDER-12389]
      (clojure.lang.Numbers/minus
       (clojure.lang.RT/intCast PLACEHOLDER-12389)
       48))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-12390]
      (let*
       [PLACEHOLDER-12391
        (clojure.lang.Numbers/gte
         (clojure.lang.RT/intCast PLACEHOLDER-12390)
         48)]
       (if
        PLACEHOLDER-12391
        (clojure.lang.Numbers/lte
         (clojure.lang.RT/intCast PLACEHOLDER-12390)
         57)
        PLACEHOLDER-12391)))))
   (def
    emit
    (fn*
     ([PLACEHOLDER-12392 PLACEHOLDER-12393]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-12392)
       ""
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-12392)
        PLACEHOLDER-12393
        (if :else (str PLACEHOLDER-12392 PLACEHOLDER-12393)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12394]
      (loop*
       [PLACEHOLDER-12395
        ""
        PLACEHOLDER-12396
        nil
        PLACEHOLDER-12397
        0
        PLACEHOLDER-12398
        PLACEHOLDER-12394]
       (if
        (empty? PLACEHOLDER-12398)
        (str
         PLACEHOLDER-12395
         (emit PLACEHOLDER-12397 PLACEHOLDER-12396))
        (let*
         [PLACEHOLDER-12399 (first PLACEHOLDER-12398)]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-12396 PLACEHOLDER-12399)
          (recur
           PLACEHOLDER-12395
           PLACEHOLDER-12396
           (clojure.lang.Numbers/inc PLACEHOLDER-12397)
           (rest PLACEHOLDER-12398))
          (if
           (clojure.lang.Util/identical PLACEHOLDER-12396 nil)
           (recur
            PLACEHOLDER-12395
            PLACEHOLDER-12399
            1
            (rest PLACEHOLDER-12398))
           (recur
            (str
             PLACEHOLDER-12395
             (emit PLACEHOLDER-12397 PLACEHOLDER-12396))
            PLACEHOLDER-12399
            1
            (rest PLACEHOLDER-12398))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12400]
      (loop*
       [PLACEHOLDER-12401
        ""
        PLACEHOLDER-12402
        0
        PLACEHOLDER-12403
        PLACEHOLDER-12400]
       (if
        (empty? PLACEHOLDER-12403)
        PLACEHOLDER-12401
        (let*
         [PLACEHOLDER-12404 (first PLACEHOLDER-12403)]
         (if
          (digit? PLACEHOLDER-12404)
          (recur
           PLACEHOLDER-12401
           (clojure.lang.Numbers/add
            (to-digit PLACEHOLDER-12404)
            (clojure.lang.Numbers/multiply PLACEHOLDER-12402 10))
           (rest PLACEHOLDER-12403))
          (if
           (clojure.lang.Numbers/isZero PLACEHOLDER-12402)
           (recur
            (str PLACEHOLDER-12401 PLACEHOLDER-12404)
            0
            (rest PLACEHOLDER-12403))
           (recur
            (str
             PLACEHOLDER-12401
             (clojure.string/join
              ""
              (repeat PLACEHOLDER-12402 PLACEHOLDER-12404)))
            0
            (rest PLACEHOLDER-12403)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13121
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13121))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-subs
    (fn*
     ([PLACEHOLDER-13122]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-13122)
        1)
       PLACEHOLDER-13122
       (str
        (clojure.lang.RT/count PLACEHOLDER-13122)
        (first PLACEHOLDER-13122))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13123]
      (str/join
       (mapcat
        encode-subs
        (partition-by identity PLACEHOLDER-13123))))))
   (def
    decode-subs
    (fn*
     ([PLACEHOLDER-13124 PLACEHOLDER-13125]
      (if
       (empty? PLACEHOLDER-13125)
       PLACEHOLDER-13124
       (str/join
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-13125)
         PLACEHOLDER-13124))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-13126]
      (java.lang.Character/isDigit PLACEHOLDER-13126))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13127]
      (loop*
       [PLACEHOLDER-13128 PLACEHOLDER-13127 PLACEHOLDER-13129 ""]
       (let*
        [PLACEHOLDER-13130
         (split-with digit? PLACEHOLDER-13128)
         PLACEHOLDER-13131
         (clojure.lang.RT/nth PLACEHOLDER-13130 0 nil)
         PLACEHOLDER-13132
         (clojure.lang.RT/nth PLACEHOLDER-13130 1 nil)]
        (if
         (empty? (rest PLACEHOLDER-13132))
         (str
          PLACEHOLDER-13129
          (decode-subs
           (first PLACEHOLDER-13132)
           (str/join PLACEHOLDER-13131)))
         (recur
          (rest PLACEHOLDER-13132)
          (str
           PLACEHOLDER-13129
           (decode-subs
            (first PLACEHOLDER-13132)
            (str/join PLACEHOLDER-13131)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15093
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15093))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15094]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-15094)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15095]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-15096]
          (let*
           [PLACEHOLDER-15097
            PLACEHOLDER-15096
            PLACEHOLDER-15098
            (clojure.lang.RT/nth PLACEHOLDER-15097 0 nil)
            PLACEHOLDER-15099
            (clojure.lang.RT/nth PLACEHOLDER-15097 1 nil)]
           (repeat
            (read-string
             (let*
              [PLACEHOLDER-15100 PLACEHOLDER-15098]
              (if PLACEHOLDER-15100 PLACEHOLDER-15100 "1")))
            PLACEHOLDER-15099))))
        (map
         rest
         (re-seq
          (re-pattern "(\\d+)?([A-Za-z\\s])")
          PLACEHOLDER-15095))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10794
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10794))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encoder-values
    (fn*
     ([PLACEHOLDER-10795]
      (let*
       [PLACEHOLDER-10796
        PLACEHOLDER-10795
        PLACEHOLDER-10797
        (clojure.lang.RT/nth PLACEHOLDER-10796 0 nil)
        PLACEHOLDER-10798
        (clojure.lang.RT/nth PLACEHOLDER-10796 1 nil)]
       (str
        (if
         (clojure.lang.Numbers/gt
          (clojure.lang.RT/count PLACEHOLDER-10797)
          1)
         (clojure.lang.RT/count PLACEHOLDER-10797)
         "")
        PLACEHOLDER-10798)))))
   (def
    decoder-values
    (fn*
     ([PLACEHOLDER-10799]
      (let*
       [PLACEHOLDER-10800
        PLACEHOLDER-10799
        PLACEHOLDER-10801
        (clojure.lang.RT/nth PLACEHOLDER-10800 0 nil)
        PLACEHOLDER-10802
        (clojure.lang.RT/nth PLACEHOLDER-10800 1 nil)
        PLACEHOLDER-10803
        (clojure.lang.RT/nth PLACEHOLDER-10800 2 nil)
        PLACEHOLDER-10804
        (clojure.lang.RT/nth PLACEHOLDER-10800 3 nil)]
       (apply
        str
        (if
         (clojure.lang.Util/identical PLACEHOLDER-10804 nil)
         (repeat (read-string PLACEHOLDER-10802) PLACEHOLDER-10803)
         PLACEHOLDER-10804))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10805]
      (let*
       [PLACEHOLDER-10806
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-10805)]
       (apply str (map encoder-values PLACEHOLDER-10806))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10807]
      (let*
       [PLACEHOLDER-10808
        (re-seq (re-pattern "(\\d+)(.)|(\\D)") PLACEHOLDER-10807)]
       (apply str (map decoder-values PLACEHOLDER-10808)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12028
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12028))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12029]
      (let*
       [PLACEHOLDER-12030 (partition-by identity PLACEHOLDER-12029)]
       (clojure.string/join
        (let*
         [PLACEHOLDER-12042
          (fn*
           PLACEHOLDER-12031
           ([PLACEHOLDER-12032]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-12033 PLACEHOLDER-12032]
                (let*
                 [PLACEHOLDER-12034
                  (clojure.core/seq PLACEHOLDER-12033)]
                 (if
                  PLACEHOLDER-12034
                  (let*
                   [PLACEHOLDER-12035 PLACEHOLDER-12034]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-12035)
                    (let*
                     [PLACEHOLDER-12036
                      (clojure.core/chunk-first PLACEHOLDER-12035)
                      PLACEHOLDER-12037
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-12036))
                      PLACEHOLDER-12038
                      (clojure.core/chunk-buffer PLACEHOLDER-12037)]
                     (if
                      (loop*
                       [PLACEHOLDER-12039 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-12039
                         PLACEHOLDER-12037)
                        (let*
                         [PLACEHOLDER-12040
                          (.nth PLACEHOLDER-12036 PLACEHOLDER-12039)]
                         (do
                          (clojure.core/chunk-append
                           PLACEHOLDER-12038
                           (clojure.string/join
                            (str
                             (if
                              (clojure.lang.Numbers/gt
                               (clojure.lang.RT/count
                                PLACEHOLDER-12040)
                               1)
                              (clojure.lang.RT/count PLACEHOLDER-12040)
                              "")
                             (str
                              (clojure.lang.RT/nth
                               PLACEHOLDER-12040
                               0)))))
                          (recur
                           (clojure.lang.Numbers/unchecked_inc
                            PLACEHOLDER-12039))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-12038)
                       (PLACEHOLDER-12031
                        (clojure.core/chunk-rest PLACEHOLDER-12035)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-12038)
                       nil)))
                    (let*
                     [PLACEHOLDER-12041
                      (clojure.core/first PLACEHOLDER-12035)]
                     (clojure.core/cons
                      (clojure.string/join
                       (str
                        (if
                         (clojure.lang.Numbers/gt
                          (clojure.lang.RT/count PLACEHOLDER-12041)
                          1)
                         (clojure.lang.RT/count PLACEHOLDER-12041)
                         "")
                        (str
                         (clojure.lang.RT/nth PLACEHOLDER-12041 0))))
                      (PLACEHOLDER-12031
                       (clojure.core/rest
                        PLACEHOLDER-12035))))))))))))))]
         (PLACEHOLDER-12042 PLACEHOLDER-12030)))))))
   (def
    parse
    (fn*
     ([PLACEHOLDER-12043]
      (let*
       [PLACEHOLDER-12044
        (re-find (re-pattern "^(\\d*)(.)(.*)") PLACEHOLDER-12043)
        PLACEHOLDER-12045
        (clojure.lang.RT/nth PLACEHOLDER-12044 1)
        PLACEHOLDER-12046
        (if
         (empty? PLACEHOLDER-12045)
         1
         (read-string PLACEHOLDER-12045))
        PLACEHOLDER-12047
        (clojure.lang.RT/nth PLACEHOLDER-12044 2)
        PLACEHOLDER-12048
        (clojure.lang.RT/nth PLACEHOLDER-12044 3)]
       [(clojure.string/join
         (repeat PLACEHOLDER-12046 PLACEHOLDER-12047))
        PLACEHOLDER-12048]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12049]
      (loop*
       [PLACEHOLDER-12050 PLACEHOLDER-12049 PLACEHOLDER-12051 ""]
       (if
        (empty? PLACEHOLDER-12050)
        PLACEHOLDER-12051
        (let*
         [PLACEHOLDER-12052 (parse PLACEHOLDER-12050)]
         (recur
          (last PLACEHOLDER-12052)
          (str PLACEHOLDER-12051 (first PLACEHOLDER-12052))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12964
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12964))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group
    (fn*
     ([PLACEHOLDER-12965]
      (loop*
       [PLACEHOLDER-12966 [] PLACEHOLDER-12967 PLACEHOLDER-12965]
       (if
        (empty? PLACEHOLDER-12967)
        PLACEHOLDER-12966
        (recur
         (conj
          PLACEHOLDER-12966
          (take-while
           (partial = (first PLACEHOLDER-12967))
           PLACEHOLDER-12967))
         (drop-while
          (partial = (first PLACEHOLDER-12967))
          PLACEHOLDER-12967)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12968]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12969]
          (let*
           [PLACEHOLDER-12970
            (clojure.lang.RT/count PLACEHOLDER-12969)
            PLACEHOLDER-12971
            (first PLACEHOLDER-12969)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-12970 1)
            PLACEHOLDER-12971
            (str PLACEHOLDER-12970 PLACEHOLDER-12971)))))
        (group PLACEHOLDER-12968))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-12972]
      (let*
       [PLACEHOLDER-12973
        (butlast PLACEHOLDER-12972)
        PLACEHOLDER-12974
        (last PLACEHOLDER-12972)]
       (if
        PLACEHOLDER-12973
        (let*
         [PLACEHOLDER-12975
          (java.lang.Integer/parseInt (apply str PLACEHOLDER-12973))]
         (apply str (repeat PLACEHOLDER-12975 PLACEHOLDER-12974)))
        PLACEHOLDER-12972)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12976]
      (apply
       str
       (map
        expand
        (re-seq (re-pattern "\\d*[^\\d]") PLACEHOLDER-12976)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13353
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13353))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13354]
      (apply
       str
       (filter
        (fn*
         ([PLACEHOLDER-13355]
          (let*
           [PLACEHOLDER-13356 (not (number? PLACEHOLDER-13355))]
           (if
            PLACEHOLDER-13356
            PLACEHOLDER-13356
            (clojure.lang.Numbers/lt 1 PLACEHOLDER-13355)))))
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-13357]
            (list
             (clojure.lang.RT/count PLACEHOLDER-13357)
             (first PLACEHOLDER-13357))))
          (partition-by identity PLACEHOLDER-13354))))))))
   (def
    parseInt
    (fn*
     ([PLACEHOLDER-13358]
      (java.lang.Integer/parseInt PLACEHOLDER-13358))))
   (def
    decode-match
    (fn*
     ([PLACEHOLDER-13359]
      (let*
       [PLACEHOLDER-13360
        PLACEHOLDER-13359
        PLACEHOLDER-13361
        (clojure.lang.RT/nth PLACEHOLDER-13360 0 nil)
        PLACEHOLDER-13362
        (clojure.lang.RT/nth PLACEHOLDER-13360 1 nil)
        PLACEHOLDER-13363
        (clojure.lang.RT/nth PLACEHOLDER-13360 2 nil)]
       (if
        (empty? PLACEHOLDER-13362)
        PLACEHOLDER-13363
        (let*
         [PLACEHOLDER-13364 (parseInt PLACEHOLDER-13362)]
         (repeat PLACEHOLDER-13364 PLACEHOLDER-13363)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13365]
      (apply
       str
       (flatten
        (map
         decode-match
         (re-seq
          (re-pattern "(\\d*)([^\\d])")
          PLACEHOLDER-13365))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14724
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14724))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    format-group
    (fn*
     ([PLACEHOLDER-14725]
      (let*
       [PLACEHOLDER-14726
        (clojure.lang.RT/count PLACEHOLDER-14725)
        PLACEHOLDER-14727
        (first PLACEHOLDER-14725)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-14726 1)
        (format "%d%s" PLACEHOLDER-14726 PLACEHOLDER-14727)
        PLACEHOLDER-14727)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14728]
      (clojure.string/join
       (map format-group (partition-by identity PLACEHOLDER-14728))))))
   (def
    expand-group
    (fn*
     ([PLACEHOLDER-14729]
      (let*
       [PLACEHOLDER-14730
        PLACEHOLDER-14729
        PLACEHOLDER-14731
        (clojure.lang.RT/nth PLACEHOLDER-14730 0 nil)
        PLACEHOLDER-14732
        (clojure.lang.RT/nth PLACEHOLDER-14730 1 nil)
        PLACEHOLDER-14733
        (clojure.lang.RT/nth PLACEHOLDER-14730 2 nil)]
       (let*
        [PLACEHOLDER-14734
         (if
          (empty? PLACEHOLDER-14732)
          1
          (clojure.edn/read-string PLACEHOLDER-14732))]
        (clojure.string/join
         (repeat PLACEHOLDER-14734 PLACEHOLDER-14733)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14735]
      (clojure.string/join
       (map
        expand-group
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-14735)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10212
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10212))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encoder-values
    (fn*
     ([PLACEHOLDER-10213]
      (let*
       [PLACEHOLDER-10214
        PLACEHOLDER-10213
        PLACEHOLDER-10215
        (clojure.lang.RT/nth PLACEHOLDER-10214 0 nil)
        PLACEHOLDER-10216
        (clojure.lang.RT/nth PLACEHOLDER-10214 1 nil)]
       (str
        (if
         (clojure.lang.Numbers/gt
          (clojure.lang.RT/count PLACEHOLDER-10215)
          1)
         (clojure.lang.RT/count PLACEHOLDER-10215)
         "")
        PLACEHOLDER-10216)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10217]
      (let*
       [PLACEHOLDER-10218
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-10217)]
       (apply str (map encoder-values PLACEHOLDER-10218))))))
   (def
    decoder-values
    (fn*
     ([PLACEHOLDER-10219]
      (let*
       [PLACEHOLDER-10220
        PLACEHOLDER-10219
        PLACEHOLDER-10221
        (clojure.lang.RT/nth PLACEHOLDER-10220 0 nil)
        PLACEHOLDER-10222
        (clojure.lang.RT/nth PLACEHOLDER-10220 1 nil)
        PLACEHOLDER-10223
        (clojure.lang.RT/nth PLACEHOLDER-10220 2 nil)]
       (apply
        str
        (repeat
         (new
          Integer
          (let*
           [PLACEHOLDER-10224 PLACEHOLDER-10222]
           (if PLACEHOLDER-10224 PLACEHOLDER-10224 "1")))
         PLACEHOLDER-10223))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10225]
      (let*
       [PLACEHOLDER-10226
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-10225)]
       (apply str (map decoder-values PLACEHOLDER-10226)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10962
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10962))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10963]
      (apply
       str
       (mapcat
        (juxt count first)
        (partition-by identity PLACEHOLDER-10963))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10964]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10965]
          (let*
           [PLACEHOLDER-10966
            PLACEHOLDER-10965
            PLACEHOLDER-10967
            (clojure.lang.RT/nth PLACEHOLDER-10966 0 nil)
            PLACEHOLDER-10968
            (clojure.lang.RT/nth PLACEHOLDER-10966 1 nil)
            PLACEHOLDER-10969
            (clojure.lang.RT/nth PLACEHOLDER-10966 2 nil)]
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-10968)
            PLACEHOLDER-10969))))
        (re-seq (re-pattern "(\\d+)([A-Z])") PLACEHOLDER-10964)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8571
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8571))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    enumerate-seqs
    (fn*
     ([PLACEHOLDER-8572]
      (let*
       [PLACEHOLDER-8573 (clojure.lang.RT/count PLACEHOLDER-8572)]
       (str
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8573 1)
         ""
         PLACEHOLDER-8573)
        (first PLACEHOLDER-8572))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8574]
      (let*
       [PLACEHOLDER-8575 (partition-by identity PLACEHOLDER-8574)]
       (apply str (map enumerate-seqs PLACEHOLDER-8575))))))
   (def
    repeat-n-times
    (fn*
     ([PLACEHOLDER-8576]
      (let*
       [PLACEHOLDER-8577
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/count PLACEHOLDER-8576)
          1)
         1
         (java.lang.Integer/parseInt
          (apply str (butlast PLACEHOLDER-8576))))
        PLACEHOLDER-8578
        (str (last PLACEHOLDER-8576))]
       (repeat PLACEHOLDER-8577 PLACEHOLDER-8578)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8579]
      (let*
       [PLACEHOLDER-8580
        (re-seq
         (re-pattern "\\d+[a-zA-Z]|[a-zA-Z]|\\d+.|.")
         PLACEHOLDER-8579)]
       (apply str (flatten (map repeat-n-times PLACEHOLDER-8580))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14546
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14546))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-matcher
    (fn*
     ([PLACEHOLDER-14547]
      (re-matcher (re-pattern "([A-Za-z ])\\1*") PLACEHOLDER-14547))))
   (def
    decode-matcher
    (fn*
     ([PLACEHOLDER-14548]
      (re-matcher
       (re-pattern "([0-9]+)?([A-Za-z ]{1})")
       PLACEHOLDER-14548))))
   (def
    matcher
    (fn*
     ([PLACEHOLDER-14549 PLACEHOLDER-14550]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-14550 :encode)
       (encode-matcher PLACEHOLDER-14549)
       (decode-matcher PLACEHOLDER-14549)))))
   (def
    letter-count
    (fn*
     ([PLACEHOLDER-14551]
      (let*
       [PLACEHOLDER-14552 (clojure.lang.RT/count PLACEHOLDER-14551)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-14552 1)
        PLACEHOLDER-14552)))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14553]
      (let*
       [PLACEHOLDER-14554
        PLACEHOLDER-14553
        PLACEHOLDER-14555
        (clojure.lang.RT/nth PLACEHOLDER-14554 0 nil)
        PLACEHOLDER-14556
        (clojure.lang.RT/nth PLACEHOLDER-14554 1 nil)]
       (str (letter-count PLACEHOLDER-14555) PLACEHOLDER-14556)))))
   (def
    match-count-to-int
    (fn*
     ([PLACEHOLDER-14557]
      (if
       (let*
        [PLACEHOLDER-14558
         (clojure.lang.Util/identical PLACEHOLDER-14557 nil)]
        (if
         PLACEHOLDER-14558
         PLACEHOLDER-14558
         (clojure.lang.Util/equiv " " PLACEHOLDER-14557)))
       1
       (if :else (java.lang.Integer/parseInt PLACEHOLDER-14557))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14559]
      (let*
       [PLACEHOLDER-14560
        PLACEHOLDER-14559
        PLACEHOLDER-14561
        (clojure.lang.RT/nth PLACEHOLDER-14560 0 nil)
        PLACEHOLDER-14562
        (clojure.lang.RT/nth PLACEHOLDER-14560 1 nil)
        PLACEHOLDER-14563
        (clojure.lang.RT/nth PLACEHOLDER-14560 2 nil)
        PLACEHOLDER-14564
        (match-count-to-int PLACEHOLDER-14562)]
       (apply str (repeat PLACEHOLDER-14564 PLACEHOLDER-14563))))))
   (def
    build-str
    (fn*
     ([PLACEHOLDER-14565 PLACEHOLDER-14566]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-14565 :encode)
       (encode PLACEHOLDER-14566)
       (decode PLACEHOLDER-14566)))))
   (def
    parse
    (fn*
     ([PLACEHOLDER-14567 PLACEHOLDER-14568]
      (let*
       [PLACEHOLDER-14569
        (matcher PLACEHOLDER-14567 PLACEHOLDER-14568)]
       (loop*
        [PLACEHOLDER-14570 ""]
        (let*
         [PLACEHOLDER-14571 (re-find PLACEHOLDER-14569)]
         (if
          PLACEHOLDER-14571
          (recur
           (str
            PLACEHOLDER-14570
            (build-str PLACEHOLDER-14568 PLACEHOLDER-14571)))
          PLACEHOLDER-14570)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14572]
      (if
       (empty? PLACEHOLDER-14572)
       PLACEHOLDER-14572
       (parse PLACEHOLDER-14572 :encode)))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-14573] (parse PLACEHOLDER-14573 :decode)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10847
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10847))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-single
    (fn*
     ([PLACEHOLDER-10848]
      (let*
       [PLACEHOLDER-10849
        PLACEHOLDER-10848
        PLACEHOLDER-10850
        (clojure.lang.RT/nth PLACEHOLDER-10849 0 nil)
        PLACEHOLDER-10851
        (clojure.lang.RT/nth PLACEHOLDER-10849 1 nil)]
       (str
        (let*
         [PLACEHOLDER-10852 (clojure.lang.RT/count PLACEHOLDER-10850)]
         (if (not= 1 PLACEHOLDER-10852) PLACEHOLDER-10852))
        PLACEHOLDER-10851)))))
   (def
    run-length-steps
    (fn*
     ([PLACEHOLDER-10853 PLACEHOLDER-10854 PLACEHOLDER-10855]
      (apply
       str
       (map
        PLACEHOLDER-10853
        (re-seq PLACEHOLDER-10854 PLACEHOLDER-10855))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10856]
      (run-length-steps
       encode-single
       (re-pattern "([A-Za-z ])\\1*")
       PLACEHOLDER-10856))))
   (def
    decode-single
    (fn*
     ([PLACEHOLDER-10857]
      (let*
       [PLACEHOLDER-10858
        PLACEHOLDER-10857
        PLACEHOLDER-10859
        (clojure.lang.RT/nth PLACEHOLDER-10858 0 nil)
        PLACEHOLDER-10860
        (clojure.lang.RT/nth PLACEHOLDER-10858 1 nil)
        PLACEHOLDER-10861
        (clojure.lang.RT/nth PLACEHOLDER-10858 2 nil)]
       (apply
        str
        (repeat
         (if
          (empty? PLACEHOLDER-10860)
          1
          (java.lang.Integer/parseInt PLACEHOLDER-10860))
         PLACEHOLDER-10861))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10862]
      (run-length-steps
       decode-single
       (re-pattern "(\\d*)([A-Za-z ])")
       PLACEHOLDER-10862)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8196
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8196))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode-homonic-string
    (fn*
     ([PLACEHOLDER-8197]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-8197)
        1)
       (first PLACEHOLDER-8197)
       (str
        (clojure.lang.RT/count PLACEHOLDER-8197)
        (first PLACEHOLDER-8197))))))
   (def
    xform-encode
    (comp
     (partition-by identity)
     (map run-length-encode-homonic-string)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8198]
      (transduce xform-encode str PLACEHOLDER-8198))))
   (def
    numstr->int
    (fn*
     ([PLACEHOLDER-8199]
      (try
       (java.lang.Integer/parseInt PLACEHOLDER-8199)
       (catch Exception PLACEHOLDER-8200 1)))))
   (def
    transform-duo
    (fn*
     ([PLACEHOLDER-8201]
      (let*
       [PLACEHOLDER-8202
        PLACEHOLDER-8201
        PLACEHOLDER-8203
        (clojure.lang.RT/nth PLACEHOLDER-8202 0 nil)
        PLACEHOLDER-8204
        (clojure.lang.RT/nth PLACEHOLDER-8202 1 nil)
        PLACEHOLDER-8205
        (numstr->int PLACEHOLDER-8203)]
       (loop*
        [PLACEHOLDER-8206 0 PLACEHOLDER-8207 ""]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8205 PLACEHOLDER-8206)
         PLACEHOLDER-8207
         (recur
          (clojure.lang.Numbers/inc PLACEHOLDER-8206)
          (str PLACEHOLDER-8207 PLACEHOLDER-8204))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8208]
      (str/join
       (map
        (fn* ([PLACEHOLDER-8209] (transform-duo PLACEHOLDER-8209)))
        (map
         (fn* ([PLACEHOLDER-8210] (rest PLACEHOLDER-8210)))
         (re-seq
          (re-pattern "(\\d*)([\\w\\s])")
          PLACEHOLDER-8208))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15179
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15179))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-single-run
    (fn*
     ([PLACEHOLDER-15180]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-15180))
       (apply str PLACEHOLDER-15180)
       (str
        (clojure.lang.RT/count PLACEHOLDER-15180)
        (first PLACEHOLDER-15180))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15181]
      (str/join
       (map
        encode-single-run
        (partition-by identity PLACEHOLDER-15181))))))
   (def
    read-num
    (fn*
     ([PLACEHOLDER-15182]
      (let*
       [PLACEHOLDER-15186
        (let*
         [PLACEHOLDER-15183
          PLACEHOLDER-15182
          PLACEHOLDER-15184
          (if
           (clojure.lang.Util/identical PLACEHOLDER-15183 nil)
           nil
           (butlast PLACEHOLDER-15183))
          PLACEHOLDER-15185
          (if
           (clojure.lang.Util/identical PLACEHOLDER-15184 nil)
           nil
           (apply str PLACEHOLDER-15184))]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-15185 nil)
          nil
          (read-string PLACEHOLDER-15185)))]
       (if PLACEHOLDER-15186 PLACEHOLDER-15186 1)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15187]
      (str/join
       (map
        (fn* ([PLACEHOLDER-15188] (apply str PLACEHOLDER-15188)))
        (map
         (fn*
          ([PLACEHOLDER-15189]
           (repeat
            (read-num PLACEHOLDER-15189)
            (last PLACEHOLDER-15189))))
         (re-seq (re-pattern "\\d*[A-Za-z ]") PLACEHOLDER-15187))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12629
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12629))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12630]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12631]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-12631))
           (first PLACEHOLDER-12631)
           (apply
            str
            (concat ((juxt count first) PLACEHOLDER-12631))))))
        (partition-by identity PLACEHOLDER-12630))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12632]
      (let*
       [PLACEHOLDER-12633
        (re-seq (re-pattern "(?i)(\\d*)([A-Z]?)") PLACEHOLDER-12632)]
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-12634]
           (let*
            [PLACEHOLDER-12635
             PLACEHOLDER-12634
             PLACEHOLDER-12636
             (clojure.lang.RT/nth PLACEHOLDER-12635 0 nil)
             PLACEHOLDER-12637
             (clojure.lang.RT/nth PLACEHOLDER-12635 1 nil)
             PLACEHOLDER-12638
             (clojure.lang.RT/nth PLACEHOLDER-12635 2 nil)]
            (if
             (empty? PLACEHOLDER-12636)
             (str " ")
             (if
              (empty? PLACEHOLDER-12638)
              (repeat
               (clojure.lang.Numbers/minus
                (java.lang.Integer/parseInt PLACEHOLDER-12637)
                1)
               (str " "))
              (if
               (empty? PLACEHOLDER-12637)
               (str PLACEHOLDER-12638)
               (if
                :else
                (repeat
                 (java.lang.Integer/parseInt PLACEHOLDER-12637)
                 PLACEHOLDER-12638))))))))
         (take
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/count PLACEHOLDER-12633)
           1)
          PLACEHOLDER-12633))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14905
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14905))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14906]
      (let*
       [PLACEHOLDER-14907
        PLACEHOLDER-14906
        PLACEHOLDER-14908
        (clojure.lang.RT/nth PLACEHOLDER-14907 0 nil)
        PLACEHOLDER-14909
        (clojure.lang.RT/nth PLACEHOLDER-14907 1 nil)]
       (str
        (let*
         [PLACEHOLDER-14910 (clojure.lang.RT/count PLACEHOLDER-14908)]
         (if
          (clojure.lang.Numbers/gte PLACEHOLDER-14910 2)
          PLACEHOLDER-14910))
        PLACEHOLDER-14909)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14911]
      (str/join
       (map
        encode
        (re-seq (re-pattern "([A-z ])\\1*") PLACEHOLDER-14911))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14912]
      (let*
       [PLACEHOLDER-14913
        PLACEHOLDER-14912
        PLACEHOLDER-14914
        (clojure.lang.RT/nth PLACEHOLDER-14913 0 nil)
        PLACEHOLDER-14915
        (clojure.lang.RT/nth PLACEHOLDER-14913 1 nil)
        PLACEHOLDER-14916
        (clojure.lang.RT/nth PLACEHOLDER-14913 2 nil)]
       (let*
        [PLACEHOLDER-14917
         (if
          (empty? PLACEHOLDER-14915)
          1
          (java.lang.Integer/parseInt PLACEHOLDER-14915))]
        (repeat PLACEHOLDER-14917 PLACEHOLDER-14916))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14918]
      (str/join
       (flatten
        (map
         decode
         (re-seq
          (re-pattern "(\\d*)([A-z ])")
          PLACEHOLDER-14918))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13041
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13041))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str])
          (clojure.core/require '[clojure.edn :as edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13042]
      (if
       (clojure.lang.Util/equiv
        0
        (clojure.lang.RT/count PLACEHOLDER-13042))
       ""
       (let*
        [PLACEHOLDER-13043
         (first PLACEHOLDER-13042)
         PLACEHOLDER-13045
         (clojure.lang.RT/count
          (take-while
           (fn*
            ([PLACEHOLDER-13044]
             (clojure.lang.Util/equiv
              PLACEHOLDER-13044
              PLACEHOLDER-13043)))
           PLACEHOLDER-13042))
         PLACEHOLDER-13046
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-13045 1)
          PLACEHOLDER-13043
          (str PLACEHOLDER-13045 PLACEHOLDER-13043))]
        (str
         PLACEHOLDER-13046
         (run-length-encode
          (drop PLACEHOLDER-13045 PLACEHOLDER-13042))))))))
   (def
    code-extender
    (fn*
     ([PLACEHOLDER-13047 PLACEHOLDER-13048]
      (let*
       [PLACEHOLDER-13049
        PLACEHOLDER-13048
        PLACEHOLDER-13050
        (clojure.lang.RT/nth PLACEHOLDER-13049 0 nil)
        PLACEHOLDER-13051
        (clojure.lang.RT/nth PLACEHOLDER-13049 1 nil)
        PLACEHOLDER-13052
        (clojure.lang.RT/nth PLACEHOLDER-13049 2 nil)
        PLACEHOLDER-13053
        (edn/read-string PLACEHOLDER-13051)
        PLACEHOLDER-13054
        (apply str (repeat PLACEHOLDER-13053 PLACEHOLDER-13052))]
       (str/replace
        PLACEHOLDER-13047
        PLACEHOLDER-13050
        PLACEHOLDER-13054)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13055]
      (reduce
       code-extender
       PLACEHOLDER-13055
       (re-seq (re-pattern "(\\d+)(\\D)") PLACEHOLDER-13055))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8551
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8551))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-helper
    (fn*
     ([PLACEHOLDER-8552 PLACEHOLDER-8553]
      (let*
       [PLACEHOLDER-8554
        PLACEHOLDER-8552
        PLACEHOLDER-8555
        (clojure.lang.RT/nth PLACEHOLDER-8554 0 nil)
        PLACEHOLDER-8556
        (clojure.lang.RT/nth PLACEHOLDER-8554 1 nil)
        PLACEHOLDER-8557
        (clojure.lang.RT/nth PLACEHOLDER-8554 2 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-8556 PLACEHOLDER-8553)
        [(clojure.lang.Numbers/inc PLACEHOLDER-8555)
         PLACEHOLDER-8556
         PLACEHOLDER-8557]
        (let*
         [PLACEHOLDER-8558 PLACEHOLDER-8555]
         (case*
          PLACEHOLDER-8558
          0
          0
          [1
           PLACEHOLDER-8553
           (str PLACEHOLDER-8557 PLACEHOLDER-8555 PLACEHOLDER-8556)]
          {0 [0 [0 PLACEHOLDER-8553 PLACEHOLDER-8557]],
           1
           [1
            [1
             PLACEHOLDER-8553
             (str PLACEHOLDER-8557 PLACEHOLDER-8556)]]}
          :compact
          :int
          nil)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8559]
      (last
       (reduce
        encode-helper
        [0 (first PLACEHOLDER-8559) ""]
        (str PLACEHOLDER-8559 "-"))))))
   (def
    repeat-char
    (fn*
     ([PLACEHOLDER-8560 PLACEHOLDER-8561]
      (apply
       str
       (repeat (new Integer PLACEHOLDER-8560) PLACEHOLDER-8561)))))
   (def
    decode-helper
    (fn*
     ([PLACEHOLDER-8562 PLACEHOLDER-8563]
      (let*
       [PLACEHOLDER-8564
        PLACEHOLDER-8562
        PLACEHOLDER-8565
        (clojure.lang.RT/nth PLACEHOLDER-8564 0 nil)
        PLACEHOLDER-8566
        (clojure.lang.RT/nth PLACEHOLDER-8564 1 nil)]
       (if
        (java.lang.Character/isDigit PLACEHOLDER-8563)
        [(str PLACEHOLDER-8565 PLACEHOLDER-8563) PLACEHOLDER-8566]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8565 "")
         ["" (str PLACEHOLDER-8566 PLACEHOLDER-8563)]
         [""
          (str
           PLACEHOLDER-8566
           (repeat-char PLACEHOLDER-8565 PLACEHOLDER-8563))]))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8567]
      (last (reduce decode-helper ["" ""] PLACEHOLDER-8567))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10061
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10061))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-10062]
      (let*
       [PLACEHOLDER-10063
        (clojure.lang.RT/count PLACEHOLDER-10062)
        PLACEHOLDER-10064
        (first PLACEHOLDER-10062)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10063 1)
        (str PLACEHOLDER-10064)
        (str PLACEHOLDER-10063 PLACEHOLDER-10064))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10065]
      (apply
       str
       (map encode-chunk (partition-by identity PLACEHOLDER-10065))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10066]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10067]
          (let*
           [PLACEHOLDER-10068
            PLACEHOLDER-10067
            PLACEHOLDER-10069
            (clojure.lang.RT/nth PLACEHOLDER-10068 0 nil)
            PLACEHOLDER-10070
            (clojure.lang.RT/nth PLACEHOLDER-10068 1 nil)
            PLACEHOLDER-10071
            (clojure.lang.RT/nth PLACEHOLDER-10068 2 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-10070 nil)
            PLACEHOLDER-10071
            (apply
             str
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-10070)
              PLACEHOLDER-10071))))))
        (re-seq (re-pattern "(\\d+)?(\\D)") PLACEHOLDER-10066)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14874
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14874))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14875]
      (if
       (str/blank? PLACEHOLDER-14875)
       PLACEHOLDER-14875
       (let*
        [PLACEHOLDER-14876 (clojure.lang.RT/count PLACEHOLDER-14875)]
        (loop*
         [PLACEHOLDER-14877
          0
          PLACEHOLDER-14878
          nil
          PLACEHOLDER-14879
          []]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-14877 PLACEHOLDER-14876)
          (str/join
           (remove #{1} (conj PLACEHOLDER-14879 PLACEHOLDER-14878)))
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-14878
            (clojure.lang.RT/nth PLACEHOLDER-14875 PLACEHOLDER-14877))
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-14877)
            PLACEHOLDER-14878
            (conj
             (pop PLACEHOLDER-14879)
             (clojure.lang.Numbers/inc (peek PLACEHOLDER-14879))))
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-14877)
            (clojure.lang.RT/nth PLACEHOLDER-14875 PLACEHOLDER-14877)
            (conj PLACEHOLDER-14879 PLACEHOLDER-14878 1))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14880]
      (if
       (str/blank? PLACEHOLDER-14880)
       PLACEHOLDER-14880
       (let*
        [PLACEHOLDER-14881 (clojure.lang.RT/count PLACEHOLDER-14880)]
        (loop*
         [PLACEHOLDER-14882 0 PLACEHOLDER-14883 0 PLACEHOLDER-14884 []]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-14882 PLACEHOLDER-14881)
          (str/join PLACEHOLDER-14884)
          (let*
           [PLACEHOLDER-14885
            (clojure.lang.RT/charCast
             (clojure.lang.RT/nth
              PLACEHOLDER-14880
              PLACEHOLDER-14882))]
           (if
            (java.lang.Character/isDigit PLACEHOLDER-14885)
            (recur
             (clojure.lang.Numbers/inc PLACEHOLDER-14882)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-14883 10)
              (java.lang.Character/digit PLACEHOLDER-14885 10))
             PLACEHOLDER-14884)
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-14883 0)
             (recur
              (clojure.lang.Numbers/inc PLACEHOLDER-14882)
              0
              (conj PLACEHOLDER-14884 PLACEHOLDER-14885))
             (recur
              (clojure.lang.Numbers/inc PLACEHOLDER-14882)
              0
              (conj
               PLACEHOLDER-14884
               (str/join
                (repeat
                 PLACEHOLDER-14883
                 PLACEHOLDER-14885)))))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10128
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10128))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    format-repetition
    (fn*
     ([PLACEHOLDER-10129]
      (if
       (clojure.lang.Util/equiv 1 PLACEHOLDER-10129)
       nil
       PLACEHOLDER-10129))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10130]
      (loop*
       [PLACEHOLDER-10131
        nil
        PLACEHOLDER-10132
        1
        PLACEHOLDER-10133
        nil
        PLACEHOLDER-10134
        PLACEHOLDER-10130]
       (let*
        [PLACEHOLDER-10135 (first PLACEHOLDER-10134)]
        (if
         PLACEHOLDER-10135
         (let*
          [PLACEHOLDER-10136 PLACEHOLDER-10135]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-10131
            PLACEHOLDER-10136)
           (recur
            PLACEHOLDER-10136
            (clojure.lang.Numbers/inc PLACEHOLDER-10132)
            PLACEHOLDER-10133
            (rest PLACEHOLDER-10134))
           (recur
            PLACEHOLDER-10136
            1
            (str
             PLACEHOLDER-10133
             (format-repetition PLACEHOLDER-10132)
             PLACEHOLDER-10131)
            (rest PLACEHOLDER-10134))))
         (str
          PLACEHOLDER-10133
          (format-repetition PLACEHOLDER-10132)
          PLACEHOLDER-10131)))))))
   (def
    to-digit
    (fn*
     ([PLACEHOLDER-10137]
      (java.lang.Character/digit PLACEHOLDER-10137 10))))
   (def
    add-digit
    (fn*
     ([PLACEHOLDER-10138 PLACEHOLDER-10139]
      (clojure.lang.Numbers/add
       PLACEHOLDER-10139
       (clojure.lang.Numbers/multiply
        10
        (let*
         [PLACEHOLDER-10140 PLACEHOLDER-10138]
         (if PLACEHOLDER-10140 PLACEHOLDER-10140 0)))))))
   (def
    is-digit
    (fn*
     ([PLACEHOLDER-10141]
      (java.lang.Character/isDigit PLACEHOLDER-10141))))
   (def
    append-chars
    (fn*
     ([PLACEHOLDER-10142 PLACEHOLDER-10143 PLACEHOLDER-10144]
      (apply
       str
       PLACEHOLDER-10142
       (repeat
        (let*
         [PLACEHOLDER-10145 PLACEHOLDER-10144]
         (if PLACEHOLDER-10145 PLACEHOLDER-10145 1))
        PLACEHOLDER-10143)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10146]
      (loop*
       [PLACEHOLDER-10147
        nil
        PLACEHOLDER-10148
        nil
        PLACEHOLDER-10149
        PLACEHOLDER-10146]
       (let*
        [PLACEHOLDER-10150 (first PLACEHOLDER-10149)]
        (if
         PLACEHOLDER-10150
         (let*
          [PLACEHOLDER-10151 PLACEHOLDER-10150]
          (if
           (is-digit PLACEHOLDER-10151)
           (recur
            (add-digit PLACEHOLDER-10147 (to-digit PLACEHOLDER-10151))
            PLACEHOLDER-10148
            (rest PLACEHOLDER-10149))
           (recur
            nil
            (append-chars
             PLACEHOLDER-10148
             PLACEHOLDER-10151
             PLACEHOLDER-10147)
            (rest PLACEHOLDER-10149))))
         (str PLACEHOLDER-10148))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10535
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10535))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    decode-letter
    (fn*
     ([PLACEHOLDER-10536 PLACEHOLDER-10537]
      (apply str (repeat PLACEHOLDER-10536 PLACEHOLDER-10537)))))
   (def
    encode-letter
    (fn*
     ([PLACEHOLDER-10538 PLACEHOLDER-10539 PLACEHOLDER-10540]
      (if
       (clojure.lang.Numbers/gt PLACEHOLDER-10539 1)
       (str PLACEHOLDER-10538 PLACEHOLDER-10539 PLACEHOLDER-10540)
       (str PLACEHOLDER-10538 PLACEHOLDER-10540)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10541]
      (let*
       [PLACEHOLDER-10542
        (atom nil)
        PLACEHOLDER-10543
        (atom 0)
        PLACEHOLDER-10544
        (atom "")]
       (do
        (loop*
         [PLACEHOLDER-10545
          (clojure.core/seq PLACEHOLDER-10541)
          PLACEHOLDER-10546
          nil
          PLACEHOLDER-10547
          0
          PLACEHOLDER-10548
          0]
         (if
          (clojure.lang.Numbers/lt PLACEHOLDER-10548 PLACEHOLDER-10547)
          (let*
           [PLACEHOLDER-10549
            (.nth PLACEHOLDER-10546 PLACEHOLDER-10548)]
           (do
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-10549
              (deref PLACEHOLDER-10542))
             (swap! PLACEHOLDER-10543 inc)
             (do
              (swap!
               PLACEHOLDER-10544
               (fn*
                ([PLACEHOLDER-10550]
                 (encode-letter
                  PLACEHOLDER-10550
                  (deref PLACEHOLDER-10543)
                  (deref PLACEHOLDER-10542)))))
              (reset! PLACEHOLDER-10542 PLACEHOLDER-10549)
              (reset! PLACEHOLDER-10543 1)))
            (recur
             PLACEHOLDER-10545
             PLACEHOLDER-10546
             PLACEHOLDER-10547
             (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-10548))))
          (let*
           [PLACEHOLDER-10551 (clojure.core/seq PLACEHOLDER-10545)]
           (if
            PLACEHOLDER-10551
            (let*
             [PLACEHOLDER-10552 PLACEHOLDER-10551]
             (if
              (clojure.core/chunked-seq? PLACEHOLDER-10552)
              (let*
               [PLACEHOLDER-10553
                (clojure.core/chunk-first PLACEHOLDER-10552)]
               (recur
                (clojure.core/chunk-rest PLACEHOLDER-10552)
                PLACEHOLDER-10553
                (clojure.lang.RT/intCast
                 (clojure.lang.RT/count PLACEHOLDER-10553))
                (clojure.lang.RT/intCast 0)))
              (let*
               [PLACEHOLDER-10554
                (clojure.core/first PLACEHOLDER-10552)]
               (do
                (if
                 (clojure.lang.Util/equiv
                  PLACEHOLDER-10554
                  (deref PLACEHOLDER-10542))
                 (swap! PLACEHOLDER-10543 inc)
                 (do
                  (swap!
                   PLACEHOLDER-10544
                   (fn*
                    ([PLACEHOLDER-10555]
                     (encode-letter
                      PLACEHOLDER-10555
                      (deref PLACEHOLDER-10543)
                      (deref PLACEHOLDER-10542)))))
                  (reset! PLACEHOLDER-10542 PLACEHOLDER-10554)
                  (reset! PLACEHOLDER-10543 1)))
                (recur
                 (clojure.core/next PLACEHOLDER-10552)
                 nil
                 0
                 0)))))))))
        (swap!
         PLACEHOLDER-10544
         (fn*
          ([PLACEHOLDER-10556]
           (encode-letter
            PLACEHOLDER-10556
            (deref PLACEHOLDER-10543)
            (deref PLACEHOLDER-10542)))))
        (deref PLACEHOLDER-10544))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10557]
      (let*
       [PLACEHOLDER-10558 (atom "") PLACEHOLDER-10559 (atom "")]
       (do
        (loop*
         [PLACEHOLDER-10560
          (clojure.core/seq PLACEHOLDER-10557)
          PLACEHOLDER-10561
          nil
          PLACEHOLDER-10562
          0
          PLACEHOLDER-10563
          0]
         (if
          (clojure.lang.Numbers/lt PLACEHOLDER-10563 PLACEHOLDER-10562)
          (let*
           [PLACEHOLDER-10564
            (.nth PLACEHOLDER-10561 PLACEHOLDER-10563)]
           (do
            (if
             (java.lang.Character/isDigit PLACEHOLDER-10564)
             (swap!
              PLACEHOLDER-10559
              (fn*
               ([PLACEHOLDER-10565]
                (str PLACEHOLDER-10565 PLACEHOLDER-10564))))
             (do
              (swap!
               PLACEHOLDER-10558
               (fn*
                ([PLACEHOLDER-10566]
                 (str
                  PLACEHOLDER-10566
                  (decode-letter
                   (if
                    (clojure.lang.Util/equiv
                     (deref PLACEHOLDER-10559)
                     "")
                    1
                    (java.lang.Integer/parseInt
                     (deref PLACEHOLDER-10559)))
                   PLACEHOLDER-10564)))))
              (reset! PLACEHOLDER-10559 "")))
            (recur
             PLACEHOLDER-10560
             PLACEHOLDER-10561
             PLACEHOLDER-10562
             (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-10563))))
          (let*
           [PLACEHOLDER-10567 (clojure.core/seq PLACEHOLDER-10560)]
           (if
            PLACEHOLDER-10567
            (let*
             [PLACEHOLDER-10568 PLACEHOLDER-10567]
             (if
              (clojure.core/chunked-seq? PLACEHOLDER-10568)
              (let*
               [PLACEHOLDER-10569
                (clojure.core/chunk-first PLACEHOLDER-10568)]
               (recur
                (clojure.core/chunk-rest PLACEHOLDER-10568)
                PLACEHOLDER-10569
                (clojure.lang.RT/intCast
                 (clojure.lang.RT/count PLACEHOLDER-10569))
                (clojure.lang.RT/intCast 0)))
              (let*
               [PLACEHOLDER-10570
                (clojure.core/first PLACEHOLDER-10568)]
               (do
                (if
                 (java.lang.Character/isDigit PLACEHOLDER-10570)
                 (swap!
                  PLACEHOLDER-10559
                  (fn*
                   ([PLACEHOLDER-10571]
                    (str PLACEHOLDER-10571 PLACEHOLDER-10570))))
                 (do
                  (swap!
                   PLACEHOLDER-10558
                   (fn*
                    ([PLACEHOLDER-10572]
                     (str
                      PLACEHOLDER-10572
                      (decode-letter
                       (if
                        (clojure.lang.Util/equiv
                         (deref PLACEHOLDER-10559)
                         "")
                        1
                        (java.lang.Integer/parseInt
                         (deref PLACEHOLDER-10559)))
                       PLACEHOLDER-10570)))))
                  (reset! PLACEHOLDER-10559 "")))
                (recur
                 (clojure.core/next PLACEHOLDER-10568)
                 nil
                 0
                 0)))))))))
        (deref PLACEHOLDER-10558)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9114
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9114))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-regular-string
    (fn*
     ([PLACEHOLDER-9115] (partition-by identity PLACEHOLDER-9115))))
   (def
    collapse
    (fn*
     ([PLACEHOLDER-9116]
      (let*
       [PLACEHOLDER-9117
        (first PLACEHOLDER-9116)
        PLACEHOLDER-9118
        (clojure.lang.RT/count PLACEHOLDER-9116)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-9118 1)
        PLACEHOLDER-9116
        [PLACEHOLDER-9118 PLACEHOLDER-9117])))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-9119]
      (if
       (contains? #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9} PLACEHOLDER-9119)
       0
       PLACEHOLDER-9119))))
   (def
    split-encoded-string
    (fn* ([PLACEHOLDER-9120] (partition-by digit? PLACEHOLDER-9120))))
   (def
    convert-to-number-or-string
    (fn*
     ([PLACEHOLDER-9121]
      (try
       (java.lang.Integer/parseInt (apply str PLACEHOLDER-9121))
       (catch
        NumberFormatException
        PLACEHOLDER-9122
        (apply str PLACEHOLDER-9121))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9123 PLACEHOLDER-9124]
      (if
       (empty? PLACEHOLDER-9124)
       (flatten PLACEHOLDER-9123)
       (let*
        [PLACEHOLDER-9125
         (first PLACEHOLDER-9124)
         PLACEHOLDER-9126
         (rest PLACEHOLDER-9124)
         PLACEHOLDER-9127
         (first PLACEHOLDER-9126)
         PLACEHOLDER-9128
         (rest PLACEHOLDER-9126)]
        (if
         (int? PLACEHOLDER-9125)
         (recur
          (conj
           PLACEHOLDER-9123
           (repeat PLACEHOLDER-9125 PLACEHOLDER-9127))
          PLACEHOLDER-9128)
         (recur
          (conj PLACEHOLDER-9123 PLACEHOLDER-9125)
          PLACEHOLDER-9126)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9129]
      (apply
       str
       (flatten
        (map collapse (split-regular-string PLACEHOLDER-9129)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9130]
      (apply
       str
       (decode
        []
        (map
         convert-to-number-or-string
         (split-encoded-string PLACEHOLDER-9130))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13645
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13645))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-13646]
      (str
       (if
        (clojure.lang.Numbers/gt
         (clojure.lang.RT/count PLACEHOLDER-13646)
         1)
        (clojure.lang.RT/count PLACEHOLDER-13646))
       (first PLACEHOLDER-13646)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13647]
      (apply
       str
       (map encode-run (partition-by char PLACEHOLDER-13647))))))
   (def
    decode-run
    (fn*
     ([PLACEHOLDER-13648]
      (let*
       [PLACEHOLDER-13650
        (read-string
         (let*
          [PLACEHOLDER-13649 (first PLACEHOLDER-13648)]
          (if PLACEHOLDER-13649 PLACEHOLDER-13649 "1")))
        PLACEHOLDER-13651
        (second PLACEHOLDER-13648)]
       (repeat PLACEHOLDER-13650 PLACEHOLDER-13651)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13652]
      (apply
       str
       (flatten
        (map
         decode-run
         (map
          rest
          (re-seq
           (re-pattern "(\\d+)?([a-zA-Z\\s])")
           PLACEHOLDER-13652)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9158
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9158))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    extract-num
    (fn*
     ([PLACEHOLDER-9159]
      (re-find (re-pattern "^\\d+") PLACEHOLDER-9159))))
   (def
    indices
    (fn*
     ([PLACEHOLDER-9160 PLACEHOLDER-9161]
      (keep-indexed
       (fn*
        ([PLACEHOLDER-9162 PLACEHOLDER-9163]
         (if (PLACEHOLDER-9160 PLACEHOLDER-9163) PLACEHOLDER-9162)))
       PLACEHOLDER-9161))))
   (def
    first-non-match-index
    (fn*
     ([PLACEHOLDER-9164 PLACEHOLDER-9165]
      (let*
       [PLACEHOLDER-9167
        (first
         (indices
          (fn*
           ([PLACEHOLDER-9166]
            (not= PLACEHOLDER-9164 PLACEHOLDER-9166)))
          PLACEHOLDER-9165))]
       (if
        PLACEHOLDER-9167
        PLACEHOLDER-9167
        (clojure.lang.RT/count PLACEHOLDER-9165))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9168]
      (loop*
       [PLACEHOLDER-9169 (seq PLACEHOLDER-9168) PLACEHOLDER-9170 ""]
       (if
        (empty? PLACEHOLDER-9169)
        PLACEHOLDER-9170
        (let*
         [PLACEHOLDER-9171
          (first PLACEHOLDER-9169)
          PLACEHOLDER-9172
          (first-non-match-index PLACEHOLDER-9171 PLACEHOLDER-9169)
          PLACEHOLDER-9173
          (if (not= PLACEHOLDER-9172 1) PLACEHOLDER-9172)]
         (recur
          (drop PLACEHOLDER-9172 PLACEHOLDER-9169)
          (str
           PLACEHOLDER-9170
           PLACEHOLDER-9173
           PLACEHOLDER-9171))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9174]
      (loop*
       [PLACEHOLDER-9175 PLACEHOLDER-9174 PLACEHOLDER-9176 ""]
       (if
        (clojure.string/blank? PLACEHOLDER-9175)
        PLACEHOLDER-9176
        (let*
         [PLACEHOLDER-9177
          (extract-num PLACEHOLDER-9175)
          PLACEHOLDER-9178
          (clojure.lang.RT/count (str PLACEHOLDER-9177))
          PLACEHOLDER-9179
          (clojure.lang.RT/nth PLACEHOLDER-9175 PLACEHOLDER-9178)
          PLACEHOLDER-9181
          (new
           Integer
           (let*
            [PLACEHOLDER-9180 PLACEHOLDER-9177]
            (if PLACEHOLDER-9180 PLACEHOLDER-9180 1)))]
         (recur
          (subs
           PLACEHOLDER-9175
           (clojure.lang.Numbers/add 1 PLACEHOLDER-9178))
          (apply
           str
           PLACEHOLDER-9176
           (take PLACEHOLDER-9181 (repeat PLACEHOLDER-9179)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15221
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15221))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    reg
    (fn*
     ([PLACEHOLDER-15222]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count (first PLACEHOLDER-15222)))
       (first PLACEHOLDER-15222)
       (str
        (str (clojure.lang.RT/count (first PLACEHOLDER-15222)))
        (first (first PLACEHOLDER-15222)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15223]
      (join
       (map
        (fn* ([PLACEHOLDER-15224] (reg PLACEHOLDER-15224)))
        (re-seq
         (re-pattern "([a-zA-Z]|\\s)\\1+|[a-zA-Z]|\\s")
         PLACEHOLDER-15223))))))
   (def
    reg2
    (fn*
     ([PLACEHOLDER-15225]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-15225))
       PLACEHOLDER-15225
       (join
        (take
         (read-string
          (re-find (re-pattern "[0-9]+") PLACEHOLDER-15225))
         (repeat (str (last PLACEHOLDER-15225)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15226]
      (join
       (map
        (fn* ([PLACEHOLDER-15227] (reg2 PLACEHOLDER-15227)))
        (re-seq
         (re-pattern "[0-9]*[a-zA-Z\\s]")
         PLACEHOLDER-15226)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8786
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8786))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress-chars
    (fn*
     ([PLACEHOLDER-8787]
      (let*
       [PLACEHOLDER-8788
        (clojure.lang.RT/count PLACEHOLDER-8787)
        PLACEHOLDER-8789
        (first PLACEHOLDER-8787)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-8788)
        [PLACEHOLDER-8789]
        [PLACEHOLDER-8788 PLACEHOLDER-8789])))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8790]
      (apply
       str
       (mapcat
        compress-chars
        (partition-by identity PLACEHOLDER-8790))))))
   (def
    decompress-chars
    (fn*
     ([PLACEHOLDER-8791]
      (let*
       [PLACEHOLDER-8792
        PLACEHOLDER-8791
        PLACEHOLDER-8793
        (clojure.lang.RT/nth PLACEHOLDER-8792 0 nil)
        PLACEHOLDER-8794
        (clojure.lang.RT/nth PLACEHOLDER-8792 1 nil)
        PLACEHOLDER-8795
        (clojure.lang.RT/nth PLACEHOLDER-8792 2 nil)]
       (if
        (clojure.lang.Util/equiv "" PLACEHOLDER-8794)
        (seq PLACEHOLDER-8795)
        (repeat (new Integer PLACEHOLDER-8794) PLACEHOLDER-8795))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8796]
      (apply
       str
       (mapcat
        decompress-chars
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-8796)))))))
  "Exception inresources/run-length-encoding/360/src/run_length_encoding.cljCould not resolve var: encoding-reducer"
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15213
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15213))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15214]
      (apply
       str
       (filter
        (fn* ([PLACEHOLDER-15215] (not= PLACEHOLDER-15215 1)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-15214)))))))
   (def
    run-length-decode-acc
    (fn*
     ([PLACEHOLDER-15216
       PLACEHOLDER-15217
       PLACEHOLDER-15218
       PLACEHOLDER-15219]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-15218 nil)
       (string/join PLACEHOLDER-15216)
       (if
        (java.lang.Character/isDigit PLACEHOLDER-15218)
        (run-length-decode-acc
         PLACEHOLDER-15216
         (conj PLACEHOLDER-15217 PLACEHOLDER-15218)
         (first PLACEHOLDER-15219)
         (rest PLACEHOLDER-15219))
        (if
         :else
         (run-length-decode-acc
          (conj
           PLACEHOLDER-15216
           (string/join
            (repeat
             (if
              (empty? PLACEHOLDER-15217)
              1
              (java.lang.Integer/parseInt
               (string/join (map str PLACEHOLDER-15217))))
             PLACEHOLDER-15218)))
          []
          (first PLACEHOLDER-15219)
          (rest PLACEHOLDER-15219))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15220]
      (if
       (empty? PLACEHOLDER-15220)
       ""
       (run-length-decode-acc
        []
        []
        (first PLACEHOLDER-15220)
        (rest PLACEHOLDER-15220)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14278
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14278))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14279]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14280]
          (let*
           [PLACEHOLDER-14281
            PLACEHOLDER-14280
            PLACEHOLDER-14282
            (clojure.lang.RT/nth PLACEHOLDER-14281 0 nil)
            PLACEHOLDER-14283
            (clojure.lang.RT/nth PLACEHOLDER-14281 1 nil)]
           (str
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-14282)
              1)
             (clojure.lang.RT/count PLACEHOLDER-14282))
            (first PLACEHOLDER-14282)))))
        (re-seq (re-pattern "(\\w|\\s)\\1*") PLACEHOLDER-14279))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14284]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14285]
          (let*
           [PLACEHOLDER-14286
            (re-find (re-pattern "\\d+") PLACEHOLDER-14285)
            PLACEHOLDER-14287
            (re-find (re-pattern "[A-Za-z\\s]") PLACEHOLDER-14285)]
           (if
            PLACEHOLDER-14286
            (apply
             str
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-14286)
              PLACEHOLDER-14287))
            PLACEHOLDER-14287))))
        (re-seq
         (re-pattern "\\d*[A-Za-z\\s]{1}")
         PLACEHOLDER-14284)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9365
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9365))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    isDigit?
    (fn*
     ([PLACEHOLDER-9366]
      (let*
       [PLACEHOLDER-9367
        (clojure.lang.Numbers/lte
         (clojure.lang.RT/intCast \0)
         (clojure.lang.RT/intCast PLACEHOLDER-9366))]
       (if
        PLACEHOLDER-9367
        (clojure.lang.Numbers/gte
         (clojure.lang.RT/intCast \9)
         (clojure.lang.RT/intCast PLACEHOLDER-9366))
        PLACEHOLDER-9367)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9368]
      (loop*
       [PLACEHOLDER-9369
        nil
        PLACEHOLDER-9370
        0
        PLACEHOLDER-9371
        ""
        PLACEHOLDER-9372
        PLACEHOLDER-9368]
       (let*
        [PLACEHOLDER-9373
         (first PLACEHOLDER-9372)
         PLACEHOLDER-9375
         (fn*
          ([]
           (let*
            [PLACEHOLDER-9374 PLACEHOLDER-9370]
            (case*
             PLACEHOLDER-9374
             0
             0
             (str PLACEHOLDER-9370 PLACEHOLDER-9369)
             {0 [0 ""], 1 [1 PLACEHOLDER-9369]}
             :compact
             :int
             nil))))]
        (if
         (empty? PLACEHOLDER-9372)
         (str PLACEHOLDER-9371 (PLACEHOLDER-9375))
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-9369 PLACEHOLDER-9373)
          (recur
           PLACEHOLDER-9369
           (clojure.lang.Numbers/inc PLACEHOLDER-9370)
           PLACEHOLDER-9371
           (rest PLACEHOLDER-9372))
          (if
           :else
           (recur
            PLACEHOLDER-9373
            1
            (str PLACEHOLDER-9371 (PLACEHOLDER-9375))
            (rest PLACEHOLDER-9372))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9376]
      (loop*
       [PLACEHOLDER-9377
        0
        PLACEHOLDER-9378
        ""
        PLACEHOLDER-9379
        PLACEHOLDER-9376]
       (let*
        [PLACEHOLDER-9380 (first PLACEHOLDER-9379)]
        (if
         (empty? PLACEHOLDER-9379)
         PLACEHOLDER-9378
         (if
          (isDigit? PLACEHOLDER-9380)
          (recur
           (clojure.lang.Numbers/add
            (java.lang.Integer/parseInt (str PLACEHOLDER-9380))
            (clojure.lang.Numbers/multiply 10 PLACEHOLDER-9377))
           PLACEHOLDER-9378
           (rest PLACEHOLDER-9379))
          (if
           (clojure.lang.Numbers/lt PLACEHOLDER-9377 2)
           (recur
            PLACEHOLDER-9377
            (str PLACEHOLDER-9378 PLACEHOLDER-9380)
            (rest PLACEHOLDER-9379))
           (if
            :else
            (recur
             0
             (apply
              str
              PLACEHOLDER-9378
              (repeat PLACEHOLDER-9377 PLACEHOLDER-9380))
             (rest PLACEHOLDER-9379))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13221
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13221))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13222]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13223]
          (str
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-13223)
             1)
            ""
            (if :else (clojure.lang.RT/count PLACEHOLDER-13223)))
           (first PLACEHOLDER-13223))))
        (partition-by identity PLACEHOLDER-13222))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13224]
      (apply
       str
       (map
        (fn* ([PLACEHOLDER-13225] (apply str PLACEHOLDER-13225)))
        (map
         (fn*
          ([PLACEHOLDER-13226]
           (take
            (new
             Integer
             (re-find (re-pattern "\\d+") PLACEHOLDER-13226))
            (repeat (last PLACEHOLDER-13226)))))
         (map
          (fn*
           ([PLACEHOLDER-13227]
            (if
             (re-find (re-pattern "\\d+") PLACEHOLDER-13227)
             PLACEHOLDER-13227
             (if :else (str "1" PLACEHOLDER-13227)))))
          (re-seq
           (re-pattern "\\d*[a-zA-Z ]{1}")
           PLACEHOLDER-13224)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14801
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14801))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    index-runs
    (fn*
     ([PLACEHOLDER-14802]
      (mapcat
       (juxt count first)
       (partition-by identity PLACEHOLDER-14802)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14803]
      (apply str (remove #{1} (index-runs PLACEHOLDER-14803))))))
   (def
    divide-string
    (fn*
     ([PLACEHOLDER-14804]
      (re-seq (re-pattern "\\d*[A-Za-z\\s]") PLACEHOLDER-14804))))
   (def
    divide-num-char
    (fn*
     ([PLACEHOLDER-14805]
      (let*
       [PLACEHOLDER-14806 (clojure.lang.RT/count PLACEHOLDER-14805)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-14806)
        [1 (first PLACEHOLDER-14805)]
        [(read-string
          (subs
           PLACEHOLDER-14805
           0
           (clojure.lang.Numbers/dec PLACEHOLDER-14806)))
         (last PLACEHOLDER-14805)])))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14807]
      (let*
       [PLACEHOLDER-14808
        (map divide-num-char (divide-string PLACEHOLDER-14807))]
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-14809]
           (repeat
            (first PLACEHOLDER-14809)
            (second PLACEHOLDER-14809))))
         PLACEHOLDER-14808)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11992
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11992))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11993]
      (reduce
       (fn*
        ([PLACEHOLDER-11994 PLACEHOLDER-11995]
         (let*
          [PLACEHOLDER-11996 (last PLACEHOLDER-11994)]
          (if
           PLACEHOLDER-11996
           (let*
            [PLACEHOLDER-11997
             PLACEHOLDER-11996
             PLACEHOLDER-11998
             (clojure.lang.RT/nth PLACEHOLDER-11997 0 nil)
             PLACEHOLDER-11999
             (clojure.lang.RT/nth PLACEHOLDER-11997 1 nil)]
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-11999
              PLACEHOLDER-11995)
             (update-in
              PLACEHOLDER-11994
              [(. PLACEHOLDER-11994 lastIndexOf) 0]
              inc)
             (conj PLACEHOLDER-11994 [1 PLACEHOLDER-11995])))
           [1 PLACEHOLDER-11995]))))
       []
       PLACEHOLDER-11993))))
   (def run-length-decode (fn* ([PLACEHOLDER-12000] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13581
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13581))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    convert
    (fn*
     ([PLACEHOLDER-13582 PLACEHOLDER-13583]
      (apply
       str
       (map
        PLACEHOLDER-13583
        (take-while
         some?
         (repeatedly (fn* ([] (re-find PLACEHOLDER-13582))))))))))
   (def
    encode-step
    (fn*
     ([PLACEHOLDER-13584]
      (let*
       [PLACEHOLDER-13585
        PLACEHOLDER-13584
        PLACEHOLDER-13586
        (clojure.lang.RT/nth PLACEHOLDER-13585 0 nil)
        PLACEHOLDER-13587
        (clojure.lang.RT/nth PLACEHOLDER-13585 1 nil)]
       (let*
        [PLACEHOLDER-13588 (clojure.lang.RT/count PLACEHOLDER-13586)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-13588 1)
         PLACEHOLDER-13587
         (str PLACEHOLDER-13588 PLACEHOLDER-13587)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13589]
      (convert
       (re-matcher (re-pattern "(.)\\1*") PLACEHOLDER-13589)
       encode-step))))
   (def
    decode-step
    (fn*
     ([PLACEHOLDER-13590]
      (let*
       [PLACEHOLDER-13591
        PLACEHOLDER-13590
        PLACEHOLDER-13592
        (clojure.lang.RT/nth PLACEHOLDER-13591 0 nil)
        PLACEHOLDER-13593
        (clojure.lang.RT/nth PLACEHOLDER-13591 1 nil)
        PLACEHOLDER-13594
        (clojure.lang.RT/nth PLACEHOLDER-13591 2 nil)]
       (if
        (empty? PLACEHOLDER-13593)
        PLACEHOLDER-13594
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-13593)
          PLACEHOLDER-13594)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13595]
      (convert
       (re-matcher (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13595)
       decode-step)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-7957
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-7957))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-7958]
      (do
       (def parts (doall (partition-by identity PLACEHOLDER-7958)))
       (def strparts (map str parts))
       (def count-parts (map str (map count parts)))
       (def
        re-order-part
        (map
         (fn*
          ([PLACEHOLDER-7959]
           (re-find (re-pattern "[A-Z]") PLACEHOLDER-7959)))
         strparts))
       (apply str (flatten (map vector count-parts re-order-part)))))))
   (def run-length-decode (fn* ([PLACEHOLDER-7960] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13483
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13483))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    repeat-occurences
    (fn*
     ([PLACEHOLDER-13484]
      (let*
       [PLACEHOLDER-13485
        PLACEHOLDER-13484
        PLACEHOLDER-13486
        (clojure.lang.RT/nth PLACEHOLDER-13485 0 nil)
        PLACEHOLDER-13487
        (clojure.lang.RT/nth PLACEHOLDER-13485 1 nil)
        PLACEHOLDER-13488
        (clojure.lang.RT/nth PLACEHOLDER-13485 2 nil)]
       (if
        (not= "" PLACEHOLDER-13487)
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-13487)
         PLACEHOLDER-13488)
        (if :else PLACEHOLDER-13488))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13489]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-13489)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13490]
      (apply
       str
       (mapcat
        repeat-occurences
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z ])")
         PLACEHOLDER-13490)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12600
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12600))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-12601] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-12602] nil))))
  "Exception inresources/run-length-encoding/214/src/run_length_encoding.cljCould not locate the/parsatron__init.class, the/parsatron.clj or the/parsatron.cljc on classpath."
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8005
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8005))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/use '[clojure.string :only [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    numeric?
    (fn*
     ([PLACEHOLDER-8006]
      (java.lang.Character/isDigit PLACEHOLDER-8006))))
   (def
    non-numeric?
    (fn* ([PLACEHOLDER-8007] (not (numeric? PLACEHOLDER-8007)))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-8008]
      (if
       (empty? PLACEHOLDER-8008)
       0
       (java.lang.Integer/parseInt PLACEHOLDER-8008)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8009]
      (loop*
       [PLACEHOLDER-8010 PLACEHOLDER-8009 PLACEHOLDER-8011 ""]
       (let*
        [PLACEHOLDER-8012
         (first PLACEHOLDER-8010)
         PLACEHOLDER-8013
         (take-while #{PLACEHOLDER-8012} PLACEHOLDER-8010)
         PLACEHOLDER-8014
         (join (drop-while #{PLACEHOLDER-8012} PLACEHOLDER-8010))
         PLACEHOLDER-8015
         (clojure.lang.RT/count PLACEHOLDER-8013)
         PLACEHOLDER-8016
         (if
          (clojure.lang.Numbers/lt 1 PLACEHOLDER-8015)
          (str PLACEHOLDER-8015)
          "")
         PLACEHOLDER-8017
         (join [PLACEHOLDER-8011 PLACEHOLDER-8016 PLACEHOLDER-8012])]
        (if
         (empty? PLACEHOLDER-8010)
         PLACEHOLDER-8017
         (recur PLACEHOLDER-8014 PLACEHOLDER-8017)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8018]
      (loop*
       [PLACEHOLDER-8019 PLACEHOLDER-8018 PLACEHOLDER-8020 ""]
       (let*
        [PLACEHOLDER-8021
         (join (take-while non-numeric? PLACEHOLDER-8019))
         PLACEHOLDER-8022
         (drop-while non-numeric? PLACEHOLDER-8019)
         PLACEHOLDER-8023
         (join (drop-while numeric? PLACEHOLDER-8022))
         PLACEHOLDER-8024
         (join (rest PLACEHOLDER-8023))
         PLACEHOLDER-8025
         (parse-int (join (take-while numeric? PLACEHOLDER-8022)))
         PLACEHOLDER-8026
         (join (repeat PLACEHOLDER-8025 (first PLACEHOLDER-8023)))
         PLACEHOLDER-8027
         (join [PLACEHOLDER-8020 PLACEHOLDER-8021 PLACEHOLDER-8026])]
        (if
         (empty? PLACEHOLDER-8019)
         PLACEHOLDER-8027
         (recur PLACEHOLDER-8024 PLACEHOLDER-8027))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15065
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15065))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15066]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-15067]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-15067)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-15066)))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-15068]
      (if
       (clojure.lang.Numbers/gte
        (clojure.lang.RT/count PLACEHOLDER-15068)
        2)
       (let*
        [PLACEHOLDER-15069
         (java.lang.Integer/parseInt
          (subs
           PLACEHOLDER-15068
           0
           (clojure.lang.Numbers/dec
            (clojure.lang.RT/count PLACEHOLDER-15068))))
         PLACEHOLDER-15070
         (str (last PLACEHOLDER-15068))]
        (apply str (repeat PLACEHOLDER-15069 PLACEHOLDER-15070)))
       PLACEHOLDER-15068))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15071]
      (apply
       str
       (map
        expand
        (re-seq
         (re-pattern "[0-9]+[aA-zZ\\s]|[aA-zZ\\s]")
         PLACEHOLDER-15071)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11075
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11075))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11076]
      (let*
       [PLACEHOLDER-11077
        PLACEHOLDER-11076
        PLACEHOLDER-11078
        (clojure.lang.RT/nth PLACEHOLDER-11077 0 nil)
        PLACEHOLDER-11079
        (clojure.lang.RT/nth PLACEHOLDER-11077 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11078 PLACEHOLDER-11079)
        PLACEHOLDER-11079
        (str
         (clojure.lang.RT/count PLACEHOLDER-11078)
         PLACEHOLDER-11079))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11080]
      (apply
       str
       (map
        encode
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-11080))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11081]
      (let*
       [PLACEHOLDER-11082
        PLACEHOLDER-11081
        PLACEHOLDER-11083
        (clojure.lang.RT/nth PLACEHOLDER-11082 0 nil)
        PLACEHOLDER-11084
        (clojure.lang.RT/nth PLACEHOLDER-11082 1 nil)
        PLACEHOLDER-11085
        (clojure.lang.RT/nth PLACEHOLDER-11082 2 nil)]
       (if
        (empty? PLACEHOLDER-11084)
        PLACEHOLDER-11085
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-11084)
          PLACEHOLDER-11085)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11086]
      (apply
       str
       (map
        decode
        (re-seq (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-11086)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13107
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13107))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([] "")
     ([PLACEHOLDER-13108]
      (if
       (clojure.string/blank? PLACEHOLDER-13108)
       ""
       (clojure.string/join
        (map
         (fn*
          ([PLACEHOLDER-13109]
           (str
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-13109)
              1)
             (clojure.lang.RT/count PLACEHOLDER-13109)
             "")
            (first PLACEHOLDER-13109))))
         (partition-by identity PLACEHOLDER-13108)))))))
   (def
    run-length-decode
    (fn*
     ([] "")
     ([PLACEHOLDER-13110]
      (if
       (clojure.string/blank? PLACEHOLDER-13110)
       ""
       (str/join
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-13111]
            (repeat
             (if
              (str/blank? (second PLACEHOLDER-13111))
              1
              (java.lang.Integer/parseInt (second PLACEHOLDER-13111)))
             (clojure.lang.RT/nth PLACEHOLDER-13111 2))))
          (re-seq
           (re-pattern "(\\d*)([a-zA-Z\\s])")
           PLACEHOLDER-13110)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14831
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14831))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14832]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14833]
          (let*
           [PLACEHOLDER-14834
            (clojure.lang.RT/count PLACEHOLDER-14833)
            PLACEHOLDER-14835
            (first PLACEHOLDER-14833)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-14834 1)
            PLACEHOLDER-14835
            (str PLACEHOLDER-14834 PLACEHOLDER-14835)))))
        (partition-by identity PLACEHOLDER-14832))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14836]
      (clojure.string/replace
       PLACEHOLDER-14836
       (re-pattern "(\\d+)(.)")
       (fn*
        ([PLACEHOLDER-14837]
         (let*
          [PLACEHOLDER-14838
           PLACEHOLDER-14837
           PLACEHOLDER-14839
           (clojure.lang.RT/nth PLACEHOLDER-14838 0 nil)
           PLACEHOLDER-14840
           (clojure.lang.RT/nth PLACEHOLDER-14838 1 nil)
           PLACEHOLDER-14841
           (clojure.lang.RT/nth PLACEHOLDER-14838 2 nil)]
          (apply
           str
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-14840)
            PLACEHOLDER-14841))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14465
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14465))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14466]
      (loop*
       [PLACEHOLDER-14467
        PLACEHOLDER-14466
        PLACEHOLDER-14468
        nil
        PLACEHOLDER-14469
        nil
        PLACEHOLDER-14470
        []]
       (if
        (empty? PLACEHOLDER-14467)
        (apply
         str
         (conj
          PLACEHOLDER-14470
          (if (not= PLACEHOLDER-14468 1) PLACEHOLDER-14468)
          PLACEHOLDER-14469))
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-14467)
          PLACEHOLDER-14469)
         (recur
          (rest PLACEHOLDER-14467)
          (clojure.lang.Numbers/inc PLACEHOLDER-14468)
          PLACEHOLDER-14469
          PLACEHOLDER-14470)
         (if
          :else
          (recur
           (rest PLACEHOLDER-14467)
           1
           (first PLACEHOLDER-14467)
           (conj
            PLACEHOLDER-14470
            (if (not= PLACEHOLDER-14468 1) PLACEHOLDER-14468)
            PLACEHOLDER-14469)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14471]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14472]
          (let*
           [PLACEHOLDER-14473
            PLACEHOLDER-14472
            PLACEHOLDER-14474
            (clojure.lang.RT/nth PLACEHOLDER-14473 0 nil)
            PLACEHOLDER-14475
            (clojure.lang.RT/nth PLACEHOLDER-14473 1 nil)
            PLACEHOLDER-14476
            (clojure.lang.RT/nth PLACEHOLDER-14473 2 nil)]
           (repeat
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-14475 "")
             1
             (java.lang.Integer/parseInt PLACEHOLDER-14475))
            PLACEHOLDER-14476))))
        (re-seq (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-14471)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11917
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11917))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11918]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11919]
          (let*
           [PLACEHOLDER-11920
            (clojure.lang.RT/count PLACEHOLDER-11919)
            PLACEHOLDER-11921
            (first PLACEHOLDER-11919)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-11920 1)
            (list PLACEHOLDER-11920 PLACEHOLDER-11921)
            (list PLACEHOLDER-11921)))))
        (partition-by identity PLACEHOLDER-11918))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11922]
      (first
       (reduce
        (fn*
         ([PLACEHOLDER-11923 PLACEHOLDER-11924]
          (let*
           [PLACEHOLDER-11925
            PLACEHOLDER-11923
            PLACEHOLDER-11926
            (clojure.lang.RT/nth PLACEHOLDER-11925 0 nil)
            PLACEHOLDER-11927
            (clojure.lang.RT/nth PLACEHOLDER-11925 1 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-11927 nil)
            (if
             (java.lang.Character/isDigit PLACEHOLDER-11924)
             [PLACEHOLDER-11926 (read-string (str PLACEHOLDER-11924))]
             [(str PLACEHOLDER-11926 PLACEHOLDER-11924)
              PLACEHOLDER-11927])
            (if
             (java.lang.Character/isDigit PLACEHOLDER-11924)
             [PLACEHOLDER-11926
              (clojure.lang.Numbers/add
               (read-string (str PLACEHOLDER-11924))
               (clojure.lang.Numbers/multiply 10 PLACEHOLDER-11927))]
             [(apply
               str
               PLACEHOLDER-11926
               (repeat PLACEHOLDER-11927 PLACEHOLDER-11924))
              nil])))))
        ["" nil]
        PLACEHOLDER-11922))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14303
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14303))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-14304] "")))
   (def run-length-decode (fn* ([PLACEHOLDER-14305] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10007
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10007))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-plain-text
    (fn*
     ([PLACEHOLDER-10008]
      (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-10008)))))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-10009]
      (str
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-10009))
        ""
        (clojure.lang.RT/count PLACEHOLDER-10009))
       (first PLACEHOLDER-10009)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10010]
      (apply
       str
       (map encode-chunk (split-plain-text PLACEHOLDER-10010))))))
   (def
    split-cipher-text
    (fn*
     ([PLACEHOLDER-10011]
      (map rest (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-10011)))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-10012]
      (if
       (clojure.lang.Util/equiv "" (first PLACEHOLDER-10012))
       (second PLACEHOLDER-10012)
       (apply
        str
        (repeat
         (clojure.edn/read-string (first PLACEHOLDER-10012))
         (second PLACEHOLDER-10012)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10013]
      (apply
       str
       (map decode-chunk (split-cipher-text PLACEHOLDER-10013)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10447
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10447))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    parse-length
    (fn*
     ([PLACEHOLDER-10448]
      (if
       (seq PLACEHOLDER-10448)
       (java.lang.Integer/parseInt PLACEHOLDER-10448)
       1))))
   (def
    get-character-encoding
    (fn*
     ([PLACEHOLDER-10449]
      (let*
       [PLACEHOLDER-10450 (clojure.lang.RT/count PLACEHOLDER-10449)]
       (str
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-10450 1)
         PLACEHOLDER-10450)
        (first PLACEHOLDER-10449))))))
   (def
    get-letters
    (fn*
     ([PLACEHOLDER-10451]
      (filter
       (fn*
        ([PLACEHOLDER-10452]
         (not (java.lang.Character/isDigit PLACEHOLDER-10452))))
       PLACEHOLDER-10451))))
   (def
    get-lengths
    (fn*
     ([PLACEHOLDER-10453]
      (map
       (fn*
        ([PLACEHOLDER-10454]
         (let*
          [PLACEHOLDER-10455
           PLACEHOLDER-10454
           PLACEHOLDER-10456
           (clojure.lang.RT/nth PLACEHOLDER-10455 0 nil)
           PLACEHOLDER-10457
           (clojure.lang.RT/nth PLACEHOLDER-10455 1 nil)]
          (parse-length PLACEHOLDER-10457))))
       (re-seq (re-pattern "(\\d*)[a-zA-Z ]") PLACEHOLDER-10453)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10458]
      (apply
       str
       (map
        get-character-encoding
        (partition-by identity PLACEHOLDER-10458))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10459]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10460 PLACEHOLDER-10461]
          (repeat PLACEHOLDER-10460 PLACEHOLDER-10461)))
        (get-lengths PLACEHOLDER-10459)
        (get-letters PLACEHOLDER-10459)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12405
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12405))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode-acc
    (fn*
     ([PLACEHOLDER-12406
       PLACEHOLDER-12407
       PLACEHOLDER-12408
       PLACEHOLDER-12409]
      (if
       (empty? PLACEHOLDER-12406)
       (str/join
        (conj
         PLACEHOLDER-12407
         (if
          (clojure.lang.Numbers/gt PLACEHOLDER-12408 1)
          PLACEHOLDER-12408
          "")
         PLACEHOLDER-12409))
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-12409
         (first PLACEHOLDER-12406))
        (recur
         (rest PLACEHOLDER-12406)
         PLACEHOLDER-12407
         (clojure.lang.Numbers/inc PLACEHOLDER-12408)
         PLACEHOLDER-12409)
        (if
         :else
         (recur
          (rest PLACEHOLDER-12406)
          (conj
           PLACEHOLDER-12407
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-12408 1)
            PLACEHOLDER-12408
            "")
           PLACEHOLDER-12409)
          1
          (first PLACEHOLDER-12406))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12410]
      (if
       (empty? PLACEHOLDER-12410)
       ""
       (run-length-encode-acc
        PLACEHOLDER-12410
        []
        0
        (first PLACEHOLDER-12410))))))
   (def
    run-length-decode-acc
    (fn*
     ([PLACEHOLDER-12411 PLACEHOLDER-12412 PLACEHOLDER-12413]
      (if
       (empty? PLACEHOLDER-12411)
       (str/join PLACEHOLDER-12413)
       (if
        (java.lang.Character/isDigit (first PLACEHOLDER-12411))
        (recur
         (rest PLACEHOLDER-12411)
         (clojure.lang.Numbers/add
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/intCast (first PLACEHOLDER-12411))
           (clojure.lang.RT/intCast \0))
          (clojure.lang.Numbers/multiply 10 PLACEHOLDER-12412))
         PLACEHOLDER-12413)
        (if
         :else
         (recur
          (rest PLACEHOLDER-12411)
          0
          (concat
           PLACEHOLDER-12413
           (repeat
            (if
             (clojure.lang.Util/equiv 0 PLACEHOLDER-12412)
             1
             PLACEHOLDER-12412)
            (first PLACEHOLDER-12411))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12414]
      (if
       (empty? PLACEHOLDER-12414)
       ""
       (run-length-decode-acc PLACEHOLDER-12414 0 []))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13288
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13288))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-string
    (fn*
     ([PLACEHOLDER-13289]
      (loop*
       [PLACEHOLDER-13290
        (dedupe PLACEHOLDER-13289)
        PLACEHOLDER-13291
        (seq PLACEHOLDER-13289)
        PLACEHOLDER-13292
        []]
       (if
        (empty? PLACEHOLDER-13291)
        PLACEHOLDER-13292
        (recur
         (rest PLACEHOLDER-13290)
         (drop-while
          (fn*
           ([PLACEHOLDER-13293]
            (clojure.lang.Util/equiv
             (first PLACEHOLDER-13290)
             PLACEHOLDER-13293)))
          PLACEHOLDER-13291)
         (conj
          PLACEHOLDER-13292
          (take-while
           (fn*
            ([PLACEHOLDER-13294]
             (clojure.lang.Util/equiv
              (first PLACEHOLDER-13290)
              PLACEHOLDER-13294)))
           PLACEHOLDER-13291))))))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-13295]
      (reduce
       (fn*
        ([PLACEHOLDER-13296 PLACEHOLDER-13297]
         (if
          (clojure.lang.Numbers/gt
           (clojure.lang.RT/count PLACEHOLDER-13297)
           1)
          (conj
           PLACEHOLDER-13296
           (str
            (clojure.lang.RT/count PLACEHOLDER-13297)
            (first PLACEHOLDER-13297)))
          (conj PLACEHOLDER-13296 (str (first PLACEHOLDER-13297))))))
       []
       PLACEHOLDER-13295))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13298]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-13298)
       ""
       (str/join "" (encode (split-string PLACEHOLDER-13298)))))))
   (def
    deparse
    (fn*
     ([PLACEHOLDER-13299]
      (let*
       [PLACEHOLDER-13300 (clojure.lang.RT/count PLACEHOLDER-13299)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-13300)
        PLACEHOLDER-13299
        (repeat
         (java.lang.Integer/parseInt
          (subs
           PLACEHOLDER-13299
           0
           (clojure.lang.Numbers/dec PLACEHOLDER-13300)))
         (last PLACEHOLDER-13299)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13301]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-13301)
       ""
       (str/join
        ""
        (map
         (fn* ([PLACEHOLDER-13302] (str/join "" PLACEHOLDER-13302)))
         (map
          (fn* ([PLACEHOLDER-13303] (deparse PLACEHOLDER-13303)))
          (re-seq
           (re-pattern "\\d+\\w|\\w|\\d+\\s")
           PLACEHOLDER-13301)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9309
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9309))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.test :as t :refer [deftest are]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9310]
      (apply
       str
       (filter
        (fn* ([PLACEHOLDER-9311] (not= 1 PLACEHOLDER-9311)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-9310)))))))
   (def
    test-encoding
    (fn*
     ([] (clojure.test/test-var #'run-length-encoding/test-encoding))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-9315]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-9315))
       PLACEHOLDER-9315
       (if
        :else
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt
           (apply str (butlast PLACEHOLDER-9315)))
          (last PLACEHOLDER-9315))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9316]
      (apply
       str
       (mapcat
        expand
        (re-seq (re-pattern "\\d*.{1}") PLACEHOLDER-9316))))))
   (def
    test-decoding
    (fn*
     ([]
      (clojure.test/test-var #'run-length-encoding/test-decoding)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9142
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9142))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9143]
      (clojure.string/replace
       PLACEHOLDER-9143
       (re-pattern "(\\w| )\\1{1,}")
       (fn*
        ([PLACEHOLDER-9144]
         (str
          (clojure.lang.RT/count (first PLACEHOLDER-9144))
          (second PLACEHOLDER-9144))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9145]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9146]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-9146)
            1)
           (apply
            str
            (repeat
             (read-string (apply str (butlast PLACEHOLDER-9146)))
             (str (last PLACEHOLDER-9146))))
           PLACEHOLDER-9146)))
        (re-seq
         (re-pattern "\\d+[A-Za-z ]|[A-Za-z ]")
         PLACEHOLDER-9145)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12158
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12158))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12159]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-12160]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-12160)))
        (mapcat
         (fn*
          ([PLACEHOLDER-12161]
           [(clojure.lang.RT/count PLACEHOLDER-12161)
            (first PLACEHOLDER-12161)]))
         (partition-by identity PLACEHOLDER-12159)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12162]
      (apply
       str
       (mapcat
        (fn* ([PLACEHOLDER-12163] (apply repeat PLACEHOLDER-12163)))
        (map
         (fn*
          ([PLACEHOLDER-12164]
           (let*
            [PLACEHOLDER-12165
             PLACEHOLDER-12164
             PLACEHOLDER-12166
             (clojure.lang.RT/nth PLACEHOLDER-12165 0 nil)
             PLACEHOLDER-12167
             (clojure.lang.RT/nth PLACEHOLDER-12165 1 nil)
             PLACEHOLDER-12168
             (clojure.lang.RT/nth PLACEHOLDER-12165 2 nil)]
            [(if
              PLACEHOLDER-12167
              (java.lang.Integer/parseInt PLACEHOLDER-12167)
              1)
             PLACEHOLDER-12168])))
         (re-seq (re-pattern "(\\d+)?(\\D)") PLACEHOLDER-12162))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8594
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8594))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8595]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8596]
          (let*
           [PLACEHOLDER-8597
            PLACEHOLDER-8596
            PLACEHOLDER-8598
            (clojure.lang.RT/nth PLACEHOLDER-8597 0 nil)
            PLACEHOLDER-8599
            (clojure.lang.RT/nth PLACEHOLDER-8597 1 nil)]
           (let*
            [PLACEHOLDER-8600 (clojure.lang.RT/count PLACEHOLDER-8598)]
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-8600 1)
             PLACEHOLDER-8599
             (str PLACEHOLDER-8600 PLACEHOLDER-8599))))))
        (re-seq (re-pattern "([A-Za-z ])\\1*") PLACEHOLDER-8595))))))
   (def
    repeat-string
    (fn*
     ([PLACEHOLDER-8601 PLACEHOLDER-8602]
      (apply str (repeat PLACEHOLDER-8601 PLACEHOLDER-8602)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8603]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8604]
          (let*
           [PLACEHOLDER-8605
            PLACEHOLDER-8604
            PLACEHOLDER-8606
            (clojure.lang.RT/nth PLACEHOLDER-8605 0 nil)
            PLACEHOLDER-8607
            (clojure.lang.RT/nth PLACEHOLDER-8605 1 nil)
            PLACEHOLDER-8608
            (clojure.lang.RT/nth PLACEHOLDER-8605 2 nil)]
           (repeat-string
            (read-string
             (let*
              [PLACEHOLDER-8609 PLACEHOLDER-8607]
              (if PLACEHOLDER-8609 PLACEHOLDER-8609 "1")))
            PLACEHOLDER-8608))))
        (re-seq
         (re-pattern "(\\d+)?([A-Za-z ])")
         PLACEHOLDER-8603)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13596
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13596))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13597]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13598]
          (str
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-13598))
            ""
            (clojure.lang.RT/count PLACEHOLDER-13598))
           (first PLACEHOLDER-13598))))
        (partition-by identity PLACEHOLDER-13597))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13599]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13600]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-13600))
           PLACEHOLDER-13600
           (repeat
            (read-string (apply str (butlast PLACEHOLDER-13600)))
            (last PLACEHOLDER-13600)))))
        (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-13599)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8117
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8117))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8118]
      (apply
       str
       (flatten
        (mapcat
         (fn*
          ([PLACEHOLDER-8119]
           (list
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-8119)
              1)
             (clojure.lang.RT/count PLACEHOLDER-8119))
            (first PLACEHOLDER-8119))))
         (partition-by identity PLACEHOLDER-8118)))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-8120]
      (try
       (new Integer (re-find (re-pattern "\\d+") PLACEHOLDER-8120))
       (catch NumberFormatException PLACEHOLDER-8121 1)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8122]
      (let*
       [PLACEHOLDER-8123
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-8122)
        PLACEHOLDER-8124
        (map last PLACEHOLDER-8123)
        PLACEHOLDER-8125
        (map parse-int PLACEHOLDER-8123)
        PLACEHOLDER-8126
        (map list PLACEHOLDER-8125 PLACEHOLDER-8124)]
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-8127]
           (repeat
            (first PLACEHOLDER-8127)
            (second PLACEHOLDER-8127))))
         PLACEHOLDER-8126)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9147
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9147))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    str->number
    (fn*
     ([PLACEHOLDER-9148]
      (try
       (java.lang.Integer/parseInt PLACEHOLDER-9148)
       (catch Exception PLACEHOLDER-9149 nil)))))
   (def
    create-string
    (fn*
     ([PLACEHOLDER-9150] (create-string PLACEHOLDER-9150 ""))
     ([PLACEHOLDER-9151 PLACEHOLDER-9152]
      (if
       (clojure.lang.Util/equiv
        0
        (clojure.lang.RT/count PLACEHOLDER-9151))
       PLACEHOLDER-9152
       (let*
        [PLACEHOLDER-9153 (str->number (first PLACEHOLDER-9151))]
        (if
         PLACEHOLDER-9153
         (recur
          (nthrest PLACEHOLDER-9151 2)
          (str
           PLACEHOLDER-9152
           (apply
            str
            (repeat PLACEHOLDER-9153 (second PLACEHOLDER-9151)))))
         (recur
          (rest PLACEHOLDER-9151)
          (str PLACEHOLDER-9152 (first PLACEHOLDER-9151)))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9154]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9155]
          (let*
           [PLACEHOLDER-9156 (clojure.lang.RT/count PLACEHOLDER-9155)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-9156 1)
            PLACEHOLDER-9155
            (str PLACEHOLDER-9156 (first PLACEHOLDER-9155))))))
        (map
         first
         (re-seq (re-pattern "([^0-9])\\1*") PLACEHOLDER-9154)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9157]
      (apply
       str
       (create-string
        (map
         first
         (re-seq
          (re-pattern "([^0-9]){1}|[0-9]+")
          PLACEHOLDER-9157))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11692
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11692))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    partition-by-identitcal
    (fn*
     ([PLACEHOLDER-11693]
      (partition-by identity (into [] PLACEHOLDER-11693)))))
   (def
    as-occurrence-map
    (fn*
     ([PLACEHOLDER-11694]
      (let*
       [PLACEHOLDER-11695
        (clojure.lang.RT/count PLACEHOLDER-11694)
        PLACEHOLDER-11696
        (str (first PLACEHOLDER-11694))]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-11695)
        PLACEHOLDER-11696
        (if :else (str PLACEHOLDER-11695 PLACEHOLDER-11696)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11697]
      (let*
       [PLACEHOLDER-11698 (partition-by-identitcal PLACEHOLDER-11697)]
       (str/join "" (map as-occurrence-map PLACEHOLDER-11698))))))
   (def
    repeat-character
    (fn*
     ([PLACEHOLDER-11699]
      (if
       (empty? (second PLACEHOLDER-11699))
       (last PLACEHOLDER-11699)
       (if
        :else
        (str/join
         ""
         (repeat
          (new Integer (second PLACEHOLDER-11699))
          (last PLACEHOLDER-11699))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11700]
      (let*
       [PLACEHOLDER-11701
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-11700)]
       (str/join "" (map repeat-character PLACEHOLDER-11701)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10697
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10697))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    pairs
    (fn*
     ([PLACEHOLDER-10698]
      (map
       vector
       PLACEHOLDER-10698
       (concat (rest PLACEHOLDER-10698) '(nil))))))
   (def
    pairs-reducer
    (fn*
     ([PLACEHOLDER-10699 PLACEHOLDER-10700]
      (let*
       [PLACEHOLDER-10701
        PLACEHOLDER-10699
        PLACEHOLDER-10702
        (clojure.lang.RT/nth PLACEHOLDER-10701 0 nil)
        PLACEHOLDER-10703
        (clojure.lang.RT/nth PLACEHOLDER-10701 1 nil)
        PLACEHOLDER-10704
        PLACEHOLDER-10700
        PLACEHOLDER-10705
        (clojure.lang.RT/nth PLACEHOLDER-10704 0 nil)
        PLACEHOLDER-10706
        (clojure.lang.RT/nth PLACEHOLDER-10704 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10705 PLACEHOLDER-10706)
        [(clojure.lang.Numbers/inc PLACEHOLDER-10702)
         PLACEHOLDER-10703]
        [1
         (cons
          [PLACEHOLDER-10702 PLACEHOLDER-10705]
          PLACEHOLDER-10703)])))))
   (def
    count-characters
    (fn*
     ([PLACEHOLDER-10707]
      (reverse
       (second
        (reduce pairs-reducer [1 '()] (pairs PLACEHOLDER-10707)))))))
   (def
    encode-character-count
    (fn*
     ([PLACEHOLDER-10708 PLACEHOLDER-10709]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-10708 1)
       PLACEHOLDER-10709
       (str PLACEHOLDER-10708 PLACEHOLDER-10709)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10710]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10711]
          (apply encode-character-count PLACEHOLDER-10711)))
        (count-characters PLACEHOLDER-10710))))))
   (def
    parse-character-count-match
    (fn*
     ([PLACEHOLDER-10712]
      (let*
       [PLACEHOLDER-10713
        PLACEHOLDER-10712
        PLACEHOLDER-10714
        (clojure.lang.RT/nth PLACEHOLDER-10713 0 nil)
        PLACEHOLDER-10715
        (clojure.lang.RT/nth PLACEHOLDER-10713 1 nil)
        PLACEHOLDER-10716
        (clojure.lang.RT/nth PLACEHOLDER-10713 2 nil)]
       [(if
         (clojure.lang.Util/identical PLACEHOLDER-10715 nil)
         1
         (java.lang.Integer/parseUnsignedInt PLACEHOLDER-10715))
        (first PLACEHOLDER-10716)]))))
   (def
    parse-character-counts
    (fn*
     ([PLACEHOLDER-10717]
      (map
       parse-character-count-match
       (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-10717)))))
   (def
    decode-character-count
    (fn*
     ([PLACEHOLDER-10718 PLACEHOLDER-10719]
      (apply str (repeat PLACEHOLDER-10718 PLACEHOLDER-10719)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10720]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10721]
          (apply decode-character-count PLACEHOLDER-10721)))
        (parse-character-counts PLACEHOLDER-10720)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12129
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12129))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-12130]
      (let*
       [PLACEHOLDER-12131
        PLACEHOLDER-12130
        PLACEHOLDER-12132
        (clojure.core/seq PLACEHOLDER-12131)
        PLACEHOLDER-12133
        (clojure.core/first PLACEHOLDER-12132)
        PLACEHOLDER-12134
        (clojure.core/next PLACEHOLDER-12132)
        PLACEHOLDER-12135
        PLACEHOLDER-12133
        PLACEHOLDER-12136
        PLACEHOLDER-12134
        PLACEHOLDER-12137
        PLACEHOLDER-12131]
       (if
        PLACEHOLDER-12136
        (str
         (clojure.lang.RT/count PLACEHOLDER-12137)
         PLACEHOLDER-12135)
        PLACEHOLDER-12135)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12138]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-12138))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12139]
      (let*
       [PLACEHOLDER-12140
        PLACEHOLDER-12139
        PLACEHOLDER-12141
        (clojure.lang.RT/nth PLACEHOLDER-12140 0 nil)
        PLACEHOLDER-12142
        (clojure.lang.RT/nth PLACEHOLDER-12140 1 nil)
        PLACEHOLDER-12143
        (clojure.lang.RT/nth PLACEHOLDER-12140 2 nil)]
       (let*
        [PLACEHOLDER-12144
         (if
          (empty? PLACEHOLDER-12142)
          1
          (new Integer PLACEHOLDER-12142))]
        (apply str (repeat PLACEHOLDER-12144 PLACEHOLDER-12143)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12145]
      (apply
       str
       (map
        decode
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-12145)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10676
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10676))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10677]
      (apply
       str
       (remove
        #{1}
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-10678]
            (list
             (clojure.lang.RT/count PLACEHOLDER-10678)
             (first PLACEHOLDER-10678))))
          (partition-by identity PLACEHOLDER-10677))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10679]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10680]
          (let*
           [PLACEHOLDER-10681
            PLACEHOLDER-10680
            PLACEHOLDER-10682
            (clojure.lang.RT/nth PLACEHOLDER-10681 0 nil)
            PLACEHOLDER-10683
            (clojure.lang.RT/nth PLACEHOLDER-10681 1 nil)
            PLACEHOLDER-10684
            (clojure.lang.RT/nth PLACEHOLDER-10681 2 nil)]
           (repeat
            (bigint
             (let*
              [PLACEHOLDER-10685 PLACEHOLDER-10683]
              (if PLACEHOLDER-10685 PLACEHOLDER-10685 "1")))
            PLACEHOLDER-10684))))
        (re-seq (re-pattern "(\\d+)?(\\D)") PLACEHOLDER-10679)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11864
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11864))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-11865] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-11866] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11014
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11014))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def pattern (re-pattern "(.)\\1{0,}"))
   (def inv-pattern (re-pattern "(\\d+)(.)|."))
   (def
    expand
    (fn*
     ([PLACEHOLDER-11015]
      (let*
       [PLACEHOLDER-11016
        PLACEHOLDER-11015
        PLACEHOLDER-11017
        (clojure.lang.RT/nth PLACEHOLDER-11016 0 nil)
        PLACEHOLDER-11018
        (clojure.lang.RT/nth PLACEHOLDER-11016 1 nil)
        PLACEHOLDER-11019
        (clojure.lang.RT/nth PLACEHOLDER-11016 2 nil)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-11018 nil)
        (list PLACEHOLDER-11017)
        (repeat (new Integer PLACEHOLDER-11018) PLACEHOLDER-11019))))))
   (def
    zipper
    (fn*
     ([PLACEHOLDER-11020]
      (let*
       [PLACEHOLDER-11021
        PLACEHOLDER-11020
        PLACEHOLDER-11022
        (clojure.lang.RT/nth PLACEHOLDER-11021 0 nil)
        PLACEHOLDER-11023
        (clojure.lang.RT/nth PLACEHOLDER-11021 1 nil)]
       (let*
        [PLACEHOLDER-11024 (clojure.lang.RT/count PLACEHOLDER-11022)]
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-11024)
         PLACEHOLDER-11023
         (format "%d%s" PLACEHOLDER-11024 PLACEHOLDER-11023)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11025]
      (apply str (map zipper (re-seq pattern PLACEHOLDER-11025))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11026]
      (apply
       str
       (flatten
        (map expand (re-seq inv-pattern PLACEHOLDER-11026))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14886
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14886))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    get-strings-by-char
    (fn*
     ([PLACEHOLDER-14887 PLACEHOLDER-14888]
      (re-seq
       (re-pattern (str PLACEHOLDER-14888 "+"))
       PLACEHOLDER-14887))))
   (def
    get-all-chars
    (fn* ([PLACEHOLDER-14889] (seq (set (seq PLACEHOLDER-14889))))))
   (def
    return-char-prefix
    (fn*
     ([PLACEHOLDER-14890]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-14890))
       ""
       (clojure.lang.RT/count PLACEHOLDER-14890)))))
   (def
    generate-pattern
    (fn*
     ([PLACEHOLDER-14891]
      (re-pattern
       (str
        "(?<!"
        (first PLACEHOLDER-14891)
        ")"
        PLACEHOLDER-14891
        "(?!"
        (first PLACEHOLDER-14891)
        ")")))))
   (def
    encode-string
    (fn*
     ([PLACEHOLDER-14892 PLACEHOLDER-14893]
      (clojure.string/replace
       PLACEHOLDER-14893
       (generate-pattern PLACEHOLDER-14892)
       (str
        (return-char-prefix PLACEHOLDER-14892)
        (first PLACEHOLDER-14892))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14894]
      (let*
       [PLACEHOLDER-14895
        (get-all-chars PLACEHOLDER-14894)
        PLACEHOLDER-14897
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-14896]
            (get-strings-by-char PLACEHOLDER-14894 PLACEHOLDER-14896)))
          PLACEHOLDER-14895))]
       (loop*
        [PLACEHOLDER-14898
         PLACEHOLDER-14894
         PLACEHOLDER-14899
         PLACEHOLDER-14897]
        (if
         (empty? PLACEHOLDER-14899)
         PLACEHOLDER-14898
         (recur
          (encode-string (first PLACEHOLDER-14899) PLACEHOLDER-14898)
          (rest PLACEHOLDER-14899))))))))
   (def
    get-encoded-substrings
    (fn*
     ([PLACEHOLDER-14900]
      (re-seq (re-pattern "\\d+[A-Za-z ]{1}") PLACEHOLDER-14900))))
   (def
    decode-string
    (fn*
     ([PLACEHOLDER-14901]
      (clojure.string/join
       (repeat
        (read-string
         (clojure.string/join (drop-last PLACEHOLDER-14901)))
        (last PLACEHOLDER-14901))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14902]
      (loop*
       [PLACEHOLDER-14903
        (get-encoded-substrings PLACEHOLDER-14902)
        PLACEHOLDER-14904
        PLACEHOLDER-14902]
       (if
        (empty? PLACEHOLDER-14903)
        PLACEHOLDER-14904
        (recur
         (rest PLACEHOLDER-14903)
         (clojure.string/replace
          PLACEHOLDER-14904
          (re-pattern (first PLACEHOLDER-14903))
          (decode-string (first PLACEHOLDER-14903))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12713
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12713))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-12714] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-12715] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8028
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8028))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def name (fn* ([PLACEHOLDER-8029] nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-8030] PLACEHOLDER-8030)))
   (def run-length-decode (fn* ([PLACEHOLDER-8031] PLACEHOLDER-8031))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13571
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13571))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13572]
      (apply
       str
       (remove
        (partial = 1)
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-13573]
            (list
             (clojure.lang.RT/count PLACEHOLDER-13573)
             (first PLACEHOLDER-13573))))
          (partition-by identity PLACEHOLDER-13572))))))))
   (def
    lengthen
    (fn*
     ([PLACEHOLDER-13574]
      (let*
       [PLACEHOLDER-13575
        (re-seq (re-pattern "\\d+|\\w|\\s") PLACEHOLDER-13574)]
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-13575))
        (cons "1" PLACEHOLDER-13575)
        PLACEHOLDER-13575)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13576]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-13577]
           (let*
            [PLACEHOLDER-13578
             PLACEHOLDER-13577
             PLACEHOLDER-13579
             (clojure.lang.RT/nth PLACEHOLDER-13578 0 nil)
             PLACEHOLDER-13580
             (clojure.lang.RT/nth PLACEHOLDER-13578 1 nil)]
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-13579)
             PLACEHOLDER-13580))))
         (map
          lengthen
          (re-seq (re-pattern "\\d+\\D|\\D") PLACEHOLDER-13576))))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11121
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11121))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    extract-contiguous-chars
    (fn*
     ([PLACEHOLDER-11122]
      (string/split
       PLACEHOLDER-11122
       (re-pattern "(?<=(.))(?!\\1)")))))
   (def
    extract-numbered-chunks
    (fn*
     ([PLACEHOLDER-11123]
      (string/split
       PLACEHOLDER-11123
       (re-pattern "(?<=[A-Za-z\\s])(?=[0-9a-zA-Z\\s])")))))
   (def
    char-chunk->numbered-chunk
    (fn*
     ([PLACEHOLDER-11124]
      (let*
       [PLACEHOLDER-11125 (clojure.lang.RT/count PLACEHOLDER-11124)]
       (if
        (clojure.lang.Numbers/gte PLACEHOLDER-11125 2)
        (str PLACEHOLDER-11125 (first PLACEHOLDER-11124))
        PLACEHOLDER-11124)))))
   (def
    numeric-chunk?
    (fn*
     ([PLACEHOLDER-11126]
      (clojure.lang.Numbers/gt
       (clojure.lang.RT/count PLACEHOLDER-11126)
       1))))
   (def
    inflate-numeric-chunk
    (fn*
     ([PLACEHOLDER-11127]
      (let*
       [PLACEHOLDER-11128
        (string/split
         PLACEHOLDER-11127
         (re-pattern "(?<=[0-9])(?=[A-Za-z\\s])"))
        PLACEHOLDER-11129
        (clojure.lang.RT/nth PLACEHOLDER-11128 0 nil)
        PLACEHOLDER-11130
        (clojure.lang.RT/nth PLACEHOLDER-11128 1 nil)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-11129 10)
         PLACEHOLDER-11130))))))
   (def
    inflate-chunk
    (fn*
     ([PLACEHOLDER-11131]
      (if
       (numeric-chunk? PLACEHOLDER-11131)
       (inflate-numeric-chunk PLACEHOLDER-11131)
       PLACEHOLDER-11131))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11132]
      (apply
       str
       (map
        char-chunk->numbered-chunk
        (extract-contiguous-chars PLACEHOLDER-11132))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11133]
      (apply
       str
       (map
        inflate-chunk
        (extract-numbered-chunks PLACEHOLDER-11133)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8394
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8394))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8395]
      (clojure.string/join
       (mapcat
        (fn*
         ([PLACEHOLDER-8396]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-8396))
           PLACEHOLDER-8396
           ((juxt count first) PLACEHOLDER-8396))))
        (partition-by identity PLACEHOLDER-8395))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8397]
      (clojure.string/join
       (mapcat
        (fn*
         ([PLACEHOLDER-8398]
          (let*
           [PLACEHOLDER-8399
            PLACEHOLDER-8398
            PLACEHOLDER-8400
            (clojure.lang.RT/nth PLACEHOLDER-8399 0 nil)
            PLACEHOLDER-8401
            (clojure.lang.RT/nth PLACEHOLDER-8399 1 nil)
            PLACEHOLDER-8402
            (clojure.lang.RT/nth PLACEHOLDER-8399 2 nil)]
           (if
            PLACEHOLDER-8401
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-8401)
             PLACEHOLDER-8402)
            PLACEHOLDER-8402))))
        (re-seq
         (re-pattern "(\\d+)?([a-zA-Z ])")
         PLACEHOLDER-8397)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11213
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11213))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-11214]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-11214))
       (first PLACEHOLDER-11214)
       (str
        (clojure.lang.RT/count PLACEHOLDER-11214)
        (first PLACEHOLDER-11214))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11215]
      (apply
       str
       (map encode-chunk (partition-by identity PLACEHOLDER-11215))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-11216]
      (if
       (empty? PLACEHOLDER-11216)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-11216)))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-11217]
      (let*
       [PLACEHOLDER-11218
        (re-find (re-pattern "(\\d*)([\\w\\s])") PLACEHOLDER-11217)
        PLACEHOLDER-11219
        (clojure.lang.RT/nth PLACEHOLDER-11218 0 nil)
        PLACEHOLDER-11220
        (clojure.lang.RT/nth PLACEHOLDER-11218 1 nil)
        PLACEHOLDER-11221
        (clojure.lang.RT/nth PLACEHOLDER-11218 2 nil)
        PLACEHOLDER-11222
        (parse-int PLACEHOLDER-11220)]
       (apply str (repeat PLACEHOLDER-11222 PLACEHOLDER-11221))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11223]
      (apply
       str
       (map
        decode-chunk
        (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-11223)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12452
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12452))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12453]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-12454]
          (str
           (if
            (clojure.lang.Numbers/lt
             1
             (clojure.lang.RT/count PLACEHOLDER-12454))
            (clojure.lang.RT/count PLACEHOLDER-12454))
           (first PLACEHOLDER-12454))))
        (partition-by identity PLACEHOLDER-12453))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12455]
      (clojure.string/join
       (mapcat
        (fn*
         ([PLACEHOLDER-12456]
          (let*
           [PLACEHOLDER-12457
            PLACEHOLDER-12456
            PLACEHOLDER-12458
            (clojure.lang.RT/nth PLACEHOLDER-12457 0 nil)
            PLACEHOLDER-12459
            (clojure.lang.RT/nth PLACEHOLDER-12457 1 nil)
            PLACEHOLDER-12460
            (clojure.lang.RT/nth PLACEHOLDER-12457 2 nil)]
           (let*
            [PLACEHOLDER-12461
             (if
              (clojure.lang.Util/equiv "" PLACEHOLDER-12459)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-12459))]
            (repeat PLACEHOLDER-12461 PLACEHOLDER-12460)))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-12455)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9381
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9381))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9382]
      (loop*
       [PLACEHOLDER-9383
        PLACEHOLDER-9382
        PLACEHOLDER-9384
        1
        PLACEHOLDER-9385
        ""]
       (let*
        [PLACEHOLDER-9386
         (first PLACEHOLDER-9383)
         PLACEHOLDER-9387
         (second PLACEHOLDER-9383)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-9386 nil)
         PLACEHOLDER-9385
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-9386 PLACEHOLDER-9387)
          (recur
           (rest PLACEHOLDER-9383)
           (clojure.lang.Numbers/inc PLACEHOLDER-9384)
           PLACEHOLDER-9385)
          (if
           :else
           (recur
            (rest PLACEHOLDER-9383)
            1
            (apply
             str
             PLACEHOLDER-9385
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-9384 1)
              PLACEHOLDER-9384)
             (str PLACEHOLDER-9386)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9388]
      (loop*
       [PLACEHOLDER-9389
        (re-seq (re-pattern "\\d+|[^\\d]") PLACEHOLDER-9388)
        PLACEHOLDER-9390
        ""]
       (let*
        [PLACEHOLDER-9392
         (try
          (java.lang.Integer/parseInt (first PLACEHOLDER-9389))
          (catch Exception PLACEHOLDER-9391 nil))]
        (if
         (empty? PLACEHOLDER-9389)
         PLACEHOLDER-9390
         (if
          PLACEHOLDER-9392
          (recur
           (drop 2 PLACEHOLDER-9389)
           (apply
            str
            PLACEHOLDER-9390
            (repeat PLACEHOLDER-9392 (second PLACEHOLDER-9389))))
          (if
           :else
           (recur
            (rest PLACEHOLDER-9389)
            (str PLACEHOLDER-9390 (first PLACEHOLDER-9389))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14488
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14488))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    elide-1
    (fn*
     ([PLACEHOLDER-14489]
      (if
       (clojure.lang.Util/equiv 1 PLACEHOLDER-14489)
       ""
       (str PLACEHOLDER-14489)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14490]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14491]
          (str
           (elide-1 (clojure.lang.RT/count PLACEHOLDER-14491))
           (first PLACEHOLDER-14491))))
        (partition-by identity PLACEHOLDER-14490))))))
   (def
    decode-single
    (fn*
     ([PLACEHOLDER-14492]
      (let*
       [PLACEHOLDER-14493
        PLACEHOLDER-14492
        PLACEHOLDER-14494
        (clojure.lang.RT/nth PLACEHOLDER-14493 0 nil)
        PLACEHOLDER-14495
        (clojure.lang.RT/nth PLACEHOLDER-14493 1 nil)]
       (let*
        [PLACEHOLDER-14496
         (if (empty? PLACEHOLDER-14494) "1" PLACEHOLDER-14494)]
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-14496)
         PLACEHOLDER-14495))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14497]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14498]
          (decode-single (rest PLACEHOLDER-14498))))
        (re-seq
         (re-pattern "([0-9]*)([a-zA-Z \\t])")
         PLACEHOLDER-14497)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8502
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8502))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def decode-regex (re-pattern "^([0-9]*)(.)(.*)"))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8503] (run-length-encode PLACEHOLDER-8503 []))
     ([PLACEHOLDER-8504 PLACEHOLDER-8505]
      (if
       (seq PLACEHOLDER-8504)
       (let*
        [PLACEHOLDER-8506
         (first PLACEHOLDER-8504)
         PLACEHOLDER-8507
         (split-with #{PLACEHOLDER-8506} PLACEHOLDER-8504)
         PLACEHOLDER-8508
         (clojure.lang.RT/nth PLACEHOLDER-8507 0 nil)
         PLACEHOLDER-8509
         (clojure.lang.RT/nth PLACEHOLDER-8507 1 nil)
         PLACEHOLDER-8510
         (clojure.lang.RT/count PLACEHOLDER-8508)]
        (recur
         PLACEHOLDER-8509
         (if
          (clojure.lang.Numbers/lt PLACEHOLDER-8510 2)
          (conj PLACEHOLDER-8505 PLACEHOLDER-8506)
          (conj PLACEHOLDER-8505 PLACEHOLDER-8510 PLACEHOLDER-8506))))
       (apply str PLACEHOLDER-8505)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8511] (run-length-decode PLACEHOLDER-8511 []))
     ([PLACEHOLDER-8512 PLACEHOLDER-8513]
      (if
       (seq PLACEHOLDER-8512)
       (let*
        [PLACEHOLDER-8514
         (re-find run-length-encoding/decode-regex PLACEHOLDER-8512)
         PLACEHOLDER-8515
         (clojure.lang.RT/nth PLACEHOLDER-8514 0 nil)
         PLACEHOLDER-8516
         (clojure.lang.RT/nth PLACEHOLDER-8514 1 nil)
         PLACEHOLDER-8517
         (clojure.lang.RT/nth PLACEHOLDER-8514 2 nil)
         PLACEHOLDER-8518
         (clojure.lang.RT/nth PLACEHOLDER-8514 3 nil)]
        (recur
         PLACEHOLDER-8518
         (if
          (empty? PLACEHOLDER-8516)
          (conj PLACEHOLDER-8513 PLACEHOLDER-8517)
          (apply
           conj
           PLACEHOLDER-8513
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-8516)
            PLACEHOLDER-8517)))))
       (apply str PLACEHOLDER-8513))))))
  "Exception inresources/run-length-encoding/148/src/run_length_encoding.cljWrong number of args to if, had: 1"
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12500
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12500))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12501]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12502]
          (str
           ((fn*
             ([PLACEHOLDER-12503]
              (if (not= PLACEHOLDER-12503 1) PLACEHOLDER-12503)))
            (clojure.lang.RT/count PLACEHOLDER-12502))
           (first PLACEHOLDER-12502))))
        (partition-by identity PLACEHOLDER-12501))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12504]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-12505]
          (repeat
           ((fn*
             ([PLACEHOLDER-12506]
              (if
               (clojure.lang.Util/equiv PLACEHOLDER-12506 "")
               1
               (java.lang.Integer/parseInt PLACEHOLDER-12506))))
            (PLACEHOLDER-12505 1))
           (PLACEHOLDER-12505 2))))
        (re-seq
         (re-pattern "(\\d*)([^\\d]{1})")
         PLACEHOLDER-12504)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15072
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15072))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15073]
      (letfn*
       [PLACEHOLDER-15074
        (fn*
         PLACEHOLDER-15075
         ([PLACEHOLDER-15076]
          (let*
           [PLACEHOLDER-15077
            (clojure.lang.RT/count PLACEHOLDER-15076)]
           (str
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-15077 1)
             ""
             PLACEHOLDER-15077)
            (first PLACEHOLDER-15076)))))]
       (apply
        str
        (mapcat
         PLACEHOLDER-15074
         (partition-by identity PLACEHOLDER-15073)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15078]
      (letfn*
       [PLACEHOLDER-15079
        (fn*
         PLACEHOLDER-15080
         ([PLACEHOLDER-15081]
          (let*
           [PLACEHOLDER-15082
            PLACEHOLDER-15081
            PLACEHOLDER-15083
            (clojure.lang.RT/nth PLACEHOLDER-15082 0 nil)
            PLACEHOLDER-15084
            (clojure.lang.RT/nth PLACEHOLDER-15082 1 nil)
            PLACEHOLDER-15085
            (clojure.lang.RT/nth PLACEHOLDER-15082 2 nil)]
           (if
            (empty? PLACEHOLDER-15084)
            PLACEHOLDER-15085
            (repeat
             (new Integer PLACEHOLDER-15084)
             PLACEHOLDER-15085)))))]
       (apply
        str
        (mapcat
         PLACEHOLDER-15079
         (re-seq
          (re-pattern "(\\d*)([A-Za-z ])")
          PLACEHOLDER-15078))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8153
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8153))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    discard-one
    (fn*
     ([PLACEHOLDER-8154]
      (let*
       [PLACEHOLDER-8155 (clojure.lang.RT/count PLACEHOLDER-8154)]
       (if
        (not= (clojure.lang.RT/count PLACEHOLDER-8154) 1)
        PLACEHOLDER-8155)))))
   (def
    add-one
    (fn*
     ([PLACEHOLDER-8156]
      (if
       (clojure.lang.Util/identical (seq PLACEHOLDER-8156) nil)
       "1"
       PLACEHOLDER-8156))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8157]
      (apply
       str
       (mapcat
        (juxt discard-one first)
        (partition-by identity PLACEHOLDER-8157))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8158]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8159]
          (let*
           [PLACEHOLDER-8160
            PLACEHOLDER-8159
            PLACEHOLDER-8161
            (clojure.lang.RT/nth PLACEHOLDER-8160 0 nil)
            PLACEHOLDER-8162
            (clojure.lang.RT/nth PLACEHOLDER-8160 1 nil)
            PLACEHOLDER-8163
            (clojure.lang.RT/nth PLACEHOLDER-8160 2 nil)]
           (repeat
            (java.lang.Integer/parseInt (add-one PLACEHOLDER-8162))
            PLACEHOLDER-8163))))
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z\\s])")
         PLACEHOLDER-8158)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13118
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13118))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn* ([PLACEHOLDER-13119] PLACEHOLDER-13119)))
   (def run-length-decode (fn* ([PLACEHOLDER-13120] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9511
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9511))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (do
    (def ->Block)
    (def map->Block)
    (deftype*
     run-length-encoding/Block
     run_length_encoding.Block
     [char count __meta __extmap __hash __hasheq]
     :implements
     [clojure.lang.IObj
      java.io.Serializable
      clojure.lang.IRecord
      clojure.lang.IPersistentMap
      java.util.Map
      clojure.lang.ILookup
      clojure.lang.IHashEq
      clojure.lang.IKeywordLookup]
     (entrySet [PLACEHOLDER-9512] (clojure.core/set PLACEHOLDER-9512))
     (values [PLACEHOLDER-9513] (clojure.core/vals PLACEHOLDER-9513))
     (keySet
      [PLACEHOLDER-9514]
      (clojure.core/set (clojure.core/keys PLACEHOLDER-9514)))
     (clear
      [PLACEHOLDER-9515]
      (throw (new java.lang.UnsupportedOperationException)))
     (putAll
      [PLACEHOLDER-9516 PLACEHOLDER-9517]
      (throw (new java.lang.UnsupportedOperationException)))
     (remove
      [PLACEHOLDER-9518 PLACEHOLDER-9519]
      (throw (new java.lang.UnsupportedOperationException)))
     (put
      [PLACEHOLDER-9520 PLACEHOLDER-9521 PLACEHOLDER-9522]
      (throw (new java.lang.UnsupportedOperationException)))
     (get
      [PLACEHOLDER-9523 PLACEHOLDER-9524]
      (.valAt PLACEHOLDER-9523 PLACEHOLDER-9524))
     (containsValue
      [PLACEHOLDER-9525 PLACEHOLDER-9526]
      (clojure.lang.RT/booleanCast
       (clojure.core/some
        #{PLACEHOLDER-9526}
        (clojure.core/vals PLACEHOLDER-9525))))
     (isEmpty
      [PLACEHOLDER-9527]
      (clojure.lang.Util/equiv 0 (.count PLACEHOLDER-9527)))
     (size [PLACEHOLDER-9528] (.count PLACEHOLDER-9528))
     (without
      [PLACEHOLDER-9529 PLACEHOLDER-9530]
      (if
       (clojure.core/contains? #{:count :char} PLACEHOLDER-9530)
       (clojure.core/dissoc
        (clojure.core/with-meta
         (clojure.core/into {} PLACEHOLDER-9529)
         __meta)
        PLACEHOLDER-9530)
       (new
        Block
        char
        count
        __meta
        (clojure.core/not-empty
         (clojure.core/dissoc __extmap PLACEHOLDER-9530)))))
     (assoc
      [PLACEHOLDER-9531 PLACEHOLDER-9532 PLACEHOLDER-9533]
      (let*
       [PLACEHOLDER-9534
        clojure.core/identical?
        PLACEHOLDER-9535
        PLACEHOLDER-9532]
       (if
        (PLACEHOLDER-9534 :char PLACEHOLDER-9535)
        (new Block PLACEHOLDER-9533 count __meta __extmap)
        (if
         (PLACEHOLDER-9534 :count PLACEHOLDER-9535)
         (new Block char PLACEHOLDER-9533 __meta __extmap)
         (new
          Block
          char
          count
          __meta
          (clojure.core/assoc
           __extmap
           PLACEHOLDER-9532
           PLACEHOLDER-9533))))))
     (iterator
      [PLACEHOLDER-9536]
      (new
       clojure.lang.RecordIterator
       PLACEHOLDER-9536
       [:char :count]
       (clojure.lang.RT/iter __extmap)))
     (seq
      [PLACEHOLDER-9537]
      (clojure.core/seq
       (clojure.core/concat
        [(clojure.lang.MapEntry/create :char char)
         (clojure.lang.MapEntry/create :count count)]
        __extmap)))
     (entryAt
      [PLACEHOLDER-9538 PLACEHOLDER-9539]
      (let*
       [PLACEHOLDER-9540
        (.valAt PLACEHOLDER-9538 PLACEHOLDER-9539 PLACEHOLDER-9538)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-9538 PLACEHOLDER-9540)
        nil
        (clojure.lang.MapEntry/create
         PLACEHOLDER-9539
         PLACEHOLDER-9540))))
     (containsKey
      [PLACEHOLDER-9541 PLACEHOLDER-9542]
      (clojure.core/not
       (clojure.lang.Util/identical
        PLACEHOLDER-9541
        (.valAt PLACEHOLDER-9541 PLACEHOLDER-9542 PLACEHOLDER-9541))))
     (equiv
      [PLACEHOLDER-9543 PLACEHOLDER-9544]
      (clojure.lang.RT/booleanCast
       (let*
        [PLACEHOLDER-9545
         (clojure.lang.Util/identical
          PLACEHOLDER-9543
          PLACEHOLDER-9544)]
        (if
         PLACEHOLDER-9545
         PLACEHOLDER-9545
         (if
          (clojure.lang.Util/identical
           (clojure.core/class PLACEHOLDER-9543)
           (clojure.core/class PLACEHOLDER-9544))
          (let*
           [PLACEHOLDER-9546 PLACEHOLDER-9544]
           (let*
            [PLACEHOLDER-9547
             (clojure.lang.Util/equiv char (.-char PLACEHOLDER-9546))]
            (if
             PLACEHOLDER-9547
             (let*
              [PLACEHOLDER-9548
               (clojure.lang.Util/equiv
                count
                (.-count PLACEHOLDER-9546))]
              (if
               PLACEHOLDER-9548
               (clojure.lang.Util/equiv
                __extmap
                (.-__extmap PLACEHOLDER-9546))
               PLACEHOLDER-9548))
             PLACEHOLDER-9547))))))))
     (cons
      [PLACEHOLDER-9549 PLACEHOLDER-9550]
      (#'clojure.core/imap-cons PLACEHOLDER-9549 PLACEHOLDER-9550))
     (empty
      [PLACEHOLDER-9551]
      (throw
       (new
        java.lang.UnsupportedOperationException
        (clojure.core/str
         "Can't create empty: "
         "run_length_encoding.Block"))))
     (count
      [PLACEHOLDER-9552]
      (clojure.lang.Numbers/add 2 (clojure.lang.RT/count __extmap)))
     (getLookupThunk
      [PLACEHOLDER-9553 PLACEHOLDER-9554]
      (let*
       [PLACEHOLDER-9555 (clojure.core/class PLACEHOLDER-9553)]
       (let*
        [PLACEHOLDER-9556 PLACEHOLDER-9554]
        (case*
         PLACEHOLDER-9556
         0
         1
         nil
         {0
          [:count
           (reify*
            [clojure.lang.ILookupThunk]
            (get
             [PLACEHOLDER-9557 PLACEHOLDER-9558]
             (if
              (clojure.lang.Util/identical
               (clojure.core/class PLACEHOLDER-9558)
               PLACEHOLDER-9555)
              (.-count PLACEHOLDER-9558)
              PLACEHOLDER-9557)))],
          1
          [:char
           (reify*
            [clojure.lang.ILookupThunk]
            (get
             [PLACEHOLDER-9559 PLACEHOLDER-9560]
             (if
              (clojure.lang.Util/identical
               (clojure.core/class PLACEHOLDER-9560)
               PLACEHOLDER-9555)
              (.-char PLACEHOLDER-9560)
              PLACEHOLDER-9559)))]}
         :compact
         :hash-identity
         nil))))
     (valAt
      [PLACEHOLDER-9561 PLACEHOLDER-9562 PLACEHOLDER-9563]
      (let*
       [PLACEHOLDER-9564 PLACEHOLDER-9562]
       (case*
        PLACEHOLDER-9564
        0
        1
        (clojure.lang.RT/get
         __extmap
         PLACEHOLDER-9562
         PLACEHOLDER-9563)
        {0 [:count count], 1 [:char char]}
        :compact
        :hash-identity
        nil)))
     (valAt
      [PLACEHOLDER-9565 PLACEHOLDER-9566]
      (.valAt PLACEHOLDER-9565 PLACEHOLDER-9566 nil))
     (withMeta
      [PLACEHOLDER-9567 PLACEHOLDER-9568]
      (new Block char count PLACEHOLDER-9568 __extmap __hash __hasheq))
     (meta [PLACEHOLDER-9569] __meta)
     (equals
      [PLACEHOLDER-9570 PLACEHOLDER-9571]
      (clojure.lang.APersistentMap/mapEquals
       PLACEHOLDER-9570
       PLACEHOLDER-9571))
     (hashCode
      [PLACEHOLDER-9572]
      (let*
       [PLACEHOLDER-9573 __hash]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-9573)
        (let*
         [PLACEHOLDER-9574
          (clojure.lang.APersistentMap/mapHash PLACEHOLDER-9572)]
         (do (set! __hash PLACEHOLDER-9574) PLACEHOLDER-9574))
        PLACEHOLDER-9573)))
     (hasheq
      [PLACEHOLDER-9575]
      (let*
       [PLACEHOLDER-9576 __hasheq]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-9576)
        (let*
         [PLACEHOLDER-9577
          (clojure.lang.RT/intCast
           (clojure.lang.Numbers/xor
            -923240303
            (clojure.lang.APersistentMap/mapHasheq PLACEHOLDER-9575)))]
         (do (set! __hasheq PLACEHOLDER-9577) PLACEHOLDER-9577))
        PLACEHOLDER-9576))))
    (clojure.core/import* "run_length_encoding.Block")
    (def
     ->Block
     (fn*
      ([PLACEHOLDER-9578 PLACEHOLDER-9579]
       (new
        run_length_encoding.Block
        PLACEHOLDER-9578
        PLACEHOLDER-9579))))
    (def
     map->Block
     (fn*
      ([PLACEHOLDER-9580]
       (run_length_encoding.Block/create
        (if
         (clojure.core/instance?
          clojure.lang.MapEquivalence
          PLACEHOLDER-9580)
         PLACEHOLDER-9580
         (clojure.core/into {} PLACEHOLDER-9580))))))
    run_length_encoding.Block)
   (def
    get-blocks-from-plain
    (fn*
     ([PLACEHOLDER-9581 PLACEHOLDER-9582]
      (let*
       [PLACEHOLDER-9583
        (first PLACEHOLDER-9581)
        PLACEHOLDER-9584
        (clojure.string/join "" (rest PLACEHOLDER-9581))
        PLACEHOLDER-9585
        (:char (last PLACEHOLDER-9582))
        PLACEHOLDER-9586
        (:count (last PLACEHOLDER-9582))
        PLACEHOLDER-9587
        (if (empty? PLACEHOLDER-9582) nil (pop PLACEHOLDER-9582))]
       (if
        (empty? PLACEHOLDER-9581)
        PLACEHOLDER-9582
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-9583 PLACEHOLDER-9585)
         (get-blocks-from-plain
          PLACEHOLDER-9584
          (conj
           PLACEHOLDER-9587
           (->Block
            PLACEHOLDER-9583
            (clojure.lang.Numbers/inc PLACEHOLDER-9586))))
         (get-blocks-from-plain
          PLACEHOLDER-9584
          (conj PLACEHOLDER-9582 (->Block PLACEHOLDER-9583 1)))))))))
   (def
    get-blocks-from-cipher
    (fn*
     ([PLACEHOLDER-9588 PLACEHOLDER-9589 PLACEHOLDER-9590]
      (let*
       [PLACEHOLDER-9591
        (first PLACEHOLDER-9588)
        PLACEHOLDER-9592
        (clojure.string/join "" (rest PLACEHOLDER-9588))
        PLACEHOLDER-9594
        (fn*
         ([PLACEHOLDER-9593]
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/intCast PLACEHOLDER-9593)
           48)))]
       (if
        (empty? PLACEHOLDER-9588)
        PLACEHOLDER-9589
        (if
         (java.lang.Character/isDigit PLACEHOLDER-9591)
         (get-blocks-from-cipher
          PLACEHOLDER-9592
          PLACEHOLDER-9589
          (clojure.lang.Numbers/add
           (PLACEHOLDER-9594 PLACEHOLDER-9591)
           (clojure.lang.Numbers/multiply 10 PLACEHOLDER-9590)))
         (get-blocks-from-cipher
          PLACEHOLDER-9592
          (conj
           PLACEHOLDER-9589
           (->Block
            PLACEHOLDER-9591
            (if
             (clojure.lang.Numbers/isZero PLACEHOLDER-9590)
             1
             PLACEHOLDER-9590)))
          0)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9595]
      (reduce
       str
       ""
       (map
        (fn*
         ([PLACEHOLDER-9596]
          (str
           (if
            (clojure.lang.Numbers/gt (:count PLACEHOLDER-9596) 1)
            (:count PLACEHOLDER-9596)
            "")
           (:char PLACEHOLDER-9596))))
        (get-blocks-from-plain PLACEHOLDER-9595 []))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9597]
      (reduce
       str
       ""
       (map
        (fn*
         ([PLACEHOLDER-9598]
          (apply
           str
           (repeat
            (:count PLACEHOLDER-9598)
            (:char PLACEHOLDER-9598)))))
        (get-blocks-from-cipher PLACEHOLDER-9597 [] 0)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13868
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13868))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13869]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-13869)))))))
   (def
    to-int
    (fn*
     ([PLACEHOLDER-13870]
      (java.lang.Integer/parseInt PLACEHOLDER-13870))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13871]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13872]
          (let*
           [PLACEHOLDER-13873
            PLACEHOLDER-13872
            PLACEHOLDER-13874
            (clojure.lang.RT/nth PLACEHOLDER-13873 0 nil)
            PLACEHOLDER-13875
            (clojure.lang.RT/nth PLACEHOLDER-13873 1 nil)
            PLACEHOLDER-13876
            (clojure.lang.RT/nth PLACEHOLDER-13873 2 nil)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-13875 "")
            PLACEHOLDER-13876
            (repeat (to-int PLACEHOLDER-13875) PLACEHOLDER-13876)))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13871)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14388
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14388))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14389] (partition-by identity PLACEHOLDER-14389))))
   (def run-length-decode (fn* ([PLACEHOLDER-14390] nil)))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14931
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14931))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14932]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14933]
          (let*
           [PLACEHOLDER-14934
            =
            PLACEHOLDER-14935
            (clojure.lang.RT/count PLACEHOLDER-14933)]
           (if
            (PLACEHOLDER-14934 1 PLACEHOLDER-14935)
            (first PLACEHOLDER-14933)
            (str
             (clojure.lang.RT/count PLACEHOLDER-14933)
             (first PLACEHOLDER-14933))))))
        (map
         first
         (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14932)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14936]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14937]
          (let*
           [PLACEHOLDER-14938
            PLACEHOLDER-14937
            PLACEHOLDER-14939
            (clojure.lang.RT/nth PLACEHOLDER-14938 0 nil)
            PLACEHOLDER-14940
            (clojure.lang.RT/nth PLACEHOLDER-14938 1 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-14939 nil)
            PLACEHOLDER-14940
            (apply
             str
             (repeat
              (read-string PLACEHOLDER-14939)
              PLACEHOLDER-14940))))))
        (map
         (fn* ([PLACEHOLDER-14941] (vec (drop 2 PLACEHOLDER-14941))))
         (re-seq (re-pattern "((\\d+)?(.))") PLACEHOLDER-14936))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9131
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9131))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-9132]
      (let*
       [PLACEHOLDER-9133
        (first PLACEHOLDER-9132)
        PLACEHOLDER-9134
        (clojure.lang.RT/count PLACEHOLDER-9132)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-9134)
        (str PLACEHOLDER-9133)
        (format "%d%s" PLACEHOLDER-9134 PLACEHOLDER-9133))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9135]
      (let*
       [PLACEHOLDER-9136
        (last PLACEHOLDER-9135)
        PLACEHOLDER-9137
        (drop-last PLACEHOLDER-9135)
        PLACEHOLDER-9138
        (if
         (empty? PLACEHOLDER-9137)
         1
         (java.lang.Integer/parseInt
          (clojure.string/join PLACEHOLDER-9137)))]
       (clojure.string/join
        (repeat PLACEHOLDER-9138 PLACEHOLDER-9136))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9139]
      (let*
       [PLACEHOLDER-9140 (comp (partition-by identity) (map encode))]
       (transduce PLACEHOLDER-9140 str PLACEHOLDER-9139)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9141]
      (apply
       str
       (map decode (re-seq (re-pattern "\\d*.") PLACEHOLDER-9141)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13408
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13408))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def one? (partial = 1))
   (def seq->str (partial apply str))
   (def non-nil? (complement nil?))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13409]
      (seq->str
       (let*
        [PLACEHOLDER-13425
         (fn*
          PLACEHOLDER-13410
          ([PLACEHOLDER-13411]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-13412 PLACEHOLDER-13411]
               (let*
                [PLACEHOLDER-13413
                 (clojure.core/seq PLACEHOLDER-13412)]
                (if
                 PLACEHOLDER-13413
                 (let*
                  [PLACEHOLDER-13414 PLACEHOLDER-13413]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-13414)
                   (let*
                    [PLACEHOLDER-13415
                     (clojure.core/chunk-first PLACEHOLDER-13414)
                     PLACEHOLDER-13416
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-13415))
                     PLACEHOLDER-13417
                     (clojure.core/chunk-buffer PLACEHOLDER-13416)]
                    (if
                     (loop*
                      [PLACEHOLDER-13418 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-13418
                        PLACEHOLDER-13416)
                       (let*
                        [PLACEHOLDER-13419
                         (.nth PLACEHOLDER-13415 PLACEHOLDER-13418)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-13417
                          (let*
                           [PLACEHOLDER-13420
                            (clojure.lang.RT/count PLACEHOLDER-13419)
                            PLACEHOLDER-13421
                            (str (first PLACEHOLDER-13419))]
                           (if
                            (one? PLACEHOLDER-13420)
                            PLACEHOLDER-13421
                            (str
                             PLACEHOLDER-13420
                             PLACEHOLDER-13421))))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-13418))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-13417)
                      (PLACEHOLDER-13410
                       (clojure.core/chunk-rest PLACEHOLDER-13414)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-13417)
                      nil)))
                   (let*
                    [PLACEHOLDER-13422
                     (clojure.core/first PLACEHOLDER-13414)]
                    (clojure.core/cons
                     (let*
                      [PLACEHOLDER-13423
                       (clojure.lang.RT/count PLACEHOLDER-13422)
                       PLACEHOLDER-13424
                       (str (first PLACEHOLDER-13422))]
                      (if
                       (one? PLACEHOLDER-13423)
                       PLACEHOLDER-13424
                       (str PLACEHOLDER-13423 PLACEHOLDER-13424)))
                     (PLACEHOLDER-13410
                      (clojure.core/rest
                       PLACEHOLDER-13414))))))))))))))]
        (PLACEHOLDER-13425
         (partition-by identity PLACEHOLDER-13409)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13426]
      (seq->str
       (let*
        [PLACEHOLDER-13444
         (fn*
          PLACEHOLDER-13427
          ([PLACEHOLDER-13428]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-13429 PLACEHOLDER-13428]
               (let*
                [PLACEHOLDER-13430
                 (clojure.core/seq PLACEHOLDER-13429)]
                (if
                 PLACEHOLDER-13430
                 (let*
                  [PLACEHOLDER-13431 PLACEHOLDER-13430]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-13431)
                   (let*
                    [PLACEHOLDER-13432
                     (clojure.core/chunk-first PLACEHOLDER-13431)
                     PLACEHOLDER-13433
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-13432))
                     PLACEHOLDER-13434
                     (clojure.core/chunk-buffer PLACEHOLDER-13433)]
                    (if
                     (loop*
                      [PLACEHOLDER-13435 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-13435
                        PLACEHOLDER-13433)
                       (let*
                        [PLACEHOLDER-13436
                         (.nth PLACEHOLDER-13432 PLACEHOLDER-13435)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-13434
                          (let*
                           [PLACEHOLDER-13438
                            (java.lang.Integer/parseInt
                             (let*
                              [PLACEHOLDER-13437
                               (re-find
                                (re-pattern "^\\d+")
                                PLACEHOLDER-13436)]
                              (if
                               PLACEHOLDER-13437
                               PLACEHOLDER-13437
                               "1")))
                            PLACEHOLDER-13439
                            (re-find
                             (re-pattern "[A-Za-z ]")
                             PLACEHOLDER-13436)]
                           (seq->str
                            (repeat
                             PLACEHOLDER-13438
                             PLACEHOLDER-13439))))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-13435))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-13434)
                      (PLACEHOLDER-13427
                       (clojure.core/chunk-rest PLACEHOLDER-13431)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-13434)
                      nil)))
                   (let*
                    [PLACEHOLDER-13440
                     (clojure.core/first PLACEHOLDER-13431)]
                    (clojure.core/cons
                     (let*
                      [PLACEHOLDER-13442
                       (java.lang.Integer/parseInt
                        (let*
                         [PLACEHOLDER-13441
                          (re-find
                           (re-pattern "^\\d+")
                           PLACEHOLDER-13440)]
                         (if PLACEHOLDER-13441 PLACEHOLDER-13441 "1")))
                       PLACEHOLDER-13443
                       (re-find
                        (re-pattern "[A-Za-z ]")
                        PLACEHOLDER-13440)]
                      (seq->str
                       (repeat PLACEHOLDER-13442 PLACEHOLDER-13443)))
                     (PLACEHOLDER-13427
                      (clojure.core/rest
                       PLACEHOLDER-13431))))))))))))))]
        (PLACEHOLDER-13444
         (re-seq
          (re-pattern "\\d+[A-Za-z ]|[A-Za-z ]")
          PLACEHOLDER-13426))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11588
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11588))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as string])
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11589]
      (loop*
       [PLACEHOLDER-11590
        PLACEHOLDER-11589
        PLACEHOLDER-11591
        1
        PLACEHOLDER-11592
        (first PLACEHOLDER-11590)
        PLACEHOLDER-11593
        []]
       (if
        (empty? PLACEHOLDER-11590)
        (apply str PLACEHOLDER-11593)
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-11590)
          (second PLACEHOLDER-11590))
         (recur
          (drop 1 PLACEHOLDER-11590)
          (clojure.lang.Numbers/inc PLACEHOLDER-11591)
          (first PLACEHOLDER-11590)
          PLACEHOLDER-11593)
         (if
          :else
          (recur
           (drop 1 PLACEHOLDER-11590)
           1
           (second PLACEHOLDER-11590)
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-11591 1)
            (conj PLACEHOLDER-11593 PLACEHOLDER-11592)
            (conj
             PLACEHOLDER-11593
             PLACEHOLDER-11591
             PLACEHOLDER-11592))))))))))
   (def
    repeat-char
    (fn*
     ([PLACEHOLDER-11594 PLACEHOLDER-11595]
      (if
       (let*
        [PLACEHOLDER-11596
         (clojure.lang.Util/identical PLACEHOLDER-11594 nil)]
        (if
         PLACEHOLDER-11596
         PLACEHOLDER-11596
         (empty? PLACEHOLDER-11594)))
       nil
       (repeat
        (java.lang.Integer/parseInt PLACEHOLDER-11594)
        (first
         (drop
          (clojure.lang.RT/count PLACEHOLDER-11594)
          PLACEHOLDER-11595)))))))
   (def
    slurp-digits
    (fn*
     ([PLACEHOLDER-11597]
      (take-while
       (fn*
        ([PLACEHOLDER-11598]
         (java.lang.Character/isDigit PLACEHOLDER-11598)))
       PLACEHOLDER-11597))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11599]
      (loop*
       [PLACEHOLDER-11600
        (string/join (slurp-digits PLACEHOLDER-11599))
        PLACEHOLDER-11601
        PLACEHOLDER-11599
        PLACEHOLDER-11602
        []]
       (if
        (empty? PLACEHOLDER-11601)
        (apply str (flatten PLACEHOLDER-11602))
        (if
         (empty? PLACEHOLDER-11600)
         (recur
          (string/join (slurp-digits (drop 1 PLACEHOLDER-11601)))
          (drop 1 PLACEHOLDER-11601)
          (conj PLACEHOLDER-11602 (first PLACEHOLDER-11601)))
         (if
          :else
          (recur
           (string/join
            (slurp-digits
             (drop
              (clojure.lang.Numbers/inc
               (clojure.lang.RT/count PLACEHOLDER-11600))
              PLACEHOLDER-11601)))
           (drop
            (clojure.lang.Numbers/inc
             (clojure.lang.RT/count PLACEHOLDER-11600))
            PLACEHOLDER-11601)
           (conj
            PLACEHOLDER-11602
            (repeat-char PLACEHOLDER-11600 PLACEHOLDER-11601)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12102
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12102))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.edn :as edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12103]
      (let*
       [PLACEHOLDER-12104
        (map
         first
         (re-seq (re-pattern "(.)\\1+|.") PLACEHOLDER-12103))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12105]
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-12105)
             1)
            (str
             (clojure.lang.RT/count PLACEHOLDER-12105)
             (first PLACEHOLDER-12105))
            PLACEHOLDER-12105)))
         PLACEHOLDER-12104))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12106]
      (let*
       [PLACEHOLDER-12107
        (re-seq (re-pattern "\\d+.|.") PLACEHOLDER-12106)
        PLACEHOLDER-12109
        (comp
         edn/read-string
         (fn*
          ([PLACEHOLDER-12108]
           (re-find (re-pattern "\\d+") PLACEHOLDER-12108))))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12110]
           (if
            (number? (PLACEHOLDER-12109 PLACEHOLDER-12110))
            (apply
             str
             (repeat
              (PLACEHOLDER-12109 PLACEHOLDER-12110)
              (last PLACEHOLDER-12110)))
            PLACEHOLDER-12110)))
         PLACEHOLDER-12107)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12926
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12926))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12927]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12928]
          (let*
           [PLACEHOLDER-12929
            (clojure.lang.RT/count PLACEHOLDER-12928)
            PLACEHOLDER-12930
            (first PLACEHOLDER-12928)]
           (if
            (clojure.lang.Numbers/lt 1 PLACEHOLDER-12929)
            (str PLACEHOLDER-12929 PLACEHOLDER-12930)
            PLACEHOLDER-12930))))
        (partition-by identity PLACEHOLDER-12927))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12931]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12932]
          (let*
           [PLACEHOLDER-12933
            PLACEHOLDER-12932
            PLACEHOLDER-12934
            (clojure.lang.RT/nth PLACEHOLDER-12933 0 nil)
            PLACEHOLDER-12935
            (clojure.lang.RT/nth PLACEHOLDER-12933 1 nil)]
           (let*
            [PLACEHOLDER-12936
             (if
              (empty? PLACEHOLDER-12934)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-12934))]
            (apply
             str
             (take PLACEHOLDER-12936 (repeat PLACEHOLDER-12935)))))))
        (map
         rest
         (re-seq (re-pattern "(\\d*)(.?)") PLACEHOLDER-12931))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11422
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11422))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    transform
    (fn*
     ([PLACEHOLDER-11423]
      (let*
       [PLACEHOLDER-11424
        (clojure.lang.RT/count PLACEHOLDER-11423)
        PLACEHOLDER-11425
        (first PLACEHOLDER-11423)
        PLACEHOLDER-11427
        (fn* ([PLACEHOLDER-11426] (apply str PLACEHOLDER-11426)))]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-11424 1)
        (str PLACEHOLDER-11424 PLACEHOLDER-11425)
        (PLACEHOLDER-11427 PLACEHOLDER-11423))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11428]
      (apply
       str
       (map transform (partition-by identity PLACEHOLDER-11428))))))
   (def
    find-first-integer
    (fn*
     ([PLACEHOLDER-11429]
      (java.lang.Integer/parseInt
       (re-find (re-pattern "\\d+") PLACEHOLDER-11429)))))
   (def
    split-at-first-int
    (fn*
     ([PLACEHOLDER-11430]
      (clojure.string/split PLACEHOLDER-11430 (re-pattern "\\d+") 2))))
   (def
    multiply-first-char
    (fn*
     ([PLACEHOLDER-11431 PLACEHOLDER-11432]
      (apply
       str
       (take PLACEHOLDER-11432 (repeat PLACEHOLDER-11431))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11433]
      (let*
       [PLACEHOLDER-11434
        (split-at-first-int PLACEHOLDER-11433)
        PLACEHOLDER-11435
        (clojure.lang.RT/nth PLACEHOLDER-11434 0 nil)
        PLACEHOLDER-11436
        (clojure.lang.RT/nth PLACEHOLDER-11434 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11436 nil)
        PLACEHOLDER-11433
        (let*
         [PLACEHOLDER-11437
          (find-first-integer PLACEHOLDER-11433)
          PLACEHOLDER-11438
          (first PLACEHOLDER-11436)
          PLACEHOLDER-11439
          (apply str (rest PLACEHOLDER-11436))]
         (apply
          str
          PLACEHOLDER-11435
          (multiply-first-char PLACEHOLDER-11438 PLACEHOLDER-11437)
          (run-length-decode PLACEHOLDER-11439)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13477
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13477))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13478]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-13478)))))))
   (def
    rle-expand
    (fn*
     ([PLACEHOLDER-13479]
      (if
       (clojure.core/not
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-13479)))
       (let*
        [PLACEHOLDER-13480
         (java.lang.Integer/parseInt
          (subs
           PLACEHOLDER-13479
           0
           (clojure.lang.Numbers/minus
            (clojure.lang.RT/count PLACEHOLDER-13479)
            1)))
         PLACEHOLDER-13481
         (last PLACEHOLDER-13479)]
        (repeat PLACEHOLDER-13480 PLACEHOLDER-13481))
       PLACEHOLDER-13479))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13482]
      (apply
       str
       (mapcat
        rle-expand
        (re-seq (re-pattern "[0-9]*[a-zA-Z ]") PLACEHOLDER-13482)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11766
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11766))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    get-frequencies
    (fn*
     ([PLACEHOLDER-11767]
      (map
       (fn*
        ([PLACEHOLDER-11768]
         (clojure.lang.RT/count PLACEHOLDER-11768)))
       (partition-by identity PLACEHOLDER-11767)))))
   (def
    get-first-signs
    (fn*
     ([PLACEHOLDER-11769]
      (map
       (fn* ([PLACEHOLDER-11770] (first PLACEHOLDER-11770)))
       (partition-by identity PLACEHOLDER-11769)))))
   (def
    one?
    (fn*
     ([PLACEHOLDER-11771]
      (if
       (clojure.lang.Numbers/gt PLACEHOLDER-11771 1)
       PLACEHOLDER-11771
       ""))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11772]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11773 PLACEHOLDER-11774]
          (str (one? PLACEHOLDER-11773) PLACEHOLDER-11774)))
        (get-frequencies PLACEHOLDER-11772)
        (get-first-signs PLACEHOLDER-11772))))))
   (def
    calc-num
    (fn*
     ([PLACEHOLDER-11775]
      (let*
       [PLACEHOLDER-11777
        (java.lang.Integer/parseInt
         (apply
          str
          "0"
          (take-while
           (fn*
            ([PLACEHOLDER-11776]
             (java.lang.Character/isDigit PLACEHOLDER-11776)))
           PLACEHOLDER-11775)))]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-11777)
        1
        PLACEHOLDER-11777)))))
   (def
    drop-to
    (fn*
     ([PLACEHOLDER-11778 PLACEHOLDER-11779]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-11778 1)
       (apply str (drop 1 PLACEHOLDER-11779))
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-11778 9)
        (apply str (drop 2 PLACEHOLDER-11779))
        (if
         :else
         (apply
          str
          (drop
           (clojure.lang.Numbers/inc
            (clojure.lang.RT/count (str PLACEHOLDER-11778)))
           PLACEHOLDER-11779))))))))
   (def
    get-letter
    (fn*
     ([PLACEHOLDER-11780 PLACEHOLDER-11781]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-11780 1)
       (apply str (take 1 PLACEHOLDER-11781))
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-11780 9)
        (str (clojure.lang.RT/nth PLACEHOLDER-11781 1))
        (if
         :else
         (str
          (clojure.lang.RT/nth
           PLACEHOLDER-11781
           (clojure.lang.RT/count (str PLACEHOLDER-11780))))))))))
   (def
    parse-text
    (fn*
     ([PLACEHOLDER-11782]
      (let*
       [PLACEHOLDER-11783
        (calc-num PLACEHOLDER-11782)
        PLACEHOLDER-11784
        (drop-to PLACEHOLDER-11783 PLACEHOLDER-11782)
        PLACEHOLDER-11785
        (get-letter PLACEHOLDER-11783 PLACEHOLDER-11782)]
       [PLACEHOLDER-11783 PLACEHOLDER-11785 PLACEHOLDER-11784]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11786]
      (if
       (str/blank? PLACEHOLDER-11786)
       PLACEHOLDER-11786
       (let*
        [PLACEHOLDER-11787
         (parse-text PLACEHOLDER-11786)
         PLACEHOLDER-11788
         PLACEHOLDER-11787
         PLACEHOLDER-11789
         (clojure.lang.RT/nth PLACEHOLDER-11788 0 nil)
         PLACEHOLDER-11790
         (clojure.lang.RT/nth PLACEHOLDER-11788 1 nil)
         PLACEHOLDER-11791
         (clojure.lang.RT/nth PLACEHOLDER-11788 2 nil)
         PLACEHOLDER-11792
         ""]
        (loop*
         [PLACEHOLDER-11793
          PLACEHOLDER-11787
          PLACEHOLDER-11794
          PLACEHOLDER-11792]
         (let*
          [PLACEHOLDER-11795
           PLACEHOLDER-11793
           PLACEHOLDER-11796
           (clojure.lang.RT/nth PLACEHOLDER-11795 0 nil)
           PLACEHOLDER-11797
           (clojure.lang.RT/nth PLACEHOLDER-11795 1 nil)
           PLACEHOLDER-11798
           (clojure.lang.RT/nth PLACEHOLDER-11795 2 nil)
           PLACEHOLDER-11799
           PLACEHOLDER-11794]
          (if
           (let*
            [PLACEHOLDER-11800 (empty? PLACEHOLDER-11797)]
            (if
             PLACEHOLDER-11800
             (empty? PLACEHOLDER-11798)
             PLACEHOLDER-11800))
           PLACEHOLDER-11799
           (recur
            (parse-text PLACEHOLDER-11798)
            (str
             PLACEHOLDER-11799
             (apply
              str
              (repeat PLACEHOLDER-11796 PLACEHOLDER-11797)))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14810
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14810))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14811]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-14812]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-14812)
            1)
           (str
            (clojure.lang.RT/count PLACEHOLDER-14812)
            (str (first PLACEHOLDER-14812)))
           (str (first PLACEHOLDER-14812)))))
        (partition-by identity PLACEHOLDER-14811))))))
   (def run-length-decode (fn* ([PLACEHOLDER-14813] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9503
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9503))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-repeating-letters
    (fn*
     ([PLACEHOLDER-9504]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-9504)
        1)
       (str
        (clojure.lang.RT/count PLACEHOLDER-9504)
        (subs PLACEHOLDER-9504 0 1))
       PLACEHOLDER-9504))))
   (def
    split-repeating-letters
    (fn*
     ([PLACEHOLDER-9505]
      (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-9505)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9506]
      (apply
       str
       (map
        encode-repeating-letters
        (split-repeating-letters PLACEHOLDER-9506))))))
   (def
    split-cipher
    (fn*
     ([PLACEHOLDER-9507]
      (rest (re-matches (re-pattern "(\\d+)(.)") PLACEHOLDER-9507)))))
   (def
    decode-cipher
    (fn*
     ([PLACEHOLDER-9508]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-9508)
        1)
       (apply
        str
        (repeat
         (read-string (first (split-cipher PLACEHOLDER-9508)))
         (second (split-cipher PLACEHOLDER-9508))))
       PLACEHOLDER-9508))))
   (def
    get-ciphers
    (fn*
     ([PLACEHOLDER-9509]
      (map first (re-seq (re-pattern "(\\d*.)") PLACEHOLDER-9509)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9510]
      (apply
       str
       (map decode-cipher (get-ciphers PLACEHOLDER-9510)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8709
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8709))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-8710]
      (let*
       [PLACEHOLDER-8711 1 PLACEHOLDER-8712 nil]
       (reduce
        (fn*
         ([PLACEHOLDER-8713 PLACEHOLDER-8714]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-8712 PLACEHOLDER-8714)
           (clojure.lang.Util/equiv
            PLACEHOLDER-8711
            (clojure.lang.Numbers/add PLACEHOLDER-8711 1)))))
        PLACEHOLDER-8710)))))
   (def run-length-encode (fn* ([PLACEHOLDER-8715] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-8716] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14208
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14208))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-14209]
      (let*
       [PLACEHOLDER-14210
        PLACEHOLDER-14209
        PLACEHOLDER-14211
        (clojure.core/seq PLACEHOLDER-14210)
        PLACEHOLDER-14212
        (clojure.core/first PLACEHOLDER-14211)
        PLACEHOLDER-14213
        (clojure.core/next PLACEHOLDER-14211)
        PLACEHOLDER-14214
        PLACEHOLDER-14212
        PLACEHOLDER-14215
        PLACEHOLDER-14213
        PLACEHOLDER-14216
        PLACEHOLDER-14210]
       (str
        (if
         PLACEHOLDER-14215
         (clojure.lang.RT/count PLACEHOLDER-14216))
        PLACEHOLDER-14214)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14217]
      (let*
       [PLACEHOLDER-14218 (partition-by identity PLACEHOLDER-14217)]
       (apply str (map encode-run PLACEHOLDER-14218))))))
   (def
    decode-run
    (fn*
     ([PLACEHOLDER-14219]
      (let*
       [PLACEHOLDER-14220
        (re-find (re-pattern "(\\d*)(.)") PLACEHOLDER-14219)
        PLACEHOLDER-14221
        (clojure.lang.RT/nth PLACEHOLDER-14220 0 nil)
        PLACEHOLDER-14222
        (clojure.lang.RT/nth PLACEHOLDER-14220 1 nil)
        PLACEHOLDER-14223
        (clojure.lang.RT/nth PLACEHOLDER-14220 2 nil)]
       (if
        (empty? PLACEHOLDER-14222)
        PLACEHOLDER-14223
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-14222)
          PLACEHOLDER-14223)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14224]
      (let*
       [PLACEHOLDER-14225
        (re-seq (re-pattern "\\d*.") PLACEHOLDER-14224)]
       (apply str (map decode-run PLACEHOLDER-14225)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13079
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13079))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count->str
    (fn*
     ([PLACEHOLDER-13080]
      (str
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-13080 1)
        nil
        PLACEHOLDER-13080)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13081] (run-length-encode PLACEHOLDER-13081 ""))
     ([PLACEHOLDER-13082 PLACEHOLDER-13083]
      (if
       (clojure.lang.Numbers/gt
        2
        (clojure.lang.RT/count PLACEHOLDER-13082))
       (str PLACEHOLDER-13083 (apply str PLACEHOLDER-13082))
       (let*
        [PLACEHOLDER-13084
         (first PLACEHOLDER-13082)
         PLACEHOLDER-13085
         (partial = PLACEHOLDER-13084)
         PLACEHOLDER-13086
         (str
          (count->str
           (clojure.lang.RT/count
            (take-while PLACEHOLDER-13085 PLACEHOLDER-13082)))
          PLACEHOLDER-13084)
         PLACEHOLDER-13087
         (drop-while PLACEHOLDER-13085 PLACEHOLDER-13082)]
        (run-length-encode
         PLACEHOLDER-13087
         (str PLACEHOLDER-13083 PLACEHOLDER-13086)))))))
   (def digits (hash-set \0 \1 \2 \3 \4 \5 \6 \7 \8 \9))
   (def digit? (partial contains? digits))
   (def
    count-str->int
    (fn*
     ([PLACEHOLDER-13088]
      (if
       (clojure.core/not (clojure.string/blank? PLACEHOLDER-13088))
       (java.lang.Integer/parseInt PLACEHOLDER-13088)
       1))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13089] (run-length-decode PLACEHOLDER-13089 ""))
     ([PLACEHOLDER-13090 PLACEHOLDER-13091]
      (if
       (clojure.lang.Numbers/gt
        2
        (clojure.lang.RT/count PLACEHOLDER-13090))
       (str PLACEHOLDER-13091 (apply str PLACEHOLDER-13090))
       (let*
        [PLACEHOLDER-13092
         (count-str->int
          (apply str (take-while digit? PLACEHOLDER-13090)))
         PLACEHOLDER-13093
         (drop-while digit? PLACEHOLDER-13090)
         PLACEHOLDER-13094
         (apply
          str
          (repeat PLACEHOLDER-13092 (first PLACEHOLDER-13093)))
         PLACEHOLDER-13095
         (rest PLACEHOLDER-13093)]
        (run-length-decode
         PLACEHOLDER-13095
         (str PLACEHOLDER-13091 PLACEHOLDER-13094))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12507
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12507))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require 'clojure.string))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group
    (fn*
     ([PLACEHOLDER-12508] (partition-by identity PLACEHOLDER-12508))))
   (def
    count-and-render
    (fn*
     ([PLACEHOLDER-12509]
      (if
       (clojure.lang.Numbers/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-12509))
       ""
       (str (clojure.lang.RT/count PLACEHOLDER-12509))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12510]
      (apply
       str
       (mapcat
        (juxt count-and-render first)
        (group PLACEHOLDER-12510))))))
   (def
    parse-count
    (fn*
     ([PLACEHOLDER-12511]
      (if
       (clojure.string/blank? PLACEHOLDER-12511)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-12511)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12512]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-12513]
          (let*
           [PLACEHOLDER-12514
            PLACEHOLDER-12513
            PLACEHOLDER-12515
            (clojure.lang.RT/nth PLACEHOLDER-12514 0 nil)
            PLACEHOLDER-12516
            (clojure.lang.RT/nth PLACEHOLDER-12514 1 nil)
            PLACEHOLDER-12517
            (clojure.lang.RT/nth PLACEHOLDER-12514 2 nil)]
           (repeat
            (parse-count PLACEHOLDER-12516)
            PLACEHOLDER-12517))))
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z ])")
         PLACEHOLDER-12512)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11956
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11956))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    list-joined
    (fn*
     ([PLACEHOLDER-11957]
      (map
       (fn*
        ([PLACEHOLDER-11958]
         (let*
          [PLACEHOLDER-11959
           (clojure.lang.RT/count PLACEHOLDER-11958)
           PLACEHOLDER-11960
           (first PLACEHOLDER-11958)]
          (if
           (clojure.lang.Util/equiv 1 PLACEHOLDER-11959)
           (str PLACEHOLDER-11960)
           (str PLACEHOLDER-11959 PLACEHOLDER-11960)))))
       PLACEHOLDER-11957))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11961]
      (let*
       [PLACEHOLDER-11962
        (partition-by
         identity
         (clojure.string/split PLACEHOLDER-11961 (re-pattern "")))
        PLACEHOLDER-11963
        (list-joined PLACEHOLDER-11962)
        PLACEHOLDER-11966
        (reduce
         (fn*
          ([PLACEHOLDER-11964 PLACEHOLDER-11965]
           (str PLACEHOLDER-11964 PLACEHOLDER-11965)))
         PLACEHOLDER-11963)]
       PLACEHOLDER-11966))))
   (def
    pairs
    (fn*
     ([PLACEHOLDER-11967 PLACEHOLDER-11968]
      (if
       (empty? PLACEHOLDER-11967)
       PLACEHOLDER-11968
       (let*
        [PLACEHOLDER-11969
         (first PLACEHOLDER-11967)
         PLACEHOLDER-11970
         (re-find (re-matcher (re-pattern "[0-9]") PLACEHOLDER-11969))
         PLACEHOLDER-11971
         (rest PLACEHOLDER-11967)
         PLACEHOLDER-11972
         (first PLACEHOLDER-11971)]
        (if
         (empty? PLACEHOLDER-11967)
         PLACEHOLDER-11968
         (if
          PLACEHOLDER-11970
          (pairs
           (rest PLACEHOLDER-11971)
           (conj
            PLACEHOLDER-11968
            [(java.lang.Integer/parseInt PLACEHOLDER-11969)
             PLACEHOLDER-11972]))
          (pairs
           (rest PLACEHOLDER-11971)
           (conj PLACEHOLDER-11968 [1 PLACEHOLDER-11972])))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11973]
      (let*
       [PLACEHOLDER-11974
        (clojure.string/split PLACEHOLDER-11973 (re-pattern ""))
        PLACEHOLDER-11975
        (pairs PLACEHOLDER-11974 [])]
       (reduce
        (fn*
         ([PLACEHOLDER-11976 PLACEHOLDER-11977]
          (str
           PLACEHOLDER-11976
           (reduce
            str
            ""
            (repeat
             (first PLACEHOLDER-11977)
             (second PLACEHOLDER-11977))))))
        ""
        PLACEHOLDER-11975))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8297
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8297))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-8298]
      (java.lang.Character/isDigit PLACEHOLDER-8298))))
   (def
    extract
    (fn*
     ([PLACEHOLDER-8299 PLACEHOLDER-8300]
      (let*
       [PLACEHOLDER-8301
        (split-with (complement PLACEHOLDER-8299) PLACEHOLDER-8300)
        PLACEHOLDER-8302
        (clojure.lang.RT/nth PLACEHOLDER-8301 0 nil)
        PLACEHOLDER-8303
        (clojure.lang.RT/nth PLACEHOLDER-8301 1 nil)
        PLACEHOLDER-8304
        (split-with PLACEHOLDER-8299 (apply str PLACEHOLDER-8303))
        PLACEHOLDER-8305
        (clojure.lang.RT/nth PLACEHOLDER-8304 0 nil)
        PLACEHOLDER-8306
        (clojure.lang.RT/nth PLACEHOLDER-8304 1 nil)]
       [PLACEHOLDER-8302 PLACEHOLDER-8305 PLACEHOLDER-8306]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8307]
      (loop*
       [PLACEHOLDER-8308 PLACEHOLDER-8307 PLACEHOLDER-8309 ""]
       (if
        (empty? PLACEHOLDER-8308)
        PLACEHOLDER-8309
        (let*
         [PLACEHOLDER-8310
          PLACEHOLDER-8308
          PLACEHOLDER-8311
          (clojure.core/seq PLACEHOLDER-8310)
          PLACEHOLDER-8312
          (clojure.core/first PLACEHOLDER-8311)
          PLACEHOLDER-8313
          (clojure.core/next PLACEHOLDER-8311)
          PLACEHOLDER-8314
          PLACEHOLDER-8312
          PLACEHOLDER-8315
          PLACEHOLDER-8313
          PLACEHOLDER-8316
          (clojure.lang.RT/count
           (take-while (partial = PLACEHOLDER-8314) PLACEHOLDER-8315))
          PLACEHOLDER-8317
          (if
           (clojure.lang.Numbers/isZero PLACEHOLDER-8316)
           PLACEHOLDER-8314
           (str
            (clojure.lang.Numbers/inc PLACEHOLDER-8316)
            PLACEHOLDER-8314))]
         (recur
          (drop PLACEHOLDER-8316 PLACEHOLDER-8315)
          (str PLACEHOLDER-8309 PLACEHOLDER-8317))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8318]
      (loop*
       [PLACEHOLDER-8319 PLACEHOLDER-8318 PLACEHOLDER-8320 ""]
       (if
        (empty? PLACEHOLDER-8319)
        PLACEHOLDER-8320
        (let*
         [PLACEHOLDER-8321
          (map (partial apply str) (extract digit? PLACEHOLDER-8319))
          PLACEHOLDER-8322
          (clojure.lang.RT/nth PLACEHOLDER-8321 0 nil)
          PLACEHOLDER-8323
          (clojure.lang.RT/nth PLACEHOLDER-8321 1 nil)
          PLACEHOLDER-8324
          (clojure.lang.RT/nth PLACEHOLDER-8321 2 nil)
          PLACEHOLDER-8325
          (clojure.core/seq PLACEHOLDER-8324)
          PLACEHOLDER-8326
          (clojure.core/first PLACEHOLDER-8325)
          PLACEHOLDER-8327
          (clojure.core/next PLACEHOLDER-8325)
          PLACEHOLDER-8328
          PLACEHOLDER-8326
          PLACEHOLDER-8329
          PLACEHOLDER-8327
          PLACEHOLDER-8330
          (if
           (empty? PLACEHOLDER-8323)
           ""
           (apply
            str
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-8323)
             PLACEHOLDER-8328)))]
         (recur
          PLACEHOLDER-8329
          (str
           PLACEHOLDER-8320
           PLACEHOLDER-8322
           PLACEHOLDER-8330)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14288
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14288))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14289]
      (loop*
       [PLACEHOLDER-14290 "" PLACEHOLDER-14291 PLACEHOLDER-14289]
       (if
        (empty? PLACEHOLDER-14291)
        PLACEHOLDER-14290
        (let*
         [PLACEHOLDER-14292
          (first PLACEHOLDER-14291)
          PLACEHOLDER-14294
          (take-while
           (fn*
            ([PLACEHOLDER-14293]
             (clojure.lang.Util/equiv
              PLACEHOLDER-14292
              PLACEHOLDER-14293)))
           (next PLACEHOLDER-14291))
          PLACEHOLDER-14295
          (clojure.lang.RT/count PLACEHOLDER-14294)]
         (recur
          (apply
           str
           PLACEHOLDER-14290
           (if
            (clojure.lang.Numbers/isZero PLACEHOLDER-14295)
            ""
            (str (clojure.lang.Numbers/inc PLACEHOLDER-14295)))
           (str PLACEHOLDER-14292))
          (drop
           (clojure.lang.Numbers/inc PLACEHOLDER-14295)
           PLACEHOLDER-14291))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14296]
      (loop*
       [PLACEHOLDER-14297 "" PLACEHOLDER-14298 PLACEHOLDER-14296]
       (if
        (empty? PLACEHOLDER-14298)
        PLACEHOLDER-14297
        (let*
         [PLACEHOLDER-14300
          (take-while
           (fn*
            ([PLACEHOLDER-14299]
             (java.lang.Character/isDigit PLACEHOLDER-14299)))
           PLACEHOLDER-14298)
          PLACEHOLDER-14301
          (clojure.lang.RT/count PLACEHOLDER-14300)
          PLACEHOLDER-14302
          (if
           (clojure.lang.Numbers/isZero PLACEHOLDER-14301)
           1
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-14300)))]
         (recur
          (apply
           str
           PLACEHOLDER-14297
           (repeat
            PLACEHOLDER-14302
            (clojure.lang.RT/nth PLACEHOLDER-14298 PLACEHOLDER-14301)))
          (drop
           (clojure.lang.Numbers/inc PLACEHOLDER-14301)
           PLACEHOLDER-14298)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10722
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10722))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    char-cnt
    (fn*
     ([PLACEHOLDER-10723]
      (let*
       [PLACEHOLDER-10724 (clojure.lang.RT/count PLACEHOLDER-10723)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-10724)
        (first PLACEHOLDER-10723)
        (str
         (clojure.lang.RT/count PLACEHOLDER-10723)
         (first PLACEHOLDER-10723)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10725]
      (let*
       [PLACEHOLDER-10726 (partition-by identity PLACEHOLDER-10725)]
       (apply str (map char-cnt PLACEHOLDER-10726))))))
   (def run-length-decode (fn* ([PLACEHOLDER-10727] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12518
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12518))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-if-many
    (fn*
     ([PLACEHOLDER-12519]
      (let*
       [PLACEHOLDER-12520 (clojure.lang.RT/count PLACEHOLDER-12519)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-12520 1)
        PLACEHOLDER-12520)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12521]
      (let*
       [PLACEHOLDER-12522 (partition-by identity PLACEHOLDER-12521)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-12523]
           (str
            (count-if-many PLACEHOLDER-12523)
            (first PLACEHOLDER-12523))))
         PLACEHOLDER-12522))))))
   (def
    split-encodings
    (fn*
     ([PLACEHOLDER-12524]
      (re-seq (re-pattern "\\d*[A-Za-z ]") PLACEHOLDER-12524))))
   (def
    encodings-to-map
    (fn*
     ([PLACEHOLDER-12525]
      (map
       (fn*
        ([PLACEHOLDER-12526]
         (hash-map
          :count
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-12526)
            1)
           (java.lang.Integer/parseInt
            (apply str (drop-last PLACEHOLDER-12526)))
           1)
          :value
          (last PLACEHOLDER-12526))))
       PLACEHOLDER-12525))))
   (def
    encodings-map-to-str
    (fn*
     ([PLACEHOLDER-12527]
      (map
       (fn*
        ([PLACEHOLDER-12528]
         (apply
          str
          (repeat
           (:count PLACEHOLDER-12528)
           (:value PLACEHOLDER-12528)))))
       PLACEHOLDER-12527))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12529]
      (apply
       str
       (encodings-map-to-str
        (encodings-to-map (split-encodings PLACEHOLDER-12529))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8717
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8717))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8718]
      (apply
       str
       (reverse
        (filter
         (fn* ([PLACEHOLDER-8719] (not= 1 PLACEHOLDER-8719)))
         (reduce
          (fn*
           ([PLACEHOLDER-8720 PLACEHOLDER-8721]
            (let*
             [PLACEHOLDER-8722
              PLACEHOLDER-8720
              PLACEHOLDER-8723
              (clojure.lang.RT/nth PLACEHOLDER-8722 0 nil)
              PLACEHOLDER-8724
              (clojure.lang.RT/nth PLACEHOLDER-8722 1 nil)
              PLACEHOLDER-8725
              PLACEHOLDER-8722]
             (if
              (let*
               [PLACEHOLDER-8726
                (clojure.lang.Util/identical PLACEHOLDER-8723 nil)]
               (if
                PLACEHOLDER-8726
                (clojure.lang.Util/identical PLACEHOLDER-8724 nil)
                PLACEHOLDER-8726))
              [PLACEHOLDER-8721 1]
              (if
               (clojure.lang.Util/equiv
                PLACEHOLDER-8723
                PLACEHOLDER-8721)
               (update-in PLACEHOLDER-8725 [1] inc)
               (if
                :else
                (into [PLACEHOLDER-8721 1] PLACEHOLDER-8725)))))))
          []
          PLACEHOLDER-8718)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8727]
      (let*
       [PLACEHOLDER-8728
        (re-find (re-pattern "^[^\\d]+") PLACEHOLDER-8727)
        PLACEHOLDER-8729
        (re-find (re-pattern "([0-9]+)(.)") PLACEHOLDER-8727)
        PLACEHOLDER-8730
        (clojure.lang.RT/nth PLACEHOLDER-8729 0 nil)
        PLACEHOLDER-8731
        (clojure.lang.RT/nth PLACEHOLDER-8729 1 nil)
        PLACEHOLDER-8732
        (clojure.lang.RT/nth PLACEHOLDER-8729 2 nil)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-8730 nil)
        PLACEHOLDER-8727
        (let*
         [PLACEHOLDER-8733
          (new Integer PLACEHOLDER-8731)
          PLACEHOLDER-8734
          (apply str (repeat PLACEHOLDER-8733 PLACEHOLDER-8732))
          PLACEHOLDER-8735
          (clojure.lang.Numbers/add
           (clojure.lang.RT/count PLACEHOLDER-8728)
           (clojure.lang.RT/count PLACEHOLDER-8730))]
         (str
          PLACEHOLDER-8728
          PLACEHOLDER-8734
          (run-length-decode
           (subs PLACEHOLDER-8727 PLACEHOLDER-8735))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15149
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15149))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    write-state
    (fn*
     ([PLACEHOLDER-15150 PLACEHOLDER-15151]
      (if
       (clojure.lang.Util/equiv 1 (val (first PLACEHOLDER-15151)))
       (conj PLACEHOLDER-15150 (key (first PLACEHOLDER-15151)))
       (conj
        PLACEHOLDER-15150
        (val (first PLACEHOLDER-15151))
        (key (first PLACEHOLDER-15151)))))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-15152 PLACEHOLDER-15153 PLACEHOLDER-15154]
      (if
       (empty? PLACEHOLDER-15152)
       (write-state PLACEHOLDER-15153 PLACEHOLDER-15154)
       (if
        (empty? PLACEHOLDER-15154)
        (encode
         (rest PLACEHOLDER-15152)
         PLACEHOLDER-15153
         (assoc PLACEHOLDER-15154 (first PLACEHOLDER-15152) 1))
        (if
         (clojure.lang.Util/identical
          (clojure.lang.RT/get
           PLACEHOLDER-15154
           (first PLACEHOLDER-15152))
          nil)
         (encode
          (rest PLACEHOLDER-15152)
          (write-state PLACEHOLDER-15153 PLACEHOLDER-15154)
          (assoc {} (first PLACEHOLDER-15152) 1))
         (if
          :else
          (encode
           (rest PLACEHOLDER-15152)
           PLACEHOLDER-15153
           (assoc
            PLACEHOLDER-15154
            (first PLACEHOLDER-15152)
            (clojure.lang.Numbers/add
             1
             (clojure.lang.RT/get
              PLACEHOLDER-15154
              (first PLACEHOLDER-15152))))))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15155]
      (if
       (empty? PLACEHOLDER-15155)
       PLACEHOLDER-15155
       (apply
        str
        (encode
         (clojure.string/split PLACEHOLDER-15155 (re-pattern ""))
         []
         {}))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-15156 PLACEHOLDER-15157 PLACEHOLDER-15158]
      (do
       (def match (first (re-find PLACEHOLDER-15156)))
       (if
        (clojure.lang.Util/identical match nil)
        PLACEHOLDER-15158
        (let*
         [PLACEHOLDER-15159
          (not-empty (re-find (re-pattern "^[\\d]+$") match))]
         (if
          PLACEHOLDER-15159
          (let*
           [PLACEHOLDER-15160 PLACEHOLDER-15159]
           (decode
            PLACEHOLDER-15156
            (conj
             PLACEHOLDER-15157
             (java.lang.Integer/parseInt PLACEHOLDER-15160))
            PLACEHOLDER-15158))
          (if
           (empty? PLACEHOLDER-15157)
           (decode PLACEHOLDER-15156 [] (conj PLACEHOLDER-15158 match))
           (decode
            PLACEHOLDER-15156
            []
            (conj
             PLACEHOLDER-15158
             (apply
              str
              (take
               (first PLACEHOLDER-15157)
               (iterate identity match)))))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15161]
      (do
       (def
        matcher
        (re-matcher
         (re-pattern "([0-9]+)|(\\s)|([a-z])|([A-Z])")
         PLACEHOLDER-15161))
       (if
        (empty? PLACEHOLDER-15161)
        PLACEHOLDER-15161
        (apply str (decode matcher [] []))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13931
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13931))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (comp
     (partition-by identity)
     (mapcat (juxt count first))
     (remove #{1})))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13932] (join (into [] encode PLACEHOLDER-13932)))))
   (def
    get-num
    (fn*
     ([PLACEHOLDER-13933]
      (if
       (blank? PLACEHOLDER-13933)
       1
       (read-string PLACEHOLDER-13933)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13934]
      (join
       (mapcat
        (fn*
         ([PLACEHOLDER-13935]
          (let*
           [PLACEHOLDER-13936
            PLACEHOLDER-13935
            PLACEHOLDER-13937
            (clojure.lang.RT/nth PLACEHOLDER-13936 0 nil)
            PLACEHOLDER-13938
            (clojure.lang.RT/nth PLACEHOLDER-13936 1 nil)
            PLACEHOLDER-13939
            (clojure.lang.RT/nth PLACEHOLDER-13936 2 nil)]
           (repeat (get-num PLACEHOLDER-13938) PLACEHOLDER-13939))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13934)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14187
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14187))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.core.reducers :as reducers])
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-14188 PLACEHOLDER-14189]
      (if
       (clojure.lang.Numbers/equiv 1 PLACEHOLDER-14188)
       PLACEHOLDER-14189
       (str PLACEHOLDER-14188 PLACEHOLDER-14189)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14190]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14191]
          (encode-chunk
           (clojure.lang.RT/count PLACEHOLDER-14191)
           (first PLACEHOLDER-14191))))
        (partition-by identity PLACEHOLDER-14190))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-14192]
      (let*
       [PLACEHOLDER-14193
        (re-matches
         (re-pattern "(\\d+)([a-zA-Z ])")
         PLACEHOLDER-14192)]
       (if
        PLACEHOLDER-14193
        (let*
         [PLACEHOLDER-14194
          PLACEHOLDER-14193
          PLACEHOLDER-14195
          (clojure.lang.RT/nth PLACEHOLDER-14194 0 nil)
          PLACEHOLDER-14196
          (clojure.lang.RT/nth PLACEHOLDER-14194 1 nil)
          PLACEHOLDER-14197
          (clojure.lang.RT/nth PLACEHOLDER-14194 2 nil)]
         (apply
          str
          (repeat
           (java.lang.Integer/parseInt PLACEHOLDER-14196)
           PLACEHOLDER-14197)))
        PLACEHOLDER-14192)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14198]
      (apply
       str
       (map
        decode-chunk
        (re-seq (re-pattern "\\d*[a-zA-Z ]") PLACEHOLDER-14198)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8969
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8969))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-8970]
      (let*
       [PLACEHOLDER-8971
        (clojure.lang.RT/count PLACEHOLDER-8970)
        PLACEHOLDER-8972
        (first PLACEHOLDER-8970)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-8971)
        PLACEHOLDER-8972
        (str PLACEHOLDER-8971 PLACEHOLDER-8972))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8973]
      (apply
       str
       (map encode-chunk (partition-by identity PLACEHOLDER-8973))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-8974]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-8974))
       PLACEHOLDER-8974
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt
          (re-find (re-pattern "\\d+") PLACEHOLDER-8974))
         (last PLACEHOLDER-8974)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8975]
      (apply
       str
       (map
        decode-chunk
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-8975)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8984
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8984))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8985]
      (loop*
       [PLACEHOLDER-8986
        PLACEHOLDER-8985
        PLACEHOLDER-8987
        ""
        PLACEHOLDER-8988
        (first PLACEHOLDER-8985)
        PLACEHOLDER-8989
        0]
       (if
        (empty? PLACEHOLDER-8986)
        (reduce
         str
         (concat
          PLACEHOLDER-8987
          (str PLACEHOLDER-8989)
          (str PLACEHOLDER-8988)))
        (if
         (not
          (clojure.lang.Util/equiv
           PLACEHOLDER-8988
           (first PLACEHOLDER-8986)))
         (recur
          (rest PLACEHOLDER-8986)
          (concat
           PLACEHOLDER-8987
           (str PLACEHOLDER-8989)
           (str PLACEHOLDER-8988))
          (first PLACEHOLDER-8986)
          1)
         (if
          :else
          (recur
           (rest PLACEHOLDER-8986)
           PLACEHOLDER-8987
           PLACEHOLDER-8988
           (clojure.lang.Numbers/inc PLACEHOLDER-8989)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8990]
      (loop*
       [PLACEHOLDER-8991
        ""
        PLACEHOLDER-8992
        PLACEHOLDER-8990
        PLACEHOLDER-8993
        0]
       (if
        (empty? PLACEHOLDER-8992)
        (reduce str PLACEHOLDER-8991)
        (if
         (int? (read-string (str (first PLACEHOLDER-8992))))
         (recur
          PLACEHOLDER-8991
          (rest PLACEHOLDER-8992)
          (clojure.lang.Numbers/add
           (clojure.lang.Numbers/multiply PLACEHOLDER-8993 10)
           (java.lang.Character/digit (first PLACEHOLDER-8992) 10)))
         (if
          :else
          (recur
           (reduce
            str
            (concat
             (str PLACEHOLDER-8991)
             (reduce
              str
              (repeat
               PLACEHOLDER-8993
               (str (first PLACEHOLDER-8992))))))
           (rest PLACEHOLDER-8992)
           0)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11465
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11465))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.core :refer [str]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    append-encoded
    (fn*
     ([PLACEHOLDER-11466 PLACEHOLDER-11467 PLACEHOLDER-11468]
      (let*
       [PLACEHOLDER-11469 PLACEHOLDER-11467]
       (case*
        PLACEHOLDER-11469
        0
        0
        (conj
         PLACEHOLDER-11468
         (str PLACEHOLDER-11467 PLACEHOLDER-11466))
        {0 [0 PLACEHOLDER-11468],
         1 [1 (conj PLACEHOLDER-11468 PLACEHOLDER-11466)]}
        :compact
        :int
        nil)))))
   (def
    update-c-encode
    (fn*
     ([PLACEHOLDER-11470
       PLACEHOLDER-11471
       PLACEHOLDER-11472
       PLACEHOLDER-11473]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-11470 PLACEHOLDER-11471)
       [PLACEHOLDER-11473 (clojure.lang.Numbers/inc PLACEHOLDER-11472)]
       [(append-encoded
         PLACEHOLDER-11470
         PLACEHOLDER-11472
         PLACEHOLDER-11473)
        1]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11474]
      (loop*
       [PLACEHOLDER-11475
        nil
        PLACEHOLDER-11476
        0
        PLACEHOLDER-11477
        PLACEHOLDER-11474
        PLACEHOLDER-11478
        []]
       (let*
        [PLACEHOLDER-11479
         (first PLACEHOLDER-11477)
         PLACEHOLDER-11480
         (rest PLACEHOLDER-11477)
         PLACEHOLDER-11481
         (update-c-encode
          PLACEHOLDER-11475
          PLACEHOLDER-11479
          PLACEHOLDER-11476
          PLACEHOLDER-11478)
         PLACEHOLDER-11482
         (clojure.lang.RT/nth PLACEHOLDER-11481 0 nil)
         PLACEHOLDER-11483
         (clojure.lang.RT/nth PLACEHOLDER-11481 1 nil)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-11479 nil)
         (apply str PLACEHOLDER-11482)
         (recur
          PLACEHOLDER-11479
          PLACEHOLDER-11483
          PLACEHOLDER-11480
          PLACEHOLDER-11482)))))))
   (def
    update-c-decode
    (fn*
     ([PLACEHOLDER-11484 PLACEHOLDER-11485 PLACEHOLDER-11486]
      (if
       (java.lang.Character/isDigit PLACEHOLDER-11484)
       [(conj PLACEHOLDER-11485 PLACEHOLDER-11484) PLACEHOLDER-11486]
       (if
        (empty? PLACEHOLDER-11485)
        [[] (conj PLACEHOLDER-11486 PLACEHOLDER-11484)]
        (if
         :else
         [[]
          (into
           []
           (concat
            PLACEHOLDER-11486
            (repeat
             (new Integer (apply str PLACEHOLDER-11485))
             PLACEHOLDER-11484)))]))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11487]
      (loop*
       [PLACEHOLDER-11488
        (first PLACEHOLDER-11487)
        PLACEHOLDER-11489
        []
        PLACEHOLDER-11490
        []
        PLACEHOLDER-11491
        (rest PLACEHOLDER-11487)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-11488 nil)
        (apply str PLACEHOLDER-11490)
        (let*
         [PLACEHOLDER-11492
          (update-c-decode
           PLACEHOLDER-11488
           PLACEHOLDER-11489
           PLACEHOLDER-11490)
          PLACEHOLDER-11493
          (clojure.lang.RT/nth PLACEHOLDER-11492 0 nil)
          PLACEHOLDER-11494
          (clojure.lang.RT/nth PLACEHOLDER-11492 1 nil)]
         (recur
          (first PLACEHOLDER-11491)
          PLACEHOLDER-11493
          PLACEHOLDER-11494
          (rest PLACEHOLDER-11491)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13882
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13882))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/import* "java.lang.Integer")
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13883]
      (let*
       [PLACEHOLDER-13884
        (partition-by identity PLACEHOLDER-13883)
        PLACEHOLDER-13890
        (fn*
         ([PLACEHOLDER-13885 PLACEHOLDER-13886]
          (let*
           [PLACEHOLDER-13887
            (first PLACEHOLDER-13886)
            PLACEHOLDER-13888
            (clojure.lang.RT/count PLACEHOLDER-13886)
            PLACEHOLDER-13889
            (if
             (clojure.lang.Util/equiv 1 PLACEHOLDER-13888)
             ""
             PLACEHOLDER-13888)]
           (str
            PLACEHOLDER-13885
            PLACEHOLDER-13889
            PLACEHOLDER-13887))))]
       (reduce PLACEHOLDER-13890 "" PLACEHOLDER-13884)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13891]
      (let*
       [PLACEHOLDER-13892
        (re-seq (re-pattern "(\\d+)?[\\w\\s]") PLACEHOLDER-13891)
        PLACEHOLDER-13897
        (fn*
         ([PLACEHOLDER-13893]
          (let*
           [PLACEHOLDER-13895
            ((fnil
              (fn*
               ([PLACEHOLDER-13894] (new Integer PLACEHOLDER-13894)))
              1)
             (last PLACEHOLDER-13893))
            PLACEHOLDER-13896
            (last (first PLACEHOLDER-13893))]
           (repeat PLACEHOLDER-13895 PLACEHOLDER-13896))))]
       (string/join
        (flatten (map PLACEHOLDER-13897 PLACEHOLDER-13892))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8692
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8692))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8693]
      (if
       (clojure.string/blank? PLACEHOLDER-8693)
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-8694 PLACEHOLDER-8695]
          (update PLACEHOLDER-8694 PLACEHOLDER-8695 inc)))
        #{}
        (seq "aabbbcccc"))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8696]
      (if
       (clojure.string/blank? PLACEHOLDER-8696)
       ""
       PLACEHOLDER-8696)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11867
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11867))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-char-count
    (fn*
     ([PLACEHOLDER-11868 PLACEHOLDER-11869]
      (let*
       [PLACEHOLDER-11870 PLACEHOLDER-11868]
       (case*
        PLACEHOLDER-11870
        0
        0
        (str PLACEHOLDER-11868 PLACEHOLDER-11869)
        {0 [0 ""], 1 [1 PLACEHOLDER-11869]}
        :compact
        :int
        nil)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11871]
      (loop*
       [PLACEHOLDER-11872
        ""
        PLACEHOLDER-11873
        nil
        PLACEHOLDER-11874
        0
        PLACEHOLDER-11875
        PLACEHOLDER-11871]
       (if
        (empty? PLACEHOLDER-11875)
        (str
         PLACEHOLDER-11872
         (encode-char-count PLACEHOLDER-11874 PLACEHOLDER-11873))
        (let*
         [PLACEHOLDER-11876
          PLACEHOLDER-11875
          PLACEHOLDER-11877
          (clojure.core/seq PLACEHOLDER-11876)
          PLACEHOLDER-11878
          (clojure.core/first PLACEHOLDER-11877)
          PLACEHOLDER-11879
          (clojure.core/next PLACEHOLDER-11877)
          PLACEHOLDER-11880
          PLACEHOLDER-11878
          PLACEHOLDER-11881
          PLACEHOLDER-11879]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-11880 PLACEHOLDER-11873)
          (recur
           PLACEHOLDER-11872
           PLACEHOLDER-11873
           (clojure.lang.Numbers/inc PLACEHOLDER-11874)
           PLACEHOLDER-11881)
          (recur
           (str
            PLACEHOLDER-11872
            (encode-char-count PLACEHOLDER-11874 PLACEHOLDER-11873))
           PLACEHOLDER-11880
           1
           PLACEHOLDER-11881))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11882]
      (loop*
       [PLACEHOLDER-11883 "" PLACEHOLDER-11884 PLACEHOLDER-11882]
       (if
        (empty? PLACEHOLDER-11884)
        PLACEHOLDER-11883
        (if
         :else
         (let*
          [PLACEHOLDER-11886
           (split-with
            (fn*
             ([PLACEHOLDER-11885]
              (java.lang.Character/isDigit PLACEHOLDER-11885)))
            PLACEHOLDER-11884)
           PLACEHOLDER-11887
           (clojure.lang.RT/nth PLACEHOLDER-11886 0 nil)
           PLACEHOLDER-11888
           (clojure.lang.RT/nth PLACEHOLDER-11886 1 nil)
           PLACEHOLDER-11889
           (if
            (empty? PLACEHOLDER-11887)
            1
            (java.lang.Integer/parseInt (apply str PLACEHOLDER-11887)))
           PLACEHOLDER-11890
           PLACEHOLDER-11888
           PLACEHOLDER-11891
           (clojure.core/seq PLACEHOLDER-11890)
           PLACEHOLDER-11892
           (clojure.core/first PLACEHOLDER-11891)
           PLACEHOLDER-11893
           (clojure.core/next PLACEHOLDER-11891)
           PLACEHOLDER-11894
           PLACEHOLDER-11892
           PLACEHOLDER-11895
           PLACEHOLDER-11893
           PLACEHOLDER-11896
           (repeat PLACEHOLDER-11889 PLACEHOLDER-11894)]
          (recur
           (apply str (concat PLACEHOLDER-11883 PLACEHOLDER-11896))
           PLACEHOLDER-11895)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9620
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9620))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9621]
      (let*
       [PLACEHOLDER-9623
        (fn*
         ([PLACEHOLDER-9622]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-9622)
            1)
           (list (first PLACEHOLDER-9622))
           (list
            (clojure.lang.RT/count PLACEHOLDER-9622)
            (first PLACEHOLDER-9622)))))]
       (apply
        str
        (mapcat
         PLACEHOLDER-9623
         (partition-by identity PLACEHOLDER-9621)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9624]
      (let*
       [PLACEHOLDER-9628
        (fn*
         ([PLACEHOLDER-9625]
          (let*
           [PLACEHOLDER-9626
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-9625)
              1)
             (read-string
              (subs
               PLACEHOLDER-9625
               0
               (clojure.lang.Numbers/minus
                (clojure.lang.RT/count PLACEHOLDER-9625)
                1)))
             1)
            PLACEHOLDER-9627
            (last PLACEHOLDER-9625)]
           (repeat PLACEHOLDER-9626 PLACEHOLDER-9627))))]
       (apply
        str
        (mapcat
         PLACEHOLDER-9628
         (re-seq
          (re-pattern "\\p{Digit}*[\\p{Alpha}\\p{Space}]")
          PLACEHOLDER-9624))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10686
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10686))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10687]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10688]
          (let*
           [PLACEHOLDER-10689
            (first PLACEHOLDER-10688)
            PLACEHOLDER-10690
            (clojure.lang.RT/count PLACEHOLDER-10688)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-10690 1)
            (str PLACEHOLDER-10690 PLACEHOLDER-10689)
            PLACEHOLDER-10689))))
        (partition-by identity PLACEHOLDER-10687))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10691]
      (apply
       str
       (map
        (fn* ([PLACEHOLDER-10692] (apply str PLACEHOLDER-10692)))
        (map
         (fn*
          ([PLACEHOLDER-10693]
           (let*
            [PLACEHOLDER-10694
             (re-find (re-pattern "\\d*") PLACEHOLDER-10693)
             PLACEHOLDER-10695
             (if (empty? PLACEHOLDER-10694) "1" PLACEHOLDER-10694)
             PLACEHOLDER-10696
             (last PLACEHOLDER-10693)]
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-10695)
             PLACEHOLDER-10696))))
         (re-seq (re-pattern "\\d*[A-Za-z ]") PLACEHOLDER-10691))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12253
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12253))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str])
          (clojure.core/import* "java.lang.Character"))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-repeats
    (fn*
     ([PLACEHOLDER-12254]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-12254)
        1)
       (str
        (clojure.lang.RT/count PLACEHOLDER-12254)
        (first PLACEHOLDER-12254))
       (str (first PLACEHOLDER-12254))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12255]
      (str/join
       (map
        encode-repeats
        (partition-by identity PLACEHOLDER-12255))))))
   (def
    split-adjacent-non-digits-with-1
    (fn*
     ([PLACEHOLDER-12256]
      (str/replace
       PLACEHOLDER-12256
       (re-pattern "([^0-9])([^0-9])")
       "$1\\1$2"))))
   (def
    regularize-encoding
    (fn*
     ([PLACEHOLDER-12257]
      (split-adjacent-non-digits-with-1
       (split-adjacent-non-digits-with-1
        (str/replace
         PLACEHOLDER-12257
         (re-pattern "^([^0-9])")
         "1$1"))))))
   (def
    first-to-int
    (fn*
     ([PLACEHOLDER-12258]
      (conj
       (rest PLACEHOLDER-12258)
       (java.lang.Integer/parseInt (first PLACEHOLDER-12258))))))
   (def
    parse-cipher-text
    (fn*
     ([PLACEHOLDER-12259]
      (map
       first-to-int
       (partition
        2
        (map
         str/join
         (partition-by
          (fn*
           ([PLACEHOLDER-12260]
            (if
             (java.lang.Character/isDigit PLACEHOLDER-12260)
             true
             PLACEHOLDER-12260)))
          (regularize-encoding PLACEHOLDER-12259))))))))
   (def
    str-y-x-times
    (fn*
     ([PLACEHOLDER-12261]
      (let*
       [PLACEHOLDER-12262
        PLACEHOLDER-12261
        PLACEHOLDER-12263
        (clojure.lang.RT/nth PLACEHOLDER-12262 0 nil)
        PLACEHOLDER-12264
        (clojure.lang.RT/nth PLACEHOLDER-12262 1 nil)]
       (str/join (repeat PLACEHOLDER-12263 PLACEHOLDER-12264))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12265]
      (str/join
       (map str-y-x-times (parse-cipher-text PLACEHOLDER-12265)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9482
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9482))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    ->groups
    (fn*
     ([PLACEHOLDER-9483 PLACEHOLDER-9484]
      (let*
       [PLACEHOLDER-9485
        (clojure.lang.Numbers/dec
         (clojure.lang.RT/count PLACEHOLDER-9483))]
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-9484
         (get-in PLACEHOLDER-9483 [PLACEHOLDER-9485 0]))
        (vec (update-in PLACEHOLDER-9483 [PLACEHOLDER-9485 1] inc))
        (vec (concat PLACEHOLDER-9483 [[PLACEHOLDER-9484 1]])))))))
   (def
    stringify
    (fn*
     ([PLACEHOLDER-9486]
      (let*
       [PLACEHOLDER-9487
        (second PLACEHOLDER-9486)
        PLACEHOLDER-9488
        (first PLACEHOLDER-9486)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-9487)
        (str PLACEHOLDER-9488)
        (format "%d%c" PLACEHOLDER-9487 PLACEHOLDER-9488))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9489]
      (apply
       str
       (map stringify (reduce ->groups [] PLACEHOLDER-9489))))))
   (def run-length-decode (fn* ([PLACEHOLDER-9490] PLACEHOLDER-9490))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10162
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10162))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-char
    (fn*
     ([PLACEHOLDER-10163 PLACEHOLDER-10164]
      (let*
       [PLACEHOLDER-10165 (peek PLACEHOLDER-10164)]
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-10163
         (last PLACEHOLDER-10165))
        (conj
         (pop PLACEHOLDER-10164)
         [(clojure.lang.Numbers/inc (first PLACEHOLDER-10165))
          PLACEHOLDER-10163])
        (conj PLACEHOLDER-10164 [1 PLACEHOLDER-10163]))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10166]
      (join
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-10167]
           (if
            (clojure.lang.Util/equiv 1 (first PLACEHOLDER-10167))
            (last PLACEHOLDER-10167)
            PLACEHOLDER-10167)))
         (reduce
          (fn*
           ([PLACEHOLDER-10168 PLACEHOLDER-10169]
            (encode-char PLACEHOLDER-10169 PLACEHOLDER-10168)))
          []
          PLACEHOLDER-10166)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10170]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10171]
          (let*
           [PLACEHOLDER-10172
            PLACEHOLDER-10171
            PLACEHOLDER-10173
            (clojure.lang.RT/nth PLACEHOLDER-10172 0 nil)
            PLACEHOLDER-10174
            (clojure.lang.RT/nth PLACEHOLDER-10172 1 nil)
            PLACEHOLDER-10175
            (clojure.lang.RT/nth PLACEHOLDER-10172 2 nil)]
           (if
            (blank? PLACEHOLDER-10174)
            PLACEHOLDER-10175
            (apply
             str
             (repeat
              (read-string PLACEHOLDER-10174)
              PLACEHOLDER-10175))))))
        (re-seq (re-pattern "(\\d*)([A-z ])") PLACEHOLDER-10170)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-7983
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-7983))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-7984]
      (let*
       [PLACEHOLDER-7985 (clojure.lang.RT/intCast PLACEHOLDER-7984)]
       (let*
        [PLACEHOLDER-7986
         (clojure.lang.Numbers/gte
          PLACEHOLDER-7985
          (clojure.lang.RT/intCast \0))]
        (if
         PLACEHOLDER-7986
         (clojure.lang.Numbers/lte
          PLACEHOLDER-7985
          (clojure.lang.RT/intCast \9))
         PLACEHOLDER-7986))))))
   (def
    seq-to-int
    (fn*
     ([PLACEHOLDER-7987]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-7987 '())
       1
       (read-string (apply str PLACEHOLDER-7987))))))
   (def
    run-length-encode-seq
    (fn*
     ([PLACEHOLDER-7988]
      (if
       (empty? PLACEHOLDER-7988)
       nil
       (let*
        [PLACEHOLDER-7989
         (first PLACEHOLDER-7988)
         PLACEHOLDER-7991
         (split-with
          (fn*
           ([PLACEHOLDER-7990]
            (clojure.lang.Util/equiv
             PLACEHOLDER-7990
             PLACEHOLDER-7989)))
          PLACEHOLDER-7988)
         PLACEHOLDER-7992
         (clojure.lang.RT/nth PLACEHOLDER-7991 0 nil)
         PLACEHOLDER-7993
         (clojure.lang.RT/nth PLACEHOLDER-7991 1 nil)
         PLACEHOLDER-7994
         (clojure.lang.RT/count PLACEHOLDER-7992)
         PLACEHOLDER-7995
         (if
          (clojure.lang.Util/equiv 1 PLACEHOLDER-7994)
          ""
          PLACEHOLDER-7994)]
        (concat
         [PLACEHOLDER-7995 PLACEHOLDER-7989]
         (run-length-encode-seq PLACEHOLDER-7993)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-7996]
      (apply str (run-length-encode-seq (seq PLACEHOLDER-7996))))))
   (def
    run-length-decode-seq
    (fn*
     ([PLACEHOLDER-7997]
      (if
       (empty? PLACEHOLDER-7997)
       nil
       (let*
        [PLACEHOLDER-7998
         (split-with digit? PLACEHOLDER-7997)
         PLACEHOLDER-7999
         (clojure.lang.RT/nth PLACEHOLDER-7998 0 nil)
         PLACEHOLDER-8000
         (clojure.lang.RT/nth PLACEHOLDER-7998 1 nil)
         PLACEHOLDER-8001
         (seq-to-int PLACEHOLDER-7999)
         PLACEHOLDER-8002
         (first PLACEHOLDER-8000)
         PLACEHOLDER-8003
         (rest PLACEHOLDER-8000)]
        (concat
         (repeat PLACEHOLDER-8001 PLACEHOLDER-8002)
         (run-length-decode-seq PLACEHOLDER-8003)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8004]
      (apply str (run-length-decode-seq (seq PLACEHOLDER-8004)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14849
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14849))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14850] (run-length-encode PLACEHOLDER-14850 ""))
     ([PLACEHOLDER-14851 PLACEHOLDER-14852]
      (let*
       [PLACEHOLDER-14853
        PLACEHOLDER-14851
        PLACEHOLDER-14854
        (clojure.lang.RT/nth PLACEHOLDER-14853 0 nil)
        PLACEHOLDER-14855
        PLACEHOLDER-14853]
       (let*
        [PLACEHOLDER-14857
         (take-while
          (fn*
           ([PLACEHOLDER-14856]
            (clojure.lang.Util/equiv
             PLACEHOLDER-14854
             PLACEHOLDER-14856)))
          PLACEHOLDER-14855)
         PLACEHOLDER-14858
         (clojure.lang.RT/count PLACEHOLDER-14857)
         PLACEHOLDER-14859
         (if
          (clojure.lang.Numbers/gt PLACEHOLDER-14858 1)
          (str PLACEHOLDER-14852 PLACEHOLDER-14858 PLACEHOLDER-14854)
          (str PLACEHOLDER-14852 PLACEHOLDER-14854))]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-14854 nil)
         PLACEHOLDER-14859
         (recur
          (subvec (into [] PLACEHOLDER-14855) PLACEHOLDER-14858)
          PLACEHOLDER-14859)))))))
   (def
    numeric?
    (fn*
     ([PLACEHOLDER-14860]
      (let*
       [PLACEHOLDER-14861 ((complement nil?) PLACEHOLDER-14860)]
       (if
        PLACEHOLDER-14861
        (every?
         (fn*
          ([PLACEHOLDER-14862]
           (java.lang.Character/isDigit PLACEHOLDER-14862)))
         PLACEHOLDER-14860)
        PLACEHOLDER-14861)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14863]
      (run-length-decode
       (map
        first
        (re-seq (re-pattern "([\\d]+|[\\D])") PLACEHOLDER-14863))
       ""))
     ([PLACEHOLDER-14864 PLACEHOLDER-14865]
      (let*
       [PLACEHOLDER-14866
        PLACEHOLDER-14864
        PLACEHOLDER-14867
        (clojure.core/seq PLACEHOLDER-14866)
        PLACEHOLDER-14868
        (clojure.core/first PLACEHOLDER-14867)
        PLACEHOLDER-14869
        (clojure.core/next PLACEHOLDER-14867)
        PLACEHOLDER-14870
        PLACEHOLDER-14868
        PLACEHOLDER-14871
        PLACEHOLDER-14869]
       (let*
        [PLACEHOLDER-14872
         (if
          (numeric? PLACEHOLDER-14870)
          (apply
           str
           (repeat
            (clojure.lang.Numbers/dec
             (java.lang.Integer/valueOf PLACEHOLDER-14870))
            (first PLACEHOLDER-14871)))
          PLACEHOLDER-14870)
         PLACEHOLDER-14873
         (str PLACEHOLDER-14865 PLACEHOLDER-14872)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-14870 nil)
         PLACEHOLDER-14873
         (recur PLACEHOLDER-14871 PLACEHOLDER-14873))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14199
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14199))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14200]
      (reduce
       (fn*
        ([PLACEHOLDER-14201 PLACEHOLDER-14202]
         (str
          PLACEHOLDER-14201
          (let*
           [PLACEHOLDER-14203
            (clojure.lang.RT/count PLACEHOLDER-14202)]
           (if (not= 1 PLACEHOLDER-14203) PLACEHOLDER-14203))
          (first PLACEHOLDER-14202))))
       ""
       (partition-by identity PLACEHOLDER-14200)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14204]
      (reduce
       (fn*
        ([PLACEHOLDER-14205 PLACEHOLDER-14206]
         (str
          PLACEHOLDER-14205
          (join
           (repeat
            (let*
             [PLACEHOLDER-14207
              (clojure.lang.RT/count PLACEHOLDER-14206)]
             (if
              (clojure.lang.Util/equiv 1 PLACEHOLDER-14207)
              1
              (java.lang.Long/parseLong
               (subs
                PLACEHOLDER-14206
                0
                (clojure.lang.Numbers/dec PLACEHOLDER-14207)))))
            (last PLACEHOLDER-14206))))))
       ""
       (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-14204))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8381
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8381))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def digit? (set "1023456789"))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8382]
      (join
       (mapcat
        (fn*
         ([PLACEHOLDER-8383]
          (let*
           [PLACEHOLDER-8384
            PLACEHOLDER-8383
            PLACEHOLDER-8385
            (clojure.lang.RT/nth PLACEHOLDER-8384 0 nil)
            PLACEHOLDER-8386
            (clojure.lang.RT/nth PLACEHOLDER-8384 1 nil)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-8385 1)
            [PLACEHOLDER-8386]
            [PLACEHOLDER-8385 PLACEHOLDER-8386]))))
        (map
         (juxt count first)
         (partition-by identity PLACEHOLDER-8382)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8387]
      (loop*
       [PLACEHOLDER-8388 PLACEHOLDER-8387 PLACEHOLDER-8389 []]
       (if
        (empty? PLACEHOLDER-8388)
        (join PLACEHOLDER-8389)
        (let*
         [PLACEHOLDER-8390
          (split-with digit? PLACEHOLDER-8388)
          PLACEHOLDER-8391
          (clojure.lang.RT/nth PLACEHOLDER-8390 0 nil)
          PLACEHOLDER-8392
          (clojure.lang.RT/nth PLACEHOLDER-8390 1 nil)
          PLACEHOLDER-8393
          (if
           (empty? PLACEHOLDER-8391)
           1
           (read-string (join PLACEHOLDER-8391)))]
         (recur
          (rest PLACEHOLDER-8392)
          (reduce
           conj
           PLACEHOLDER-8389
           (repeat PLACEHOLDER-8393 (first PLACEHOLDER-8392)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11737
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11737))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11738]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-11738)
        1)
       (first PLACEHOLDER-11738)
       (str
        (clojure.lang.RT/count PLACEHOLDER-11738)
        (first PLACEHOLDER-11738))))))
   (def
    parse-digits
    (fn*
     ([PLACEHOLDER-11739]
      (parse-digits
       ""
       []
       (seq (clojure.lang.Numbers/char_array PLACEHOLDER-11739))))
     ([PLACEHOLDER-11740 PLACEHOLDER-11741 PLACEHOLDER-11742]
      (let*
       [PLACEHOLDER-11743
        PLACEHOLDER-11742
        PLACEHOLDER-11744
        (clojure.core/seq PLACEHOLDER-11743)
        PLACEHOLDER-11745
        (clojure.core/first PLACEHOLDER-11744)
        PLACEHOLDER-11746
        (clojure.core/next PLACEHOLDER-11744)
        PLACEHOLDER-11747
        PLACEHOLDER-11745
        PLACEHOLDER-11748
        PLACEHOLDER-11746
        PLACEHOLDER-11749
        PLACEHOLDER-11743]
       (if
        (empty? PLACEHOLDER-11749)
        PLACEHOLDER-11741
        (if
         (java.lang.Character/isDigit PLACEHOLDER-11747)
         (recur
          (str PLACEHOLDER-11740 PLACEHOLDER-11747)
          PLACEHOLDER-11741
          PLACEHOLDER-11748)
         (if
          :else
          (recur
           ""
           (if
            (empty? PLACEHOLDER-11740)
            (conj PLACEHOLDER-11741 (str PLACEHOLDER-11747))
            (conj
             PLACEHOLDER-11741
             PLACEHOLDER-11740
             (str PLACEHOLDER-11747)))
           PLACEHOLDER-11748))))))))
   (def
    str->int
    (fn*
     ([PLACEHOLDER-11750]
      (try
       (java.lang.Integer/parseInt (str PLACEHOLDER-11750))
       (catch
        NumberFormatException
        PLACEHOLDER-11751
        PLACEHOLDER-11750)))))
   (def
    repeat-string
    (fn*
     ([PLACEHOLDER-11752 PLACEHOLDER-11753]
      (apply str (repeat PLACEHOLDER-11752 PLACEHOLDER-11753)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11754 PLACEHOLDER-11755]
      (let*
       [PLACEHOLDER-11756
        PLACEHOLDER-11755
        PLACEHOLDER-11757
        (clojure.core/seq PLACEHOLDER-11756)
        PLACEHOLDER-11758
        (clojure.core/first PLACEHOLDER-11757)
        PLACEHOLDER-11759
        (clojure.core/next PLACEHOLDER-11757)
        PLACEHOLDER-11760
        PLACEHOLDER-11758
        PLACEHOLDER-11761
        PLACEHOLDER-11759
        PLACEHOLDER-11762
        PLACEHOLDER-11756]
       (if
        (empty? PLACEHOLDER-11762)
        PLACEHOLDER-11754
        (if
         (number? PLACEHOLDER-11760)
         (recur
          (str
           PLACEHOLDER-11754
           (repeat-string PLACEHOLDER-11760 (first PLACEHOLDER-11761)))
          (rest PLACEHOLDER-11761))
         (if
          :else
          (recur
           (str PLACEHOLDER-11754 PLACEHOLDER-11760)
           PLACEHOLDER-11761))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11763]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-11763))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11764]
      (decode "" (map str->int (parse-digits PLACEHOLDER-11764)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9491
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9491))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-letter
    (fn*
     ([PLACEHOLDER-9492]
      (let*
       [PLACEHOLDER-9493
        PLACEHOLDER-9492
        PLACEHOLDER-9494
        (clojure.lang.RT/nth PLACEHOLDER-9493 0 nil)
        PLACEHOLDER-9495
        (clojure.lang.RT/nth PLACEHOLDER-9493 1 nil)]
       (let*
        [PLACEHOLDER-9496 (clojure.lang.RT/count PLACEHOLDER-9494)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-9496 1)
         PLACEHOLDER-9494
         (str PLACEHOLDER-9496 (first PLACEHOLDER-9494))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9497]
      (str/join
       ""
       (map
        encode-letter
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-9497))))))
   (def
    decode-letter
    (fn*
     ([PLACEHOLDER-9498]
      (let*
       [PLACEHOLDER-9499
        PLACEHOLDER-9498
        PLACEHOLDER-9500
        (clojure.lang.RT/nth PLACEHOLDER-9499 0 nil)
        PLACEHOLDER-9501
        (clojure.lang.RT/nth PLACEHOLDER-9499 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-9500 "")
        PLACEHOLDER-9501
        (str/join
         ""
         (repeat (new Integer PLACEHOLDER-9500) PLACEHOLDER-9501)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9502]
      (str/join
       ""
       (map
        decode-letter
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-9502)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14173
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14173))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    get-count
    (fn*
     ([PLACEHOLDER-14174]
      (let*
       [PLACEHOLDER-14175 (clojure.lang.RT/count PLACEHOLDER-14174)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-14175 1)
        PLACEHOLDER-14175)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14176]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14177]
          (str
           (get-count PLACEHOLDER-14177)
           (first PLACEHOLDER-14177))))
        (partition-by identity PLACEHOLDER-14176))))))
   (def
    expand-chars
    (fn*
     ([PLACEHOLDER-14178]
      (let*
       [PLACEHOLDER-14179
        (re-seq (re-pattern "[0-9]+|[a-z A-Z]") PLACEHOLDER-14178)]
       (if
        (clojure.lang.Numbers/lt
         1
         (clojure.lang.RT/count PLACEHOLDER-14179))
        (apply
         str
         (repeat
          (read-string (first PLACEHOLDER-14179))
          (second PLACEHOLDER-14179)))
        PLACEHOLDER-14178)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14180]
      (apply
       str
       (map
        expand-chars
        (re-seq (re-pattern "[0-9]*[a-zA-Z ]") PLACEHOLDER-14180)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13228
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13228))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    flush-buf
    (fn*
     ([PLACEHOLDER-13229]
      (if
       (not (empty? PLACEHOLDER-13229))
       [(first PLACEHOLDER-13229)
        (clojure.lang.RT/count PLACEHOLDER-13229)]))))
   (def
    rle-impl
    (fn*
     ([PLACEHOLDER-13230
       PLACEHOLDER-13231
       PLACEHOLDER-13232
       PLACEHOLDER-13233]
      (if
       (empty? PLACEHOLDER-13230)
       (conj PLACEHOLDER-13233 (flush-buf PLACEHOLDER-13232))
       (if
        (clojure.lang.Util/equiv
         (first PLACEHOLDER-13230)
         PLACEHOLDER-13231)
        (recur
         (rest PLACEHOLDER-13230)
         (first PLACEHOLDER-13230)
         (conj PLACEHOLDER-13232 (first PLACEHOLDER-13230))
         PLACEHOLDER-13233)
        (recur
         (rest PLACEHOLDER-13230)
         (first PLACEHOLDER-13230)
         [(first PLACEHOLDER-13230)]
         (conj PLACEHOLDER-13233 (flush-buf PLACEHOLDER-13232))))))))
   (def
    produce
    (fn*
     ([PLACEHOLDER-13234 PLACEHOLDER-13235]
      (if
       (empty? PLACEHOLDER-13234)
       PLACEHOLDER-13235
       (recur
        (rest PLACEHOLDER-13234)
        (conj
         PLACEHOLDER-13235
         (if
          (clojure.lang.Util/equiv 1 (last (first PLACEHOLDER-13234)))
          (format "%s" (first (first PLACEHOLDER-13234)))
          (format
           "%d%s"
           (last (first PLACEHOLDER-13234))
           (first (first PLACEHOLDER-13234))))))))))
   (def digits #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9})
   (def
    digit?
    (fn* ([PLACEHOLDER-13236] (contains? digits PLACEHOLDER-13236))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13237]
      (apply
       str
       (produce
        (filter identity (rle-impl PLACEHOLDER-13237 \! [] []))
        [])))))
   (def
    flush-nbuf
    (fn*
     ([PLACEHOLDER-13238 PLACEHOLDER-13239]
      (if
       (empty? PLACEHOLDER-13238)
       PLACEHOLDER-13239
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt (apply str PLACEHOLDER-13238))
         PLACEHOLDER-13239))))))
   (def
    rld-impl
    (fn*
     ([PLACEHOLDER-13240 PLACEHOLDER-13241 PLACEHOLDER-13242]
      (if
       (empty? PLACEHOLDER-13240)
       PLACEHOLDER-13242
       (if
        (digit? (first PLACEHOLDER-13240))
        (recur
         (rest PLACEHOLDER-13240)
         (conj PLACEHOLDER-13241 (first PLACEHOLDER-13240))
         PLACEHOLDER-13242)
        (recur
         (rest PLACEHOLDER-13240)
         []
         (conj
          PLACEHOLDER-13242
          (flush-nbuf
           PLACEHOLDER-13241
           (first PLACEHOLDER-13240)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13243]
      (apply str (rld-impl PLACEHOLDER-13243 [] []))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9599
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9599))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9600]
      (let*
       [PLACEHOLDER-9601
        (partition-by identity PLACEHOLDER-9600)
        PLACEHOLDER-9602
        (replace {1 ""} (map count PLACEHOLDER-9601))
        PLACEHOLDER-9603
        (map first PLACEHOLDER-9601)]
       (apply
        str
        (flatten (map list PLACEHOLDER-9602 PLACEHOLDER-9603)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9604]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9605]
          (let*
           [PLACEHOLDER-9606
            (apply str (drop-last PLACEHOLDER-9605))
            PLACEHOLDER-9607
            (last PLACEHOLDER-9605)]
           (if
            (empty? PLACEHOLDER-9606)
            PLACEHOLDER-9607
            (apply
             str
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-9606)
              PLACEHOLDER-9607))))))
        (re-seq (re-pattern "[1-9]*[a-zA-Z ]") PLACEHOLDER-9604)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10152
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10152))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10153]
      (reduce
       str
       (mapcat
        identity
        (map
         (fn*
          ([PLACEHOLDER-10154]
           (identity
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-10154)
              1)
             [(clojure.lang.RT/count PLACEHOLDER-10154)
              (first PLACEHOLDER-10154)]
             [(first PLACEHOLDER-10154)]))))
         (partition-by identity PLACEHOLDER-10153)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10155]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10156]
          (let*
           [PLACEHOLDER-10157
            PLACEHOLDER-10156
            PLACEHOLDER-10158
            (clojure.lang.RT/nth PLACEHOLDER-10157 0 nil)
            PLACEHOLDER-10159
            (clojure.lang.RT/nth PLACEHOLDER-10157 1 nil)
            PLACEHOLDER-10160
            (clojure.lang.RT/nth PLACEHOLDER-10157 2 nil)]
           (repeat
            ((fnil
              (fn*
               ([PLACEHOLDER-10161]
                (java.lang.Integer/parseInt PLACEHOLDER-10161)))
              "1")
             PLACEHOLDER-10159)
            PLACEHOLDER-10160))))
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-10155)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12603
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12603))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-12604] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-12605] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13056
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13056))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-group
    (fn*
     ([PLACEHOLDER-13057]
      (let*
       [PLACEHOLDER-13058
        (clojure.lang.RT/count PLACEHOLDER-13057)
        PLACEHOLDER-13059
        (first PLACEHOLDER-13057)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-13058 1)
        (str PLACEHOLDER-13058 PLACEHOLDER-13059)
        PLACEHOLDER-13059)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13060]
      (apply
       str
       (map encode-group (partition-by identity PLACEHOLDER-13060))))))
   (def
    decode-group
    (fn*
     ([PLACEHOLDER-13061]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-13061)
        1)
       (let*
        [PLACEHOLDER-13062
         (peek (vec PLACEHOLDER-13061))
         PLACEHOLDER-13063
         (java.lang.Integer/parseInt
          (apply str (drop-last PLACEHOLDER-13061)))]
        (apply
         str
         (take PLACEHOLDER-13063 (repeat PLACEHOLDER-13062))))
       PLACEHOLDER-13061))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13064]
      (apply
       str
       (map
        decode-group
        (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-13064)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9781
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9781))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9782]
      (let*
       [PLACEHOLDER-9783
        (partition-by identity PLACEHOLDER-9782)
        PLACEHOLDER-9786
        (interleave
         (map
          (fn*
           ([PLACEHOLDER-9784]
            (clojure.lang.RT/count PLACEHOLDER-9784)))
          PLACEHOLDER-9783)
         (map
          (fn* ([PLACEHOLDER-9785] (first PLACEHOLDER-9785)))
          PLACEHOLDER-9783))
        PLACEHOLDER-9789
        (clojure.string/join
         ""
         (filter
          (fn*
           ([PLACEHOLDER-9787]
            (not (clojure.lang.Util/equiv PLACEHOLDER-9787 1))))
          (map
           (fn* ([PLACEHOLDER-9788] (str PLACEHOLDER-9788)))
           PLACEHOLDER-9786)))]
       PLACEHOLDER-9789))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9790]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9791]
          (str
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-9791))
            nil
            (clojure.lang.RT/count PLACEHOLDER-9791))
           (first PLACEHOLDER-9791))))
        (partition-by identity PLACEHOLDER-9790))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9792]
      (apply
       str
       (mapcat
        (juxt count first)
        (partition-by identity PLACEHOLDER-9792))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9793]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-9794]
          (let*
           [PLACEHOLDER-9795
            PLACEHOLDER-9794
            PLACEHOLDER-9796
            (clojure.lang.RT/nth PLACEHOLDER-9795 0 nil)
            PLACEHOLDER-9797
            (clojure.lang.RT/nth PLACEHOLDER-9795 1 nil)
            PLACEHOLDER-9798
            (clojure.lang.RT/nth PLACEHOLDER-9795 2 nil)]
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-9797)
            PLACEHOLDER-9798))))
        (re-seq (re-pattern "(\\d+)([a-zA-Z])") PLACEHOLDER-9793)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10517
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10517))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10518]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10519]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-10519)
            1)
           (str
            (clojure.lang.RT/count PLACEHOLDER-10519)
            (first PLACEHOLDER-10519))
           (str (first PLACEHOLDER-10519)))))
        (partition-by identity PLACEHOLDER-10518))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10520]
      (s/replace
       PLACEHOLDER-10520
       (re-pattern "\\d+[^\\d]")
       (fn*
        ([PLACEHOLDER-10521]
         (apply
          str
          (repeat
           (java.lang.Integer/parseInt
            (re-find (re-pattern "\\d+") PLACEHOLDER-10521))
           (re-find (re-pattern "[^\\d]") PLACEHOLDER-10521))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13331
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13331))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13332]
      (let*
       [PLACEHOLDER-13340
        (reduce
         (fn*
          ([PLACEHOLDER-13333 PLACEHOLDER-13334]
           (let*
            [PLACEHOLDER-13335
             PLACEHOLDER-13333
             PLACEHOLDER-13336
             (if
              (clojure.core/seq? PLACEHOLDER-13335)
              (if
               (clojure.core/next PLACEHOLDER-13335)
               (clojure.lang.PersistentArrayMap/createAsIfByAssoc
                (clojure.core/to-array PLACEHOLDER-13335))
               (if
                (clojure.core/seq PLACEHOLDER-13335)
                (clojure.core/first PLACEHOLDER-13335)
                clojure.lang.PersistentArrayMap/EMPTY))
              PLACEHOLDER-13335)
             PLACEHOLDER-13337
             (clojure.lang.RT/get PLACEHOLDER-13336 :prev-char)
             PLACEHOLDER-13338
             (clojure.lang.RT/get PLACEHOLDER-13336 :result)
             PLACEHOLDER-13339
             (clojure.lang.RT/get PLACEHOLDER-13336 :count)]
            (if
             (not= PLACEHOLDER-13334 PLACEHOLDER-13337)
             {:prev-char PLACEHOLDER-13334,
              :result
              (conj
               PLACEHOLDER-13338
               (str
                (if
                 (clojure.lang.Numbers/gt PLACEHOLDER-13339 1)
                 PLACEHOLDER-13339)
                PLACEHOLDER-13337)),
              :count 1}
             {:prev-char PLACEHOLDER-13334,
              :result PLACEHOLDER-13338,
              :count (clojure.lang.Numbers/inc PLACEHOLDER-13339)}))))
         {:prev-char (first PLACEHOLDER-13332), :result [], :count 1}
         (drop 1 PLACEHOLDER-13332))]
       (apply
        str
        (conj
         (:result PLACEHOLDER-13340)
         (str
          (if
           (clojure.lang.Numbers/gt (:count PLACEHOLDER-13340) 1)
           (:count PLACEHOLDER-13340))
          (:prev-char PLACEHOLDER-13340))))))))
   (def
    char->digit
    (fn*
     ([PLACEHOLDER-13341]
      (clojure.lang.Numbers/minus
       (clojure.lang.RT/intCast PLACEHOLDER-13341)
       (clojure.lang.RT/intCast \0)))))
   (def
    valid-digit?
    (fn*
     ([PLACEHOLDER-13342]
      (let*
       [PLACEHOLDER-13343
        (clojure.lang.Numbers/gte PLACEHOLDER-13342 0)]
       (if
        PLACEHOLDER-13343
        (clojure.lang.Numbers/lte PLACEHOLDER-13342 9)
        PLACEHOLDER-13343)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13344]
      (apply
       str
       (:result
        (reduce
         (fn*
          ([PLACEHOLDER-13345 PLACEHOLDER-13346]
           (let*
            [PLACEHOLDER-13347
             PLACEHOLDER-13345
             PLACEHOLDER-13348
             (if
              (clojure.core/seq? PLACEHOLDER-13347)
              (if
               (clojure.core/next PLACEHOLDER-13347)
               (clojure.lang.PersistentArrayMap/createAsIfByAssoc
                (clojure.core/to-array PLACEHOLDER-13347))
               (if
                (clojure.core/seq PLACEHOLDER-13347)
                (clojure.core/first PLACEHOLDER-13347)
                clojure.lang.PersistentArrayMap/EMPTY))
              PLACEHOLDER-13347)
             PLACEHOLDER-13349
             (clojure.lang.RT/get PLACEHOLDER-13348 :result)
             PLACEHOLDER-13350
             (clojure.lang.RT/get PLACEHOLDER-13348 :count)]
            (let*
             [PLACEHOLDER-13351
              (char->digit PLACEHOLDER-13346)
              PLACEHOLDER-13352
              (valid-digit? PLACEHOLDER-13351)]
             (if
              PLACEHOLDER-13352
              {:result PLACEHOLDER-13349,
               :count
               (clojure.lang.Numbers/add
                PLACEHOLDER-13351
                (clojure.lang.Numbers/multiply PLACEHOLDER-13350 10))}
              {:result
               (conj
                PLACEHOLDER-13349
                (if
                 (clojure.lang.Numbers/isZero PLACEHOLDER-13350)
                 PLACEHOLDER-13346
                 (apply
                  str
                  (repeat PLACEHOLDER-13350 PLACEHOLDER-13346)))),
               :count 0})))))
         {:result [], :count 0}
         PLACEHOLDER-13344)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12544
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12544))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12545]
      (loop*
       [PLACEHOLDER-12546
        ""
        PLACEHOLDER-12547
        (first PLACEHOLDER-12545)
        PLACEHOLDER-12548
        (rest PLACEHOLDER-12545)
        PLACEHOLDER-12549
        1]
       (if
        (empty? PLACEHOLDER-12548)
        (str
         PLACEHOLDER-12546
         (if
          (clojure.lang.Numbers/gt PLACEHOLDER-12549 1)
          PLACEHOLDER-12549)
         PLACEHOLDER-12547)
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-12548)
          PLACEHOLDER-12547)
         (recur
          PLACEHOLDER-12546
          PLACEHOLDER-12547
          (rest PLACEHOLDER-12548)
          (clojure.lang.Numbers/add PLACEHOLDER-12549 1))
         (if
          :else
          (recur
           (str
            PLACEHOLDER-12546
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-12549 1)
             PLACEHOLDER-12549)
            PLACEHOLDER-12547)
           (first PLACEHOLDER-12548)
           (rest PLACEHOLDER-12548)
           1))))))))
   (def run-length-decode (fn* ([PLACEHOLDER-12550] ""))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8433
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8433))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    toggle-chars
    (fn*
     ([PLACEHOLDER-8434 PLACEHOLDER-8435]
      (if
       (clojure.lang.Numbers/lt
        1
        (clojure.lang.RT/count PLACEHOLDER-8435))
       (let*
        [PLACEHOLDER-8436 PLACEHOLDER-8434]
        (case*
         PLACEHOLDER-8436
         1
         1
         (throw
          (new
           java.lang.IllegalArgumentException
           (clojure.core/str "No matching clause: " PLACEHOLDER-8436)))
         {0
          [:encode
           (str
            (clojure.lang.RT/count PLACEHOLDER-8435)
            (first PLACEHOLDER-8435))],
          1
          [:decode
           (let*
            [PLACEHOLDER-8437
             PLACEHOLDER-8435
             PLACEHOLDER-8438
             (clojure.lang.RT/nth PLACEHOLDER-8437 0 nil)
             PLACEHOLDER-8439
             (clojure.lang.RT/nth PLACEHOLDER-8437 1 nil)]
            (repeat (read-string PLACEHOLDER-8438) PLACEHOLDER-8439))]}
         :compact
         :hash-identity
         nil))
       (apply str PLACEHOLDER-8435)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8440]
      (apply
       str
       (map
        (partial toggle-chars :encode)
        (partition-by identity PLACEHOLDER-8440))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8441]
      (apply
       str
       (mapcat
        (partial toggle-chars :decode)
        (map
         (fn*
          ([PLACEHOLDER-8442]
           (re-seq (re-pattern "[0-9]+|[A-Za-z ]+") PLACEHOLDER-8442)))
         (re-seq
          (re-pattern "[0-9]{0,3}[A-Za-z ]|[A-Za-z ]]")
          PLACEHOLDER-8441))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12312
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12312))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress
    (fn*
     ([PLACEHOLDER-12313]
      (let*
       [PLACEHOLDER-12314
        PLACEHOLDER-12313
        PLACEHOLDER-12315
        (clojure.core/seq PLACEHOLDER-12314)
        PLACEHOLDER-12316
        (clojure.core/first PLACEHOLDER-12315)
        PLACEHOLDER-12317
        (clojure.core/next PLACEHOLDER-12315)
        PLACEHOLDER-12318
        PLACEHOLDER-12316
        PLACEHOLDER-12319
        PLACEHOLDER-12317
        PLACEHOLDER-12320
        PLACEHOLDER-12314]
       (if
        PLACEHOLDER-12319
        (list
         (str (clojure.lang.RT/count PLACEHOLDER-12320))
         PLACEHOLDER-12318)
        (if :else PLACEHOLDER-12320))))))
   (def
    is-char-number?
    (fn*
     ([PLACEHOLDER-12321]
      (contains? #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9} PLACEHOLDER-12321))))
   (def
    numeric-chars->integer
    (fn*
     ([PLACEHOLDER-12322]
      (java.lang.Integer/parseInt (apply str PLACEHOLDER-12322)))))
   (def
    expand-pair
    (fn*
     ([PLACEHOLDER-12323]
      (let*
       [PLACEHOLDER-12324
        PLACEHOLDER-12323
        PLACEHOLDER-12325
        (clojure.lang.RT/nth PLACEHOLDER-12324 0 nil)
        PLACEHOLDER-12326
        (clojure.lang.RT/nth PLACEHOLDER-12324 1 nil)]
       (concat
        (take
         (numeric-chars->integer PLACEHOLDER-12325)
         (repeat (first PLACEHOLDER-12326)))
        (rest PLACEHOLDER-12326))))))
   (def
    normalize
    (fn*
     ([PLACEHOLDER-12327]
      (if
       (is-char-number? (first PLACEHOLDER-12327))
       PLACEHOLDER-12327
       (if :else (cons \1 PLACEHOLDER-12327))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12328]
      (apply
       str
       (flatten
        (map compress (partition-by identity PLACEHOLDER-12328)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12329]
      (apply
       str
       (mapcat
        expand-pair
        (partition-all
         2
         (partition-by
          is-char-number?
          (normalize PLACEHOLDER-12329)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13653
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13653))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-13654]
      (let*
       [PLACEHOLDER-13655
        (clojure.lang.RT/count PLACEHOLDER-13654)
        PLACEHOLDER-13656
        (first PLACEHOLDER-13654)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-13655 1)
        (str PLACEHOLDER-13655 PLACEHOLDER-13656)
        PLACEHOLDER-13656)))))
   (def
    parse
    (fn*
     ([PLACEHOLDER-13657]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-13657 "")
       1
       (java.lang.Integer/parseInt PLACEHOLDER-13657)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-13658]
      (let*
       [PLACEHOLDER-13659
        PLACEHOLDER-13658
        PLACEHOLDER-13660
        (clojure.lang.RT/nth PLACEHOLDER-13659 0 nil)
        PLACEHOLDER-13661
        (clojure.lang.RT/nth PLACEHOLDER-13659 1 nil)
        PLACEHOLDER-13662
        (clojure.lang.RT/nth PLACEHOLDER-13659 2 nil)]
       (let*
        [PLACEHOLDER-13663 (parse PLACEHOLDER-13661)]
        (repeat PLACEHOLDER-13663 PLACEHOLDER-13662))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13664]
      (join
       ""
       (map encode (partition-by identity PLACEHOLDER-13664))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13665]
      (join
       ""
       (mapcat
        decode
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13665)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9705
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9705))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    acc-update
    (fn*
     ([PLACEHOLDER-9706]
      (assoc
       PLACEHOLDER-9706
       :acc
       (str
        (:acc PLACEHOLDER-9706)
        (if
         (clojure.lang.Numbers/gt (:count PLACEHOLDER-9706) 1)
         (:count PLACEHOLDER-9706))
        (:last PLACEHOLDER-9706))))))
   (def
    aux
    (fn*
     ([PLACEHOLDER-9707 PLACEHOLDER-9708]
      (if
       (clojure.lang.Util/equiv
        (:last PLACEHOLDER-9708)
        PLACEHOLDER-9707)
       (update PLACEHOLDER-9708 :count inc)
       (assoc
        (assoc (acc-update PLACEHOLDER-9708) :last PLACEHOLDER-9707)
        :count
        1)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9709]
      (let*
       [PLACEHOLDER-9710
        {:acc "", :count 0, :last ""}
        PLACEHOLDER-9711
        PLACEHOLDER-9709
        PLACEHOLDER-9712
        PLACEHOLDER-9711
        PLACEHOLDER-9713
        (clojure.core/seq PLACEHOLDER-9712)
        PLACEHOLDER-9714
        (clojure.core/first PLACEHOLDER-9713)
        PLACEHOLDER-9715
        (clojure.core/next PLACEHOLDER-9713)
        PLACEHOLDER-9716
        PLACEHOLDER-9714
        PLACEHOLDER-9717
        PLACEHOLDER-9715]
       (loop*
        [PLACEHOLDER-9718
         PLACEHOLDER-9710
         PLACEHOLDER-9719
         PLACEHOLDER-9711]
        (let*
         [PLACEHOLDER-9720
          PLACEHOLDER-9718
          PLACEHOLDER-9721
          PLACEHOLDER-9719
          PLACEHOLDER-9722
          (clojure.core/seq PLACEHOLDER-9721)
          PLACEHOLDER-9723
          (clojure.core/first PLACEHOLDER-9722)
          PLACEHOLDER-9724
          (clojure.core/next PLACEHOLDER-9722)
          PLACEHOLDER-9725
          PLACEHOLDER-9723
          PLACEHOLDER-9726
          PLACEHOLDER-9724]
         (if
          (empty? PLACEHOLDER-9726)
          (:acc (acc-update (aux PLACEHOLDER-9725 PLACEHOLDER-9720)))
          (recur
           (aux PLACEHOLDER-9725 PLACEHOLDER-9720)
           PLACEHOLDER-9726))))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-9727]
      (if
       (clojure.lang.Util/identical
        (re-find (re-pattern "\\d") (str PLACEHOLDER-9727))
        nil)
       PLACEHOLDER-9727
       (new Integer (str PLACEHOLDER-9727))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-9728 PLACEHOLDER-9729]
      (apply str (repeat PLACEHOLDER-9728 PLACEHOLDER-9729)))))
   (def
    aux-2
    (fn*
     ([PLACEHOLDER-9730 PLACEHOLDER-9731]
      (if
       (number? (parse-int PLACEHOLDER-9730))
       (assoc PLACEHOLDER-9731 :count (parse-int PLACEHOLDER-9730))
       (assoc
        (assoc
         PLACEHOLDER-9731
         :acc
         (str
          (:acc PLACEHOLDER-9731)
          (expand (:count PLACEHOLDER-9731) PLACEHOLDER-9730)))
        :count
        1)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9732]
      (let*
       [PLACEHOLDER-9733
        (re-seq (re-pattern "\\d+|\\D") PLACEHOLDER-9732)]
       (let*
        [PLACEHOLDER-9734
         {:acc "", :count 1}
         PLACEHOLDER-9735
         PLACEHOLDER-9733
         PLACEHOLDER-9736
         PLACEHOLDER-9735
         PLACEHOLDER-9737
         (clojure.core/seq PLACEHOLDER-9736)
         PLACEHOLDER-9738
         (clojure.core/first PLACEHOLDER-9737)
         PLACEHOLDER-9739
         (clojure.core/next PLACEHOLDER-9737)
         PLACEHOLDER-9740
         PLACEHOLDER-9738
         PLACEHOLDER-9741
         PLACEHOLDER-9739]
        (loop*
         [PLACEHOLDER-9742
          PLACEHOLDER-9734
          PLACEHOLDER-9743
          PLACEHOLDER-9735]
         (let*
          [PLACEHOLDER-9744
           PLACEHOLDER-9742
           PLACEHOLDER-9745
           PLACEHOLDER-9743
           PLACEHOLDER-9746
           (clojure.core/seq PLACEHOLDER-9745)
           PLACEHOLDER-9747
           (clojure.core/first PLACEHOLDER-9746)
           PLACEHOLDER-9748
           (clojure.core/next PLACEHOLDER-9746)
           PLACEHOLDER-9749
           PLACEHOLDER-9747
           PLACEHOLDER-9750
           PLACEHOLDER-9748]
          (if
           (empty? PLACEHOLDER-9750)
           (:acc (aux-2 PLACEHOLDER-9749 PLACEHOLDER-9744))
           (recur
            (aux-2 PLACEHOLDER-9749 PLACEHOLDER-9744)
            PLACEHOLDER-9750)))))))))
   (def
    teste
    (fn*
     ([PLACEHOLDER-9751 PLACEHOLDER-9752]
      (do
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-9751 1)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(> x 1))))))
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-9752 0)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(= y 0))))))
       (clojure.lang.Numbers/add
        PLACEHOLDER-9751
        PLACEHOLDER-9752))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9020
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9020))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-9021]
      (try
       (java.lang.Integer/parseInt
        (re-find (re-pattern "^\\d+") PLACEHOLDER-9021))
       (catch java.lang.NumberFormatException PLACEHOLDER-9022 1)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9023]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9024]
          (let*
           [PLACEHOLDER-9025 (clojure.lang.RT/count PLACEHOLDER-9024)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-9025 1)
            (str PLACEHOLDER-9025 (first PLACEHOLDER-9024))
            (first PLACEHOLDER-9024)))))
        (partition-by identity PLACEHOLDER-9023))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9026]
      (loop*
       [PLACEHOLDER-9027 [] PLACEHOLDER-9028 PLACEHOLDER-9026]
       (if
        (empty? PLACEHOLDER-9028)
        (apply str PLACEHOLDER-9027)
        (let*
         [PLACEHOLDER-9029
          (parse-int PLACEHOLDER-9028)
          PLACEHOLDER-9030
          (clojure.lang.RT/count (str PLACEHOLDER-9029))
          PLACEHOLDER-9031
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-9029 1)
           (subs PLACEHOLDER-9028 PLACEHOLDER-9030)
           PLACEHOLDER-9028)
          PLACEHOLDER-9032
          (first PLACEHOLDER-9031)]
         (recur
          (conj
           PLACEHOLDER-9027
           (apply str (repeat PLACEHOLDER-9029 PLACEHOLDER-9032)))
          (subs PLACEHOLDER-9031 1)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14371
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14371))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14372]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-14372)
       ""
       (let*
        [PLACEHOLDER-14373
         (re-seq (re-pattern "(.)\\1{0,}") PLACEHOLDER-14372)]
        (reduce
         (fn*
          ([PLACEHOLDER-14374 PLACEHOLDER-14375]
           (let*
            [PLACEHOLDER-14376
             PLACEHOLDER-14375
             PLACEHOLDER-14377
             (clojure.lang.RT/nth PLACEHOLDER-14376 0 nil)
             PLACEHOLDER-14378
             (clojure.lang.RT/nth PLACEHOLDER-14376 1 nil)]
            (str
             PLACEHOLDER-14374
             (let*
              [PLACEHOLDER-14379
               (clojure.lang.RT/count PLACEHOLDER-14377)]
              (if
               (clojure.lang.Util/equiv PLACEHOLDER-14379 1)
               nil
               PLACEHOLDER-14379))
             PLACEHOLDER-14378))))
         nil
         PLACEHOLDER-14373))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14380]
      (if
       (clojure.lang.Util/equiv "" PLACEHOLDER-14380)
       ""
       (let*
        [PLACEHOLDER-14381
         (re-seq (re-pattern "([0-9]*)([a-zA-Z ])") PLACEHOLDER-14380)]
        (reduce
         (fn*
          ([PLACEHOLDER-14382 PLACEHOLDER-14383]
           (let*
            [PLACEHOLDER-14384
             PLACEHOLDER-14383
             PLACEHOLDER-14385
             (clojure.lang.RT/nth PLACEHOLDER-14384 0 nil)
             PLACEHOLDER-14386
             (clojure.lang.RT/nth PLACEHOLDER-14384 1 nil)
             PLACEHOLDER-14387
             (clojure.lang.RT/nth PLACEHOLDER-14384 2 nil)]
            (apply
             str
             PLACEHOLDER-14382
             (repeat
              (if
               (clojure.lang.Util/equiv PLACEHOLDER-14386 "")
               1
               (java.lang.Integer/parseInt PLACEHOLDER-14386))
              PLACEHOLDER-14387)))))
         nil
         PLACEHOLDER-14381)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11038
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11038))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11039]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11040]
          (str
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-11040))
            nil
            (clojure.lang.RT/count PLACEHOLDER-11040))
           (first PLACEHOLDER-11040))))
        (partition-by identity PLACEHOLDER-11039))))))
   (def
    parse-length-mult
    (fn*
     ([PLACEHOLDER-11041]
      (if
       (empty? PLACEHOLDER-11041)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-11041)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11042]
      (apply
       str
       (reduce
        concat
        (map
         (fn*
          ([PLACEHOLDER-11043]
           (repeat
            (second PLACEHOLDER-11043)
            (last PLACEHOLDER-11043))))
         (map
          (fn*
           ([PLACEHOLDER-11044]
            (update PLACEHOLDER-11044 1 parse-length-mult)))
          (re-seq
           (re-pattern "(\\d*)([a-zA-Z\\s])")
           PLACEHOLDER-11042)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11642
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11642))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11643]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11644]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-11644)
             1)
            (clojure.lang.RT/count PLACEHOLDER-11644))
           (first PLACEHOLDER-11644))))
        (partition-by identity PLACEHOLDER-11643))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-11645]
      (java.lang.Integer/parseInt
       (apply
        str
        (let*
         [PLACEHOLDER-11646 (butlast PLACEHOLDER-11645)]
         (if PLACEHOLDER-11646 PLACEHOLDER-11646 "1")))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11647]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-11648]
           (repeat
            (parse-int PLACEHOLDER-11648)
            (last PLACEHOLDER-11648))))
         (re-seq (re-pattern "\\d*.") PLACEHOLDER-11647))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8736
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8736))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :as string :only join]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    plain-text-to-vector
    (fn*
     ([PLACEHOLDER-8737]
      (loop*
       [PLACEHOLDER-8738 [] PLACEHOLDER-8739 PLACEHOLDER-8737]
       (let*
        [PLACEHOLDER-8740
         (first PLACEHOLDER-8739)
         PLACEHOLDER-8741
         (peek PLACEHOLDER-8738)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-8740 nil)
         PLACEHOLDER-8738
         (if
          (let*
           [PLACEHOLDER-8742 (empty? PLACEHOLDER-8738)]
           (if
            PLACEHOLDER-8742
            PLACEHOLDER-8742
            (not
             (clojure.lang.Util/equiv
              PLACEHOLDER-8740
              (peek PLACEHOLDER-8741)))))
          (recur
           (conj PLACEHOLDER-8738 (vector PLACEHOLDER-8740))
           (rest PLACEHOLDER-8739))
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-8740
            (peek PLACEHOLDER-8741))
           (recur
            (conj
             (vec (butlast PLACEHOLDER-8738))
             (conj PLACEHOLDER-8741 PLACEHOLDER-8740))
            (rest PLACEHOLDER-8739))))))))))
   (def
    vector-to-cipher-text
    (fn*
     ([PLACEHOLDER-8743]
      (string/join
       (map
        string/join
        (map
         (fn*
          ([PLACEHOLDER-8744]
           (vector
            (let*
             [PLACEHOLDER-8745
              (clojure.lang.RT/count PLACEHOLDER-8744)]
             (if
              (clojure.lang.Util/equiv 1 PLACEHOLDER-8745)
              ""
              (str PLACEHOLDER-8745)))
            (str (peek PLACEHOLDER-8744)))))
         PLACEHOLDER-8743))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8746]
      (vector-to-cipher-text
       (plain-text-to-vector PLACEHOLDER-8746)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8747]
      (loop*
       [PLACEHOLDER-8748
        ""
        PLACEHOLDER-8749
        PLACEHOLDER-8747
        PLACEHOLDER-8750
        []]
       (let*
        [PLACEHOLDER-8751 (first PLACEHOLDER-8749)]
        (if
         (empty? PLACEHOLDER-8749)
         PLACEHOLDER-8748
         (if
          (java.lang.Character/isDigit PLACEHOLDER-8751)
          (recur
           PLACEHOLDER-8748
           (rest PLACEHOLDER-8749)
           (vector
            (if
             (empty? PLACEHOLDER-8750)
             (java.lang.Character/digit PLACEHOLDER-8751 10)
             (clojure.lang.Numbers/add
              (java.lang.Character/digit PLACEHOLDER-8751 10)
              (clojure.lang.Numbers/multiply
               10
               (last PLACEHOLDER-8750))))))
          (if
           :else
           (recur
            (str
             PLACEHOLDER-8748
             (if
              (empty? PLACEHOLDER-8750)
              (str PLACEHOLDER-8751)
              (string/join
               (repeat
                (last PLACEHOLDER-8750)
                (str PLACEHOLDER-8751)))))
            (rest PLACEHOLDER-8749)
            [])))))))))
   (def
    plaintext-to-vector-with-reduce
    (fn*
     ([PLACEHOLDER-8752 PLACEHOLDER-8753]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-8753 nil)
       PLACEHOLDER-8752
       (if
        (let*
         [PLACEHOLDER-8754 (empty? PLACEHOLDER-8752)]
         (if
          PLACEHOLDER-8754
          PLACEHOLDER-8754
          (not
           (clojure.lang.Util/equiv
            PLACEHOLDER-8753
            (peek (peek PLACEHOLDER-8752))))))
        (conj PLACEHOLDER-8752 (vector PLACEHOLDER-8753))
        (if
         (clojure.lang.Util/equiv
          PLACEHOLDER-8753
          (peek (peek PLACEHOLDER-8752)))
         (conj
          (vec (butlast PLACEHOLDER-8752))
          (conj (peek PLACEHOLDER-8752) PLACEHOLDER-8753))))))))
   (def
    run-length-encode-with-reduce
    (fn*
     ([PLACEHOLDER-8755]
      (vector-to-cipher-text
       (reduce
        plaintext-to-vector-with-reduce
        []
        PLACEHOLDER-8755))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14587
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14587))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14588]
      (apply
       str
       (reduce
        (fn*
         ([PLACEHOLDER-14589 PLACEHOLDER-14590]
          (str
           PLACEHOLDER-14589
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-14590))
            nil
            (clojure.lang.RT/count PLACEHOLDER-14590))
           (first PLACEHOLDER-14590))))
        ""
        (partition-by identity PLACEHOLDER-14588))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14591]
      (reduce
       (fn*
        ([PLACEHOLDER-14592 PLACEHOLDER-14593]
         (let*
          [PLACEHOLDER-14594
           PLACEHOLDER-14593
           PLACEHOLDER-14595
           (clojure.lang.RT/nth PLACEHOLDER-14594 0 nil)
           PLACEHOLDER-14596
           (clojure.lang.RT/nth PLACEHOLDER-14594 1 nil)]
          (apply
           str
           PLACEHOLDER-14592
           (let*
            [PLACEHOLDER-14598
             (let*
              [PLACEHOLDER-14597 PLACEHOLDER-14596]
              (if
               PLACEHOLDER-14597
               (repeat
                (java.lang.Integer/parseInt PLACEHOLDER-14595)
                PLACEHOLDER-14596)
               PLACEHOLDER-14597))]
            (if
             PLACEHOLDER-14598
             PLACEHOLDER-14598
             [PLACEHOLDER-14595]))))))
       ""
       (map
        (fn*
         ([PLACEHOLDER-14599]
          (re-seq (re-pattern "\\d+|.") PLACEHOLDER-14599)))
        (re-seq (re-pattern "\\d*[^\\d]") PLACEHOLDER-14591)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13771
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13771))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group->encoded
    (fn*
     ([PLACEHOLDER-13772]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13773]
          (let*
           [PLACEHOLDER-13774
            PLACEHOLDER-13773
            PLACEHOLDER-13775
            (clojure.lang.RT/nth PLACEHOLDER-13774 0 nil)
            PLACEHOLDER-13776
            (clojure.lang.RT/nth PLACEHOLDER-13774 1 nil)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-13776 1)
            (format "%d%s" PLACEHOLDER-13776 PLACEHOLDER-13775)
            PLACEHOLDER-13775))))
        PLACEHOLDER-13772)))))
   (def
    group->plaintext
    (fn*
     ([PLACEHOLDER-13777]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13778]
          (let*
           [PLACEHOLDER-13779
            PLACEHOLDER-13778
            PLACEHOLDER-13780
            (clojure.lang.RT/nth PLACEHOLDER-13779 0 nil)
            PLACEHOLDER-13781
            (clojure.lang.RT/nth PLACEHOLDER-13779 1 nil)]
           (apply str (repeat PLACEHOLDER-13781 PLACEHOLDER-13780)))))
        PLACEHOLDER-13777)))))
   (def
    plaintext->group
    (fn*
     ([PLACEHOLDER-13782] (plaintext->group PLACEHOLDER-13782 []))
     ([PLACEHOLDER-13783 PLACEHOLDER-13784]
      (if
       (seq PLACEHOLDER-13783)
       (let*
        [PLACEHOLDER-13785
         PLACEHOLDER-13783
         PLACEHOLDER-13786
         (clojure.core/seq PLACEHOLDER-13785)
         PLACEHOLDER-13787
         (clojure.core/first PLACEHOLDER-13786)
         PLACEHOLDER-13788
         (clojure.core/next PLACEHOLDER-13786)
         PLACEHOLDER-13789
         PLACEHOLDER-13787
         PLACEHOLDER-13790
         PLACEHOLDER-13788
         PLACEHOLDER-13791
         (last PLACEHOLDER-13784)
         PLACEHOLDER-13792
         (vec (butlast PLACEHOLDER-13784))]
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-13791)
          PLACEHOLDER-13789)
         (recur
          PLACEHOLDER-13790
          (conj
           PLACEHOLDER-13792
           [(first PLACEHOLDER-13791)
            (clojure.lang.Numbers/inc (last PLACEHOLDER-13791))]))
         (recur
          PLACEHOLDER-13790
          (conj PLACEHOLDER-13784 [PLACEHOLDER-13789 1]))))
       PLACEHOLDER-13784))))
   (def
    encoded->group
    (fn*
     ([PLACEHOLDER-13793]
      (let*
       [PLACEHOLDER-13794
        (re-seq (re-pattern "\\d*[a-zA-Z\\s]") PLACEHOLDER-13793)]
       (map
        (fn*
         ([PLACEHOLDER-13795]
          (let*
           [PLACEHOLDER-13796
            (re-find (re-pattern "\\d+") PLACEHOLDER-13795)
            PLACEHOLDER-13797
            (last PLACEHOLDER-13795)]
           (if
            PLACEHOLDER-13796
            [PLACEHOLDER-13797
             (java.lang.Integer/parseInt PLACEHOLDER-13796)]
            [PLACEHOLDER-13797 1]))))
        PLACEHOLDER-13794)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13798]
      (group->encoded (plaintext->group PLACEHOLDER-13798)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13799]
      (group->plaintext (encoded->group PLACEHOLDER-13799))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8584
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8584))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8585]
      (transduce
       (comp
        (partition-by identity)
        (map
         (fn*
          ([PLACEHOLDER-8586]
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-8586))
            (first PLACEHOLDER-8586)
            (str
             (clojure.lang.RT/count PLACEHOLDER-8586)
             (first PLACEHOLDER-8586)))))))
       str
       PLACEHOLDER-8585))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8587]
      (reduce
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8588]
          (let*
           [PLACEHOLDER-8589
            PLACEHOLDER-8588
            PLACEHOLDER-8590
            (clojure.lang.RT/nth PLACEHOLDER-8589 0 nil)
            PLACEHOLDER-8591
            (clojure.lang.RT/nth PLACEHOLDER-8589 1 nil)
            PLACEHOLDER-8592
            (clojure.lang.RT/nth PLACEHOLDER-8589 2 nil)]
           (let*
            [PLACEHOLDER-8593
             (if
              (clojure.core/not PLACEHOLDER-8591)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-8591))]
            (repeat PLACEHOLDER-8593 PLACEHOLDER-8592)))))
        (re-seq
         (re-pattern "([0-9]+)?([^0-9])")
         PLACEHOLDER-8587)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9220
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9220))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    char-count
    (fn*
     ([PLACEHOLDER-9221]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-9221))
       ""
       (clojure.lang.RT/count PLACEHOLDER-9221)))))
   (def
    str->symlist
    (fn*
     ([PLACEHOLDER-9222]
      (let*
       [PLACEHOLDER-9224
        (partition-by
         (fn*
          ([PLACEHOLDER-9223]
           (java.lang.Character/isDigit PLACEHOLDER-9223)))
         PLACEHOLDER-9222)]
       (letfn*
        [PLACEHOLDER-9225
         (fn*
          PLACEHOLDER-9226
          ([PLACEHOLDER-9227]
           (let*
            [PLACEHOLDER-9228
             PLACEHOLDER-9227
             PLACEHOLDER-9229
             (clojure.core/seq PLACEHOLDER-9228)
             PLACEHOLDER-9230
             (clojure.core/first PLACEHOLDER-9229)
             PLACEHOLDER-9231
             (clojure.core/next PLACEHOLDER-9229)
             PLACEHOLDER-9232
             PLACEHOLDER-9230
             PLACEHOLDER-9233
             PLACEHOLDER-9231]
            (if
             (java.lang.Character/isDigit PLACEHOLDER-9232)
             (java.lang.Integer/parseInt (apply str PLACEHOLDER-9227))
             PLACEHOLDER-9227))))]
        (flatten (map PLACEHOLDER-9225 PLACEHOLDER-9224)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9234]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9235]
          (str
           (char-count PLACEHOLDER-9235)
           (first PLACEHOLDER-9235))))
        (partition-by identity PLACEHOLDER-9234))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9236]
      (let*
       [PLACEHOLDER-9237
        (str->symlist PLACEHOLDER-9236)
        PLACEHOLDER-9238
        PLACEHOLDER-9237
        PLACEHOLDER-9239
        (clojure.core/seq PLACEHOLDER-9238)
        PLACEHOLDER-9240
        (clojure.core/first PLACEHOLDER-9239)
        PLACEHOLDER-9241
        (clojure.core/next PLACEHOLDER-9239)
        PLACEHOLDER-9242
        PLACEHOLDER-9240
        PLACEHOLDER-9243
        PLACEHOLDER-9241
        PLACEHOLDER-9244
        []
        PLACEHOLDER-9245
        nil]
       (loop*
        [PLACEHOLDER-9246
         PLACEHOLDER-9237
         PLACEHOLDER-9247
         PLACEHOLDER-9244
         PLACEHOLDER-9248
         PLACEHOLDER-9245]
        (let*
         [PLACEHOLDER-9249
          PLACEHOLDER-9246
          PLACEHOLDER-9250
          (clojure.core/seq PLACEHOLDER-9249)
          PLACEHOLDER-9251
          (clojure.core/first PLACEHOLDER-9250)
          PLACEHOLDER-9252
          (clojure.core/next PLACEHOLDER-9250)
          PLACEHOLDER-9253
          PLACEHOLDER-9251
          PLACEHOLDER-9254
          PLACEHOLDER-9252
          PLACEHOLDER-9255
          PLACEHOLDER-9247
          PLACEHOLDER-9256
          PLACEHOLDER-9248]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-9253 nil)
          (apply str (flatten PLACEHOLDER-9255))
          (let*
           [PLACEHOLDER-9257
            (if
             (number? PLACEHOLDER-9253)
             PLACEHOLDER-9255
             (if
              (not (number? PLACEHOLDER-9256))
              (conj PLACEHOLDER-9255 PLACEHOLDER-9253)
              (if
               :else
               (conj
                PLACEHOLDER-9255
                (repeat PLACEHOLDER-9256 PLACEHOLDER-9253)))))]
           (recur
            PLACEHOLDER-9254
            PLACEHOLDER-9257
            PLACEHOLDER-9253))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10936
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10936))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (use '[clojure.string :only (join)])
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10937]
      (join
       ""
       (map
        (fn*
         ([PLACEHOLDER-10938]
          (let*
           [PLACEHOLDER-10939
            PLACEHOLDER-10938
            PLACEHOLDER-10940
            (clojure.lang.RT/nth PLACEHOLDER-10939 0 nil)
            PLACEHOLDER-10941
            (clojure.lang.RT/nth PLACEHOLDER-10939 1 nil)]
           (let*
            [PLACEHOLDER-10942
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-10941 1)
              (str PLACEHOLDER-10941)
              "")]
            (str PLACEHOLDER-10942 PLACEHOLDER-10940)))))
        (reduce
         (fn*
          ([PLACEHOLDER-10943 PLACEHOLDER-10944]
           (let*
            [PLACEHOLDER-10945
             (clojure.lang.Numbers/dec
              (clojure.lang.RT/count PLACEHOLDER-10943))
             PLACEHOLDER-10946
             (clojure.lang.RT/get (last PLACEHOLDER-10943) 0)]
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-10944
              PLACEHOLDER-10946)
             (update-in PLACEHOLDER-10943 [PLACEHOLDER-10945 1] inc)
             (conj PLACEHOLDER-10943 [PLACEHOLDER-10944 1])))))
         []
         PLACEHOLDER-10937))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10947]
      (reduce
       (fn*
        ([PLACEHOLDER-10948 PLACEHOLDER-10949]
         (let*
          [PLACEHOLDER-10950
           PLACEHOLDER-10949
           PLACEHOLDER-10951
           (clojure.lang.RT/nth PLACEHOLDER-10950 0 nil)
           PLACEHOLDER-10952
           (clojure.lang.RT/nth PLACEHOLDER-10950 1 nil)]
          (str
           PLACEHOLDER-10948
           (apply str (repeat PLACEHOLDER-10951 PLACEHOLDER-10952))))))
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-10953 PLACEHOLDER-10954]
          (let*
           [PLACEHOLDER-10955
            (clojure.lang.RT/count PLACEHOLDER-10953)
            PLACEHOLDER-10956
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-10955 0)
             (clojure.lang.Numbers/dec PLACEHOLDER-10955)
             0)
            PLACEHOLDER-10957
            (clojure.lang.RT/get (last PLACEHOLDER-10953) 0)
            PLACEHOLDER-10958
            (clojure.lang.RT/get (last PLACEHOLDER-10953) 1)]
           (if
            (java.lang.Character/isDigit PLACEHOLDER-10954)
            (if
             (let*
              [PLACEHOLDER-10959
               (clojure.lang.Numbers/isZero PLACEHOLDER-10955)]
              (if
               PLACEHOLDER-10959
               PLACEHOLDER-10959
               PLACEHOLDER-10958))
             (conj
              PLACEHOLDER-10953
              [(java.lang.Integer/parseInt (str PLACEHOLDER-10954))])
             (update-in
              PLACEHOLDER-10953
              [PLACEHOLDER-10956 0]
              (fn*
               ([PLACEHOLDER-10960]
                (java.lang.Integer/parseInt
                 (str PLACEHOLDER-10960 PLACEHOLDER-10954))))))
            (if
             (let*
              [PLACEHOLDER-10961
               (clojure.lang.Numbers/isZero PLACEHOLDER-10955)]
              (if
               PLACEHOLDER-10961
               PLACEHOLDER-10961
               PLACEHOLDER-10958))
             (conj PLACEHOLDER-10953 [1 PLACEHOLDER-10954])
             (assoc-in
              PLACEHOLDER-10953
              [PLACEHOLDER-10956 1]
              PLACEHOLDER-10954))))))
        []
        PLACEHOLDER-10947))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10728
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10728))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-group
    (fn*
     ([PLACEHOLDER-10729]
      (let*
       [PLACEHOLDER-10730
        (clojure.lang.RT/count PLACEHOLDER-10729)
        PLACEHOLDER-10731
        (first PLACEHOLDER-10729)
        PLACEHOLDER-10732
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-10730 1)
         ""
         PLACEHOLDER-10730)]
       (str PLACEHOLDER-10732 PLACEHOLDER-10731)))))
   (def
    encode-groups
    (fn*
     ([PLACEHOLDER-10733]
      (apply str (map encode-group PLACEHOLDER-10733)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10734]
      (encode-groups (partition-by identity PLACEHOLDER-10734)))))
   (def
    parse-group-number
    (fn*
     ([PLACEHOLDER-10735]
      (java.lang.Integer/parseInt
       (apply str (butlast PLACEHOLDER-10735))))))
   (def
    decode-group
    (fn*
     ([PLACEHOLDER-10736]
      (let*
       [PLACEHOLDER-10737
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/count PLACEHOLDER-10736)
          1)
         1
         (parse-group-number PLACEHOLDER-10736))
        PLACEHOLDER-10738
        (last PLACEHOLDER-10736)]
       (repeat PLACEHOLDER-10737 PLACEHOLDER-10738)))))
   (def
    decode-groups
    (fn*
     ([PLACEHOLDER-10739]
      (apply str (flatten (map decode-group PLACEHOLDER-10739))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10740]
      (decode-groups
       (re-seq (re-pattern "\\d*[a-zA-Z ]") PLACEHOLDER-10740))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8928
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8928))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string])
          (clojure.core/require '[clojure.edn :as edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8929]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8930]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-8930)
             1)
            (clojure.lang.RT/count PLACEHOLDER-8930))
           (first PLACEHOLDER-8930))))
        (partition-by identity PLACEHOLDER-8929))))))
   (def
    rle->pairs
    (fn*
     ([PLACEHOLDER-8931]
      (let*
       [PLACEHOLDER-8932
        (re-seq (re-pattern "(\\d*)([a-zA-Z\\s])") PLACEHOLDER-8931)]
       (map
        (fn*
         ([PLACEHOLDER-8933]
          (vector
           (let*
            [PLACEHOLDER-8934
             (edn/read-string
              (clojure.lang.RT/nth PLACEHOLDER-8933 1))]
            (if PLACEHOLDER-8934 PLACEHOLDER-8934 1))
           (clojure.lang.RT/nth PLACEHOLDER-8933 2))))
        PLACEHOLDER-8932)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8935]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-8936]
           (repeat
            (first PLACEHOLDER-8936)
            (second PLACEHOLDER-8936))))
         (rle->pairs PLACEHOLDER-8935)))))))
   (run-length-decode "2Bb3Sa"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9658
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9658))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    format-encode-output-token
    (fn*
     ([PLACEHOLDER-9659 PLACEHOLDER-9660 PLACEHOLDER-9661]
      (let*
       [PLACEHOLDER-9662
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-9660 2)
         PLACEHOLDER-9661
         (str PLACEHOLDER-9660 PLACEHOLDER-9661))]
       (str PLACEHOLDER-9659 PLACEHOLDER-9662)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9663] (run-length-encode PLACEHOLDER-9663 "" 0 ""))
     ([PLACEHOLDER-9664
       PLACEHOLDER-9665
       PLACEHOLDER-9666
       PLACEHOLDER-9667]
      (let*
       [PLACEHOLDER-9668
        PLACEHOLDER-9664
        PLACEHOLDER-9669
        (clojure.core/seq PLACEHOLDER-9668)
        PLACEHOLDER-9670
        (clojure.core/first PLACEHOLDER-9669)
        PLACEHOLDER-9671
        (clojure.core/next PLACEHOLDER-9669)
        PLACEHOLDER-9672
        PLACEHOLDER-9670
        PLACEHOLDER-9673
        PLACEHOLDER-9671]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-9672 nil)
        (format-encode-output-token
         PLACEHOLDER-9665
         PLACEHOLDER-9666
         PLACEHOLDER-9667)
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-9672 PLACEHOLDER-9667)
         (recur
          PLACEHOLDER-9673
          PLACEHOLDER-9665
          (clojure.lang.Numbers/inc PLACEHOLDER-9666)
          PLACEHOLDER-9667)
         (if
          :else
          (recur
           PLACEHOLDER-9673
           (format-encode-output-token
            PLACEHOLDER-9665
            PLACEHOLDER-9666
            PLACEHOLDER-9667)
           1
           PLACEHOLDER-9672))))))))
   (def
    format-decode-output-token
    (fn*
     ([PLACEHOLDER-9674 PLACEHOLDER-9675 PLACEHOLDER-9676]
      (let*
       [PLACEHOLDER-9677
        (if
         (empty? PLACEHOLDER-9675)
         1
         (new Integer PLACEHOLDER-9675))]
       (str
        PLACEHOLDER-9674
        (clojure.string/join
         (repeat PLACEHOLDER-9677 PLACEHOLDER-9676)))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-9678]
      (<=
       (clojure.lang.RT/intCast \0)
       (clojure.lang.RT/intCast PLACEHOLDER-9678)
       (clojure.lang.RT/intCast \9)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9679] (run-length-decode PLACEHOLDER-9679 "" ""))
     ([PLACEHOLDER-9680 PLACEHOLDER-9681 PLACEHOLDER-9682]
      (let*
       [PLACEHOLDER-9683
        PLACEHOLDER-9680
        PLACEHOLDER-9684
        (clojure.core/seq PLACEHOLDER-9683)
        PLACEHOLDER-9685
        (clojure.core/first PLACEHOLDER-9684)
        PLACEHOLDER-9686
        (clojure.core/next PLACEHOLDER-9684)
        PLACEHOLDER-9687
        PLACEHOLDER-9685
        PLACEHOLDER-9688
        PLACEHOLDER-9686]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-9687 nil)
        PLACEHOLDER-9681
        (if
         (digit? PLACEHOLDER-9687)
         (recur
          PLACEHOLDER-9688
          PLACEHOLDER-9681
          (str PLACEHOLDER-9682 PLACEHOLDER-9687))
         (if
          :else
          (recur
           PLACEHOLDER-9688
           (format-decode-output-token
            PLACEHOLDER-9681
            PLACEHOLDER-9682
            PLACEHOLDER-9687)
           "")))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12716
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12716))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-number
    (fn*
     ([PLACEHOLDER-12717]
      (let*
       [PLACEHOLDER-12718 (clojure.lang.RT/count PLACEHOLDER-12717)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-12718)
        ""
        PLACEHOLDER-12718)))))
   (def
    encode-component
    (fn*
     ([PLACEHOLDER-12719]
      (str
       (encode-number PLACEHOLDER-12719)
       (first PLACEHOLDER-12719)))))
   (def
    split-plain-text
    (fn*
     ([PLACEHOLDER-12720] (partition-by identity PLACEHOLDER-12720))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-12721] (map encode-component PLACEHOLDER-12721))))
   (def
    join-cipher-text
    (fn* ([PLACEHOLDER-12722] (apply str PLACEHOLDER-12722))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12723]
      (join-cipher-text
       (encode (split-plain-text PLACEHOLDER-12723))))))
   (def
    decode-number
    (fn*
     ([PLACEHOLDER-12724]
      (let*
       [PLACEHOLDER-12725
        (re-find (re-pattern "[0-9]+") PLACEHOLDER-12724)]
       (if
        (clojure.lang.Util/equiv nil PLACEHOLDER-12725)
        1
        (java.lang.Integer/parseInt PLACEHOLDER-12725))))))
   (def
    decode-letter
    (fn*
     ([PLACEHOLDER-12726]
      (re-find (re-pattern "[A-Za-z\\s]+") PLACEHOLDER-12726))))
   (def
    decode-component
    (fn*
     ([PLACEHOLDER-12727]
      (let*
       [PLACEHOLDER-12728
        (decode-number PLACEHOLDER-12727)
        PLACEHOLDER-12729
        (decode-letter PLACEHOLDER-12727)]
       (apply str (repeat PLACEHOLDER-12728 PLACEHOLDER-12729))))))
   (def
    split-cipher-text
    (fn*
     ([PLACEHOLDER-12730]
      (re-seq (re-pattern "[0-9]*[A-Za-z\\s]") PLACEHOLDER-12730))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12731] (map decode-component PLACEHOLDER-12731))))
   (def
    join-plain-text
    (fn* ([PLACEHOLDER-12732] (apply str PLACEHOLDER-12732))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12733]
      (join-plain-text
       (decode (split-cipher-text PLACEHOLDER-12733)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13695
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13695))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.edn :as edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13696]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-13697]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-13697)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-13696)))))))
   (def
    char->num
    (fn*
     ([PLACEHOLDER-13698]
      (java.lang.Character/getNumericValue PLACEHOLDER-13698))))
   (def
    exp
    (fn*
     ([PLACEHOLDER-13699 PLACEHOLDER-13700]
      (reduce * (repeat PLACEHOLDER-13700 PLACEHOLDER-13699)))))
   (def
    digits->num
    (fn*
     ([PLACEHOLDER-13701]
      (reduce
       +
       (map-indexed
        (fn*
         ([PLACEHOLDER-13702 PLACEHOLDER-13703]
          (clojure.lang.Numbers/multiply
           (exp 10 PLACEHOLDER-13702)
           PLACEHOLDER-13703)))
        (reverse PLACEHOLDER-13701))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-13704]
      (java.lang.Character/isDigit PLACEHOLDER-13704))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13705]
      (loop*
       [PLACEHOLDER-13706 [] PLACEHOLDER-13707 PLACEHOLDER-13705]
       (if
        (empty? PLACEHOLDER-13707)
        (apply str PLACEHOLDER-13706)
        (let*
         [PLACEHOLDER-13708
          (seq (mapv char->num (take-while digit? PLACEHOLDER-13707)))]
         (if
          PLACEHOLDER-13708
          (let*
           [PLACEHOLDER-13709 PLACEHOLDER-13708]
           (let*
            [PLACEHOLDER-13710
             (drop
              (clojure.lang.RT/count PLACEHOLDER-13709)
              PLACEHOLDER-13707)
             PLACEHOLDER-13711
             (clojure.core/seq PLACEHOLDER-13710)
             PLACEHOLDER-13712
             (clojure.core/first PLACEHOLDER-13711)
             PLACEHOLDER-13713
             (clojure.core/next PLACEHOLDER-13711)
             PLACEHOLDER-13714
             PLACEHOLDER-13712
             PLACEHOLDER-13715
             PLACEHOLDER-13713]
            (recur
             (vec
              (concat
               PLACEHOLDER-13706
               (repeat
                (digits->num PLACEHOLDER-13709)
                PLACEHOLDER-13714)))
             PLACEHOLDER-13715)))
          (recur
           (conj PLACEHOLDER-13706 (first PLACEHOLDER-13707))
           (rest PLACEHOLDER-13707))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14023
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14023))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-block
    (fn*
     ([PLACEHOLDER-14024]
      (let*
       [PLACEHOLDER-14025
        (first PLACEHOLDER-14024)
        PLACEHOLDER-14026
        (clojure.lang.RT/count PLACEHOLDER-14024)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-14026)
        (str PLACEHOLDER-14025)
        (str PLACEHOLDER-14026 PLACEHOLDER-14025))))))
   (def
    extract-letter-count
    (fn*
     ([PLACEHOLDER-14027]
      (java.lang.Integer/parseInt
       (apply str (drop-last PLACEHOLDER-14027))))))
   (def
    decode-block
    (fn*
     ([PLACEHOLDER-14028]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-14028))
       (str PLACEHOLDER-14028)
       (let*
        [PLACEHOLDER-14029
         (last PLACEHOLDER-14028)
         PLACEHOLDER-14030
         (extract-letter-count PLACEHOLDER-14028)]
        (apply str (repeat PLACEHOLDER-14030 PLACEHOLDER-14029)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14031]
      (apply
       str
       (map encode-block (partition-by identity PLACEHOLDER-14031))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14032]
      (let*
       [PLACEHOLDER-14033 (re-pattern "[0-9]*[a-zA-Z\\s]")]
       (apply
        str
        (map
         decode-block
         (re-seq PLACEHOLDER-14033 PLACEHOLDER-14032))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11199
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11199))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11200]
      (loop*
       [PLACEHOLDER-11201
        ""
        PLACEHOLDER-11202
        1
        PLACEHOLDER-11203
        (first PLACEHOLDER-11200)
        PLACEHOLDER-11204
        (rest PLACEHOLDER-11200)]
       (if
        (some? (not-empty PLACEHOLDER-11204))
        (if
         (clojure.lang.Util/equiv
          PLACEHOLDER-11203
          (first PLACEHOLDER-11204))
         (recur
          PLACEHOLDER-11201
          (clojure.lang.Numbers/inc PLACEHOLDER-11202)
          PLACEHOLDER-11203
          (rest PLACEHOLDER-11204))
         (if
          (clojure.lang.Util/equiv 1 PLACEHOLDER-11202)
          (recur
           (str PLACEHOLDER-11201 PLACEHOLDER-11203)
           1
           (first PLACEHOLDER-11204)
           (rest PLACEHOLDER-11204))
          (recur
           (str PLACEHOLDER-11201 PLACEHOLDER-11202 PLACEHOLDER-11203)
           1
           (first PLACEHOLDER-11204)
           (rest PLACEHOLDER-11204))))
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-11202)
         (str PLACEHOLDER-11201 PLACEHOLDER-11203)
         (str
          PLACEHOLDER-11201
          PLACEHOLDER-11202
          PLACEHOLDER-11203)))))))
   (def
    get-number
    (fn*
     ([PLACEHOLDER-11205]
      (if
       (empty? PLACEHOLDER-11205)
       1
       (read-string PLACEHOLDER-11205)))))
   (def
    is-number?
    (fn*
     ([PLACEHOLDER-11206]
      (let*
       [PLACEHOLDER-11207 (str/blank? PLACEHOLDER-11206)]
       (case*
        PLACEHOLDER-11207
        0
        0
        (throw
         (new
          java.lang.IllegalArgumentException
          (clojure.core/str "No matching clause: " PLACEHOLDER-11207)))
        {1231 [true false],
         1237 [false (number? (read-string PLACEHOLDER-11206))]}
        :compact
        :hash-equiv
        nil)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11208]
      (loop*
       [PLACEHOLDER-11209
        ""
        PLACEHOLDER-11210
        ""
        PLACEHOLDER-11211
        (first PLACEHOLDER-11208)
        PLACEHOLDER-11212
        (rest PLACEHOLDER-11208)]
       (if
        (some? (not-empty PLACEHOLDER-11212))
        (if
         (is-number? (str PLACEHOLDER-11211))
         (recur
          PLACEHOLDER-11209
          (str PLACEHOLDER-11210 PLACEHOLDER-11211)
          (first PLACEHOLDER-11212)
          (rest PLACEHOLDER-11212))
         (recur
          (str
           PLACEHOLDER-11209
           (apply
            str
            (repeat (get-number PLACEHOLDER-11210) PLACEHOLDER-11211)))
          ""
          (first PLACEHOLDER-11212)
          (rest PLACEHOLDER-11212)))
        (str
         PLACEHOLDER-11209
         (apply
          str
          (repeat
           (get-number PLACEHOLDER-11210)
           PLACEHOLDER-11211)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12984
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12984))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-characters
    (fn*
     ([PLACEHOLDER-12985]
      (loop*
       [PLACEHOLDER-12986
        PLACEHOLDER-12985
        PLACEHOLDER-12987
        1
        PLACEHOLDER-12988
        []]
       (if
        (empty? PLACEHOLDER-12986)
        PLACEHOLDER-12988
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-12986)
          (second PLACEHOLDER-12986))
         (recur
          (rest PLACEHOLDER-12986)
          (clojure.lang.Numbers/add PLACEHOLDER-12987 1)
          PLACEHOLDER-12988)
         (recur
          (rest PLACEHOLDER-12986)
          1
          (conj
           PLACEHOLDER-12988
           [(first PLACEHOLDER-12986) PLACEHOLDER-12987]))))))))
   (def
    counts->rle
    (fn*
     ([PLACEHOLDER-12989]
      (let*
       [PLACEHOLDER-12990
        PLACEHOLDER-12989
        PLACEHOLDER-12991
        (clojure.lang.RT/nth PLACEHOLDER-12990 0 nil)
        PLACEHOLDER-12992
        (clojure.lang.RT/nth PLACEHOLDER-12990 1 nil)]
       (if
        (clojure.lang.Numbers/lt 1 PLACEHOLDER-12992)
        (str PLACEHOLDER-12992 PLACEHOLDER-12991)
        PLACEHOLDER-12991)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12993]
      (apply
       str
       (map counts->rle (count-characters PLACEHOLDER-12993))))))
   (def
    expand-count
    (fn*
     ([PLACEHOLDER-12994 PLACEHOLDER-12995]
      (apply
       str
       (repeat
        (if
         (empty? PLACEHOLDER-12994)
         1
         (java.lang.Integer/parseInt PLACEHOLDER-12994))
        PLACEHOLDER-12995)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12996]
      (loop*
       [PLACEHOLDER-12997
        (seq PLACEHOLDER-12996)
        PLACEHOLDER-12998
        ""
        PLACEHOLDER-12999
        []]
       (if
        (empty? PLACEHOLDER-12997)
        (apply str PLACEHOLDER-12999)
        (if
         (<= 49 (clojure.lang.RT/intCast (first PLACEHOLDER-12997)) 57)
         (recur
          (rest PLACEHOLDER-12997)
          (str PLACEHOLDER-12998 (first PLACEHOLDER-12997))
          PLACEHOLDER-12999)
         (recur
          (rest PLACEHOLDER-12997)
          ""
          (conj
           PLACEHOLDER-12999
           (expand-count
            PLACEHOLDER-12998
            (first PLACEHOLDER-12997))))))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14638
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14638))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14639]
      (apply
       str
       (let*
        [PLACEHOLDER-14651
         (fn*
          PLACEHOLDER-14640
          ([PLACEHOLDER-14641]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-14642 PLACEHOLDER-14641]
               (let*
                [PLACEHOLDER-14643
                 (clojure.core/seq PLACEHOLDER-14642)]
                (if
                 PLACEHOLDER-14643
                 (let*
                  [PLACEHOLDER-14644 PLACEHOLDER-14643]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-14644)
                   (let*
                    [PLACEHOLDER-14645
                     (clojure.core/chunk-first PLACEHOLDER-14644)
                     PLACEHOLDER-14646
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-14645))
                     PLACEHOLDER-14647
                     (clojure.core/chunk-buffer PLACEHOLDER-14646)]
                    (if
                     (loop*
                      [PLACEHOLDER-14648 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-14648
                        PLACEHOLDER-14646)
                       (let*
                        [PLACEHOLDER-14649
                         (.nth PLACEHOLDER-14645 PLACEHOLDER-14648)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-14647
                          (str
                           (if
                            (clojure.lang.Util/equiv
                             (clojure.lang.RT/count PLACEHOLDER-14649)
                             1)
                            nil
                            (clojure.lang.RT/count PLACEHOLDER-14649))
                           (first PLACEHOLDER-14649)))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-14648))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-14647)
                      (PLACEHOLDER-14640
                       (clojure.core/chunk-rest PLACEHOLDER-14644)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-14647)
                      nil)))
                   (let*
                    [PLACEHOLDER-14650
                     (clojure.core/first PLACEHOLDER-14644)]
                    (clojure.core/cons
                     (str
                      (if
                       (clojure.lang.Util/equiv
                        (clojure.lang.RT/count PLACEHOLDER-14650)
                        1)
                       nil
                       (clojure.lang.RT/count PLACEHOLDER-14650))
                      (first PLACEHOLDER-14650))
                     (PLACEHOLDER-14640
                      (clojure.core/rest
                       PLACEHOLDER-14644))))))))))))))]
        (PLACEHOLDER-14651
         (partition-by identity PLACEHOLDER-14639)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14652]
      (reduce
       str
       (map
        (fn*
         ([PLACEHOLDER-14653]
          (apply
           str
           (repeat
            (first PLACEHOLDER-14653)
            (second PLACEHOLDER-14653)))))
        (map
         (fn*
          ([PLACEHOLDER-14654]
           (list
            (new Integer (apply str (butlast PLACEHOLDER-14654)))
            (last PLACEHOLDER-14654))))
         (map
          (fn*
           ([PLACEHOLDER-14655]
            (str
             (if
              (clojure.lang.Util/equiv
               (clojure.lang.RT/count PLACEHOLDER-14655)
               1)
              (str 1 PLACEHOLDER-14655)
              PLACEHOLDER-14655))))
          (re-seq
           (re-pattern "[0-9]+[a-zA-Z\\s]|[a-zA-Z\\s]")
           PLACEHOLDER-14652)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14119
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14119))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14120]
      (str/replace
       PLACEHOLDER-14120
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-14121]
         (str
          (clojure.lang.RT/count (PLACEHOLDER-14121 0))
          (PLACEHOLDER-14121 1))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14122]
      (str/replace
       PLACEHOLDER-14122
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-14123]
         (str/join
          (repeat
           (java.lang.Integer/parseInt (PLACEHOLDER-14123 1))
           (PLACEHOLDER-14123 2))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9918
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9918))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9919]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-9920]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-9920)
            1)
           (list
            (clojure.lang.RT/count PLACEHOLDER-9920)
            (first PLACEHOLDER-9920))
           PLACEHOLDER-9920)))
        (partition-by identity PLACEHOLDER-9919))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9921]
      (str/replace
       PLACEHOLDER-9921
       (re-pattern "(\\d+)(\\w|\\s)")
       (fn*
        ([PLACEHOLDER-9922]
         (apply
          str
          (repeat
           (java.lang.Integer/parseInt
            (clojure.lang.RT/nth PLACEHOLDER-9922 1))
           (clojure.lang.RT/nth PLACEHOLDER-9922 2))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14707
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14707))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/use '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14708]
      (let*
       [PLACEHOLDER-14715
        (reduce
         (fn*
          ([PLACEHOLDER-14709 PLACEHOLDER-14710]
           (let*
            [PLACEHOLDER-14711
             (last PLACEHOLDER-14709)
             PLACEHOLDER-14712
             (clojure.lang.RT/nth PLACEHOLDER-14711 0 nil)]
            (if
             (let*
              [PLACEHOLDER-14713
               (clojure.lang.Util/identical PLACEHOLDER-14712 nil)]
              (if
               PLACEHOLDER-14713
               PLACEHOLDER-14713
               (not= PLACEHOLDER-14710 PLACEHOLDER-14712)))
             (conj PLACEHOLDER-14709 [PLACEHOLDER-14710 1])
             (update
              PLACEHOLDER-14709
              (clojure.lang.Numbers/dec
               (clojure.lang.RT/count PLACEHOLDER-14709))
              (fn*
               ([PLACEHOLDER-14714]
                (update PLACEHOLDER-14714 1 inc))))))))
         []
         PLACEHOLDER-14708)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-14716]
           (str
            (if
             (clojure.lang.Util/equiv (second PLACEHOLDER-14716) 1)
             ""
             (second PLACEHOLDER-14716))
            (first PLACEHOLDER-14716))))
         PLACEHOLDER-14715))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14717]
      (str/replace
       PLACEHOLDER-14717
       (re-pattern "(\\d+)(.)")
       (fn*
        ([PLACEHOLDER-14718]
         (let*
          [PLACEHOLDER-14719
           PLACEHOLDER-14718
           PLACEHOLDER-14720
           (clojure.lang.RT/nth PLACEHOLDER-14719 0 nil)
           PLACEHOLDER-14721
           (clojure.lang.RT/nth PLACEHOLDER-14719 1 nil)
           PLACEHOLDER-14722
           (clojure.lang.RT/nth PLACEHOLDER-14719 2 nil)
           PLACEHOLDER-14723
           (java.lang.Integer/parseInt PLACEHOLDER-14721)]
          (apply
           str
           (take PLACEHOLDER-14723 (repeat PLACEHOLDER-14722)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12209
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12209))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as cstr]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12210]
      (cstr/replace
       PLACEHOLDER-12210
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-12211]
         (let*
          [PLACEHOLDER-12212
           PLACEHOLDER-12211
           PLACEHOLDER-12213
           (clojure.lang.RT/nth PLACEHOLDER-12212 0 nil)
           PLACEHOLDER-12214
           (clojure.lang.RT/nth PLACEHOLDER-12212 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-12213)
           PLACEHOLDER-12214))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12215]
      (cstr/replace
       PLACEHOLDER-12215
       (re-pattern "(\\d+)(.)")
       (fn*
        ([PLACEHOLDER-12216]
         (let*
          [PLACEHOLDER-12217
           PLACEHOLDER-12216
           PLACEHOLDER-12218
           (clojure.lang.RT/nth PLACEHOLDER-12217 0 nil)
           PLACEHOLDER-12219
           (clojure.lang.RT/nth PLACEHOLDER-12217 1 nil)
           PLACEHOLDER-12220
           (clojure.lang.RT/nth PLACEHOLDER-12217 2 nil)]
          (apply
           str
           (take
            (new Integer PLACEHOLDER-12219)
            (repeat PLACEHOLDER-12220)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11801
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11801))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11802]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11803]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-11803))
           (format "%c" (first PLACEHOLDER-11803))
           (format
            "%d%c"
            (clojure.lang.RT/count PLACEHOLDER-11803)
            (first PLACEHOLDER-11803)))))
        (partition-by identity PLACEHOLDER-11802))))))
   (def
    numeric?
    (fn*
     ([PLACEHOLDER-11804]
      (let*
       [PLACEHOLDER-11805 (seq PLACEHOLDER-11804)]
       (if
        PLACEHOLDER-11805
        (let*
         [PLACEHOLDER-11806 PLACEHOLDER-11805]
         (empty?
          (drop-while
           (fn*
            ([PLACEHOLDER-11807]
             (java.lang.Character/isDigit PLACEHOLDER-11807)))
           PLACEHOLDER-11806))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11808]
      (apply
       str
       (let*
        [PLACEHOLDER-11811
         (map
          (fn* ([PLACEHOLDER-11809] (apply str PLACEHOLDER-11809)))
          (partition-by
           (fn*
            ([PLACEHOLDER-11810]
             (if
              (java.lang.Character/isLetter PLACEHOLDER-11810)
              PLACEHOLDER-11810
              (if
               (java.lang.Character/isSpaceChar PLACEHOLDER-11810)
               PLACEHOLDER-11810
               (if :else :number)))))
           PLACEHOLDER-11808))]
        (letfn*
         [PLACEHOLDER-11812
          (fn*
           PLACEHOLDER-11813
           ([PLACEHOLDER-11814]
            (if
             (empty? PLACEHOLDER-11814)
             ""
             (if
              (numeric? (first PLACEHOLDER-11814))
              (new
               clojure.lang.LazySeq
               (fn*
                ([]
                 (cons
                  (apply
                   str
                   (repeat
                    (read-string (first PLACEHOLDER-11814))
                    (second PLACEHOLDER-11814)))
                  (PLACEHOLDER-11813 (drop 2 PLACEHOLDER-11814))))))
              (new
               clojure.lang.LazySeq
               (fn*
                ([]
                 (cons
                  (first PLACEHOLDER-11814)
                  (PLACEHOLDER-11813 (rest PLACEHOLDER-11814))))))))))]
         (PLACEHOLDER-11812 PLACEHOLDER-11811))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11385
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11385))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    string-splitter
    (fn*
     ([PLACEHOLDER-11386]
      (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-11386)))))
   (def
    simple-conv
    (fn*
     ([PLACEHOLDER-11387]
      (let*
       [PLACEHOLDER-11388
        (clojure.lang.RT/count PLACEHOLDER-11387)
        PLACEHOLDER-11389
        (clojure.lang.RT/nth PLACEHOLDER-11387 0)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11388 1)
        (str PLACEHOLDER-11389)
        (str
         (clojure.lang.RT/count PLACEHOLDER-11387)
         PLACEHOLDER-11389))))))
   (def
    simple-dec
    (fn*
     ([PLACEHOLDER-11390]
      (re-seq
       (re-pattern "[0-9]+[\\s]|[0-9]+[a-zA-Z]|[a-zA-Z]|[\\s]+")
       PLACEHOLDER-11390))))
   (def
    expander
    (fn*
     ([PLACEHOLDER-11391]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-11391)
        1)
       (let*
        [PLACEHOLDER-11392
         (java.lang.Integer/parseInt
          (subs
           PLACEHOLDER-11391
           0
           (clojure.lang.Numbers/dec
            (clojure.lang.RT/count PLACEHOLDER-11391))))
         PLACEHOLDER-11393
         (str
          (clojure.lang.RT/nth
           PLACEHOLDER-11391
           (clojure.lang.Numbers/dec
            (clojure.lang.RT/count PLACEHOLDER-11391))))]
        (reduce str (repeat PLACEHOLDER-11392 PLACEHOLDER-11393)))
       (if :else PLACEHOLDER-11391)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11394]
      (reduce
       str
       (map simple-conv (string-splitter PLACEHOLDER-11394))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11395]
      (reduce str (map expander (simple-dec PLACEHOLDER-11395)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9329
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9329))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    parts->pairs
    (fn*
     ([PLACEHOLDER-9330]
      (let*
       [PLACEHOLDER-9331
        (first PLACEHOLDER-9330)
        PLACEHOLDER-9332
        (clojure.lang.RT/count PLACEHOLDER-9330)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-9332 1)
        PLACEHOLDER-9331
        (str PLACEHOLDER-9332 PLACEHOLDER-9331))))))
   (def
    pairs->parts
    (fn*
     ([PLACEHOLDER-9333]
      (let*
       [PLACEHOLDER-9334
        (last PLACEHOLDER-9333)
        PLACEHOLDER-9335
        (re-find (re-pattern "[0-9]*") PLACEHOLDER-9333)
        PLACEHOLDER-9336
        (if
         (clojure.lang.Util/equiv "" PLACEHOLDER-9335)
         1
         (java.lang.Integer/parseInt PLACEHOLDER-9335))]
       (apply str (repeat PLACEHOLDER-9336 PLACEHOLDER-9334))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9337]
      (apply
       str
       (map parts->pairs (partition-by identity PLACEHOLDER-9337))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9338]
      (apply
       str
       (map
        pairs->parts
        (re-seq (re-pattern "\\d*[A-z ]") PLACEHOLDER-9338)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12423
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12423))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    buildStr
    (fn*
     ([PLACEHOLDER-12424]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-12424))
       (first PLACEHOLDER-12424)
       (if
        :else
        (str
         (clojure.lang.RT/count PLACEHOLDER-12424)
         (first PLACEHOLDER-12424)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12425]
      (do
       (def parts (partition-by identity PLACEHOLDER-12425))
       (apply str (map buildStr parts))))))
   (def
    multLetter
    (fn*
     ([PLACEHOLDER-12426]
      (do
       (def
        number
        (subs
         PLACEHOLDER-12426
         0
         (clojure.lang.Numbers/minus
          (clojure.lang.RT/count PLACEHOLDER-12426)
          1)))
       (if
        (clojure.lang.Util/equiv "" number)
        PLACEHOLDER-12426
        (if
         :else
         (do
          (def
           times
           (java.lang.Integer/parseInt
            (subs
             PLACEHOLDER-12426
             0
             (clojure.lang.Numbers/minus
              (clojure.lang.RT/count PLACEHOLDER-12426)
              1))))
          (apply str (repeat times (last PLACEHOLDER-12426))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12427]
      (do
       (def
        ss
        (re-seq (re-pattern "[0-9]*[a-z-A-Z ]") PLACEHOLDER-12427))
       (apply str (map multLetter ss)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13624
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13624))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13625]
      (letfn*
       [PLACEHOLDER-13626
        (fn*
         PLACEHOLDER-13628
         ([PLACEHOLDER-13629]
          (map
           (fn* ([PLACEHOLDER-13630] (apply str PLACEHOLDER-13630)))
           (partition-by identity PLACEHOLDER-13629))))
        PLACEHOLDER-13627
        (fn*
         PLACEHOLDER-13631
         ([PLACEHOLDER-13632]
          (let*
           [PLACEHOLDER-13633
            (clojure.lang.RT/count PLACEHOLDER-13632)
            PLACEHOLDER-13634
            (subs PLACEHOLDER-13632 0 1)]
           (let*
            [PLACEHOLDER-13635 PLACEHOLDER-13633]
            (case*
             PLACEHOLDER-13635
             0
             0
             (str PLACEHOLDER-13633 PLACEHOLDER-13634)
             {1 [1 PLACEHOLDER-13634]}
             :compact
             :int
             nil)))))]
       (str/join
        (map
         PLACEHOLDER-13627
         (PLACEHOLDER-13626 PLACEHOLDER-13625)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13636]
      (letfn*
       [PLACEHOLDER-13637
        (fn*
         PLACEHOLDER-13638
         ([PLACEHOLDER-13639]
          (let*
           [PLACEHOLDER-13640
            PLACEHOLDER-13639
            PLACEHOLDER-13641
            (clojure.lang.RT/nth PLACEHOLDER-13640 0 nil)
            PLACEHOLDER-13642
            (clojure.lang.RT/nth PLACEHOLDER-13640 1 nil)
            PLACEHOLDER-13643
            (clojure.lang.RT/nth PLACEHOLDER-13640 2 nil)]
           (apply
            str
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-13642)
             PLACEHOLDER-13643)))))]
       (str/replace
        PLACEHOLDER-13636
        (re-pattern "(\\d+)(.)")
        (fn*
         ([PLACEHOLDER-13644]
          (PLACEHOLDER-13637 PLACEHOLDER-13644)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12576
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12576))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    appendToCipher
    (fn*
     ([PLACEHOLDER-12577 PLACEHOLDER-12578 PLACEHOLDER-12579]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-12578 1)
       (str PLACEHOLDER-12577 PLACEHOLDER-12579)
       (str PLACEHOLDER-12577 PLACEHOLDER-12578 PLACEHOLDER-12579)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12580]
      (do
       (def plainTextListInit (seq PLACEHOLDER-12580))
       (loop*
        [PLACEHOLDER-12581
         nil
         PLACEHOLDER-12582
         1
         PLACEHOLDER-12583
         plainTextListInit
         PLACEHOLDER-12584
         ""]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-12583 nil)
         (appendToCipher
          PLACEHOLDER-12584
          PLACEHOLDER-12582
          PLACEHOLDER-12581)
         (recur
          (first PLACEHOLDER-12583)
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-12581
            (first PLACEHOLDER-12583))
           (clojure.lang.Numbers/inc PLACEHOLDER-12582)
           1)
          (next PLACEHOLDER-12583)
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-12581
            (first PLACEHOLDER-12583))
           PLACEHOLDER-12584
           (appendToCipher
            PLACEHOLDER-12584
            PLACEHOLDER-12582
            PLACEHOLDER-12581)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12585]
      (loop*
       [PLACEHOLDER-12586 PLACEHOLDER-12585 PLACEHOLDER-12587 ""]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12586 "")
        PLACEHOLDER-12587
        (let*
         [PLACEHOLDER-12588
          (re-find (re-pattern "\\d*") PLACEHOLDER-12586)
          PLACEHOLDER-12589
          (if
           (clojure.lang.Util/equiv "" PLACEHOLDER-12588)
           1
           (java.lang.Integer/parseInt PLACEHOLDER-12588))
          PLACEHOLDER-12590
          (if
           (clojure.lang.Util/equiv "" PLACEHOLDER-12588)
           PLACEHOLDER-12586
           (subs
            PLACEHOLDER-12586
            (clojure.lang.RT/count PLACEHOLDER-12588)))
          PLACEHOLDER-12591
          (subs PLACEHOLDER-12590 0 1)
          PLACEHOLDER-12592
          (subs PLACEHOLDER-12590 1)
          PLACEHOLDER-12593
          (str
           PLACEHOLDER-12587
           (reduce str (repeat PLACEHOLDER-12589 PLACEHOLDER-12591)))]
         (recur PLACEHOLDER-12592 PLACEHOLDER-12593))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8767
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8767))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8768]
      (let*
       [PLACEHOLDER-8775
        (reduce
         (fn*
          ([PLACEHOLDER-8769 PLACEHOLDER-8770]
           (let*
            [PLACEHOLDER-8771
             PLACEHOLDER-8769
             PLACEHOLDER-8772
             (clojure.lang.RT/nth PLACEHOLDER-8771 0 nil)
             PLACEHOLDER-8773
             (clojure.lang.RT/nth PLACEHOLDER-8771 1 nil)
             PLACEHOLDER-8774
             (clojure.lang.RT/nth PLACEHOLDER-8771 2 nil)]
            (if
             (clojure.lang.Util/identical PLACEHOLDER-8774 nil)
             [PLACEHOLDER-8772 1 PLACEHOLDER-8770]
             (if
              (clojure.lang.Util/equiv
               PLACEHOLDER-8774
               PLACEHOLDER-8770)
              [PLACEHOLDER-8772
               (clojure.lang.Numbers/inc PLACEHOLDER-8773)
               PLACEHOLDER-8770]
              (if
               (clojure.lang.Util/equiv 1 PLACEHOLDER-8773)
               [(str PLACEHOLDER-8772 PLACEHOLDER-8774)
                1
                PLACEHOLDER-8770]
               (if
                :else
                [(str
                  PLACEHOLDER-8772
                  PLACEHOLDER-8773
                  PLACEHOLDER-8774)
                 1
                 PLACEHOLDER-8770])))))))
         ["" 0 nil]
         PLACEHOLDER-8768)
        PLACEHOLDER-8776
        (clojure.lang.RT/nth PLACEHOLDER-8775 0 nil)
        PLACEHOLDER-8777
        (clojure.lang.RT/nth PLACEHOLDER-8775 1 nil)
        PLACEHOLDER-8778
        (clojure.lang.RT/nth PLACEHOLDER-8775 2 nil)]
       (let*
        [PLACEHOLDER-8779 PLACEHOLDER-8777]
        (case*
         PLACEHOLDER-8779
         0
         0
         (str PLACEHOLDER-8776 PLACEHOLDER-8777 PLACEHOLDER-8778)
         {0 [0 ""], 1 [1 (str PLACEHOLDER-8776 PLACEHOLDER-8778)]}
         :compact
         :int
         nil))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8780]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8781]
          (let*
           [PLACEHOLDER-8782
            PLACEHOLDER-8781
            PLACEHOLDER-8783
            (clojure.lang.RT/nth PLACEHOLDER-8782 0 nil)
            PLACEHOLDER-8784
            (clojure.lang.RT/nth PLACEHOLDER-8782 1 nil)
            PLACEHOLDER-8785
            (clojure.lang.RT/nth PLACEHOLDER-8782 2 nil)]
           (if
            (clojure.lang.Util/equiv "" PLACEHOLDER-8784)
            PLACEHOLDER-8785
            (apply
             str
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-8784)
              PLACEHOLDER-8785))))))
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z\\space])")
         PLACEHOLDER-8780)))))))
  "Exception inresources/run-length-encoding/311/src/run_length_encoding.cljCould not resolve var: decode-element"
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12376
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12376))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as cs]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12377]
      (cs/replace
       PLACEHOLDER-12377
       (re-pattern "(\\D)\\1+")
       (fn*
        ([PLACEHOLDER-12378]
         (let*
          [PLACEHOLDER-12379
           PLACEHOLDER-12378
           PLACEHOLDER-12380
           (clojure.lang.RT/nth PLACEHOLDER-12379 0 nil)
           PLACEHOLDER-12381
           (clojure.lang.RT/nth PLACEHOLDER-12379 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-12380)
           PLACEHOLDER-12381))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12382]
      (cs/replace
       PLACEHOLDER-12382
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-12383]
         (let*
          [PLACEHOLDER-12384
           PLACEHOLDER-12383
           PLACEHOLDER-12385
           (clojure.lang.RT/nth PLACEHOLDER-12384 0 nil)
           PLACEHOLDER-12386
           (clojure.lang.RT/nth PLACEHOLDER-12384 1 nil)
           PLACEHOLDER-12387
           (clojure.lang.RT/nth PLACEHOLDER-12384 2 nil)]
          (apply
           str
           (repeat
            (read-string PLACEHOLDER-12386)
            PLACEHOLDER-12387))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13850
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13850))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-same-char-list
    (fn*
     ([PLACEHOLDER-13851]
      (let*
       [PLACEHOLDER-13852
        (clojure.lang.RT/count PLACEHOLDER-13851)
        PLACEHOLDER-13853
        (first PLACEHOLDER-13851)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-13852 1)
        (str PLACEHOLDER-13852 PLACEHOLDER-13853)
        (str PLACEHOLDER-13853))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13854]
      (apply
       str
       (map
        encode-same-char-list
        (partition-by identity PLACEHOLDER-13854))))))
   (def
    str->count
    (fn*
     ([PLACEHOLDER-13855]
      (if
       (empty? PLACEHOLDER-13855)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-13855)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13856]
      (let*
       [PLACEHOLDER-13857
        (re-seq (re-pattern "(\\d*)([\\w ])") PLACEHOLDER-13856)
        PLACEHOLDER-13863
        (map
         (fn*
          ([PLACEHOLDER-13858]
           (let*
            [PLACEHOLDER-13859
             PLACEHOLDER-13858
             PLACEHOLDER-13860
             (clojure.lang.RT/nth PLACEHOLDER-13859 0 nil)
             PLACEHOLDER-13861
             (clojure.lang.RT/nth PLACEHOLDER-13859 1 nil)
             PLACEHOLDER-13862
             (clojure.lang.RT/nth PLACEHOLDER-13859 2 nil)]
            [(str->count PLACEHOLDER-13861) PLACEHOLDER-13862])))
         PLACEHOLDER-13857)]
       (apply
        str
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-13864]
            (let*
             [PLACEHOLDER-13865
              PLACEHOLDER-13864
              PLACEHOLDER-13866
              (clojure.lang.RT/nth PLACEHOLDER-13865 0 nil)
              PLACEHOLDER-13867
              (clojure.lang.RT/nth PLACEHOLDER-13865 1 nil)]
             (repeat PLACEHOLDER-13866 PLACEHOLDER-13867))))
          PLACEHOLDER-13863))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10741
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10741))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-match
    (fn*
     ([PLACEHOLDER-10742]
      (let*
       [PLACEHOLDER-10743
        PLACEHOLDER-10742
        PLACEHOLDER-10744
        (clojure.lang.RT/nth PLACEHOLDER-10743 0 nil)
        PLACEHOLDER-10745
        (clojure.lang.RT/nth PLACEHOLDER-10743 1 nil)
        PLACEHOLDER-10746
        (clojure.lang.RT/nth PLACEHOLDER-10743 2 nil)]
       (str
        (if
         (seq PLACEHOLDER-10746)
         (clojure.lang.RT/count PLACEHOLDER-10744))
        PLACEHOLDER-10745)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10747]
      (let*
       [PLACEHOLDER-10748
        (re-seq (re-pattern "([A-z ])(\\1*)") PLACEHOLDER-10747)]
       (join (map encode-match PLACEHOLDER-10748))))))
   (def
    safe-atoi
    (fn*
     ([PLACEHOLDER-10749]
      (try
       (java.lang.Integer/parseInt PLACEHOLDER-10749)
       (catch NumberFormatException PLACEHOLDER-10750 1)))))
   (def
    decode-match
    (fn*
     ([PLACEHOLDER-10751]
      (let*
       [PLACEHOLDER-10752
        PLACEHOLDER-10751
        PLACEHOLDER-10753
        (clojure.lang.RT/nth PLACEHOLDER-10752 0 nil)
        PLACEHOLDER-10754
        (clojure.lang.RT/nth PLACEHOLDER-10752 1 nil)
        PLACEHOLDER-10755
        (clojure.lang.RT/nth PLACEHOLDER-10752 2 nil)]
       (join
        (repeat (safe-atoi PLACEHOLDER-10754) PLACEHOLDER-10755))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10756]
      (let*
       [PLACEHOLDER-10757
        (re-seq (re-pattern "(\\d*)?([A-z ])") PLACEHOLDER-10756)]
       (join (map decode-match PLACEHOLDER-10757)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8825
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8825))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8826]
      (apply
       str
       (loop*
        [PLACEHOLDER-8827 PLACEHOLDER-8826 PLACEHOLDER-8828 []]
        (let*
         [PLACEHOLDER-8829
          (first PLACEHOLDER-8827)
          PLACEHOLDER-8831
          (take-while
           (fn*
            ([PLACEHOLDER-8830]
             (clojure.lang.Util/equiv
              PLACEHOLDER-8829
              PLACEHOLDER-8830)))
           PLACEHOLDER-8827)
          PLACEHOLDER-8833
          (drop-while
           (fn*
            ([PLACEHOLDER-8832]
             (clojure.lang.Util/equiv
              PLACEHOLDER-8829
              PLACEHOLDER-8832)))
           PLACEHOLDER-8827)]
         (if
          (some? PLACEHOLDER-8829)
          (recur
           PLACEHOLDER-8833
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-8831))
            (conj PLACEHOLDER-8828 PLACEHOLDER-8829)
            (conj
             PLACEHOLDER-8828
             (str
              (clojure.lang.RT/count PLACEHOLDER-8831)
              PLACEHOLDER-8829))))
          PLACEHOLDER-8828)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8834]
      (apply
       str
       (flatten
        (loop*
         [PLACEHOLDER-8835 PLACEHOLDER-8834 PLACEHOLDER-8836 []]
         (let*
          [PLACEHOLDER-8838
           (take-while
            (fn*
             ([PLACEHOLDER-8837]
              (java.lang.Character/isDigit PLACEHOLDER-8837)))
            PLACEHOLDER-8835)
           PLACEHOLDER-8839
           (not (seq PLACEHOLDER-8838))
           PLACEHOLDER-8840
           (if
            PLACEHOLDER-8839
            (rest PLACEHOLDER-8835)
            (drop
             (clojure.lang.Numbers/inc
              (clojure.lang.RT/count PLACEHOLDER-8838))
             PLACEHOLDER-8835))]
          (if
           (seq PLACEHOLDER-8835)
           (recur
            PLACEHOLDER-8840
            (conj
             PLACEHOLDER-8836
             (if
              PLACEHOLDER-8839
              (first PLACEHOLDER-8835)
              (repeat
               (java.lang.Integer/parseInt
                (apply str PLACEHOLDER-8838))
               (clojure.lang.RT/nth
                PLACEHOLDER-8835
                (clojure.lang.RT/count PLACEHOLDER-8838))))))
           PLACEHOLDER-8836)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8895
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8895))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    get-count
    (fn*
     ([PLACEHOLDER-8896]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-8896))
       ""
       (str (clojure.lang.RT/count PLACEHOLDER-8896))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8897]
      (clojure.string/join
       ""
       (map
        (fn*
         ([PLACEHOLDER-8898]
          (str
           (get-count (first PLACEHOLDER-8898))
           (clojure.lang.RT/get (first PLACEHOLDER-8898) 0))))
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8897))))))
   (def
    get-new-cipher-text
    (fn*
     ([PLACEHOLDER-8899]
      (let*
       [PLACEHOLDER-8900
        (re-matches (re-pattern "^([0-9]+)(.).*") PLACEHOLDER-8899)
        PLACEHOLDER-8901
        (clojure.lang.RT/nth PLACEHOLDER-8900 0 nil)
        PLACEHOLDER-8902
        (clojure.lang.RT/nth PLACEHOLDER-8900 1 nil)
        PLACEHOLDER-8903
        (clojure.lang.RT/nth PLACEHOLDER-8900 2 nil)]
       (if
        (not (clojure.lang.Util/identical PLACEHOLDER-8901 nil))
        (subs
         PLACEHOLDER-8899
         (clojure.lang.Numbers/add
          1
          (clojure.lang.RT/count PLACEHOLDER-8902)))
        (subs PLACEHOLDER-8899 1))))))
   (def
    get-new-so-far
    (fn*
     ([PLACEHOLDER-8904 PLACEHOLDER-8905]
      (let*
       [PLACEHOLDER-8906
        (re-matches (re-pattern "^([0-9]+)(.).*") PLACEHOLDER-8904)
        PLACEHOLDER-8907
        (clojure.lang.RT/nth PLACEHOLDER-8906 0 nil)
        PLACEHOLDER-8908
        (clojure.lang.RT/nth PLACEHOLDER-8906 1 nil)
        PLACEHOLDER-8909
        (clojure.lang.RT/nth PLACEHOLDER-8906 2 nil)]
       (str
        PLACEHOLDER-8905
        (if
         (not (clojure.lang.Util/identical PLACEHOLDER-8907 nil))
         (clojure.string/join
          ""
          (repeat (new Integer PLACEHOLDER-8908) PLACEHOLDER-8909))
         (str (first PLACEHOLDER-8904))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8910] (run-length-decode PLACEHOLDER-8910 ""))
     ([PLACEHOLDER-8911 PLACEHOLDER-8912]
      (if
       (empty? PLACEHOLDER-8911)
       PLACEHOLDER-8912
       (recur
        (get-new-cipher-text PLACEHOLDER-8911)
        (get-new-so-far PLACEHOLDER-8911 PLACEHOLDER-8912)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13955
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13955))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13956]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13957]
          (let*
           [PLACEHOLDER-13958
            PLACEHOLDER-13957
            PLACEHOLDER-13959
            (clojure.lang.RT/nth PLACEHOLDER-13958 0 nil)
            PLACEHOLDER-13960
            (clojure.lang.RT/nth PLACEHOLDER-13958 1 nil)]
           (str PLACEHOLDER-13960 PLACEHOLDER-13959))))
        (frequencies (seq PLACEHOLDER-13956)))))))
   (def run-length-decode (fn* ([PLACEHOLDER-13961] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11087
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11087))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11088]
      (loop*
       [PLACEHOLDER-11089
        PLACEHOLDER-11088
        PLACEHOLDER-11090
        ""
        PLACEHOLDER-11091
        0
        PLACEHOLDER-11092
        (first PLACEHOLDER-11088)]
       (if
        (empty? PLACEHOLDER-11089)
        (str
         PLACEHOLDER-11090
         (if
          (clojure.lang.Numbers/lt PLACEHOLDER-11091 2)
          ""
          PLACEHOLDER-11091)
         PLACEHOLDER-11092)
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-11089)
          PLACEHOLDER-11092)
         (recur
          (rest PLACEHOLDER-11089)
          PLACEHOLDER-11090
          (clojure.lang.Numbers/add PLACEHOLDER-11091 1)
          (first PLACEHOLDER-11089))
         (recur
          (rest PLACEHOLDER-11089)
          (str
           PLACEHOLDER-11090
           (if
            (clojure.lang.Numbers/lt PLACEHOLDER-11091 2)
            ""
            PLACEHOLDER-11091)
           PLACEHOLDER-11092)
          1
          (first PLACEHOLDER-11089))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11093]
      (loop*
       [PLACEHOLDER-11094
        0
        PLACEHOLDER-11095
        ""
        PLACEHOLDER-11096
        PLACEHOLDER-11093]
       (if
        (empty? PLACEHOLDER-11096)
        PLACEHOLDER-11095
        (if
         (java.lang.Character/isDigit (first PLACEHOLDER-11096))
         (recur
          (clojure.lang.Numbers/add
           (clojure.lang.Numbers/multiply PLACEHOLDER-11094 10)
           (java.lang.Integer/parseInt
            (str (first PLACEHOLDER-11096))))
          PLACEHOLDER-11095
          (rest PLACEHOLDER-11096))
         (recur
          0
          (str
           PLACEHOLDER-11095
           (apply
            str
            (repeat
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-11094 0)
              1
              PLACEHOLDER-11094)
             (first PLACEHOLDER-11096))))
          (rest PLACEHOLDER-11096)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12221
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12221))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    letter-reducer
    (fn*
     ([PLACEHOLDER-12222 PLACEHOLDER-12223]
      (if
       (let*
        [PLACEHOLDER-12224 (last PLACEHOLDER-12222)]
        (if
         PLACEHOLDER-12224
         (clojure.string/ends-with?
          (last PLACEHOLDER-12222)
          PLACEHOLDER-12223)
         PLACEHOLDER-12224))
       (update
        PLACEHOLDER-12222
        (clojure.lang.Numbers/dec
         (clojure.lang.RT/count PLACEHOLDER-12222))
        str
        PLACEHOLDER-12223)
       (conj PLACEHOLDER-12222 PLACEHOLDER-12223)))))
   (def
    chunks
    (fn*
     ([PLACEHOLDER-12225]
      (reduce letter-reducer [] PLACEHOLDER-12225))))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-12226]
      (if
       (clojure.lang.Numbers/gt
        2
        (clojure.lang.RT/count PLACEHOLDER-12226))
       PLACEHOLDER-12226
       (str
        (clojure.lang.RT/count PLACEHOLDER-12226)
        (last PLACEHOLDER-12226))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12227]
      (let*
       [PLACEHOLDER-12228
        (clojure.string/split PLACEHOLDER-12227 (re-pattern ""))]
       (apply str (map encode-chunk (chunks PLACEHOLDER-12228)))))))
   (def
    is-digit
    (fn*
     ([PLACEHOLDER-12229]
      (let*
       [PLACEHOLDER-12230 PLACEHOLDER-12229]
       (if
        PLACEHOLDER-12230
        (java.lang.Character/isDigit PLACEHOLDER-12229)
        PLACEHOLDER-12230)))))
   (def
    symbol-reducer
    (fn*
     ([PLACEHOLDER-12231 PLACEHOLDER-12232]
      (if
       (is-digit (last (last PLACEHOLDER-12231)))
       (update
        PLACEHOLDER-12231
        (clojure.lang.Numbers/dec
         (clojure.lang.RT/count PLACEHOLDER-12231))
        str
        PLACEHOLDER-12232)
       (conj PLACEHOLDER-12231 PLACEHOLDER-12232)))))
   (def
    cipher-chunks
    (fn*
     ([PLACEHOLDER-12233]
      (reduce symbol-reducer [] PLACEHOLDER-12233))))
   (def
    to-number
    (fn*
     ([PLACEHOLDER-12234]
      (if
       (empty? PLACEHOLDER-12234)
       1
       (java.lang.Integer/parseInt (apply str PLACEHOLDER-12234))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-12235]
      (let*
       [PLACEHOLDER-12236
        (clojure.string/split PLACEHOLDER-12235 (re-pattern ""))
        PLACEHOLDER-12237
        (to-number (pop PLACEHOLDER-12236))
        PLACEHOLDER-12238
        (str (last PLACEHOLDER-12236))]
       (apply str (repeat PLACEHOLDER-12237 PLACEHOLDER-12238))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12239]
      (let*
       [PLACEHOLDER-12240
        (clojure.string/split PLACEHOLDER-12239 (re-pattern ""))]
       (apply
        str
        (map decode-chunk (cipher-chunks PLACEHOLDER-12240))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13555
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13555))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    pairs->code
    (fn*
     ([PLACEHOLDER-13556 PLACEHOLDER-13557]
      (let*
       [PLACEHOLDER-13558
        (clojure.lang.RT/count PLACEHOLDER-13556)
        PLACEHOLDER-13559
        (if (not= 1 PLACEHOLDER-13558) PLACEHOLDER-13558)]
       (str PLACEHOLDER-13559 PLACEHOLDER-13557)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13560]
      (apply
       str
       (map
        (partial apply pairs->code)
        (re-seq (re-pattern "(\\D)\\1*") PLACEHOLDER-13560))))))
   (def
    code->str
    (fn*
     ([PLACEHOLDER-13561] PLACEHOLDER-13561)
     ([PLACEHOLDER-13562 PLACEHOLDER-13563]
      (apply
       str
       (repeat (read-string PLACEHOLDER-13562) PLACEHOLDER-13563)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13564]
      (apply
       str
       (map
        (partial apply code->str)
        (map
         (partial re-seq (re-pattern "\\d+|\\D"))
         (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-13564))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11353
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11353))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11354]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11355]
          (str
           (first PLACEHOLDER-11355)
           (clojure.lang.RT/count PLACEHOLDER-11355))))
        (partition-by identity PLACEHOLDER-11354))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11356]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11357]
          (repeat
           (clojure.lang.Numbers/minus
            (clojure.lang.RT/intCast (first (rest PLACEHOLDER-11357)))
            (clojure.lang.RT/intCast \0))
           (first PLACEHOLDER-11357))))
        (re-seq (re-pattern "\\w\\d") "a4b2w9")))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8641
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8641))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-8642] PLACEHOLDER-8642)))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8643]
      (reduce
       str
       (map
        (fn* ([PLACEHOLDER-8644] (reduce str PLACEHOLDER-8644)))
        (map
         (fn*
          ([PLACEHOLDER-8645]
           (repeat
            (java.lang.Integer/parseInt (str (first PLACEHOLDER-8645)))
            (last PLACEHOLDER-8645))))
         (map
          (fn*
           ([PLACEHOLDER-8646]
            (list
             (reduce str (butlast PLACEHOLDER-8646))
             (last PLACEHOLDER-8646))))
          (re-seq (re-pattern "[0-9]*.") PLACEHOLDER-8643)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14736
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14736))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join replace blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14737]
      (join
       (map
        (fn*
         ([PLACEHOLDER-14738]
          (str
           (if
            (not= 1 (clojure.lang.RT/count PLACEHOLDER-14738))
            (clojure.lang.RT/count PLACEHOLDER-14738))
           (first PLACEHOLDER-14738))))
        (partition-by identity PLACEHOLDER-14737))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14739]
      (letfn*
       [PLACEHOLDER-14740
        (fn*
         PLACEHOLDER-14741
         ([PLACEHOLDER-14742]
          (let*
           [PLACEHOLDER-14743
            PLACEHOLDER-14742
            PLACEHOLDER-14744
            (clojure.lang.RT/nth PLACEHOLDER-14743 0 nil)
            PLACEHOLDER-14745
            (clojure.lang.RT/nth PLACEHOLDER-14743 1 nil)
            PLACEHOLDER-14746
            (clojure.lang.RT/nth PLACEHOLDER-14743 2 nil)]
           (apply
            str
            (repeat
             (if
              (blank? PLACEHOLDER-14745)
              1
              (new Integer PLACEHOLDER-14745))
             PLACEHOLDER-14746)))))]
       (replace
        PLACEHOLDER-14739
        (re-pattern "(?i)(\\d*)([a-z]|\\s*)")
        (fn*
         ([PLACEHOLDER-14747]
          (PLACEHOLDER-14740 PLACEHOLDER-14747)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10522
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10522))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/use '[clojure.string :only [split join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10523]
      (loop*
       [PLACEHOLDER-10524
        PLACEHOLDER-10523
        PLACEHOLDER-10525
        ""
        PLACEHOLDER-10526
        1]
       (if
        (empty? PLACEHOLDER-10524)
        PLACEHOLDER-10525
        (let*
         [PLACEHOLDER-10527
          (first PLACEHOLDER-10524)
          PLACEHOLDER-10528
          (rest PLACEHOLDER-10524)]
         (if
          (clojure.lang.Util/equiv
           PLACEHOLDER-10527
           (first PLACEHOLDER-10528))
          (recur
           PLACEHOLDER-10528
           PLACEHOLDER-10525
           (clojure.lang.Numbers/inc PLACEHOLDER-10526))
          (recur
           PLACEHOLDER-10528
           (str
            PLACEHOLDER-10525
            (if
             (clojure.lang.Numbers/lt 1 PLACEHOLDER-10526)
             PLACEHOLDER-10526
             "")
            PLACEHOLDER-10527)
           1))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10529]
      (loop*
       [PLACEHOLDER-10530 PLACEHOLDER-10529 PLACEHOLDER-10531 ""]
       (if
        (empty? PLACEHOLDER-10530)
        PLACEHOLDER-10531
        (let*
         [PLACEHOLDER-10532
          (re-find (re-pattern "^\\d\\d?") (join PLACEHOLDER-10530))
          PLACEHOLDER-10533
          (first PLACEHOLDER-10530)
          PLACEHOLDER-10534
          (rest PLACEHOLDER-10530)]
         (if
          PLACEHOLDER-10532
          (recur
           (clojure.lang.RT/nth
            (iterate rest PLACEHOLDER-10530)
            (clojure.lang.Numbers/add
             1
             (clojure.lang.RT/count PLACEHOLDER-10532)))
           (str
            PLACEHOLDER-10531
            (join
             (repeat
              (new Integer PLACEHOLDER-10532)
              (if
               (clojure.lang.Numbers/lt
                1
                (clojure.lang.RT/count PLACEHOLDER-10532))
               (second PLACEHOLDER-10534)
               (first PLACEHOLDER-10534))))))
          (recur
           PLACEHOLDER-10534
           (str PLACEHOLDER-10531 PLACEHOLDER-10533))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12241
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12241))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12242]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12243]
          (let*
           [PLACEHOLDER-12244
            PLACEHOLDER-12243
            PLACEHOLDER-12245
            (clojure.lang.RT/nth PLACEHOLDER-12244 0 nil)
            PLACEHOLDER-12246
            (clojure.lang.RT/nth PLACEHOLDER-12244 1 nil)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-12245 1)
            (str PLACEHOLDER-12245 PLACEHOLDER-12246)
            PLACEHOLDER-12246))))
        (map
         (juxt count first)
         (partition-by identity PLACEHOLDER-12242)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12247]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-12248]
           (let*
            [PLACEHOLDER-12249
             PLACEHOLDER-12248
             PLACEHOLDER-12250
             (clojure.lang.RT/nth PLACEHOLDER-12249 0 nil)
             PLACEHOLDER-12251
             (clojure.lang.RT/nth PLACEHOLDER-12249 1 nil)
             PLACEHOLDER-12252
             (clojure.lang.RT/nth PLACEHOLDER-12249 2 nil)]
            (repeat
             (if
              (empty? PLACEHOLDER-12251)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-12251))
             PLACEHOLDER-12252))))
         (re-seq
          (re-pattern "(\\d*)([a-zA-Z\\s])")
          PLACEHOLDER-12247))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13948
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13948))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13949]
      (reduce
       (fn*
        ([PLACEHOLDER-13950
          PLACEHOLDER-13951
          PLACEHOLDER-13952
          PLACEHOLDER-13953]
         ((if
           (clojure.lang.Util/equiv
            PLACEHOLDER-13950
            PLACEHOLDER-13951)
           ([PLACEHOLDER-13950 last])))))
       (seq PLACEHOLDER-13949)))))
   (def run-length-decode (fn* ([PLACEHOLDER-13954] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14226
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14226))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :refer [join blank?]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-str
    (comp
     (partition-by identity)
     (mapcat (juxt count first))
     (remove #{1})))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14227]
      (join (into [] encode-str PLACEHOLDER-14227)))))
   (def
    get-num
    (fn*
     ([PLACEHOLDER-14228]
      (if
       (blank? PLACEHOLDER-14228)
       1
       (read-string PLACEHOLDER-14228)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14229]
      (join
       (mapcat
        (fn*
         ([PLACEHOLDER-14230]
          (let*
           [PLACEHOLDER-14231
            PLACEHOLDER-14230
            PLACEHOLDER-14232
            (clojure.lang.RT/nth PLACEHOLDER-14231 0 nil)
            PLACEHOLDER-14233
            (clojure.lang.RT/nth PLACEHOLDER-14231 1 nil)
            PLACEHOLDER-14234
            (clojure.lang.RT/nth PLACEHOLDER-14231 2 nil)]
           (repeat (get-num PLACEHOLDER-14233) PLACEHOLDER-14234))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-14229)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14437
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14437))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    transform-letter-seq
    (fn*
     ([PLACEHOLDER-14438]
      (let*
       [PLACEHOLDER-14439 (clojure.lang.RT/count PLACEHOLDER-14438)]
       (let*
        [PLACEHOLDER-14440 PLACEHOLDER-14439]
        (case*
         PLACEHOLDER-14440
         0
         0
         (str
          (clojure.lang.RT/count PLACEHOLDER-14438)
          (first PLACEHOLDER-14438))
         {0 [0 ""], 1 [1 PLACEHOLDER-14438]}
         :compact
         :int
         nil))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14441]
      (loop*
       [PLACEHOLDER-14442
        PLACEHOLDER-14441
        PLACEHOLDER-14443
        PLACEHOLDER-14442]
       (let*
        [PLACEHOLDER-14444
         (first (re-find (re-pattern "(.)\\1*") PLACEHOLDER-14442))]
        (if
         (empty? PLACEHOLDER-14444)
         PLACEHOLDER-14443
         (recur
          (clojure.string/replace-first
           PLACEHOLDER-14442
           PLACEHOLDER-14444
           "")
          (clojure.string/replace-first
           PLACEHOLDER-14443
           PLACEHOLDER-14444
           (transform-letter-seq PLACEHOLDER-14444)))))))))
   (def
    reverse-transform-seq
    (fn*
     ([PLACEHOLDER-14445]
      (let*
       [PLACEHOLDER-14446
        (second (re-find (re-pattern "(\\d*)(.)") PLACEHOLDER-14445))
        PLACEHOLDER-14447
        (last (re-find (re-pattern "(\\d*)(.)") PLACEHOLDER-14445))]
       (if
        (empty? PLACEHOLDER-14446)
        (if (empty? PLACEHOLDER-14447) "" PLACEHOLDER-14447)
        (apply
         str
         (take
          (new Integer PLACEHOLDER-14446)
          (repeat PLACEHOLDER-14447))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14448]
      (loop*
       [PLACEHOLDER-14449
        PLACEHOLDER-14448
        PLACEHOLDER-14450
        PLACEHOLDER-14449]
       (let*
        [PLACEHOLDER-14451
         (first
          (re-find (re-pattern "(\\d*[^\\d])") PLACEHOLDER-14449))]
        (if
         (empty? PLACEHOLDER-14451)
         PLACEHOLDER-14450
         (recur
          (clojure.string/replace-first
           PLACEHOLDER-14449
           PLACEHOLDER-14451
           "")
          (clojure.string/replace-first
           PLACEHOLDER-14450
           PLACEHOLDER-14451
           (reverse-transform-seq PLACEHOLDER-14451))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15173
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15173))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15174]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-15175]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-15175)
            1)
           (str (first PLACEHOLDER-15175))
           (str
            (clojure.lang.RT/count PLACEHOLDER-15175)
            (first PLACEHOLDER-15175)))))
        (partition-by identity PLACEHOLDER-15174))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15176]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-15177]
           (repeat
            (new Integer (first PLACEHOLDER-15177))
            (second PLACEHOLDER-15177))))
         (map
          (fn*
           ([PLACEHOLDER-15178]
            (cons
             (if
              (empty? (first PLACEHOLDER-15178))
              1
              (first PLACEHOLDER-15178))
             (second PLACEHOLDER-15178))))
          (map
           rest
           (re-seq
            (re-pattern "(\\d*)([\\p{Alpha} ]{1})")
            PLACEHOLDER-15176))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8581
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8581))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-8582] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-8583] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13905
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13905))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-13906]
      (str
       (if
        (clojure.lang.Numbers/gt
         (clojure.lang.RT/count PLACEHOLDER-13906)
         1)
        (clojure.lang.RT/count PLACEHOLDER-13906))
       (first PLACEHOLDER-13906)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13907]
      (reduce
       str
       (map encode-run (partition-by identity PLACEHOLDER-13907))))))
   (def
    decode-run
    (fn*
     ([PLACEHOLDER-13908 PLACEHOLDER-13909]
      (apply str (repeat PLACEHOLDER-13908 PLACEHOLDER-13909)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13910]
      (let*
       [PLACEHOLDER-13911
        PLACEHOLDER-13910
        PLACEHOLDER-13912
        PLACEHOLDER-13911
        PLACEHOLDER-13913
        (clojure.core/seq PLACEHOLDER-13912)
        PLACEHOLDER-13914
        (clojure.core/first PLACEHOLDER-13913)
        PLACEHOLDER-13915
        (clojure.core/next PLACEHOLDER-13913)
        PLACEHOLDER-13916
        PLACEHOLDER-13914
        PLACEHOLDER-13917
        PLACEHOLDER-13915
        PLACEHOLDER-13918
        ""
        PLACEHOLDER-13919
        0]
       (loop*
        [PLACEHOLDER-13920
         PLACEHOLDER-13911
         PLACEHOLDER-13921
         PLACEHOLDER-13918
         PLACEHOLDER-13922
         PLACEHOLDER-13919]
        (let*
         [PLACEHOLDER-13923
          PLACEHOLDER-13920
          PLACEHOLDER-13924
          (clojure.core/seq PLACEHOLDER-13923)
          PLACEHOLDER-13925
          (clojure.core/first PLACEHOLDER-13924)
          PLACEHOLDER-13926
          (clojure.core/next PLACEHOLDER-13924)
          PLACEHOLDER-13927
          PLACEHOLDER-13925
          PLACEHOLDER-13928
          PLACEHOLDER-13926
          PLACEHOLDER-13929
          PLACEHOLDER-13921
          PLACEHOLDER-13930
          PLACEHOLDER-13922]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-13927 nil)
          PLACEHOLDER-13929
          (if
           (java.lang.Character/isDigit PLACEHOLDER-13927)
           (recur
            PLACEHOLDER-13928
            PLACEHOLDER-13929
            (clojure.lang.Numbers/add
             (clojure.lang.Numbers/multiply 10 PLACEHOLDER-13930)
             (java.lang.Character/digit PLACEHOLDER-13927 10)))
           (if
            :else
            (recur
             PLACEHOLDER-13928
             (str
              PLACEHOLDER-13929
              (decode-run
               (clojure.lang.Numbers/max 1 PLACEHOLDER-13930)
               PLACEHOLDER-13927))
             0)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12178
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12178))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    join-common
    (fn*
     ([PLACEHOLDER-12179 PLACEHOLDER-12180]
      (if
       (clojure.lang.Util/equiv
        (first (first PLACEHOLDER-12179))
        PLACEHOLDER-12180)
       (cons
        (cons PLACEHOLDER-12180 (first PLACEHOLDER-12179))
        (rest PLACEHOLDER-12179))
       (cons (list PLACEHOLDER-12180) PLACEHOLDER-12179)))))
   (def
    group-common-letters
    (fn*
     ([PLACEHOLDER-12181]
      (reverse (reduce join-common () PLACEHOLDER-12181)))))
   (def
    run-encoding
    (fn*
     ([PLACEHOLDER-12182]
      (map
       (fn*
        ([PLACEHOLDER-12183]
         (if
          (clojure.lang.Util/equiv
           (clojure.lang.RT/count PLACEHOLDER-12183)
           1)
          (take 1 PLACEHOLDER-12183)
          (vector
           (clojure.lang.RT/count PLACEHOLDER-12183)
           (first PLACEHOLDER-12183)))))
       PLACEHOLDER-12182))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12184]
      (apply
       str
       (map
        (fn* ([PLACEHOLDER-12185] (apply str PLACEHOLDER-12185)))
        (run-encoding (group-common-letters PLACEHOLDER-12184)))))))
   (def
    split-codes
    (fn*
     ([PLACEHOLDER-12186]
      (re-seq (re-pattern "(\\d*)([a-zA-Z ])") PLACEHOLDER-12186))))
   (def
    codes-to-str
    (fn*
     ([PLACEHOLDER-12187]
      (let*
       [PLACEHOLDER-12188
        PLACEHOLDER-12187
        PLACEHOLDER-12189
        (clojure.lang.RT/nth PLACEHOLDER-12188 0 nil)
        PLACEHOLDER-12190
        (clojure.lang.RT/nth PLACEHOLDER-12188 1 nil)
        PLACEHOLDER-12191
        (clojure.lang.RT/nth PLACEHOLDER-12188 2 nil)]
       (if
        (str/blank? PLACEHOLDER-12190)
        PLACEHOLDER-12191
        (str/join
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-12190)
          PLACEHOLDER-12191)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12192]
      (str/join (map codes-to-str (split-codes PLACEHOLDER-12192)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13381
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13381))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    number-of-chars
    (fn*
     ([PLACEHOLDER-13382]
      (let*
       [PLACEHOLDER-13383
        (clojure.lang.RT/count PLACEHOLDER-13382)
        PLACEHOLDER-13384
        (first PLACEHOLDER-13382)]
       (if
        (clojure.lang.Util/equiv (bigdec PLACEHOLDER-13383) 1M)
        (str PLACEHOLDER-13384)
        (str PLACEHOLDER-13383 PLACEHOLDER-13384))))))
   (def
    join-strings
    (fn*
     ([PLACEHOLDER-13385] (str/join "" (into [] PLACEHOLDER-13385)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13386]
      (if
       (str/blank? PLACEHOLDER-13386)
       (str "")
       (let*
        [PLACEHOLDER-13387 (partition-by identity PLACEHOLDER-13386)]
        (join-strings (map number-of-chars PLACEHOLDER-13387)))))))
   (def
    get-identity-ignore-arg
    (fn*
     ([PLACEHOLDER-13388 PLACEHOLDER-13389]
      (identity PLACEHOLDER-13388))))
   (def
    get-long-string
    (fn*
     ([PLACEHOLDER-13390]
      (if
       (str/blank? (second PLACEHOLDER-13390))
       (str (last PLACEHOLDER-13390))
       (let*
        [PLACEHOLDER-13391
         (last PLACEHOLDER-13390)
         PLACEHOLDER-13392
         (bigdec (second PLACEHOLDER-13390))]
        (join-strings
         (map
          (fn*
           ([PLACEHOLDER-13393]
            (get-identity-ignore-arg
             PLACEHOLDER-13391
             PLACEHOLDER-13393)))
          (range PLACEHOLDER-13392))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13394]
      (if
       (str/blank? PLACEHOLDER-13394)
       (str PLACEHOLDER-13394)
       (str/join
        ""
        (map
         get-long-string
         (re-seq
          (re-pattern "([0-9]*)([a-zA-Z ])")
          PLACEHOLDER-13394))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10072
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10072))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    rec-encode
    (fn*
     ([PLACEHOLDER-10073 PLACEHOLDER-10074]
      (let*
       [PLACEHOLDER-10076
        (clojure.lang.RT/count
         (take-while
          (fn*
           ([PLACEHOLDER-10075]
            (clojure.lang.Util/equiv
             PLACEHOLDER-10075
             (first PLACEHOLDER-10074))))
          PLACEHOLDER-10074))
        PLACEHOLDER-10077
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-10076 1)
         (str (first PLACEHOLDER-10074))
         (str PLACEHOLDER-10076 (first PLACEHOLDER-10074)))
        PLACEHOLDER-10079
        (drop-while
         (fn*
          ([PLACEHOLDER-10078]
           (clojure.lang.Util/equiv
            PLACEHOLDER-10078
            (first PLACEHOLDER-10074))))
         PLACEHOLDER-10074)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10076 0)
        PLACEHOLDER-10073
        (rec-encode
         (str PLACEHOLDER-10073 PLACEHOLDER-10077)
         (apply str PLACEHOLDER-10079)))))))
   (def
    rec-decode
    (fn*
     ([PLACEHOLDER-10080 PLACEHOLDER-10081]
      (if
       (clojure.string/blank? PLACEHOLDER-10081)
       PLACEHOLDER-10080
       (let*
        [PLACEHOLDER-10082
         (re-find
          (re-pattern "^(\\d*)([a-zA-Z\\s])(.*)")
          PLACEHOLDER-10081)
         PLACEHOLDER-10083
         (clojure.lang.RT/nth PLACEHOLDER-10082 0 nil)
         PLACEHOLDER-10084
         (clojure.lang.RT/nth PLACEHOLDER-10082 1 nil)
         PLACEHOLDER-10085
         (clojure.lang.RT/nth PLACEHOLDER-10082 2 nil)
         PLACEHOLDER-10086
         (clojure.lang.RT/nth PLACEHOLDER-10082 3 nil)
         PLACEHOLDER-10087
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-10084 "")
          1
          (java.lang.Integer/parseInt PLACEHOLDER-10084))
         PLACEHOLDER-10088
         (apply str (repeat PLACEHOLDER-10087 PLACEHOLDER-10085))
         PLACEHOLDER-10089
         (apply str PLACEHOLDER-10080 PLACEHOLDER-10088)]
        (rec-decode PLACEHOLDER-10089 PLACEHOLDER-10086))))))
   (def
    run-length-encode
    (fn* ([PLACEHOLDER-10090] (rec-encode "" PLACEHOLDER-10090))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-10091] (rec-decode "" PLACEHOLDER-10091)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9689
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9689))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    dedupe-counted
    (fn*
     ([PLACEHOLDER-9690]
      (loop*
       [PLACEHOLDER-9691
        PLACEHOLDER-9690
        PLACEHOLDER-9692
        (dedupe PLACEHOLDER-9691)
        PLACEHOLDER-9693
        []]
       (if
        (empty? PLACEHOLDER-9692)
        PLACEHOLDER-9693
        (let*
         [PLACEHOLDER-9694
          (first PLACEHOLDER-9692)
          PLACEHOLDER-9695
          (clojure.lang.RT/count
           (take-while (partial = PLACEHOLDER-9694) PLACEHOLDER-9691))]
         (recur
          (drop PLACEHOLDER-9695 PLACEHOLDER-9691)
          (rest PLACEHOLDER-9692)
          (conj
           PLACEHOLDER-9693
           {:item PLACEHOLDER-9694, :count PLACEHOLDER-9695}))))))))
   (def
    format-count
    (fn*
     ([PLACEHOLDER-9696]
      (let*
       [PLACEHOLDER-9697
        (:count PLACEHOLDER-9696)
        PLACEHOLDER-9698
        (:item PLACEHOLDER-9696)]
       (str
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-9697)
         ""
         PLACEHOLDER-9697)
        PLACEHOLDER-9698)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9699]
      (let*
       [PLACEHOLDER-9700 (dedupe-counted PLACEHOLDER-9699)]
       (string/join (map format-count PLACEHOLDER-9700))))))
   (def
    decode-part
    (fn*
     ([PLACEHOLDER-9701]
      (let*
       [PLACEHOLDER-9702
        (last PLACEHOLDER-9701)
        PLACEHOLDER-9703
        (drop-last PLACEHOLDER-9701)]
       (if
        (empty? PLACEHOLDER-9703)
        (str PLACEHOLDER-9702)
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt (apply str PLACEHOLDER-9703))
          PLACEHOLDER-9702)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9704]
      (string/join
       (map
        decode-part
        (re-seq (re-pattern "\\d*[a-zA-Z ]") PLACEHOLDER-9704)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14168
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14168))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as str])
   (def
    contract
    (fn*
     ([PLACEHOLDER-14169]
      (if
       (clojure.lang.Numbers/equiv
        (clojure.lang.RT/count PLACEHOLDER-14169)
        1)
       (apply str (take 1 PLACEHOLDER-14169))
       (apply
        str
        (clojure.lang.RT/count PLACEHOLDER-14169)
        (take 1 PLACEHOLDER-14169))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14170]
      (apply
       str
       (map contract (partition-by identity PLACEHOLDER-14170))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14171]
      (str/replace
       PLACEHOLDER-14171
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-14172]
         (str/join
          (repeat
           (java.lang.Integer/parseInt (PLACEHOLDER-14172 1))
           (PLACEHOLDER-14172 2))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11284
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11284))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-group
    (fn*
     ([PLACEHOLDER-11285 PLACEHOLDER-11286]
      (let*
       [PLACEHOLDER-11287
        PLACEHOLDER-11286
        PLACEHOLDER-11288
        (clojure.lang.RT/nth PLACEHOLDER-11287 0 nil)
        PLACEHOLDER-11289
        (clojure.lang.RT/nth PLACEHOLDER-11287 1 nil)
        PLACEHOLDER-11290
        PLACEHOLDER-11287]
       (conj
        PLACEHOLDER-11285
        (let*
         [PLACEHOLDER-11291 PLACEHOLDER-11289]
         (if
          PLACEHOLDER-11291
          (clojure.lang.RT/count PLACEHOLDER-11290)
          PLACEHOLDER-11291))
        PLACEHOLDER-11288)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11292]
      (apply
       str
       (reduce
        encode-group
        []
        (s/split PLACEHOLDER-11292 (re-pattern "(?<=(.))(?!\\1)")))))))
   (def
    char->num
    (fn*
     ([PLACEHOLDER-11293]
      (let*
       [PLACEHOLDER-11294
        (clojure.lang.Numbers/minus
         (clojure.lang.RT/intCast PLACEHOLDER-11293)
         48)]
       (let*
        [PLACEHOLDER-11295
         (clojure.lang.Numbers/gte PLACEHOLDER-11294 0)]
        (if
         PLACEHOLDER-11295
         (let*
          [PLACEHOLDER-11296
           (clojure.lang.Numbers/lte PLACEHOLDER-11294 9)]
          (if PLACEHOLDER-11296 PLACEHOLDER-11294 PLACEHOLDER-11296))
         PLACEHOLDER-11295))))))
   (def
    decode-step
    (fn*
     ([PLACEHOLDER-11297]
      (fn*
       ([PLACEHOLDER-11298 PLACEHOLDER-11299]
        (let*
         [PLACEHOLDER-11300 (char->num PLACEHOLDER-11299)]
         (if
          PLACEHOLDER-11300
          (let*
           [PLACEHOLDER-11301 PLACEHOLDER-11300]
           (do
            (.reset
             PLACEHOLDER-11297
             ((fn*
               ([PLACEHOLDER-11302]
                (clojure.lang.Numbers/add
                 (clojure.lang.Numbers/multiply 10 PLACEHOLDER-11302)
                 PLACEHOLDER-11301)))
              (.deref PLACEHOLDER-11297)))
            PLACEHOLDER-11298))
          (if
           (clojure.lang.Numbers/isZero (deref PLACEHOLDER-11297))
           (conj PLACEHOLDER-11298 PLACEHOLDER-11299)
           (let*
            [PLACEHOLDER-11303 (deref PLACEHOLDER-11297)]
            (do
             (vreset! PLACEHOLDER-11297 0)
             (into
              PLACEHOLDER-11298
              (repeat PLACEHOLDER-11303 PLACEHOLDER-11299))))))))))))
   (def
    run-length-decode-alt
    (fn*
     ([PLACEHOLDER-11304]
      (let*
       [PLACEHOLDER-11305 (volatile! 0)]
       (apply
        str
        (reduce
         (decode-step PLACEHOLDER-11305)
         []
         PLACEHOLDER-11304))))))
   (def
    stupid-decoder
    (fn*
     ([PLACEHOLDER-11306 PLACEHOLDER-11307]
      (let*
       [PLACEHOLDER-11308
        PLACEHOLDER-11306
        PLACEHOLDER-11309
        (clojure.core/seq PLACEHOLDER-11308)
        PLACEHOLDER-11310
        (clojure.core/first PLACEHOLDER-11309)
        PLACEHOLDER-11311
        (clojure.core/next PLACEHOLDER-11309)
        PLACEHOLDER-11312
        PLACEHOLDER-11310
        PLACEHOLDER-11313
        PLACEHOLDER-11311
        PLACEHOLDER-11314
        PLACEHOLDER-11308]
       (let*
        [PLACEHOLDER-11315 (char->num PLACEHOLDER-11307)]
        (if
         (number? PLACEHOLDER-11312)
         (if
          PLACEHOLDER-11315
          (conj
           PLACEHOLDER-11313
           (clojure.lang.Numbers/add
            (clojure.lang.Numbers/multiply 10 PLACEHOLDER-11312)
            PLACEHOLDER-11315))
          (into
           PLACEHOLDER-11313
           (repeat PLACEHOLDER-11312 PLACEHOLDER-11307)))
         (conj
          PLACEHOLDER-11314
          (let*
           [PLACEHOLDER-11316 PLACEHOLDER-11315]
           (if
            PLACEHOLDER-11316
            PLACEHOLDER-11316
            PLACEHOLDER-11307)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11317]
      (apply
       str
       (reverse (reduce stupid-decoder () PLACEHOLDER-11317)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10809
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10809))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10810]
      (loop*
       [PLACEHOLDER-10811 "" PLACEHOLDER-10812 PLACEHOLDER-10810]
       (if
        (empty? PLACEHOLDER-10812)
        PLACEHOLDER-10811
        (let*
         [PLACEHOLDER-10814
          (clojure.lang.RT/count
           (take-while
            (fn*
             ([PLACEHOLDER-10813]
              (clojure.lang.Util/equiv
               PLACEHOLDER-10813
               (first PLACEHOLDER-10812))))
            PLACEHOLDER-10812))]
         (recur
          (str
           PLACEHOLDER-10811
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-10814 1)
            PLACEHOLDER-10814)
           (first PLACEHOLDER-10812))
          (drop PLACEHOLDER-10814 PLACEHOLDER-10812))))))))
   (def
    hasV
    (fn*
     ([PLACEHOLDER-10815]
      (try
       (java.lang.Long/valueOf (str PLACEHOLDER-10815))
       (catch Exception PLACEHOLDER-10816 nil)))))
   (def
    mblock
    (fn*
     ([PLACEHOLDER-10817]
      (let*
       [PLACEHOLDER-10818
        (apply str (take-while hasV PLACEHOLDER-10817))
        PLACEHOLDER-10819
        (if (empty? PLACEHOLDER-10818) 1 PLACEHOLDER-10818)
        PLACEHOLDER-10820
        (first
         (drop
          (clojure.lang.RT/count PLACEHOLDER-10818)
          PLACEHOLDER-10817))]
       [(java.lang.Long/valueOf PLACEHOLDER-10819)
        PLACEHOLDER-10820
        (apply
         str
         (drop
          (clojure.lang.Numbers/inc
           (clojure.lang.RT/count PLACEHOLDER-10818))
          PLACEHOLDER-10817))]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10821]
      (loop*
       [PLACEHOLDER-10822 [] PLACEHOLDER-10823 PLACEHOLDER-10821]
       (if
        (empty? PLACEHOLDER-10823)
        (apply str PLACEHOLDER-10822)
        (let*
         [PLACEHOLDER-10824 (mblock PLACEHOLDER-10823)]
         (recur
          (into
           PLACEHOLDER-10822
           (apply repeat (take 2 PLACEHOLDER-10824)))
          (clojure.lang.RT/nth PLACEHOLDER-10824 2)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8106
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8106))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    groups-of-consecutive-characters
    (fn*
     ([PLACEHOLDER-8107] (partition-by identity PLACEHOLDER-8107))))
   (def
    encode-character-group
    (fn*
     ([PLACEHOLDER-8108]
      (let*
       [PLACEHOLDER-8109
        (str (first PLACEHOLDER-8108))
        PLACEHOLDER-8110
        (clojure.lang.RT/count PLACEHOLDER-8108)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-8110)
        PLACEHOLDER-8109
        (str PLACEHOLDER-8110 PLACEHOLDER-8109))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8111]
      (clojure.string/join
       (map
        encode-character-group
        (groups-of-consecutive-characters PLACEHOLDER-8111))))))
   (def
    groups-of-encoded-characters
    (fn*
     ([PLACEHOLDER-8112]
      (re-seq (re-pattern "\\d*?[A-z\\s]") PLACEHOLDER-8112))))
   (def
    decode-character-group
    (fn*
     ([PLACEHOLDER-8113]
      (let*
       [PLACEHOLDER-8114
        (last PLACEHOLDER-8113)
        PLACEHOLDER-8115
        (drop-last PLACEHOLDER-8113)]
       (if
        (empty? PLACEHOLDER-8115)
        PLACEHOLDER-8114
        (repeat
         (java.lang.Integer/parseInt
          (clojure.string/join PLACEHOLDER-8115))
         PLACEHOLDER-8114))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8116]
      (clojure.string/join
       (flatten
        (map
         decode-character-group
         (groups-of-encoded-characters PLACEHOLDER-8116))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13547
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13547))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    rle-count
    (fn*
     ([PLACEHOLDER-13548]
      (let*
       [PLACEHOLDER-13549 (clojure.lang.RT/count PLACEHOLDER-13548)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-13549 1)
        nil
        PLACEHOLDER-13549)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13550]
      (apply
       str
       (mapcat
        (juxt rle-count first)
        (partition-by identity PLACEHOLDER-13550))))))
   (def
    rld-decoder
    (fn*
     ([PLACEHOLDER-13551]
      (let*
       [PLACEHOLDER-13552
        (last PLACEHOLDER-13551)
        PLACEHOLDER-13553
        (java.lang.Integer/parseInt
         (subs
          PLACEHOLDER-13551
          0
          (clojure.lang.Numbers/dec
           (clojure.lang.RT/count PLACEHOLDER-13551))))]
       (apply str (repeat PLACEHOLDER-13553 PLACEHOLDER-13552))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13554]
      (s/replace
       PLACEHOLDER-13554
       (re-pattern "\\d+\\D")
       rld-decoder)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8128
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8128))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encoder-values
    (fn*
     ([PLACEHOLDER-8129]
      (let*
       [PLACEHOLDER-8130
        PLACEHOLDER-8129
        PLACEHOLDER-8131
        (clojure.lang.RT/nth PLACEHOLDER-8130 0 nil)
        PLACEHOLDER-8132
        (clojure.lang.RT/nth PLACEHOLDER-8130 1 nil)]
       (str
        (if
         (clojure.lang.Numbers/gt
          (clojure.lang.RT/count PLACEHOLDER-8131)
          1)
         (clojure.lang.RT/count PLACEHOLDER-8131)
         "")
        PLACEHOLDER-8132)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8133]
      (let*
       [PLACEHOLDER-8134
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8133)]
       (apply str (map encoder-values PLACEHOLDER-8134))))))
   (def
    decoder-values
    (fn*
     ([PLACEHOLDER-8135]
      (let*
       [PLACEHOLDER-8136
        PLACEHOLDER-8135
        PLACEHOLDER-8137
        (clojure.lang.RT/nth PLACEHOLDER-8136 0 nil)
        PLACEHOLDER-8138
        (clojure.lang.RT/nth PLACEHOLDER-8136 1 nil)
        PLACEHOLDER-8139
        (clojure.lang.RT/nth PLACEHOLDER-8136 2 nil)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt
          (let*
           [PLACEHOLDER-8140 PLACEHOLDER-8138]
           (if PLACEHOLDER-8140 PLACEHOLDER-8140 "1")))
         PLACEHOLDER-8139))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8141]
      (let*
       [PLACEHOLDER-8142
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-8141)]
       (apply str (map decoder-values PLACEHOLDER-8142))))))
   (run-length-encode "AAABCCCCCC")
   (run-length-decode "12WB12W3B24WB"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10604
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10604))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-segment
    (fn*
     ([PLACEHOLDER-10605]
      (let*
       [PLACEHOLDER-10606
        PLACEHOLDER-10605
        PLACEHOLDER-10607
        (clojure.lang.RT/nth PLACEHOLDER-10606 0 nil)
        PLACEHOLDER-10608
        PLACEHOLDER-10606]
       (let*
        [PLACEHOLDER-10609 (clojure.lang.RT/count PLACEHOLDER-10608)]
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-10609 1)
         (str PLACEHOLDER-10609 PLACEHOLDER-10607)
         PLACEHOLDER-10607))))))
   (def
    decode-segment
    (fn*
     ([PLACEHOLDER-10610]
      (let*
       [PLACEHOLDER-10611
        PLACEHOLDER-10610
        PLACEHOLDER-10612
        (clojure.lang.RT/nth PLACEHOLDER-10611 0 nil)
        PLACEHOLDER-10613
        (clojure.lang.RT/nth PLACEHOLDER-10611 1 nil)
        PLACEHOLDER-10614
        (clojure.lang.RT/nth PLACEHOLDER-10611 2 nil)]
       (let*
        [PLACEHOLDER-10615 (empty? PLACEHOLDER-10613)]
        (if
         PLACEHOLDER-10615
         (let*
          [PLACEHOLDER-10616 PLACEHOLDER-10615]
          (list 1 PLACEHOLDER-10614))
         (list
          (java.lang.Integer/parseInt PLACEHOLDER-10613)
          PLACEHOLDER-10614)))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-10617]
      (let*
       [PLACEHOLDER-10618
        PLACEHOLDER-10617
        PLACEHOLDER-10619
        (clojure.lang.RT/nth PLACEHOLDER-10618 0 nil)
        PLACEHOLDER-10620
        (clojure.lang.RT/nth PLACEHOLDER-10618 1 nil)]
       (repeat PLACEHOLDER-10619 PLACEHOLDER-10620)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10621]
      (apply
       str
       (map
        encode-segment
        (partition-by identity PLACEHOLDER-10621))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10622]
      (apply
       str
       (flatten
        (map
         (comp expand decode-segment)
         (re-seq
          (re-pattern "(\\d*)([A-Za-z ])")
          PLACEHOLDER-10622))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10381
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10381))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-partition
    (fn*
     ([PLACEHOLDER-10382]
      (let*
       [PLACEHOLDER-10383
        (clojure.lang.RT/count PLACEHOLDER-10382)
        PLACEHOLDER-10384
        (first PLACEHOLDER-10382)]
       (let*
        [PLACEHOLDER-10385 PLACEHOLDER-10383]
        (case*
         PLACEHOLDER-10385
         0
         0
         (list PLACEHOLDER-10383 PLACEHOLDER-10384)
         {1 [1 (list PLACEHOLDER-10384)]}
         :compact
         :int
         nil))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10386]
      (apply
       str
       (mapcat
        encode-partition
        (partition-by identity PLACEHOLDER-10386))))))
   (def
    number-from-cipher-string
    (fn*
     ([PLACEHOLDER-10387]
      (java.lang.Integer/parseInt
       (subs
        PLACEHOLDER-10387
        0
        (clojure.lang.Numbers/minus
         (clojure.lang.RT/count PLACEHOLDER-10387)
         1))))))
   (def
    decode-cipher-string
    (fn*
     ([PLACEHOLDER-10388]
      (let*
       [PLACEHOLDER-10389
        (clojure.lang.RT/count PLACEHOLDER-10388)
        PLACEHOLDER-10390
        (last PLACEHOLDER-10388)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10389 1)
        (list PLACEHOLDER-10390)
        (repeat
         (number-from-cipher-string PLACEHOLDER-10388)
         PLACEHOLDER-10390))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10391]
      (let*
       [PLACEHOLDER-10392
        (re-seq (re-pattern "\\d*[a-zA-z ]") PLACEHOLDER-10391)]
       (apply str (mapcat decode-cipher-string PLACEHOLDER-10392)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14775
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14775))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14776]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14777]
          (if
           (clojure.lang.Numbers/gt (PLACEHOLDER-14777 :count) 1)
           (str (PLACEHOLDER-14777 :count) (PLACEHOLDER-14777 :key))
           (str (PLACEHOLDER-14777 :key)))))
        (reduce
         (fn*
          ([PLACEHOLDER-14778 PLACEHOLDER-14779]
           (if
            (let*
             [PLACEHOLDER-14780 (empty? PLACEHOLDER-14778)]
             (if
              PLACEHOLDER-14780
              PLACEHOLDER-14780
              (not=
               (:key (last PLACEHOLDER-14778))
               PLACEHOLDER-14779)))
            (conj PLACEHOLDER-14778 {:key PLACEHOLDER-14779, :count 1})
            (conj
             (pop PLACEHOLDER-14778)
             {:key PLACEHOLDER-14779,
              :count
              (clojure.lang.Numbers/inc
               (:count (last PLACEHOLDER-14778)))}))))
         []
         PLACEHOLDER-14776))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14781]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14782]
          (apply
           str
           (repeat
            (first PLACEHOLDER-14782)
            (last PLACEHOLDER-14782)))))
        (map
         (fn*
          ([PLACEHOLDER-14783]
           (vec
            [(if
              (empty? (second PLACEHOLDER-14783))
              1
              (read-string (second PLACEHOLDER-14783)))
             (last PLACEHOLDER-14783)])))
         (re-seq
          (re-pattern "(\\d*)([^\\d])")
          PLACEHOLDER-14781))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9650
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9650))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9651]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9652]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-9652)
            1)
           (str
            (clojure.lang.RT/count PLACEHOLDER-9652)
            (first PLACEHOLDER-9652))
           (str (first PLACEHOLDER-9652)))))
        (partition-by identity PLACEHOLDER-9651))))))
   (def
    decode-cipher
    (fn*
     ([PLACEHOLDER-9653] PLACEHOLDER-9653)
     ([PLACEHOLDER-9654 PLACEHOLDER-9655]
      (apply
       str
       (repeat
        (java.lang.Integer/parseInt PLACEHOLDER-9654)
        PLACEHOLDER-9655)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9656]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9657]
          (apply
           decode-cipher
           (filter some? (rest PLACEHOLDER-9657)))))
        (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-9656)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14124
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14124))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def rle-pattern (re-pattern "([a-zA-Z\\s])\\1*"))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14125]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-14126]
          (str/replace
           PLACEHOLDER-14126
           (re-pattern "1([a-zA-Z\\s]+)")
           "$1")))
        (map
         (fn*
          ([PLACEHOLDER-14127]
           (str
            (clojure.lang.RT/count PLACEHOLDER-14127)
            (first PLACEHOLDER-14127))))
         (map first (re-seq rle-pattern PLACEHOLDER-14125))))))))
   (def
    str->int
    (fn*
     ([PLACEHOLDER-14128]
      (if
       (empty? PLACEHOLDER-14128)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-14128)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14129]
      (let*
       [PLACEHOLDER-14130
        (re-seq (re-pattern "\\d*[a-zA-Z\\s]") PLACEHOLDER-14129)
        PLACEHOLDER-14133
        (map
         (fn* ([PLACEHOLDER-14131] (str->int PLACEHOLDER-14131)))
         (map
          (fn*
           ([PLACEHOLDER-14132]
            (re-find (re-pattern "\\d+") PLACEHOLDER-14132)))
          PLACEHOLDER-14130))
        PLACEHOLDER-14135
        (map
         (fn*
          ([PLACEHOLDER-14134]
           (re-find (re-pattern "[a-zA-Z\\s]+") PLACEHOLDER-14134)))
         PLACEHOLDER-14130)]
       (str/join
        (map
         str/join
         (map
          (fn*
           ([PLACEHOLDER-14136]
            (repeat
             (first PLACEHOLDER-14136)
             (second PLACEHOLDER-14136))))
          (apply
           map
           vector
           [PLACEHOLDER-14133 PLACEHOLDER-14135])))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11551
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11551))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-11552] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-11553] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13150
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13150))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require 'clojure.string)
   (alias 's 'clojure.string)
   (def
    str->map-list
    (fn*
     ([PLACEHOLDER-13151]
      (map
       (fn*
        ([PLACEHOLDER-13152]
         (zipmap [:letter :quantity] [PLACEHOLDER-13152 1])))
       PLACEHOLDER-13151))))
   (def
    reduce-map
    (fn*
     ([PLACEHOLDER-13153]
      (reverse
       (reduce
        (fn*
         ([PLACEHOLDER-13154 PLACEHOLDER-13155]
          (if
           (clojure.lang.Util/equiv
            (:letter (first PLACEHOLDER-13154))
            (:letter PLACEHOLDER-13155))
           (conj
            (rest PLACEHOLDER-13154)
            (assoc
             {}
             :letter
             (:letter (first PLACEHOLDER-13154))
             :quantity
             (clojure.lang.Numbers/add
              (:quantity (first PLACEHOLDER-13154))
              (:quantity PLACEHOLDER-13155))))
           (conj PLACEHOLDER-13154 PLACEHOLDER-13155))))
        ()
        PLACEHOLDER-13153)))))
   (def
    map->string
    (fn*
     ([PLACEHOLDER-13156]
      (apply
       str
       (repeat
        (:quantity PLACEHOLDER-13156)
        (:letter PLACEHOLDER-13156))))))
   (def
    map->enc-string
    (fn*
     ([PLACEHOLDER-13157]
      (str
       (:quantity PLACEHOLDER-13157)
       (:letter PLACEHOLDER-13157)))))
   (def
    remove-ones
    (fn*
     ([PLACEHOLDER-13158]
      (loop*
       [PLACEHOLDER-13159 0 PLACEHOLDER-13160 ""]
       (if
        (let*
         [PLACEHOLDER-13161 (empty? PLACEHOLDER-13158)]
         (if
          PLACEHOLDER-13161
          PLACEHOLDER-13161
          (clojure.lang.Util/equiv
           PLACEHOLDER-13159
           (clojure.lang.Numbers/dec
            (clojure.lang.RT/count PLACEHOLDER-13158)))))
        (s/join "" (vector PLACEHOLDER-13160 (last PLACEHOLDER-13158)))
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/nth PLACEHOLDER-13158 PLACEHOLDER-13159)
          \1)
         (if
          (java.lang.Character/isDigit
           (clojure.lang.RT/nth
            PLACEHOLDER-13158
            (clojure.lang.Numbers/inc PLACEHOLDER-13159)))
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-13159)
           (s/join
            ""
            (vector
             PLACEHOLDER-13160
             (clojure.lang.RT/nth
              PLACEHOLDER-13158
              PLACEHOLDER-13159))))
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-13159)
           PLACEHOLDER-13160))
         (recur
          (clojure.lang.Numbers/inc PLACEHOLDER-13159)
          (s/join
           ""
           (vector
            PLACEHOLDER-13160
            (clojure.lang.RT/nth
             PLACEHOLDER-13158
             PLACEHOLDER-13159))))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13162]
      (apply
       str
       (remove-ones
        (apply
         str
         ((fn*
           ([PLACEHOLDER-13163]
            (map map->enc-string PLACEHOLDER-13163)))
          (reduce-map (str->map-list PLACEHOLDER-13162)))))))))
   (def
    add-ones
    (fn*
     ([PLACEHOLDER-13164]
      (loop*
       [PLACEHOLDER-13165 -1 PLACEHOLDER-13166 ""]
       (if
        (clojure.lang.Util/equiv
         (clojure.lang.Numbers/dec
          (clojure.lang.RT/count PLACEHOLDER-13164))
         PLACEHOLDER-13165)
        PLACEHOLDER-13166
        (if
         (let*
          [PLACEHOLDER-13167
           (clojure.lang.Util/equiv PLACEHOLDER-13165 -1)]
          (if
           PLACEHOLDER-13167
           PLACEHOLDER-13167
           (let*
            [PLACEHOLDER-13168
             (java.lang.Character/isLetter
              (clojure.lang.RT/nth
               PLACEHOLDER-13164
               PLACEHOLDER-13165))]
            (if
             PLACEHOLDER-13168
             PLACEHOLDER-13168
             (clojure.lang.Util/equiv
              (clojure.lang.RT/nth PLACEHOLDER-13164 PLACEHOLDER-13165)
              \space)))))
         (if
          (let*
           [PLACEHOLDER-13169
            (clojure.lang.Util/equiv
             (clojure.lang.RT/nth
              PLACEHOLDER-13164
              (clojure.lang.Numbers/inc PLACEHOLDER-13165))
             \space)]
           (if
            PLACEHOLDER-13169
            PLACEHOLDER-13169
            (java.lang.Character/isLetter
             (clojure.lang.RT/nth
              PLACEHOLDER-13164
              (clojure.lang.Numbers/inc PLACEHOLDER-13165)))))
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-13165)
           (s/join
            ""
            (vector
             PLACEHOLDER-13166
             "1"
             (clojure.lang.RT/nth
              PLACEHOLDER-13164
              (clojure.lang.Numbers/inc PLACEHOLDER-13165)))))
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-13165)
           (s/join
            ""
            (vector
             PLACEHOLDER-13166
             (clojure.lang.RT/nth
              PLACEHOLDER-13164
              (clojure.lang.Numbers/inc PLACEHOLDER-13165))))))
         (recur
          (clojure.lang.Numbers/inc PLACEHOLDER-13165)
          (s/join
           ""
           (vector
            PLACEHOLDER-13166
            (clojure.lang.RT/nth
             PLACEHOLDER-13164
             (clojure.lang.Numbers/inc PLACEHOLDER-13165)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13170]
      (let*
       [PLACEHOLDER-13173
        (remove
         (fn*
          ([PLACEHOLDER-13171]
           (clojure.lang.Util/equiv PLACEHOLDER-13171 "")))
         ((fn*
           ([PLACEHOLDER-13172]
            (s/split PLACEHOLDER-13172 (re-pattern "\\d+"))))
          (add-ones PLACEHOLDER-13170)))
        PLACEHOLDER-13175
        (map
         read-string
         (remove
          s/blank?
          ((fn*
            ([PLACEHOLDER-13174]
             (s/split PLACEHOLDER-13174 (re-pattern "[a-zA-Z\\s+]"))))
           (add-ones PLACEHOLDER-13170))))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-13176 PLACEHOLDER-13177]
           (apply str (repeat PLACEHOLDER-13177 PLACEHOLDER-13176))))
         PLACEHOLDER-13173
         PLACEHOLDER-13175)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9271
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9271))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9272]
      (let*
       [PLACEHOLDER-9273
        (dedupe PLACEHOLDER-9272)
        PLACEHOLDER-9274
        (map count (partition-by identity PLACEHOLDER-9272))
        PLACEHOLDER-9275
        (interleave PLACEHOLDER-9274 PLACEHOLDER-9273)
        PLACEHOLDER-9277
        (filter
         (fn* ([PLACEHOLDER-9276] (not= 1 PLACEHOLDER-9276)))
         PLACEHOLDER-9275)]
       (apply str PLACEHOLDER-9277)))))
   (def
    add-1-to-blob
    (fn*
     ([PLACEHOLDER-9278]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-9278)
        1)
       (str
        1
        (apply
         str
         (drop-last (interleave PLACEHOLDER-9278 (repeat 1)))))
       PLACEHOLDER-9278))))
   (def
    nil->empty-col
    (fn*
     ([PLACEHOLDER-9279]
      (if
       (clojure.lang.Util/identical PLACEHOLDER-9279 nil)
       [""]
       PLACEHOLDER-9279))))
   (def
    partially-decode
    (fn*
     ([PLACEHOLDER-9280]
      (let*
       [PLACEHOLDER-9281
        (map
         add-1-to-blob
         (re-seq (re-pattern "[a-zA-Z ]+") PLACEHOLDER-9280))
        PLACEHOLDER-9282
        (nil->empty-col (re-seq (re-pattern "\\d") PLACEHOLDER-9280))
        PLACEHOLDER-9283
        (apply str (interleave PLACEHOLDER-9282 PLACEHOLDER-9281))]
       PLACEHOLDER-9283))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9284]
      (let*
       [PLACEHOLDER-9285
        (partially-decode PLACEHOLDER-9284)
        PLACEHOLDER-9286
        (partition 2 (map str (seq PLACEHOLDER-9285)))
        PLACEHOLDER-9288
        (map
         (fn*
          ([PLACEHOLDER-9287]
           (repeat
            (read-string (first PLACEHOLDER-9287))
            (last PLACEHOLDER-9287))))
         PLACEHOLDER-9286)
        PLACEHOLDER-9289
        (apply str (flatten PLACEHOLDER-9288))]
       PLACEHOLDER-9289)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12488
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12488))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12489]
      (apply
       str
       (filter
        (partial not= 1)
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-12489)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12490]
      (let*
       [PLACEHOLDER-12492
        (fn*
         ([PLACEHOLDER-12491]
          (clojure.lang.Util/identical
           (re-seq (re-pattern "[0-9]") (str PLACEHOLDER-12491))
           nil)))
        PLACEHOLDER-12494
        (fn*
         ([PLACEHOLDER-12493]
          (if
           (odd? (clojure.lang.RT/count PLACEHOLDER-12493))
           (cons '(\1) PLACEHOLDER-12493)
           PLACEHOLDER-12493)))
        PLACEHOLDER-12499
        (fn*
         ([PLACEHOLDER-12495]
          (let*
           [PLACEHOLDER-12496
            PLACEHOLDER-12495
            PLACEHOLDER-12497
            (clojure.lang.RT/nth PLACEHOLDER-12496 0 nil)
            PLACEHOLDER-12498
            (clojure.lang.RT/nth PLACEHOLDER-12496 1 nil)]
           (repeat
            (java.lang.Integer/parseInt (apply str PLACEHOLDER-12497))
            (first PLACEHOLDER-12498)))))]
       (apply
        str
        (flatten
         (mapcat
          (juxt PLACEHOLDER-12499 (comp rest second))
          (partition
           2
           (PLACEHOLDER-12494
            (partition-by
             PLACEHOLDER-12492
             PLACEHOLDER-12490)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8032
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8032))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-by-proximity
    (fn*
     ([PLACEHOLDER-8033]
      (let*
       [PLACEHOLDER-8034
        PLACEHOLDER-8033
        PLACEHOLDER-8035
        PLACEHOLDER-8034
        PLACEHOLDER-8036
        (clojure.core/seq PLACEHOLDER-8035)
        PLACEHOLDER-8037
        (clojure.core/first PLACEHOLDER-8036)
        PLACEHOLDER-8038
        (clojure.core/next PLACEHOLDER-8036)
        PLACEHOLDER-8039
        PLACEHOLDER-8037
        PLACEHOLDER-8040
        PLACEHOLDER-8038
        PLACEHOLDER-8041
        []
        PLACEHOLDER-8042
        []]
       (loop*
        [PLACEHOLDER-8043
         PLACEHOLDER-8034
         PLACEHOLDER-8044
         PLACEHOLDER-8041
         PLACEHOLDER-8045
         PLACEHOLDER-8042]
        (let*
         [PLACEHOLDER-8046
          PLACEHOLDER-8043
          PLACEHOLDER-8047
          (clojure.core/seq PLACEHOLDER-8046)
          PLACEHOLDER-8048
          (clojure.core/first PLACEHOLDER-8047)
          PLACEHOLDER-8049
          (clojure.core/next PLACEHOLDER-8047)
          PLACEHOLDER-8050
          PLACEHOLDER-8048
          PLACEHOLDER-8051
          PLACEHOLDER-8049
          PLACEHOLDER-8052
          PLACEHOLDER-8044
          PLACEHOLDER-8053
          PLACEHOLDER-8045]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-8050 nil)
          (conj PLACEHOLDER-8053 PLACEHOLDER-8052)
          (if
           (empty? PLACEHOLDER-8052)
           (recur PLACEHOLDER-8051 [PLACEHOLDER-8050] PLACEHOLDER-8053)
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-8050
             (first PLACEHOLDER-8052))
            (recur
             PLACEHOLDER-8051
             (conj PLACEHOLDER-8052 PLACEHOLDER-8050)
             PLACEHOLDER-8053)
            (if
             (not= PLACEHOLDER-8050 (first PLACEHOLDER-8052))
             (recur
              PLACEHOLDER-8051
              [PLACEHOLDER-8050]
              (conj PLACEHOLDER-8053 PLACEHOLDER-8052))))))))))))
   (def
    apply-count
    (fn*
     ([PLACEHOLDER-8054]
      (map
       (fn*
        ([PLACEHOLDER-8055]
         (vector
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-8055)
            1)
           (clojure.lang.RT/count PLACEHOLDER-8055))
          (first PLACEHOLDER-8055))))
       PLACEHOLDER-8054))))
   (def
    to-string
    (fn* ([PLACEHOLDER-8056] (apply str (flatten PLACEHOLDER-8056)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8057]
      (to-string
       (apply-count (split-by-proximity PLACEHOLDER-8057))))))
   (def
    token->string
    (fn*
     ([PLACEHOLDER-8058]
      (let*
       [PLACEHOLDER-8059
        (first (re-seq (re-pattern "\\d+") PLACEHOLDER-8058))]
       (if
        PLACEHOLDER-8059
        (let*
         [PLACEHOLDER-8060 PLACEHOLDER-8059]
         (apply
          str
          (repeat
           (new Integer PLACEHOLDER-8060)
           (first (re-seq (re-pattern "\\D") PLACEHOLDER-8058)))))
        PLACEHOLDER-8058)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8061]
      (apply
       str
       (map
        token->string
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-8061)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9191
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9191))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9192]
      (reduce
       str
       (map
        (fn*
         ([PLACEHOLDER-9193]
          (let*
           [PLACEHOLDER-9194
            (clojure.lang.RT/count PLACEHOLDER-9193)
            PLACEHOLDER-9195
            (last PLACEHOLDER-9193)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-9194 1)
            (str PLACEHOLDER-9195)
            (reduce str [PLACEHOLDER-9194 PLACEHOLDER-9195])))))
        (reduce
         (fn*
          ([PLACEHOLDER-9196 PLACEHOLDER-9197]
           (let*
            [PLACEHOLDER-9198 (last PLACEHOLDER-9196)]
            (if
             (clojure.lang.Util/equiv
              (last PLACEHOLDER-9198)
              PLACEHOLDER-9197)
             (conj
              (vec (butlast PLACEHOLDER-9196))
              (conj PLACEHOLDER-9198 PLACEHOLDER-9197))
             (conj PLACEHOLDER-9196 [PLACEHOLDER-9197])))))
         []
         PLACEHOLDER-9192))))))
   (def run-length-decode (fn* ([PLACEHOLDER-9199] PLACEHOLDER-9199))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8994
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8994))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-next
    (fn*
     ([PLACEHOLDER-8995 PLACEHOLDER-8996]
      (let*
       [PLACEHOLDER-8997 (last PLACEHOLDER-8995)]
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-8996
         (last PLACEHOLDER-8997))
        (conj
         (pop PLACEHOLDER-8995)
         [(clojure.lang.Numbers/inc (first PLACEHOLDER-8997))
          PLACEHOLDER-8996])
        (if :else (conj PLACEHOLDER-8995 [1 PLACEHOLDER-8996])))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8998]
      (reduce
       (fn*
        ([PLACEHOLDER-8999 PLACEHOLDER-9000]
         (str
          PLACEHOLDER-8999
          (first PLACEHOLDER-9000)
          (last PLACEHOLDER-9000))))
       ""
       (reduce encode-next [] PLACEHOLDER-8998)))))
   (def
    decode-next
    (fn*
     ([PLACEHOLDER-9001]
      (let*
       [PLACEHOLDER-9002
        (first PLACEHOLDER-9001)
        PLACEHOLDER-9003
        (last PLACEHOLDER-9001)]
       (if
        PLACEHOLDER-9002
        (apply
         str
         (take
          (read-string (str PLACEHOLDER-9002))
          (repeat PLACEHOLDER-9003)))
        (if :else ""))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9004]
      (let*
       [PLACEHOLDER-9005 (partition 2 PLACEHOLDER-9004)]
       (reduce
        (fn*
         ([PLACEHOLDER-9006 PLACEHOLDER-9007]
          (str PLACEHOLDER-9006 (decode-next PLACEHOLDER-9007))))
        ""
        PLACEHOLDER-9005))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10825
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10825))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10826]
      (apply
       str
       (mapcat
        (juxt
         (fn*
          ([PLACEHOLDER-10827]
           (if
            (not= 1 (clojure.lang.RT/count PLACEHOLDER-10827))
            (clojure.lang.RT/count PLACEHOLDER-10827)
            "")))
         first)
        (partition-by identity PLACEHOLDER-10826))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10828]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-10829]
          (let*
           [PLACEHOLDER-10830
            PLACEHOLDER-10829
            PLACEHOLDER-10831
            (clojure.lang.RT/nth PLACEHOLDER-10830 0 nil)
            PLACEHOLDER-10832
            (clojure.lang.RT/nth PLACEHOLDER-10830 1 nil)
            PLACEHOLDER-10833
            (clojure.lang.RT/nth PLACEHOLDER-10830 2 nil)]
           (repeat
            (java.lang.Integer/parseInt PLACEHOLDER-10832)
            PLACEHOLDER-10833))))
        (re-seq
         (re-pattern "(\\d+)([a-zA-Z])")
         PLACEHOLDER-10828)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14322
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14322))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-14323] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-14324] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14748
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14748))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14749]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14750]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-14750)
             1)
            (clojure.lang.RT/count PLACEHOLDER-14750)
            "")
           (first PLACEHOLDER-14750))))
        (partition-by identity PLACEHOLDER-14749))))))
   (def
    parse
    (fn*
     ([PLACEHOLDER-14751]
      (map
       (fn*
        ([PLACEHOLDER-14752]
         (try
          (new Integer (str PLACEHOLDER-14752))
          (catch
           Exception
           PLACEHOLDER-14753
           (str PLACEHOLDER-14752)))))
       (re-seq (re-pattern "\\d+|[a-zA-Z ]") PLACEHOLDER-14751)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14754]
      (let*
       [PLACEHOLDER-14755 (parse PLACEHOLDER-14754)]
       (let*
        [PLACEHOLDER-14756
         PLACEHOLDER-14755
         PLACEHOLDER-14757
         PLACEHOLDER-14756
         PLACEHOLDER-14758
         (clojure.core/seq PLACEHOLDER-14757)
         PLACEHOLDER-14759
         (clojure.core/first PLACEHOLDER-14758)
         PLACEHOLDER-14760
         (clojure.core/next PLACEHOLDER-14758)
         PLACEHOLDER-14761
         PLACEHOLDER-14759
         PLACEHOLDER-14762
         PLACEHOLDER-14760
         PLACEHOLDER-14763
         PLACEHOLDER-14757
         PLACEHOLDER-14764
         []]
        (loop*
         [PLACEHOLDER-14765
          PLACEHOLDER-14756
          PLACEHOLDER-14766
          PLACEHOLDER-14764]
         (let*
          [PLACEHOLDER-14767
           PLACEHOLDER-14765
           PLACEHOLDER-14768
           (clojure.core/seq PLACEHOLDER-14767)
           PLACEHOLDER-14769
           (clojure.core/first PLACEHOLDER-14768)
           PLACEHOLDER-14770
           (clojure.core/next PLACEHOLDER-14768)
           PLACEHOLDER-14771
           PLACEHOLDER-14769
           PLACEHOLDER-14772
           PLACEHOLDER-14770
           PLACEHOLDER-14773
           PLACEHOLDER-14767
           PLACEHOLDER-14774
           PLACEHOLDER-14766]
          (if
           (empty? PLACEHOLDER-14773)
           (apply str PLACEHOLDER-14774)
           (if
            (number? PLACEHOLDER-14771)
            (recur
             (rest PLACEHOLDER-14772)
             (conj
              PLACEHOLDER-14774
              (apply
               str
               (repeat PLACEHOLDER-14771 (first PLACEHOLDER-14772)))))
            (recur
             PLACEHOLDER-14772
             (conj
              PLACEHOLDER-14774
              (str PLACEHOLDER-14771)))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11134
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11134))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (use '[clojure.string :only [join blank?]])
   (use '[clojure.edn :only [read-string]])
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11135]
      (do
       (def
        encode-part
        (fn*
         ([PLACEHOLDER-11136]
          (let*
           [PLACEHOLDER-11137
            (first PLACEHOLDER-11136)
            PLACEHOLDER-11138
            (clojure.lang.RT/count PLACEHOLDER-11136)]
           (if
            (clojure.lang.Util/equiv 1 PLACEHOLDER-11138)
            PLACEHOLDER-11137
            (str PLACEHOLDER-11138 PLACEHOLDER-11137))))))
       (join
        (map
         encode-part
         (partition-by identity PLACEHOLDER-11135)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11139]
      (do
       (def
        read-num
        (fn*
         ([PLACEHOLDER-11140]
          (if
           (blank? PLACEHOLDER-11140)
           false
           (let*
            [PLACEHOLDER-11141 (read-string PLACEHOLDER-11140)]
            (if
             (number? PLACEHOLDER-11141)
             PLACEHOLDER-11141
             false))))))
       (:s
        (reduce
         (fn*
          ([PLACEHOLDER-11142 PLACEHOLDER-11143]
           (let*
            [PLACEHOLDER-11144 (read-num PLACEHOLDER-11143)]
            (if
             PLACEHOLDER-11144
             (assoc PLACEHOLDER-11142 :n PLACEHOLDER-11144)
             (assoc
              PLACEHOLDER-11142
              :n
              1
              :s
              (str
               (:s PLACEHOLDER-11142)
               (join
                (repeat
                 (:n PLACEHOLDER-11142)
                 PLACEHOLDER-11143))))))))
         {:n 1, :s ""}
         (re-seq (re-pattern "\\d+|\\D") PLACEHOLDER-11139))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11978
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11978))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11979]
      (str/join
       (map
        compress
        (partition-by
         identity
         (str/split PLACEHOLDER-11979 (re-pattern ""))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11980]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-11981]
          (let*
           [PLACEHOLDER-11982
            PLACEHOLDER-11981
            PLACEHOLDER-11983
            (clojure.lang.RT/nth PLACEHOLDER-11982 0 nil)
            PLACEHOLDER-11984
            (clojure.lang.RT/nth PLACEHOLDER-11982 1 nil)
            PLACEHOLDER-11985
            (clojure.lang.RT/nth PLACEHOLDER-11982 2 nil)]
           (expand PLACEHOLDER-11984 PLACEHOLDER-11985))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-11980))))))
   (def
    compress
    (fn*
     ([PLACEHOLDER-11986]
      (let*
       [PLACEHOLDER-11987
        (clojure.lang.RT/count PLACEHOLDER-11986)
        PLACEHOLDER-11988
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-11987 1)
         nil
         PLACEHOLDER-11987)
        PLACEHOLDER-11989
        (first PLACEHOLDER-11986)]
       (str PLACEHOLDER-11988 PLACEHOLDER-11989)))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-11990 PLACEHOLDER-11991]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-11990 "")
       PLACEHOLDER-11991
       (str/join
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-11990)
         PLACEHOLDER-11991)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8424
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8424))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8425]
      (let*
       [PLACEHOLDER-8426
        (s/split PLACEHOLDER-8425 (re-pattern "(?<=(.))(?!\\1)"))]
       (s/join
        (map
         (fn*
          ([PLACEHOLDER-8427]
           (str
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-8427)
              1)
             (clojure.lang.RT/count PLACEHOLDER-8427))
            (first PLACEHOLDER-8427))))
         PLACEHOLDER-8426))))))
   (def
    run-length-encode2
    (fn*
     ([PLACEHOLDER-8428]
      (s/join
       (map
        (fn*
         ([PLACEHOLDER-8429]
          (str
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-8429)
             1)
            (clojure.lang.RT/count PLACEHOLDER-8429))
           (first PLACEHOLDER-8429))))
        (partition-by identity PLACEHOLDER-8428))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8430]
      (let*
       [PLACEHOLDER-8431
        (re-seq (re-pattern "(\\d*)([\\D])") PLACEHOLDER-8430)]
       (s/join
        (mapcat
         (fn*
          ([PLACEHOLDER-8432]
           (if
            (empty? (PLACEHOLDER-8432 1))
            (PLACEHOLDER-8432 0)
            (repeat
             (java.lang.Integer/parseInt (second PLACEHOLDER-8432))
             (PLACEHOLDER-8432 2)))))
         PLACEHOLDER-8431)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11844
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11844))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11845]
      (let*
       [PLACEHOLDER-11846
        (clojure.lang.RT/count PLACEHOLDER-11845)
        PLACEHOLDER-11847
        (first PLACEHOLDER-11845)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-11846 1)
        (str PLACEHOLDER-11846 PLACEHOLDER-11847)
        PLACEHOLDER-11847)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11848]
      (let*
       [PLACEHOLDER-11849
        PLACEHOLDER-11848
        PLACEHOLDER-11850
        (clojure.lang.RT/nth PLACEHOLDER-11849 0 nil)
        PLACEHOLDER-11851
        (clojure.lang.RT/nth PLACEHOLDER-11849 1 nil)
        PLACEHOLDER-11852
        (clojure.lang.RT/nth PLACEHOLDER-11849 2 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11851 "")
        PLACEHOLDER-11852
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-11851)
         PLACEHOLDER-11852))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11853]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-11853))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11854]
      (apply
       str
       (mapcat
        decode
        (re-seq
         (re-pattern "(\\d*)([a-zA-Z ])")
         PLACEHOLDER-11854))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13568
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13568))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-13569] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-13570] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10014
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10014))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (do (def digit?))
   (do (def normalize-partition))
   (do (def ensure-first-counter))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10015]
      (apply
       str
       (remove
        #{1}
        (flatten
         (map
          (juxt count first)
          (partition-by identity PLACEHOLDER-10015))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10016]
      (apply
       str
       (flatten
        (map
         (partial apply repeat)
         (partition
          2
          (ensure-first-counter
           (flatten
            (map
             normalize-partition
             (partition-by digit? PLACEHOLDER-10016)))))))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-10017]
      (contains? #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9} PLACEHOLDER-10017))))
   (def
    normalize-partition
    (fn*
     ([PLACEHOLDER-10018]
      (let*
       [PLACEHOLDER-10019
        PLACEHOLDER-10018
        PLACEHOLDER-10020
        (clojure.lang.RT/nth PLACEHOLDER-10019 0 nil)
        PLACEHOLDER-10021
        PLACEHOLDER-10019]
       (if
        (digit? PLACEHOLDER-10020)
        (java.lang.Integer/parseInt (apply str PLACEHOLDER-10021))
        (interpose 1 PLACEHOLDER-10021))))))
   (def
    ensure-first-counter
    (fn*
     ([PLACEHOLDER-10022]
      (let*
       [PLACEHOLDER-10023
        PLACEHOLDER-10022
        PLACEHOLDER-10024
        (clojure.lang.RT/nth PLACEHOLDER-10023 0 nil)
        PLACEHOLDER-10025
        PLACEHOLDER-10023]
       (if
        (integer? PLACEHOLDER-10024)
        PLACEHOLDER-10025
        (conj PLACEHOLDER-10025 1)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11495
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11495))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11496]
      (clojure.string/join
       (filter
        (fn* ([PLACEHOLDER-11497] (not= "1" PLACEHOLDER-11497)))
        (map
         str
         (mapcat
          (fn*
           ([PLACEHOLDER-11498]
            (list
             (clojure.lang.RT/count PLACEHOLDER-11498)
             (first PLACEHOLDER-11498))))
          (partition-by identity PLACEHOLDER-11496))))))))
   (def
    parse
    (fn*
     ([PLACEHOLDER-11499]
      (let*
       [PLACEHOLDER-11500
        (re-find (re-pattern "^(\\d*)(.)(.*)") PLACEHOLDER-11499)
        PLACEHOLDER-11501
        (clojure.lang.RT/nth PLACEHOLDER-11500 1)
        PLACEHOLDER-11502
        (if
         (empty? PLACEHOLDER-11501)
         1
         (read-string PLACEHOLDER-11501))
        PLACEHOLDER-11503
        (clojure.lang.RT/nth PLACEHOLDER-11500 2)
        PLACEHOLDER-11504
        (clojure.lang.RT/nth PLACEHOLDER-11500 3)]
       [(clojure.string/join
         (repeat PLACEHOLDER-11502 PLACEHOLDER-11503))
        PLACEHOLDER-11504]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11505]
      (loop*
       [PLACEHOLDER-11506 PLACEHOLDER-11505 PLACEHOLDER-11507 ""]
       (if
        (empty? PLACEHOLDER-11506)
        PLACEHOLDER-11507
        (let*
         [PLACEHOLDER-11508 (parse PLACEHOLDER-11506)]
         (recur
          (last PLACEHOLDER-11508)
          (str PLACEHOLDER-11507 (first PLACEHOLDER-11508))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13818
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13818))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13819]
      (loop*
       [PLACEHOLDER-13820 PLACEHOLDER-13819 PLACEHOLDER-13821 ""]
       (if
        (empty? PLACEHOLDER-13820)
        PLACEHOLDER-13821
        (let*
         [PLACEHOLDER-13822
          (first PLACEHOLDER-13820)
          PLACEHOLDER-13824
          (take-while
           (fn*
            ([PLACEHOLDER-13823]
             (clojure.lang.Util/equiv
              PLACEHOLDER-13822
              PLACEHOLDER-13823)))
           PLACEHOLDER-13820)
          PLACEHOLDER-13825
          (clojure.lang.RT/count PLACEHOLDER-13824)
          PLACEHOLDER-13826
          (drop PLACEHOLDER-13825 PLACEHOLDER-13820)
          PLACEHOLDER-13827
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-13825 1)
           PLACEHOLDER-13825
           "")]
         (recur
          PLACEHOLDER-13826
          (str
           PLACEHOLDER-13821
           PLACEHOLDER-13827
           PLACEHOLDER-13822))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13828]
      (let*
       [PLACEHOLDER-13829
        {:counter-text [], :state :ready, :text []}
        PLACEHOLDER-13837
        (fn*
         ([PLACEHOLDER-13830 PLACEHOLDER-13831]
          (let*
           [PLACEHOLDER-13832
            PLACEHOLDER-13830
            PLACEHOLDER-13833
            (if
             (clojure.core/seq? PLACEHOLDER-13832)
             (if
              (clojure.core/next PLACEHOLDER-13832)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-13832))
              (if
               (clojure.core/seq PLACEHOLDER-13832)
               (clojure.core/first PLACEHOLDER-13832)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-13832)
            PLACEHOLDER-13834
            (clojure.lang.RT/get PLACEHOLDER-13833 :text)
            PLACEHOLDER-13835
            (clojure.lang.RT/get PLACEHOLDER-13833 :counter-text)
            PLACEHOLDER-13836
            (clojure.lang.RT/get PLACEHOLDER-13833 :_)]
           {:counter-text (conj PLACEHOLDER-13835 PLACEHOLDER-13831),
            :state :counting,
            :text PLACEHOLDER-13834})))
        PLACEHOLDER-13847
        (fn*
         ([PLACEHOLDER-13838 PLACEHOLDER-13839]
          (let*
           [PLACEHOLDER-13840
            PLACEHOLDER-13838
            PLACEHOLDER-13841
            (if
             (clojure.core/seq? PLACEHOLDER-13840)
             (if
              (clojure.core/next PLACEHOLDER-13840)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-13840))
              (if
               (clojure.core/seq PLACEHOLDER-13840)
               (clojure.core/first PLACEHOLDER-13840)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-13840)
            PLACEHOLDER-13842
            (clojure.lang.RT/get PLACEHOLDER-13841 :text)
            PLACEHOLDER-13843
            (clojure.lang.RT/get PLACEHOLDER-13841 :counter-text)
            PLACEHOLDER-13844
            (clojure.lang.RT/get PLACEHOLDER-13841 :state)]
           (let*
            [PLACEHOLDER-13845 = PLACEHOLDER-13846 PLACEHOLDER-13844]
            (if
             (PLACEHOLDER-13845 :ready PLACEHOLDER-13846)
             {:counter-text [],
              :state :ready,
              :text (conj PLACEHOLDER-13842 PLACEHOLDER-13839)}
             (if
              (PLACEHOLDER-13845 :counting PLACEHOLDER-13846)
              {:counter-text [],
               :state :ready,
               :text
               (into
                PLACEHOLDER-13842
                (repeat
                 (clojure.edn/read-string
                  (clojure.string/join PLACEHOLDER-13843))
                 PLACEHOLDER-13839))}
              (throw
               (new
                java.lang.IllegalArgumentException
                (clojure.core/str
                 "No matching clause: "
                 PLACEHOLDER-13846)))))))))]
       (clojure.string/join
        (:text
         (reduce
          (fn*
           ([PLACEHOLDER-13848 PLACEHOLDER-13849]
            (if
             (java.lang.Character/isDigit PLACEHOLDER-13849)
             (PLACEHOLDER-13837 PLACEHOLDER-13848 PLACEHOLDER-13849)
             (PLACEHOLDER-13847 PLACEHOLDER-13848 PLACEHOLDER-13849))))
          PLACEHOLDER-13829
          PLACEHOLDER-13828))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12622
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12622))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12623]
      (let*
       [PLACEHOLDER-12624
        (re-seq (re-pattern "(\\w|\\W)\\1*") PLACEHOLDER-12623)]
       (apply
        str
        (filter
         (fn* ([PLACEHOLDER-12625] (not= 1 PLACEHOLDER-12625)))
         (interleave
          (map count (map first PLACEHOLDER-12624))
          (map last PLACEHOLDER-12624))))))))
   (def
    decode-run
    (fn*
     ([PLACEHOLDER-12626]
      (let*
       [PLACEHOLDER-12627
        (re-seq (re-pattern "\\d+|\\D") PLACEHOLDER-12626)]
       (if
        (java.lang.Character/isDigit (first (first PLACEHOLDER-12627)))
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt (first PLACEHOLDER-12627))
          (last PLACEHOLDER-12627)))
        (str (first PLACEHOLDER-12627)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12628]
      (apply
       str
       (map
        decode-run
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-12628)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12551
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12551))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-12552 PLACEHOLDER-12553]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-12553 1)
       (str PLACEHOLDER-12552)
       (str PLACEHOLDER-12553 PLACEHOLDER-12552)))))
   (def
    execute-en
    (fn*
     ([PLACEHOLDER-12554
       PLACEHOLDER-12555
       PLACEHOLDER-12556
       PLACEHOLDER-12557]
      (if
       (empty? PLACEHOLDER-12554)
       (str
        PLACEHOLDER-12557
        (encode PLACEHOLDER-12555 PLACEHOLDER-12556))
       (if
        (clojure.lang.Util/equiv
         (first PLACEHOLDER-12554)
         PLACEHOLDER-12555)
        (recur
         (rest PLACEHOLDER-12554)
         PLACEHOLDER-12555
         (clojure.lang.Numbers/add 1 PLACEHOLDER-12556)
         PLACEHOLDER-12557)
        (if
         :else
         (recur
          (rest PLACEHOLDER-12554)
          (first PLACEHOLDER-12554)
          1
          (str
           PLACEHOLDER-12557
           (encode PLACEHOLDER-12555 PLACEHOLDER-12556)))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12558]
      (execute-en
       (rest PLACEHOLDER-12558)
       (first PLACEHOLDER-12558)
       1
       ""))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12559 PLACEHOLDER-12560 PLACEHOLDER-12561]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-12560 0)
       PLACEHOLDER-12561
       (if
        :else
        (recur
         PLACEHOLDER-12559
         (clojure.lang.Numbers/minus PLACEHOLDER-12560 1)
         (str PLACEHOLDER-12561 PLACEHOLDER-12559)))))))
   (def
    execute
    (fn*
     ([PLACEHOLDER-12562 PLACEHOLDER-12563 PLACEHOLDER-12564]
      (if
       (empty? PLACEHOLDER-12562)
       PLACEHOLDER-12564
       (if
        (java.lang.Character/isDigit (first PLACEHOLDER-12562))
        (recur
         (rest PLACEHOLDER-12562)
         (str PLACEHOLDER-12563 (first PLACEHOLDER-12562))
         PLACEHOLDER-12564)
        (if
         (clojure.lang.Util/identical PLACEHOLDER-12563 nil)
         (recur
          (rest PLACEHOLDER-12562)
          nil
          (str PLACEHOLDER-12564 (first PLACEHOLDER-12562)))
         (if
          :else
          (recur
           (rest PLACEHOLDER-12562)
           nil
           (str
            PLACEHOLDER-12564
            (decode
             (first PLACEHOLDER-12562)
             (read-string PLACEHOLDER-12563)
             ""))))))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-12565] (execute PLACEHOLDER-12565 nil "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10118
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10118))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require
           '[clojure.string :as str]
           '[clojure.edn :as edn]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    deconstruct
    (fn*
     ([PLACEHOLDER-10119]
      (let*
       [PLACEHOLDER-10121
        (edn/read-string
         (apply
          str
          (filter
           (fn*
            ([PLACEHOLDER-10120]
             (java.lang.Character/isDigit PLACEHOLDER-10120)))
           PLACEHOLDER-10119)))
        PLACEHOLDER-10122
        (last (str/split PLACEHOLDER-10119 (re-pattern "")))]
       (str/join (repeat PLACEHOLDER-10121 PLACEHOLDER-10122))))))
   (def
    construct
    (fn*
     ([PLACEHOLDER-10123]
      (str
       (clojure.lang.RT/count PLACEHOLDER-10123)
       (first PLACEHOLDER-10123)))))
   (def
    build-encoding
    (fn*
     ([PLACEHOLDER-10124]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-10124))
       (first PLACEHOLDER-10124)
       (construct PLACEHOLDER-10124)))))
   (def
    build-decoding
    (fn*
     ([PLACEHOLDER-10125]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-10125))
       (first PLACEHOLDER-10125)
       (deconstruct PLACEHOLDER-10125)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10126]
      (str/join
       (map
        build-encoding
        (partition-by identity PLACEHOLDER-10126))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10127]
      (str/join
       (map
        build-decoding
        (re-seq
         (re-pattern "[\\d]+.|[a-zA-Z\\s]")
         PLACEHOLDER-10127)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8062
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8062))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :refer [join]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (do
    (def count-next)
    (def join-pair)
    (def unfold-join-pair)
    (def parse-int)
    (def repeat*))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8063]
      (reduce
       join-pair
       ""
       (reverse (reduce count-next [] PLACEHOLDER-8063))))))
   (def
    count-next
    (fn*
     ([PLACEHOLDER-8064 PLACEHOLDER-8065]
      (let*
       [PLACEHOLDER-8066
        PLACEHOLDER-8064
        PLACEHOLDER-8067
        (clojure.core/seq PLACEHOLDER-8066)
        PLACEHOLDER-8068
        (clojure.core/first PLACEHOLDER-8067)
        PLACEHOLDER-8069
        (clojure.core/next PLACEHOLDER-8067)
        PLACEHOLDER-8070
        PLACEHOLDER-8068
        PLACEHOLDER-8071
        (clojure.lang.RT/nth PLACEHOLDER-8070 0 nil)
        PLACEHOLDER-8072
        (clojure.lang.RT/nth PLACEHOLDER-8070 1 nil)
        PLACEHOLDER-8073
        PLACEHOLDER-8069
        PLACEHOLDER-8074
        PLACEHOLDER-8066]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-8071 PLACEHOLDER-8065)
        (cons
         [PLACEHOLDER-8071 (clojure.lang.Numbers/inc PLACEHOLDER-8072)]
         PLACEHOLDER-8073)
        (cons [PLACEHOLDER-8065 1] PLACEHOLDER-8074))))))
   (def
    join-pair
    (fn*
     ([PLACEHOLDER-8075 PLACEHOLDER-8076]
      (let*
       [PLACEHOLDER-8077
        PLACEHOLDER-8076
        PLACEHOLDER-8078
        (clojure.lang.RT/nth PLACEHOLDER-8077 0 nil)
        PLACEHOLDER-8079
        (clojure.lang.RT/nth PLACEHOLDER-8077 1 nil)]
       (str
        PLACEHOLDER-8075
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-8079 1)
         PLACEHOLDER-8079
         "")
        PLACEHOLDER-8078)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8080]
      (let*
       [PLACEHOLDER-8081
        (re-seq
         (re-pattern "(\\d+)?([a-zA-Z\\s]{1})")
         PLACEHOLDER-8080)]
       (reduce unfold-join-pair "" PLACEHOLDER-8081)))))
   (def
    unfold-join-pair
    (fn*
     ([PLACEHOLDER-8082 PLACEHOLDER-8083]
      (let*
       [PLACEHOLDER-8084
        PLACEHOLDER-8083
        PLACEHOLDER-8085
        (clojure.lang.RT/nth PLACEHOLDER-8084 0 nil)
        PLACEHOLDER-8086
        (clojure.lang.RT/nth PLACEHOLDER-8084 1 nil)
        PLACEHOLDER-8087
        (clojure.lang.RT/nth PLACEHOLDER-8084 2 nil)]
       (str
        PLACEHOLDER-8082
        (join (repeat* PLACEHOLDER-8086 PLACEHOLDER-8087)))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-8088]
      (java.lang.Integer/parseInt PLACEHOLDER-8088))))
   (def
    repeat*
    (fn*
     ([PLACEHOLDER-8089 PLACEHOLDER-8090]
      (repeat
       (if
        (clojure.lang.Util/identical PLACEHOLDER-8089 nil)
        1
        (parse-int PLACEHOLDER-8089))
       PLACEHOLDER-8090)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14919
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14919))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-14920]
      (do
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count (set PLACEHOLDER-14920)))
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(= 1 (count (set pfx))))))))
       (str
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/count PLACEHOLDER-14920)
          1)
         ""
         (clojure.lang.RT/count PLACEHOLDER-14920))
        (first PLACEHOLDER-14920))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14921]
      (do
       (if
        (clojure.lang.Util/identical
         (re-find (re-pattern "[^A-Za-z ]") PLACEHOLDER-14921)
         nil)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str
            '(nil? (re-find (re-pattern "[^A-Za-z ]") plain-text)))))))
       (let*
        [PLACEHOLDER-14922
         (re-find (re-pattern "^(.)\\1*") PLACEHOLDER-14921)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-14922 nil)
         ""
         (let*
          [PLACEHOLDER-14923 (first PLACEHOLDER-14922)]
          (str
           (encode-run PLACEHOLDER-14923)
           (run-length-encode
            (subs
             PLACEHOLDER-14921
             (clojure.lang.RT/count PLACEHOLDER-14923)))))))))))
   (def
    third
    (fn*
     ([PLACEHOLDER-14924] (clojure.lang.RT/nth PLACEHOLDER-14924 2))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-14925]
      (if
       (empty? PLACEHOLDER-14925)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-14925)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14926]
      (do
       (if
        (clojure.lang.Util/identical
         (re-find (re-pattern "[^A-Za-z0-9 ]") PLACEHOLDER-14926)
         nil)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str
            '(nil?
              (re-find (re-pattern "[^A-Za-z0-9 ]") cipher-text)))))))
       (let*
        [PLACEHOLDER-14927
         (re-find (re-pattern "(\\d*)([A-Za-z ])") PLACEHOLDER-14926)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-14927 nil)
         ""
         (let*
          [PLACEHOLDER-14928
           (first PLACEHOLDER-14927)
           PLACEHOLDER-14929
           (second PLACEHOLDER-14927)
           PLACEHOLDER-14930
           (third PLACEHOLDER-14927)]
          (apply
           str
           (concat
            (repeat (parse-int PLACEHOLDER-14929) PLACEHOLDER-14930)
            (run-length-decode
             (subs
              PLACEHOLDER-14926
              (clojure.lang.RT/count PLACEHOLDER-14928)))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10462
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10462))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-char
    (fn*
     ([PLACEHOLDER-10463 PLACEHOLDER-10464]
      (if
       (clojure.lang.Util/equiv
        (last (last PLACEHOLDER-10463))
        PLACEHOLDER-10464)
       (update-in
        PLACEHOLDER-10463
        [(clojure.lang.Numbers/dec
          (clojure.lang.RT/count PLACEHOLDER-10463))
         0]
        inc)
       (conj PLACEHOLDER-10463 [1 PLACEHOLDER-10464])))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10465]
      (let*
       [PLACEHOLDER-10468
        (reduce
         (fn*
          ([PLACEHOLDER-10466 PLACEHOLDER-10467]
           (count-char PLACEHOLDER-10466 PLACEHOLDER-10467)))
         []
         PLACEHOLDER-10465)
        PLACEHOLDER-10470
        (map
         (fn*
          ([PLACEHOLDER-10469]
           (if
            (clojure.lang.Util/equiv 1 (first PLACEHOLDER-10469))
            (rest PLACEHOLDER-10469)
            PLACEHOLDER-10469)))
         PLACEHOLDER-10468)]
       (apply str (apply concat PLACEHOLDER-10470))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-10471]
      (try
       (java.lang.Integer/parseInt (str PLACEHOLDER-10471))
       (catch Exception PLACEHOLDER-10472 nil)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10473]
      (loop*
       [PLACEHOLDER-10474
        []
        PLACEHOLDER-10475
        PLACEHOLDER-10473
        PLACEHOLDER-10476
        ""]
       (if
        (empty? PLACEHOLDER-10475)
        PLACEHOLDER-10476
        (let*
         [PLACEHOLDER-10477 (parse-int (first PLACEHOLDER-10475))]
         (if
          (int? PLACEHOLDER-10477)
          (recur
           [PLACEHOLDER-10477]
           (rest PLACEHOLDER-10475)
           PLACEHOLDER-10476)
          (if
           (empty? PLACEHOLDER-10474)
           (recur
            []
            (rest PLACEHOLDER-10475)
            (str PLACEHOLDER-10476 (first PLACEHOLDER-10475)))
           (recur
            []
            (rest PLACEHOLDER-10475)
            (str
             PLACEHOLDER-10476
             (apply
              str
              (repeat
               (first PLACEHOLDER-10474)
               (first PLACEHOLDER-10475))))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8872
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8872))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as str])
   (def
    split-sections
    (fn*
     ([PLACEHOLDER-8873]
      (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8873)))))
   (def
    split-encoded
    (fn*
     ([PLACEHOLDER-8874]
      (re-seq (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-8874))))
   (def
    parse-count
    (fn*
     ([PLACEHOLDER-8875]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-8875)
        0)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-8875)))))
   (def
    expand-decoded
    (fn*
     ([PLACEHOLDER-8876]
      (str/join
       ""
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-8877]
           (repeat
            (parse-count (clojure.lang.RT/get PLACEHOLDER-8877 1))
            (clojure.lang.RT/get PLACEHOLDER-8877 2))))
         PLACEHOLDER-8876))))))
   (def
    compress-seq
    (fn*
     ([PLACEHOLDER-8878]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-8878)
        1)
       PLACEHOLDER-8878
       (format
        "%d%s"
        (clojure.lang.RT/count PLACEHOLDER-8878)
        (first PLACEHOLDER-8878))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8879]
      (str/join
       ""
       (map compress-seq (split-sections PLACEHOLDER-8879))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8880]
      (expand-decoded (split-encoded PLACEHOLDER-8880)))))
   (run-length-encode "AABBCCDDDDEEFGGGAAAA")
   (run-length-encode "DAVIDBRAAAR")
   (run-length-decode "2A2BC10D"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11563
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11563))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.edn :refer [read-string]]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    str->encode-str
    (fn*
     ([PLACEHOLDER-11564]
      (let*
       [PLACEHOLDER-11565 (clojure.lang.RT/count PLACEHOLDER-11564)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11565 1)
        PLACEHOLDER-11564
        (str PLACEHOLDER-11565 (first PLACEHOLDER-11564)))))))
   (def
    char-is-number?
    (fn*
     ([PLACEHOLDER-11566]
      (if
       (char? PLACEHOLDER-11566)
       (let*
        [PLACEHOLDER-11567
         PLACEHOLDER-11566
         PLACEHOLDER-11568
         (if
          (clojure.lang.Util/identical PLACEHOLDER-11567 nil)
          nil
          (str PLACEHOLDER-11567))
         PLACEHOLDER-11569
         (if
          (clojure.lang.Util/identical PLACEHOLDER-11568 nil)
          nil
          (read-string PLACEHOLDER-11568))]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-11569 nil)
         nil
         (number? PLACEHOLDER-11569)))
       (if
        (let*
         [PLACEHOLDER-11570 (string? PLACEHOLDER-11566)]
         (if
          PLACEHOLDER-11570
          (not (clojure.string/blank? PLACEHOLDER-11566))
          PLACEHOLDER-11570))
        (let*
         [PLACEHOLDER-11571
          PLACEHOLDER-11566
          PLACEHOLDER-11572
          (if
           (clojure.lang.Util/identical PLACEHOLDER-11571 nil)
           nil
           (first PLACEHOLDER-11571))
          PLACEHOLDER-11573
          (if
           (clojure.lang.Util/identical PLACEHOLDER-11572 nil)
           nil
           (str PLACEHOLDER-11572))
          PLACEHOLDER-11574
          (if
           (clojure.lang.Util/identical PLACEHOLDER-11573 nil)
           nil
           ((fnil read-string "nil") PLACEHOLDER-11573))]
         (if
          (clojure.lang.Util/identical PLACEHOLDER-11574 nil)
          nil
          (number? PLACEHOLDER-11574)))
        (if :else false))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11575]
      (apply
       str
       (map
        str->encode-str
        (map
         (fn* ([PLACEHOLDER-11576] (apply str PLACEHOLDER-11576)))
         (partition-by identity PLACEHOLDER-11575)))))))
   (def
    partition-encoded
    (fn*
     ([PLACEHOLDER-11577]
      (map
       (partial apply str)
       (reduce
        (fn*
         ([PLACEHOLDER-11578 PLACEHOLDER-11579]
          (let*
           [PLACEHOLDER-11580
            (str PLACEHOLDER-11579)
            PLACEHOLDER-11581
            (last (last PLACEHOLDER-11578))]
           (if
            (let*
             [PLACEHOLDER-11583
              (let*
               [PLACEHOLDER-11582 (char-is-number? PLACEHOLDER-11580)]
               (if
                PLACEHOLDER-11582
                (char-is-number? PLACEHOLDER-11581)
                PLACEHOLDER-11582))]
             (if
              PLACEHOLDER-11583
              PLACEHOLDER-11583
              (let*
               [PLACEHOLDER-11584
                (not (char-is-number? PLACEHOLDER-11580))]
               (if
                PLACEHOLDER-11584
                (char-is-number? PLACEHOLDER-11581)
                PLACEHOLDER-11584))))
            (conj
             (vec (butlast PLACEHOLDER-11578))
             (str (last PLACEHOLDER-11578) PLACEHOLDER-11580))
            (conj PLACEHOLDER-11578 PLACEHOLDER-11580)))))
        []
        PLACEHOLDER-11577)))))
   (def
    encoded-sylable->decoded-str
    (fn*
     ([PLACEHOLDER-11585]
      (if
       (char-is-number? (first PLACEHOLDER-11585))
       (let*
        [PLACEHOLDER-11586
         (read-string (re-find (re-pattern "\\d*") PLACEHOLDER-11585))]
        (apply
         str
         (repeat PLACEHOLDER-11586 (last PLACEHOLDER-11585))))
       PLACEHOLDER-11585))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11587]
      (apply
       str
       (map
        encoded-sylable->decoded-str
        (partition-encoded PLACEHOLDER-11587)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10875
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10875))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress
    (fn*
     ([PLACEHOLDER-10876 PLACEHOLDER-10877 PLACEHOLDER-10878]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-10877 1)
       (conj PLACEHOLDER-10876 PLACEHOLDER-10878)
       (conj PLACEHOLDER-10876 PLACEHOLDER-10877 PLACEHOLDER-10878)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10879]
      (loop*
       [PLACEHOLDER-10880
        (first PLACEHOLDER-10879)
        PLACEHOLDER-10881
        (rest PLACEHOLDER-10879)
        PLACEHOLDER-10882
        1
        PLACEHOLDER-10883
        []]
       (if
        (empty? PLACEHOLDER-10881)
        (apply
         str
         (compress
          PLACEHOLDER-10883
          PLACEHOLDER-10882
          PLACEHOLDER-10880))
        (if
         (clojure.lang.Util/equiv
          PLACEHOLDER-10880
          (first PLACEHOLDER-10881))
         (recur
          (first PLACEHOLDER-10881)
          (rest PLACEHOLDER-10881)
          (clojure.lang.Numbers/inc PLACEHOLDER-10882)
          PLACEHOLDER-10883)
         (recur
          (first PLACEHOLDER-10881)
          (rest PLACEHOLDER-10881)
          1
          (compress
           PLACEHOLDER-10883
           PLACEHOLDER-10882
           PLACEHOLDER-10880))))))))
   (def
    decompress
    (fn*
     ([PLACEHOLDER-10884 PLACEHOLDER-10885 PLACEHOLDER-10886]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-10885 0)
       (conj PLACEHOLDER-10884 PLACEHOLDER-10886)
       (apply
        conj
        PLACEHOLDER-10884
        (repeat PLACEHOLDER-10885 PLACEHOLDER-10886))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10887]
      (loop*
       [PLACEHOLDER-10888
        (first PLACEHOLDER-10887)
        PLACEHOLDER-10889
        (rest PLACEHOLDER-10887)
        PLACEHOLDER-10890
        0
        PLACEHOLDER-10891
        []]
       (if
        (empty? PLACEHOLDER-10889)
        (apply
         str
         (decompress
          PLACEHOLDER-10891
          PLACEHOLDER-10890
          PLACEHOLDER-10888))
        (if
         (java.lang.Character/isDigit PLACEHOLDER-10888)
         (recur
          (first PLACEHOLDER-10889)
          (rest PLACEHOLDER-10889)
          (clojure.lang.Numbers/add
           (clojure.lang.Numbers/multiply PLACEHOLDER-10890 10)
           (java.lang.Integer/parseInt (str PLACEHOLDER-10888)))
          PLACEHOLDER-10891)
         (recur
          (first PLACEHOLDER-10889)
          (rest PLACEHOLDER-10889)
          0
          (decompress
           PLACEHOLDER-10891
           PLACEHOLDER-10890
           PLACEHOLDER-10888)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13133
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13133))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13134]
      (loop*
       [PLACEHOLDER-13135 "" PLACEHOLDER-13136 PLACEHOLDER-13134]
       (let*
        [PLACEHOLDER-13137
         (first PLACEHOLDER-13136)
         PLACEHOLDER-13139
         (clojure.lang.RT/count
          (take-while
           (fn*
            ([PLACEHOLDER-13138]
             (clojure.lang.Util/equiv
              PLACEHOLDER-13137
              PLACEHOLDER-13138)))
           PLACEHOLDER-13136))
         PLACEHOLDER-13140
         (if
          (clojure.lang.Numbers/gt PLACEHOLDER-13139 1)
          (str PLACEHOLDER-13139 PLACEHOLDER-13137)
          PLACEHOLDER-13137)]
        (if
         (clojure.core/not PLACEHOLDER-13137)
         PLACEHOLDER-13135
         (recur
          (str PLACEHOLDER-13135 PLACEHOLDER-13140)
          (drop PLACEHOLDER-13139 PLACEHOLDER-13136))))))))
   (def
    is-num?
    (fn*
     ([PLACEHOLDER-13141]
      (let*
       [PLACEHOLDER-13142 (clojure.lang.RT/intCast PLACEHOLDER-13141)]
       (let*
        [PLACEHOLDER-13143
         (clojure.lang.Numbers/gt PLACEHOLDER-13142 47)]
        (if
         PLACEHOLDER-13143
         (clojure.lang.Numbers/lt PLACEHOLDER-13142 58)
         PLACEHOLDER-13143))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13144]
      (loop*
       [PLACEHOLDER-13145 "" PLACEHOLDER-13146 PLACEHOLDER-13144]
       (let*
        [PLACEHOLDER-13147
         (apply str (take-while is-num? PLACEHOLDER-13146))
         PLACEHOLDER-13148
         (first
          (drop
           (clojure.lang.RT/count PLACEHOLDER-13147)
           PLACEHOLDER-13146))
         PLACEHOLDER-13149
         (if
          (clojure.lang.Numbers/lt
           0
           (clojure.lang.RT/count PLACEHOLDER-13147))
          (java.lang.Integer/parseInt PLACEHOLDER-13147)
          1)]
        (if
         (clojure.core/not PLACEHOLDER-13148)
         PLACEHOLDER-13145
         (recur
          (str
           PLACEHOLDER-13145
           (apply str (repeat PLACEHOLDER-13149 PLACEHOLDER-13148)))
          (drop
           (clojure.lang.Numbers/inc
            (clojure.lang.RT/count PLACEHOLDER-13147))
           PLACEHOLDER-13146)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13464
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13464))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13465]
      (letfn*
       [PLACEHOLDER-13466
        (fn*
         PLACEHOLDER-13467
         ([PLACEHOLDER-13468 PLACEHOLDER-13469]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-13469))
           (str PLACEHOLDER-13468 (first PLACEHOLDER-13469))
           (str
            PLACEHOLDER-13468
            (clojure.lang.RT/count PLACEHOLDER-13469)
            (first PLACEHOLDER-13469)))))]
       (reduce
        PLACEHOLDER-13466
        ""
        (partition-by identity PLACEHOLDER-13465))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13470]
      (letfn*
       [PLACEHOLDER-13471
        (fn*
         PLACEHOLDER-13472
         ([PLACEHOLDER-13473 PLACEHOLDER-13474]
          (let*
           [PLACEHOLDER-13475
            (re-find (re-pattern "\\d+") PLACEHOLDER-13474)
            PLACEHOLDER-13476
            (re-find (re-pattern "\\D") PLACEHOLDER-13474)]
           (if
            PLACEHOLDER-13475
            (str
             PLACEHOLDER-13473
             (apply
              str
              (repeat
               (new Integer PLACEHOLDER-13475)
               PLACEHOLDER-13476)))
            (str PLACEHOLDER-13473 PLACEHOLDER-13476)))))]
       (reduce
        PLACEHOLDER-13471
        ""
        (re-seq (re-pattern "\\d*\\D{1}") PLACEHOLDER-13470))))))
   (clojure.lang.Util/equiv
    (run-length-decode (run-length-encode "zzz ZZ  zZ"))
    "zzz ZZ  zZ")
   (clojure.lang.Util/equiv
    (run-length-decode "3z 2Z2 zZ")
    "zzz ZZ  zZ"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12437
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12437))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12438]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-12439]
          (str
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-12439)
             1)
            ""
            (clojure.lang.RT/count PLACEHOLDER-12439))
           (first PLACEHOLDER-12439))))
        (partition-by identity PLACEHOLDER-12438))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12440]
      (clojure.string/join
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-12441]
           (repeat
            (java.lang.Integer/parseInt
             (let*
              [PLACEHOLDER-12442
               (re-find (re-pattern "\\d+") PLACEHOLDER-12441)]
              (if PLACEHOLDER-12442 PLACEHOLDER-12442 "1")))
            (last PLACEHOLDER-12441))))
         (re-seq
          (re-pattern "\\d*[\\w*|\\s*]")
          PLACEHOLDER-12440))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14692
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14692))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14693]
      (apply
       str
       (reduce
        (fn*
         ([PLACEHOLDER-14694 PLACEHOLDER-14695]
          (let*
           [PLACEHOLDER-14696
            PLACEHOLDER-14695
            PLACEHOLDER-14697
            (clojure.lang.RT/nth PLACEHOLDER-14696 0 nil)
            PLACEHOLDER-14698
            (clojure.lang.RT/nth PLACEHOLDER-14696 1 nil)]
           (conj
            PLACEHOLDER-14694
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-14697)
              1)
             (clojure.lang.RT/count PLACEHOLDER-14697))
            PLACEHOLDER-14698))))
        []
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14693))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14699]
      (apply
       str
       (reduce
        (fn*
         ([PLACEHOLDER-14700 PLACEHOLDER-14701]
          (let*
           [PLACEHOLDER-14702
            PLACEHOLDER-14701
            PLACEHOLDER-14703
            (clojure.lang.RT/nth PLACEHOLDER-14702 0 nil)
            PLACEHOLDER-14704
            (clojure.lang.RT/nth PLACEHOLDER-14702 1 nil)
            PLACEHOLDER-14705
            (clojure.lang.RT/nth PLACEHOLDER-14702 2 nil)]
           (into
            PLACEHOLDER-14700
            (if
             (let*
              [PLACEHOLDER-14706 PLACEHOLDER-14704]
              (if
               PLACEHOLDER-14706
               PLACEHOLDER-14706
               PLACEHOLDER-14705))
             (repeat (new Integer PLACEHOLDER-14704) PLACEHOLDER-14705)
             [PLACEHOLDER-14703])))))
        []
        (re-seq (re-pattern "(\\d+)(.)|.") PLACEHOLDER-14699)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8809
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8809))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-8810 PLACEHOLDER-8811]
      (let*
       [PLACEHOLDER-8812 PLACEHOLDER-8811]
       (case*
        PLACEHOLDER-8812
        0
        0
        (str PLACEHOLDER-8811 PLACEHOLDER-8810)
        {0 [0 ""], 1 [1 (str PLACEHOLDER-8810)]}
        :compact
        :int
        nil)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8813]
      (if
       (empty? PLACEHOLDER-8813)
       ""
       (loop*
        [PLACEHOLDER-8814
         1
         PLACEHOLDER-8815
         (first PLACEHOLDER-8813)
         PLACEHOLDER-8816
         1
         PLACEHOLDER-8817
         []]
        (if
         (clojure.lang.Util/equiv
          PLACEHOLDER-8814
          (clojure.lang.RT/count PLACEHOLDER-8813))
         (apply
          str
          (conj
           PLACEHOLDER-8817
           (encode PLACEHOLDER-8815 PLACEHOLDER-8816)))
         (let*
          [PLACEHOLDER-8818
           (clojure.lang.RT/nth PLACEHOLDER-8813 PLACEHOLDER-8814)]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-8815 PLACEHOLDER-8818)
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-8814)
            PLACEHOLDER-8818
            (clojure.lang.Numbers/inc PLACEHOLDER-8816)
            PLACEHOLDER-8817)
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-8814)
            PLACEHOLDER-8818
            1
            (conj
             PLACEHOLDER-8817
             (encode PLACEHOLDER-8815 PLACEHOLDER-8816)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8819]
      (loop*
       [PLACEHOLDER-8820 0 PLACEHOLDER-8821 0 PLACEHOLDER-8822 []]
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-8820
         (clojure.lang.RT/count PLACEHOLDER-8819))
        (apply str PLACEHOLDER-8822)
        (let*
         [PLACEHOLDER-8823
          (clojure.lang.RT/nth PLACEHOLDER-8819 PLACEHOLDER-8820)]
         (if
          (java.lang.Character/isDigit PLACEHOLDER-8823)
          (let*
           [PLACEHOLDER-8824
            (clojure.lang.Numbers/add
             (java.lang.Integer/parseInt (str PLACEHOLDER-8823))
             (clojure.lang.Numbers/multiply 10 PLACEHOLDER-8821))]
           (recur
            (clojure.lang.Numbers/inc PLACEHOLDER-8820)
            PLACEHOLDER-8824
            PLACEHOLDER-8822))
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-8820)
           0
           (conj
            PLACEHOLDER-8822
            (apply
             str
             (repeat
              (clojure.lang.Numbers/max 1 PLACEHOLDER-8821)
              PLACEHOLDER-8823))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12067
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12067))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12068]
      (letfn*
       [PLACEHOLDER-12069
        (fn*
         PLACEHOLDER-12071
         ([PLACEHOLDER-12072]
          (if
           (clojure.lang.Util/equiv 1 (PLACEHOLDER-12072 1))
           (str (PLACEHOLDER-12072 0) (PLACEHOLDER-12072 2))
           (apply str PLACEHOLDER-12072))))
        PLACEHOLDER-12070
        (fn*
         PLACEHOLDER-12073
         ([PLACEHOLDER-12074 PLACEHOLDER-12075]
          (let*
           [PLACEHOLDER-12076 (PLACEHOLDER-12074 1)]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-12075
             (PLACEHOLDER-12074 2))
            (assoc
             PLACEHOLDER-12074
             1
             (clojure.lang.Numbers/inc PLACEHOLDER-12076))
            [(PLACEHOLDER-12069 PLACEHOLDER-12074)
             1
             PLACEHOLDER-12075]))))]
       (PLACEHOLDER-12069
        (reduce
         PLACEHOLDER-12070
         ["" 1 (first PLACEHOLDER-12068)]
         (rest PLACEHOLDER-12068)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12077]
      (letfn*
       [PLACEHOLDER-12078
        (fn*
         PLACEHOLDER-12080
         ([PLACEHOLDER-12081 PLACEHOLDER-12082]
          (if
           (seq (PLACEHOLDER-12081 1))
           (let*
            [PLACEHOLDER-12083
             (java.lang.Integer/parseInt (PLACEHOLDER-12081 1))]
            [(apply
              str
              (PLACEHOLDER-12081 0)
              (repeat PLACEHOLDER-12083 PLACEHOLDER-12082))
             ""])
           [(str (PLACEHOLDER-12081 0) PLACEHOLDER-12082) ""])))
        PLACEHOLDER-12079
        (fn*
         PLACEHOLDER-12084
         ([PLACEHOLDER-12085 PLACEHOLDER-12086]
          (let*
           [PLACEHOLDER-12087 PLACEHOLDER-12086]
           (case*
            PLACEHOLDER-12087
            0
            0
            (PLACEHOLDER-12078 PLACEHOLDER-12085 PLACEHOLDER-12086)
            {55
             [\7
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             54
             [\6
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             48
             [\0
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             50
             [\2
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             56
             [\8
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             51
             [\3
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             57
             [\9
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             53
             [\5
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             52
             [\4
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))],
             49
             [\1
              (assoc
               PLACEHOLDER-12085
               1
               (str (PLACEHOLDER-12085 1) PLACEHOLDER-12086))]}
            :compact
            :hash-equiv
            nil))))]
       ((reduce PLACEHOLDER-12079 ["" ""] PLACEHOLDER-12077) 0))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11912
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11912))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group-dup
    (fn*
     ([PLACEHOLDER-11913] (partition-by identity PLACEHOLDER-11913))))
   (def
    nth-of-items
    (fn*
     ([PLACEHOLDER-11914]
      (str
       (if
        (not= 1 (clojure.lang.RT/count PLACEHOLDER-11914))
        (clojure.lang.RT/count PLACEHOLDER-11914))
       (clojure.lang.RT/nth PLACEHOLDER-11914 0)))))
   (def
    run-lengte-encode
    (fn*
     ([PLACEHOLDER-11915]
      (reduce
       str
       (map nth-of-items (group-dup (seq PLACEHOLDER-11915)))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-11916] PLACEHOLDER-11916)))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9182
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9182))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9183]
      (reduce
       str
       (map
        (fn*
         ([PLACEHOLDER-9184]
          (let*
           [PLACEHOLDER-9185
            (clojure.lang.RT/count PLACEHOLDER-9184)
            PLACEHOLDER-9186
            (last PLACEHOLDER-9184)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-9185 1)
            (str PLACEHOLDER-9186)
            (reduce str [PLACEHOLDER-9185 PLACEHOLDER-9186])))))
        (reduce
         (fn*
          ([PLACEHOLDER-9187 PLACEHOLDER-9188]
           (let*
            [PLACEHOLDER-9189 (last PLACEHOLDER-9187)]
            (if
             (clojure.lang.Util/equiv
              (last PLACEHOLDER-9189)
              PLACEHOLDER-9188)
             (conj
              (vec (butlast PLACEHOLDER-9187))
              (conj PLACEHOLDER-9189 PLACEHOLDER-9188))
             (conj PLACEHOLDER-9187 [PLACEHOLDER-9188])))))
         []
         PLACEHOLDER-9183))))))
   (def run-length-decode (fn* ([PLACEHOLDER-9190] PLACEHOLDER-9190))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8463
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8463))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8464]
      (let*
       [PLACEHOLDER-8465
        (partition-by identity PLACEHOLDER-8464)
        PLACEHOLDER-8466
        (map count PLACEHOLDER-8465)
        PLACEHOLDER-8467
        (map first PLACEHOLDER-8465)
        PLACEHOLDER-8469
        (fn*
         ([PLACEHOLDER-8468]
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-8468 1)
           ""
           PLACEHOLDER-8468)))
        PLACEHOLDER-8472
        (map
         (fn*
          ([PLACEHOLDER-8470 PLACEHOLDER-8471]
           (str (PLACEHOLDER-8469 PLACEHOLDER-8470) PLACEHOLDER-8471)))
         PLACEHOLDER-8466
         PLACEHOLDER-8467)]
       (apply str PLACEHOLDER-8472)))))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-8473]
      (<=
       (clojure.lang.RT/intCast \0)
       (clojure.lang.RT/intCast PLACEHOLDER-8473)
       (clojure.lang.RT/intCast \9)))))
   (def
    append-digit
    (fn*
     ([PLACEHOLDER-8474 PLACEHOLDER-8475]
      (clojure.lang.Numbers/add
       (clojure.lang.Numbers/multiply PLACEHOLDER-8474 10)
       PLACEHOLDER-8475))))
   (def
    factor-extension
    (fn*
     ([PLACEHOLDER-8476
       PLACEHOLDER-8477
       PLACEHOLDER-8478
       PLACEHOLDER-8479]
      (let*
       [PLACEHOLDER-8480
        (partial append-digit PLACEHOLDER-8478)
        PLACEHOLDER-8481
        (new Integer (str PLACEHOLDER-8476))
        PLACEHOLDER-8482
        true]
       [(next PLACEHOLDER-8477)
        PLACEHOLDER-8482
        (PLACEHOLDER-8480 PLACEHOLDER-8481)
        PLACEHOLDER-8479]))))
   (def
    factor-application
    (fn*
     ([PLACEHOLDER-8483
       PLACEHOLDER-8484
       PLACEHOLDER-8485
       PLACEHOLDER-8486]
      (let*
       [PLACEHOLDER-8487
        false
        PLACEHOLDER-8488
        (apply
         str
         PLACEHOLDER-8486
         (repeat PLACEHOLDER-8485 PLACEHOLDER-8483))]
       [(next PLACEHOLDER-8484)
        PLACEHOLDER-8487
        0
        PLACEHOLDER-8488]))))
   (def
    simple-case
    (fn*
     ([PLACEHOLDER-8489 PLACEHOLDER-8490 PLACEHOLDER-8491]
      (let*
       [PLACEHOLDER-8492
        (str PLACEHOLDER-8491 PLACEHOLDER-8489)
        PLACEHOLDER-8493
        false]
       [(next PLACEHOLDER-8490)
        PLACEHOLDER-8493
        0
        PLACEHOLDER-8492]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8494]
      (loop*
       [PLACEHOLDER-8495 [PLACEHOLDER-8494 false 0 ""]]
       (let*
        [PLACEHOLDER-8496
         PLACEHOLDER-8495
         PLACEHOLDER-8497
         (clojure.lang.RT/nth PLACEHOLDER-8496 0 nil)
         PLACEHOLDER-8498
         (clojure.lang.RT/nth PLACEHOLDER-8496 1 nil)
         PLACEHOLDER-8499
         (clojure.lang.RT/nth PLACEHOLDER-8496 2 nil)
         PLACEHOLDER-8500
         (clojure.lang.RT/nth PLACEHOLDER-8496 3 nil)]
        (if
         (seq PLACEHOLDER-8497)
         (let*
          [PLACEHOLDER-8501 (first PLACEHOLDER-8497)]
          (if
           (is-digit? PLACEHOLDER-8501)
           (recur
            (factor-extension
             PLACEHOLDER-8501
             PLACEHOLDER-8497
             PLACEHOLDER-8499
             PLACEHOLDER-8500))
           (if
            PLACEHOLDER-8498
            (recur
             (factor-application
              PLACEHOLDER-8501
              PLACEHOLDER-8497
              PLACEHOLDER-8499
              PLACEHOLDER-8500))
            (recur
             (simple-case
              PLACEHOLDER-8501
              PLACEHOLDER-8497
              PLACEHOLDER-8500)))))
         PLACEHOLDER-8500)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10440
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10440))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10441]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10442]
          (str
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-10442)
             1)
            ""
            (clojure.lang.RT/count PLACEHOLDER-10442))
           (first PLACEHOLDER-10442))))
        (partition-by identity PLACEHOLDER-10441))))))
   (def
    third
    (fn*
     ([PLACEHOLDER-10443] (clojure.lang.RT/nth PLACEHOLDER-10443 2))))
   (def
    str->count
    (fn*
     ([PLACEHOLDER-10444]
      (if
       PLACEHOLDER-10444
       (java.lang.Integer/parseInt PLACEHOLDER-10444)
       1))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10445]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-10446]
           (repeat
            (str->count (second PLACEHOLDER-10446))
            (third PLACEHOLDER-10446))))
         (re-seq
          (re-pattern "(\\d+)?([\\w| ])")
          PLACEHOLDER-10445))))))))
  "Exception inresources/run-length-encoding/439/src/run_length_encoding.cljCould not resolve var: instring"
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8143
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8143))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-group
    (fn*
     ([PLACEHOLDER-8144]
      (let*
       [PLACEHOLDER-8145
        (clojure.lang.RT/count PLACEHOLDER-8144)
        PLACEHOLDER-8146
        (first PLACEHOLDER-8144)]
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-8145 1)
        PLACEHOLDER-8146
        (str PLACEHOLDER-8145 PLACEHOLDER-8146))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8147]
      (s/join
       (map encode-group (partition-by identity PLACEHOLDER-8147))))))
   (def
    decode-group
    (fn*
     ([PLACEHOLDER-8148]
      (let*
       [PLACEHOLDER-8150
        (let*
         [PLACEHOLDER-8149
          (re-find (re-pattern "^\\d+") PLACEHOLDER-8148)]
         (if PLACEHOLDER-8149 PLACEHOLDER-8149 "1"))
        PLACEHOLDER-8151
        (last PLACEHOLDER-8148)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-8150)
         PLACEHOLDER-8151))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8152]
      (s/join
       (map
        decode-group
        (re-seq (re-pattern "\\d*.") PLACEHOLDER-8152)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13008
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13008))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13009]
      (let*
       [PLACEHOLDER-13010
        (first PLACEHOLDER-13009)
        PLACEHOLDER-13012
        (clojure.lang.RT/count
         (take-while
          (fn*
           ([PLACEHOLDER-13011]
            (clojure.lang.Util/equiv
             PLACEHOLDER-13011
             PLACEHOLDER-13010)))
          PLACEHOLDER-13009))]
       (if
        (clojure.lang.Numbers/isZero PLACEHOLDER-13012)
        ""
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-13012 1)
         (str
          PLACEHOLDER-13010
          (run-length-encode
           (subs PLACEHOLDER-13009 PLACEHOLDER-13012)))
         (if
          :else
          (str
           PLACEHOLDER-13012
           PLACEHOLDER-13010
           (run-length-encode
            (subs PLACEHOLDER-13009 PLACEHOLDER-13012))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13013]
      (let*
       [PLACEHOLDER-13014
        (re-find (re-pattern "^\\d+") PLACEHOLDER-13013)
        PLACEHOLDER-13015
        (clojure.lang.RT/count PLACEHOLDER-13014)
        PLACEHOLDER-13016
        (if PLACEHOLDER-13014 (read-string PLACEHOLDER-13014) 1)
        PLACEHOLDER-13017
        (if
         PLACEHOLDER-13014
         (clojure.lang.RT/get PLACEHOLDER-13013 PLACEHOLDER-13015)
         (first PLACEHOLDER-13013))]
       (if
        (empty? PLACEHOLDER-13013)
        ""
        (apply
         str
         (concat
          (repeat PLACEHOLDER-13016 PLACEHOLDER-13017)
          (run-length-decode
           (subs
            PLACEHOLDER-13013
            (clojure.lang.Numbers/inc PLACEHOLDER-13015)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13666
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13666))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-same-start-chars
    (fn*
     ([PLACEHOLDER-13667]
      (conj
       []
       (clojure.lang.RT/count
        (take-while
         (fn*
          ([PLACEHOLDER-13668]
           (clojure.lang.Util/equiv
            PLACEHOLDER-13668
            (first PLACEHOLDER-13667))))
         PLACEHOLDER-13667))
       (first PLACEHOLDER-13667)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13669]
      (loop*
       [PLACEHOLDER-13670 PLACEHOLDER-13669 PLACEHOLDER-13671 ""]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-13670 "")
        PLACEHOLDER-13671
        (let*
         [PLACEHOLDER-13672 (count-same-start-chars PLACEHOLDER-13670)]
         (recur
          (subs
           PLACEHOLDER-13670
           (clojure.lang.RT/get PLACEHOLDER-13672 0))
          (apply str PLACEHOLDER-13671 PLACEHOLDER-13672))))))))
   (def
    expand-char
    (fn*
     ([PLACEHOLDER-13673 PLACEHOLDER-13674]
      (let*
       [PLACEHOLDER-13675 ""]
       (apply
        str
        (repeatedly
         PLACEHOLDER-13674
         (fn* ([] (str PLACEHOLDER-13673)))))))))
   (def
    take-int
    (fn*
     ([PLACEHOLDER-13676]
      (clojure.lang.Numbers/minus
       (clojure.lang.RT/intCast PLACEHOLDER-13676)
       48))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13677]
      (loop*
       [PLACEHOLDER-13678 "" PLACEHOLDER-13679 PLACEHOLDER-13677]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-13679 "")
        PLACEHOLDER-13678
        (recur
         (str
          PLACEHOLDER-13678
          (expand-char
           (second PLACEHOLDER-13679)
           (take-int (first PLACEHOLDER-13679))))
         (subs PLACEHOLDER-13679 2))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11274
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11274))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11275]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11276]
          (let*
           [PLACEHOLDER-11277
            (clojure.lang.RT/count PLACEHOLDER-11276)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-11277 1)
             PLACEHOLDER-11277)
            (first PLACEHOLDER-11276)))))
        (partition-by identity PLACEHOLDER-11275))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11278]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11279]
          (let*
           [PLACEHOLDER-11280
            PLACEHOLDER-11279
            PLACEHOLDER-11281
            (clojure.lang.RT/nth PLACEHOLDER-11280 0 nil)
            PLACEHOLDER-11282
            (clojure.lang.RT/nth PLACEHOLDER-11280 1 nil)
            PLACEHOLDER-11283
            (clojure.lang.RT/nth PLACEHOLDER-11280 2 nil)]
           (repeat
            (if
             (empty? PLACEHOLDER-11282)
             1
             (java.lang.Integer/parseInt PLACEHOLDER-11282))
            PLACEHOLDER-11283))))
        (re-seq
         (re-pattern "([0-9]*)([A-Za-z\\s])")
         PLACEHOLDER-11278)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10791
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10791))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10792]
      (apply
       str
       (flatten
        (map reverse (seq (frequencies PLACEHOLDER-10792))))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-10793] (print PLACEHOLDER-10793))))
   (def test-encoded-string "1l20o1l")
   (def
    test-run-length
    (fn* ([] (run-length-decode test-encoded-string)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14100
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14100))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   nil
   (def
    rle-same
    (fn*
     ([PLACEHOLDER-14101]
      (let*
       [PLACEHOLDER-14102
        (clojure.lang.RT/count PLACEHOLDER-14101)
        PLACEHOLDER-14103
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-14102 1)
         ""
         PLACEHOLDER-14102)]
       (str PLACEHOLDER-14103 (first PLACEHOLDER-14101))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14104]
      (apply
       str
       (map rle-same (partition-by identity PLACEHOLDER-14104))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-14105]
      (let*
       [PLACEHOLDER-14106
        (clojure.lang.Numbers/gte
         (clojure.lang.Util/compare PLACEHOLDER-14105 \0)
         0)]
       (if
        PLACEHOLDER-14106
        (clojure.lang.Numbers/lte
         (clojure.lang.Util/compare PLACEHOLDER-14105 \9)
         0)
        PLACEHOLDER-14106)))))
   (def
    convert-icl
    (fn*
     ([PLACEHOLDER-14107 PLACEHOLDER-14108]
      (let*
       [PLACEHOLDER-14109
        (java.lang.Integer/parseInt (apply str PLACEHOLDER-14107))]
       (apply str (repeat PLACEHOLDER-14109 PLACEHOLDER-14108))))))
   (def
    rld-helper
    (fn*
     ([PLACEHOLDER-14110 PLACEHOLDER-14111 PLACEHOLDER-14112]
      (if
       (empty? PLACEHOLDER-14110)
       (apply str (reverse PLACEHOLDER-14112))
       (let*
        [PLACEHOLDER-14113 (first PLACEHOLDER-14110)]
        (if
         (digit? PLACEHOLDER-14113)
         (recur
          (rest PLACEHOLDER-14110)
          (cons PLACEHOLDER-14113 PLACEHOLDER-14111)
          PLACEHOLDER-14112)
         (if
          (empty? PLACEHOLDER-14111)
          (recur
           (rest PLACEHOLDER-14110)
           PLACEHOLDER-14111
           (cons (str PLACEHOLDER-14113) PLACEHOLDER-14112))
          (recur
           (rest PLACEHOLDER-14110)
           '()
           (cons
            (convert-icl PLACEHOLDER-14111 PLACEHOLDER-14113)
            PLACEHOLDER-14112)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14114]
      (loop*
       [PLACEHOLDER-14115
        (clojure.lang.Numbers/char_array PLACEHOLDER-14114)
        PLACEHOLDER-14116
        '()
        PLACEHOLDER-14117
        '()]
       (if
        (empty? PLACEHOLDER-14115)
        (apply str (reverse PLACEHOLDER-14117))
        (let*
         [PLACEHOLDER-14118 (first PLACEHOLDER-14115)]
         (if
          (digit? PLACEHOLDER-14118)
          (recur
           (rest PLACEHOLDER-14115)
           (cons PLACEHOLDER-14118 PLACEHOLDER-14116)
           PLACEHOLDER-14117)
          (if
           (empty? PLACEHOLDER-14116)
           (recur
            (rest PLACEHOLDER-14115)
            PLACEHOLDER-14116
            (cons (str PLACEHOLDER-14118) PLACEHOLDER-14117))
           (recur
            (rest PLACEHOLDER-14115)
            '()
            (cons
             (convert-icl PLACEHOLDER-14116 PLACEHOLDER-14118)
             PLACEHOLDER-14117)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13898
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13898))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    recursively-use-a-collection
    (fn*
     ([PLACEHOLDER-13899]
      (do
       (println (first PLACEHOLDER-13899))
       (if
        (empty? PLACEHOLDER-13899)
        (print-str "no more values to process")
        (recursively-use-a-collection (rest PLACEHOLDER-13899)))))))
   (def
    encoder
    (fn*
     ([PLACEHOLDER-13900 PLACEHOLDER-13901 PLACEHOLDER-13902] nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-13903] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-13904] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13962
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13962))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13963]
      (transduce
       (comp
        (partition-by identity)
        (mapcat
         (fn*
          ([PLACEHOLDER-13964]
           (conj
            []
            (clojure.lang.RT/count PLACEHOLDER-13964)
            (first PLACEHOLDER-13964)))))
        (filter
         (fn* ([PLACEHOLDER-13965] (not= 1 PLACEHOLDER-13965)))))
       str
       ""
       PLACEHOLDER-13963))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13966]
      (let*
       [PLACEHOLDER-13967
        (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-13966)]
       (transduce
        (comp
         (map
          (fn*
           ([PLACEHOLDER-13968]
            (conj
             []
             (re-find (re-pattern "\\d*") PLACEHOLDER-13968)
             (re-find (re-pattern "\\D") PLACEHOLDER-13968)))))
         (map
          (fn*
           ([PLACEHOLDER-13969]
            (conj
             []
             (if
              (clojure.lang.Util/equiv "" (first PLACEHOLDER-13969))
              "1"
              (first PLACEHOLDER-13969))
             (second PLACEHOLDER-13969)))))
         (mapcat
          (fn*
           ([PLACEHOLDER-13970]
            (apply
             str
             (take
              (java.lang.Integer/parseInt (first PLACEHOLDER-13970))
              (repeat (second PLACEHOLDER-13970))))))))
        str
        ""
        PLACEHOLDER-13967))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8228
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8228))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-char
    (fn*
     ([PLACEHOLDER-8229 PLACEHOLDER-8230]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-8229 nil)
       nil
       (str
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-8230 2)
         nil
         PLACEHOLDER-8230)
        PLACEHOLDER-8229)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8231]
      (let*
       [PLACEHOLDER-8232
        PLACEHOLDER-8231
        PLACEHOLDER-8233
        PLACEHOLDER-8232
        PLACEHOLDER-8234
        (clojure.core/seq PLACEHOLDER-8233)
        PLACEHOLDER-8235
        (clojure.core/first PLACEHOLDER-8234)
        PLACEHOLDER-8236
        (clojure.core/next PLACEHOLDER-8234)
        PLACEHOLDER-8237
        PLACEHOLDER-8235
        PLACEHOLDER-8238
        PLACEHOLDER-8236
        PLACEHOLDER-8239
        1
        PLACEHOLDER-8240
        nil
        PLACEHOLDER-8241
        []]
       (loop*
        [PLACEHOLDER-8242
         PLACEHOLDER-8232
         PLACEHOLDER-8243
         PLACEHOLDER-8239
         PLACEHOLDER-8244
         PLACEHOLDER-8240
         PLACEHOLDER-8245
         PLACEHOLDER-8241]
        (let*
         [PLACEHOLDER-8246
          PLACEHOLDER-8242
          PLACEHOLDER-8247
          (clojure.core/seq PLACEHOLDER-8246)
          PLACEHOLDER-8248
          (clojure.core/first PLACEHOLDER-8247)
          PLACEHOLDER-8249
          (clojure.core/next PLACEHOLDER-8247)
          PLACEHOLDER-8250
          PLACEHOLDER-8248
          PLACEHOLDER-8251
          PLACEHOLDER-8249
          PLACEHOLDER-8252
          PLACEHOLDER-8243
          PLACEHOLDER-8253
          PLACEHOLDER-8244
          PLACEHOLDER-8254
          PLACEHOLDER-8245]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-8250 nil)
          (clojure.string/join
           (conj
            PLACEHOLDER-8254
            (encode-char PLACEHOLDER-8253 PLACEHOLDER-8252)))
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-8250 PLACEHOLDER-8253)
           (recur
            PLACEHOLDER-8251
            (clojure.lang.Numbers/inc PLACEHOLDER-8252)
            PLACEHOLDER-8250
            PLACEHOLDER-8254)
           (recur
            PLACEHOLDER-8251
            1
            PLACEHOLDER-8250
            (conj
             PLACEHOLDER-8254
             (encode-char PLACEHOLDER-8253 PLACEHOLDER-8252)))))))))))
   (def
    numeric-string?
    (fn*
     ([PLACEHOLDER-8255]
      (try
       (number? (bigdec PLACEHOLDER-8255))
       (catch Exception PLACEHOLDER-8256 false)))))
   (def
    get-next-element
    (fn*
     ([PLACEHOLDER-8257]
      (if
       (clojure.lang.Util/identical (first PLACEHOLDER-8257) nil)
       [[] []]
       (let*
        [PLACEHOLDER-8258
         (numeric-string? (str (first PLACEHOLDER-8257)))]
        (if
         (true? PLACEHOLDER-8258)
         (split-with
          (fn*
           ([PLACEHOLDER-8259]
            (numeric-string? (str PLACEHOLDER-8259))))
          PLACEHOLDER-8257)
         [[(first PLACEHOLDER-8257)] (rest PLACEHOLDER-8257)]))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8260]
      (loop*
       [PLACEHOLDER-8261 PLACEHOLDER-8260 PLACEHOLDER-8262 []]
       (let*
        [PLACEHOLDER-8263
         (get-next-element PLACEHOLDER-8261)
         PLACEHOLDER-8264
         (clojure.lang.RT/nth PLACEHOLDER-8263 0 nil)
         PLACEHOLDER-8265
         (clojure.lang.RT/nth PLACEHOLDER-8263 1 nil)]
        (if
         (empty? PLACEHOLDER-8264)
         (clojure.string/join PLACEHOLDER-8262)
         (if
          (numeric-string? (clojure.string/join PLACEHOLDER-8264))
          (recur
           (rest PLACEHOLDER-8265)
           (conj
            PLACEHOLDER-8262
            (clojure.string/join
             (repeat
              (clojure.lang.RT/intCast
               (bigdec (clojure.string/join PLACEHOLDER-8264)))
              (first PLACEHOLDER-8265)))))
          (recur
           PLACEHOLDER-8265
           (conj
            PLACEHOLDER-8262
            (clojure.string/join PLACEHOLDER-8264)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11008
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11008))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    find-first-group
    (fn*
     ([PLACEHOLDER-11009]
      (re-find
       (re-pattern (str (first PLACEHOLDER-11009) "+"))
       PLACEHOLDER-11009))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11010]
      (loop*
       [PLACEHOLDER-11011 PLACEHOLDER-11010 PLACEHOLDER-11012 ""]
       (if
        (empty? PLACEHOLDER-11011)
        PLACEHOLDER-11012
        (recur
         (subs
          PLACEHOLDER-11011
          (clojure.lang.RT/count (find-first-group PLACEHOLDER-11011)))
         (str
          PLACEHOLDER-11012
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count
             (find-first-group PLACEHOLDER-11011))
            1)
           (clojure.lang.RT/count
            (find-first-group PLACEHOLDER-11011)))
          (first PLACEHOLDER-11011))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11013]
      (clojure.string/replace
       PLACEHOLDER-11013
       (re-pattern "(\\d)(\\D)")
       (apply str (repeat (java.lang.Integer/parseInt "$1") "$2")))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11897
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11897))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    explode
    (fn*
     ([PLACEHOLDER-11898]
      (let*
       [PLACEHOLDER-11899
        (clojure.lang.RT/nth PLACEHOLDER-11898 1)
        PLACEHOLDER-11900
        (clojure.lang.RT/nth PLACEHOLDER-11898 2)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt
          (if
           (clojure.string/blank? PLACEHOLDER-11899)
           "1"
           PLACEHOLDER-11899))
         PLACEHOLDER-11900))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11901]
      (let*
       [PLACEHOLDER-11902
        (re-matcher
         (re-pattern "(\\d*)([A-Z]|[a-z]|\\s)")
         PLACEHOLDER-11901)]
       (loop*
        [PLACEHOLDER-11903
         (re-find PLACEHOLDER-11902)
         PLACEHOLDER-11904
         []]
        (if
         (clojure.core/not PLACEHOLDER-11903)
         (apply str PLACEHOLDER-11904)
         (recur
          (re-find PLACEHOLDER-11902)
          (conj PLACEHOLDER-11904 (explode PLACEHOLDER-11903)))))))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11905 PLACEHOLDER-11906]
      (if
       (clojure.lang.Numbers/gt PLACEHOLDER-11905 1)
       (str PLACEHOLDER-11905 PLACEHOLDER-11906)
       PLACEHOLDER-11906))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11907]
      (if
       (clojure.lang.Util/equiv
        0
        (clojure.lang.RT/count PLACEHOLDER-11907))
       ""
       (loop*
        [PLACEHOLDER-11908
         (subs PLACEHOLDER-11907 0 1)
         PLACEHOLDER-11909
         (subs PLACEHOLDER-11907 1)
         PLACEHOLDER-11910
         1
         PLACEHOLDER-11911
         []]
        (if
         (clojure.lang.Util/equiv
          0
          (clojure.lang.RT/count PLACEHOLDER-11909))
         (apply
          str
          (conj
           PLACEHOLDER-11911
           (encode PLACEHOLDER-11910 PLACEHOLDER-11908)))
         (recur
          (subs PLACEHOLDER-11909 0 1)
          (subs PLACEHOLDER-11909 1)
          (if
           (clojure.string/starts-with?
            PLACEHOLDER-11909
            PLACEHOLDER-11908)
           (clojure.lang.Numbers/add PLACEHOLDER-11910 1)
           1)
          (if
           (clojure.string/starts-with?
            PLACEHOLDER-11909
            PLACEHOLDER-11908)
           PLACEHOLDER-11911
           (conj
            PLACEHOLDER-11911
            (encode PLACEHOLDER-11910 PLACEHOLDER-11908)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10092
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10092))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-10093]
      (let*
       [PLACEHOLDER-10094
        (clojure.lang.RT/count PLACEHOLDER-10093)
        PLACEHOLDER-10095
        (first PLACEHOLDER-10093)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-10094 1)
        (str PLACEHOLDER-10094 PLACEHOLDER-10095)
        PLACEHOLDER-10095)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-10096]
      (if
       (clojure.lang.Numbers/gt
        (clojure.lang.RT/count PLACEHOLDER-10096)
        1)
       (let*
        [PLACEHOLDER-10097
         (first PLACEHOLDER-10096)
         PLACEHOLDER-10098
         (java.lang.Integer/parseInt PLACEHOLDER-10097)
         PLACEHOLDER-10099
         (last PLACEHOLDER-10096)]
        (repeat PLACEHOLDER-10098 PLACEHOLDER-10099))
       (first PLACEHOLDER-10096)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10100]
      (let*
       [PLACEHOLDER-10101
        (partition-by identity PLACEHOLDER-10100)
        PLACEHOLDER-10102
        (map encode PLACEHOLDER-10101)]
       (string/join PLACEHOLDER-10102)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10103]
      (let*
       [PLACEHOLDER-10104
        (re-seq
         (re-pattern "\\d+\\w{1}|\\d+\\s+|\\w|\\s+")
         PLACEHOLDER-10103)
        PLACEHOLDER-10106
        (map
         (fn*
          ([PLACEHOLDER-10105]
           (re-seq (re-pattern "\\d+|\\w|\\s+") PLACEHOLDER-10105)))
         PLACEHOLDER-10104)]
       (string/join (flatten (map decode PLACEHOLDER-10106))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11396
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11396))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    flush-encoded
    (fn*
     ([PLACEHOLDER-11397 PLACEHOLDER-11398 PLACEHOLDER-11399]
      (if
       (clojure.lang.Numbers/isPos PLACEHOLDER-11398)
       (do
        (if
         (not= 1 PLACEHOLDER-11398)
         (.append PLACEHOLDER-11397 PLACEHOLDER-11398))
        (.append PLACEHOLDER-11397 PLACEHOLDER-11399))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11400]
      (let*
       [PLACEHOLDER-11401 (new StringBuilder)]
       (do
        (loop*
         [PLACEHOLDER-11402
          (seq PLACEHOLDER-11400)
          PLACEHOLDER-11403
          (first PLACEHOLDER-11402)
          PLACEHOLDER-11404
          0]
         (if
          (empty? PLACEHOLDER-11402)
          (flush-encoded
           PLACEHOLDER-11401
           PLACEHOLDER-11404
           PLACEHOLDER-11403)
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-11403
            (first PLACEHOLDER-11402))
           (recur
            (rest PLACEHOLDER-11402)
            PLACEHOLDER-11403
            (clojure.lang.Numbers/inc PLACEHOLDER-11404))
           (if
            :else
            (do
             (flush-encoded
              PLACEHOLDER-11401
              PLACEHOLDER-11404
              PLACEHOLDER-11403)
             (recur
              (rest PLACEHOLDER-11402)
              (first PLACEHOLDER-11402)
              1))))))
        (.toString PLACEHOLDER-11401))))))
   (def
    flush-decoded
    (fn*
     ([PLACEHOLDER-11405 PLACEHOLDER-11406 PLACEHOLDER-11407]
      (let*
       [PLACEHOLDER-11408
        (clojure.lang.RT/longCast
         (if
          (clojure.lang.Numbers/isZero PLACEHOLDER-11406)
          1
          PLACEHOLDER-11406))]
       (loop*
        [PLACEHOLDER-11409 0]
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-11409 PLACEHOLDER-11408)
         (do
          (.append PLACEHOLDER-11405 PLACEHOLDER-11407)
          (recur
           (clojure.lang.Numbers/unchecked_inc
            PLACEHOLDER-11409)))))))))
   (def
    add-digit
    (fn*
     ([PLACEHOLDER-11410 PLACEHOLDER-11411]
      (clojure.lang.Numbers/add
       (clojure.lang.Numbers/multiply 10 PLACEHOLDER-11410)
       (java.lang.Character/digit PLACEHOLDER-11411 10)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11412]
      (let*
       [PLACEHOLDER-11413 (new StringBuilder)]
       (do
        (loop*
         [PLACEHOLDER-11414
          (seq PLACEHOLDER-11412)
          PLACEHOLDER-11415
          0]
         (let*
          [PLACEHOLDER-11416 (first PLACEHOLDER-11414)]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-11416 nil)
           :default
           (if
            (java.lang.Character/isDigit PLACEHOLDER-11416)
            (recur
             (rest PLACEHOLDER-11414)
             (add-digit PLACEHOLDER-11415 PLACEHOLDER-11416))
            (if
             :else
             (do
              (flush-decoded
               PLACEHOLDER-11413
               PLACEHOLDER-11415
               PLACEHOLDER-11416)
              (recur (rest PLACEHOLDER-11414) 0)))))))
        (.toString PLACEHOLDER-11413)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13213
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13213))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13214]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13215]
          (let*
           [PLACEHOLDER-13216
            PLACEHOLDER-13215
            PLACEHOLDER-13217
            (clojure.lang.RT/nth PLACEHOLDER-13216 0 nil)
            PLACEHOLDER-13218
            (clojure.lang.RT/nth PLACEHOLDER-13216 1 nil)]
           (do
            str
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-13217)
              1)
             (str
              (clojure.lang.RT/count PLACEHOLDER-13217)
              PLACEHOLDER-13218)
             PLACEHOLDER-13218)))))
        (re-seq (re-pattern "([a-zA-Z ])\\1*") PLACEHOLDER-13214))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13219]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13220]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-13220)
            1)
           (apply
            str
            (repeat
             (java.lang.Integer/parseInt
              (apply str (butlast PLACEHOLDER-13220)))
             (str (last PLACEHOLDER-13220))))
           PLACEHOLDER-13220)))
        (re-seq
         (re-pattern "\\d+[a-zA-Z ]|[a-zA-Z ]")
         PLACEHOLDER-13219)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10863
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10863))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group
    (fn*
     ([PLACEHOLDER-10864]
      (map first (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-10864)))))
   (def
    run-code
    (fn*
     ([PLACEHOLDER-10865]
      (let*
       [PLACEHOLDER-10866 (clojure.lang.RT/count PLACEHOLDER-10865)]
       (vector
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-10866 1)
         PLACEHOLDER-10866)
        (first PLACEHOLDER-10865))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10867]
      (apply
       str
       (reduce
        (fn*
         ([PLACEHOLDER-10868 PLACEHOLDER-10869]
          (into PLACEHOLDER-10868 (run-code PLACEHOLDER-10869))))
        []
        (group PLACEHOLDER-10867))))))
   (def
    parse-len
    (fn*
     ([PLACEHOLDER-10870]
      (if
       (empty? PLACEHOLDER-10870)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-10870)))))
   (def
    make-run
    (fn*
     ([PLACEHOLDER-10871 PLACEHOLDER-10872]
      (apply
       str
       (repeat (parse-len PLACEHOLDER-10871) PLACEHOLDER-10872)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10873]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10874]
          (apply make-run (rest PLACEHOLDER-10874))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-10873)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9753
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9753))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9754]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9755]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-9755)
            1)
           (first PLACEHOLDER-9755)
           (str
            (clojure.lang.RT/count PLACEHOLDER-9755)
            (first PLACEHOLDER-9755)))))
        (partition-by identity PLACEHOLDER-9754))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9756]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-9757]
          (let*
           [PLACEHOLDER-9758
            PLACEHOLDER-9757
            PLACEHOLDER-9759
            (clojure.lang.RT/nth PLACEHOLDER-9758 0 nil)
            PLACEHOLDER-9760
            (clojure.lang.RT/nth PLACEHOLDER-9758 1 nil)
            PLACEHOLDER-9761
            (clojure.lang.RT/nth PLACEHOLDER-9758 2 nil)]
           (if
            PLACEHOLDER-9760
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-9760)
             PLACEHOLDER-9761)
            PLACEHOLDER-9761))))
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-9756)))))))
  "Exception inresources/run-length-encoding/252/src/run_length_encoding.cljCould not locate net/cgrand/xforms__init.class, net/cgrand/xforms.clj or net/cgrand/xforms.cljc on classpath."
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8913
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8913))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8914]
      (:enc
       (reduce
        (fn*
         ([PLACEHOLDER-8915 PLACEHOLDER-8916]
          (let*
           [PLACEHOLDER-8917
            PLACEHOLDER-8915
            PLACEHOLDER-8918
            (if
             (clojure.core/seq? PLACEHOLDER-8917)
             (if
              (clojure.core/next PLACEHOLDER-8917)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-8917))
              (if
               (clojure.core/seq PLACEHOLDER-8917)
               (clojure.core/first PLACEHOLDER-8917)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-8917)
            PLACEHOLDER-8919
            (clojure.lang.RT/get PLACEHOLDER-8918 :enc)
            PLACEHOLDER-8920
            (clojure.lang.RT/get PLACEHOLDER-8918 :prev-char)
            PLACEHOLDER-8921
            (clojure.lang.RT/get PLACEHOLDER-8918 :count)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-8916 PLACEHOLDER-8920)
            (update PLACEHOLDER-8915 :count inc)
            (assoc
             PLACEHOLDER-8915
             :count
             1
             :prev-char
             PLACEHOLDER-8916
             :enc
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-8921 0)
              PLACEHOLDER-8919
              (if
               (clojure.lang.Util/equiv PLACEHOLDER-8921 1)
               (str PLACEHOLDER-8919 PLACEHOLDER-8920)
               (if
                true
                (str
                 PLACEHOLDER-8919
                 PLACEHOLDER-8921
                 PLACEHOLDER-8920)))))))))
        {:enc "", :prev-char \0, :count 0}
        (str PLACEHOLDER-8914 "0"))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8922]
      (second
       (reduce
        (fn*
         ([PLACEHOLDER-8923 PLACEHOLDER-8924]
          (let*
           [PLACEHOLDER-8925
            PLACEHOLDER-8923
            PLACEHOLDER-8926
            (clojure.lang.RT/nth PLACEHOLDER-8925 0 nil)
            PLACEHOLDER-8927
            (clojure.lang.RT/nth PLACEHOLDER-8925 1 nil)]
           (if
            (java.lang.Character/isDigit PLACEHOLDER-8924)
            [(java.lang.Integer/parseInt
              (if
               (clojure.lang.Numbers/gt PLACEHOLDER-8926 0)
               (str PLACEHOLDER-8926 PLACEHOLDER-8924)
               (str PLACEHOLDER-8924)))
             PLACEHOLDER-8927]
            [0
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-8926 0)
              (str PLACEHOLDER-8927 PLACEHOLDER-8924)
              (str
               PLACEHOLDER-8927
               (clojure.string/join
                (repeat PLACEHOLDER-8926 PLACEHOLDER-8924))))]))))
        [0 ""]
        PLACEHOLDER-8922))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15086
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15086))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15087]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-15088]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-15088)
            1)
           (str
            (clojure.lang.RT/count PLACEHOLDER-15088)
            (first PLACEHOLDER-15088))
           (str (first PLACEHOLDER-15088)))))
        (partition-by identity PLACEHOLDER-15087))))))
   (def
    hidrater
    (fn*
     ([PLACEHOLDER-15089]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-15089)
        1)
       PLACEHOLDER-15089
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt
          (str (clojure.lang.RT/get PLACEHOLDER-15089 0)))
         (clojure.lang.RT/get PLACEHOLDER-15089 1)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15090]
      (if
       (some
        (fn*
         ([PLACEHOLDER-15091]
          (java.lang.Character/isDigit PLACEHOLDER-15091)))
        PLACEHOLDER-15090)
       (let*
        [PLACEHOLDER-15092
         (s/split
          PLACEHOLDER-15090
          (re-pattern "(?=[1-9]([A-Z]|[a-z]))"))]
        (apply str (map hidrater PLACEHOLDER-15092)))
       PLACEHOLDER-15090)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8164
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8164))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    make-tuple-str
    (fn*
     ([PLACEHOLDER-8165 PLACEHOLDER-8166]
      (str
       PLACEHOLDER-8165
       (if
        (clojure.lang.Numbers/gt (first PLACEHOLDER-8166) 1)
        (apply str PLACEHOLDER-8166)
        (last PLACEHOLDER-8166))))))
   (def
    get-arg-tuple
    (fn*
     ([PLACEHOLDER-8167 PLACEHOLDER-8168 PLACEHOLDER-8169]
      (if
       (clojure.lang.Util/equiv
        (last PLACEHOLDER-8167)
        PLACEHOLDER-8169)
       [[(clojure.lang.Numbers/inc (first PLACEHOLDER-8167))
         PLACEHOLDER-8169]
        PLACEHOLDER-8168]
       [[1 PLACEHOLDER-8169]
        (make-tuple-str PLACEHOLDER-8168 PLACEHOLDER-8167)]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8170]
      (loop*
       [PLACEHOLDER-8171
        [[0 nil] ""]
        PLACEHOLDER-8172
        PLACEHOLDER-8170]
       (let*
        [PLACEHOLDER-8173
         (first PLACEHOLDER-8171)
         PLACEHOLDER-8174
         (last PLACEHOLDER-8171)
         PLACEHOLDER-8175
         (first PLACEHOLDER-8172)]
        (if
         (empty? PLACEHOLDER-8172)
         (make-tuple-str PLACEHOLDER-8174 PLACEHOLDER-8173)
         (recur
          (get-arg-tuple
           PLACEHOLDER-8173
           PLACEHOLDER-8174
           PLACEHOLDER-8175)
          (rest PLACEHOLDER-8172))))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-8176 PLACEHOLDER-8177]
      (if
       (empty? PLACEHOLDER-8176)
       PLACEHOLDER-8177
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-8176)
         PLACEHOLDER-8177))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8178]
      (let*
       [PLACEHOLDER-8179
        (re-seq (re-pattern "\\d*[\\w\\s]{1}") PLACEHOLDER-8178)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-8180]
           (let*
            [PLACEHOLDER-8181
             (re-matches
              (re-pattern "(\\d*)([\\w\\s])")
              PLACEHOLDER-8180)]
            (decode
             (clojure.lang.RT/get PLACEHOLDER-8181 1)
             (clojure.lang.RT/get PLACEHOLDER-8181 2)))))
         PLACEHOLDER-8179)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8361
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8361))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-on-chunks
    (fn*
     ([PLACEHOLDER-8362 PLACEHOLDER-8363]
      (let*
       [PLACEHOLDER-8364 (first PLACEHOLDER-8362)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-8364 nil)
        PLACEHOLDER-8363
        (let*
         [PLACEHOLDER-8366
          (split-with
           (fn*
            ([PLACEHOLDER-8365]
             (clojure.lang.Util/equiv
              PLACEHOLDER-8364
              PLACEHOLDER-8365)))
           PLACEHOLDER-8362)]
         (split-on-chunks
          (drop-while
           (fn*
            ([PLACEHOLDER-8367]
             (clojure.lang.Util/equiv
              PLACEHOLDER-8364
              PLACEHOLDER-8367)))
           PLACEHOLDER-8362)
          (conj PLACEHOLDER-8363 (vec (first PLACEHOLDER-8366))))))))))
   (def
    reducer
    (fn*
     ([PLACEHOLDER-8368 PLACEHOLDER-8369]
      (let*
       [PLACEHOLDER-8370
        (clojure.lang.RT/count PLACEHOLDER-8369)
        PLACEHOLDER-8371
        (first PLACEHOLDER-8369)]
       (str
        PLACEHOLDER-8368
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-8370 1)
         PLACEHOLDER-8370
         "")
        PLACEHOLDER-8371)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8372]
      (let*
       [PLACEHOLDER-8373 (split-on-chunks PLACEHOLDER-8372 [])]
       (reduce reducer "" PLACEHOLDER-8373)))))
   (def
    make-seq
    (fn*
     ([PLACEHOLDER-8374]
      (let*
       [PLACEHOLDER-8375
        (re-matches (re-pattern "(\\d*)(\\w|\\s)") PLACEHOLDER-8374)
        PLACEHOLDER-8376
        (clojure.lang.RT/nth PLACEHOLDER-8375 0 nil)
        PLACEHOLDER-8377
        (clojure.lang.RT/nth PLACEHOLDER-8375 1 nil)
        PLACEHOLDER-8378
        (clojure.lang.RT/nth PLACEHOLDER-8375 2 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-8377 "")
        PLACEHOLDER-8378
        (reduce
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-8377)
          PLACEHOLDER-8378)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8379]
      (let*
       [PLACEHOLDER-8380
        (re-seq (re-pattern "\\d*[A-Za-z\\s]") PLACEHOLDER-8379)]
       (reduce str (map make-seq PLACEHOLDER-8380)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9323
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9323))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9324]
      (let*
       [PLACEHOLDER-9325 (partition-by identity PLACEHOLDER-9324)]
       (apply
        str
        (remove
         (fn*
          ([PLACEHOLDER-9326]
           (clojure.lang.Util/equiv PLACEHOLDER-9326 1)))
         (interleave
          (map count PLACEHOLDER-9325)
          (map first PLACEHOLDER-9325))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9327]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-9328]
           (repeat
            (read-string (first PLACEHOLDER-9328))
            (last PLACEHOLDER-9328))))
         (partition
          2
          (re-seq
           (re-pattern "\\d+|\\D+|\\s+")
           (str/replace
            PLACEHOLDER-9327
            (re-pattern "(?<!\\d)(\\p{Alpha}|\\s)")
            "1$1"))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14814
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14814))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    put
    (fn*
     ([PLACEHOLDER-14815 PLACEHOLDER-14816 PLACEHOLDER-14817]
      (into
       PLACEHOLDER-14815
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-14817 1)
        [PLACEHOLDER-14817 PLACEHOLDER-14816]
        [PLACEHOLDER-14816])))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14818]
      (if
       (empty? PLACEHOLDER-14818)
       ""
       (loop*
        [PLACEHOLDER-14819
         []
         PLACEHOLDER-14820
         (first PLACEHOLDER-14818)
         PLACEHOLDER-14821
         0
         PLACEHOLDER-14822
         PLACEHOLDER-14818]
        (if
         (empty? PLACEHOLDER-14822)
         (apply
          str
          (put PLACEHOLDER-14819 PLACEHOLDER-14820 PLACEHOLDER-14821))
         (let*
          [PLACEHOLDER-14823
           (first PLACEHOLDER-14822)
           PLACEHOLDER-14824
           (rest PLACEHOLDER-14822)]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-14820
            PLACEHOLDER-14823)
           (recur
            PLACEHOLDER-14819
            PLACEHOLDER-14820
            (clojure.lang.Numbers/inc PLACEHOLDER-14821)
            PLACEHOLDER-14824)
           (recur
            (put PLACEHOLDER-14819 PLACEHOLDER-14820 PLACEHOLDER-14821)
            PLACEHOLDER-14823
            1
            PLACEHOLDER-14824)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14825]
      (if
       (empty? PLACEHOLDER-14825)
       ""
       (loop*
        [PLACEHOLDER-14826
         []
         PLACEHOLDER-14827
         0
         PLACEHOLDER-14828
         PLACEHOLDER-14825]
        (if
         (empty? PLACEHOLDER-14828)
         (apply str PLACEHOLDER-14826)
         (let*
          [PLACEHOLDER-14829
           (first PLACEHOLDER-14828)
           PLACEHOLDER-14830
           (rest PLACEHOLDER-14828)]
          (if
           (java.lang.Character/isDigit PLACEHOLDER-14829)
           (recur
            PLACEHOLDER-14826
            (clojure.lang.Numbers/add
             (clojure.lang.Numbers/multiply 10 PLACEHOLDER-14827)
             (clojure.lang.Numbers/minus
              (clojure.lang.RT/intCast PLACEHOLDER-14829)
              48))
            PLACEHOLDER-14830)
           (recur
            (into
             PLACEHOLDER-14826
             (repeat
              (clojure.lang.Numbers/max 1 PLACEHOLDER-14827)
              PLACEHOLDER-14829))
            0
            PLACEHOLDER-14830))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9907
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9907))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    merge-encoder-state
    (fn*
     ([PLACEHOLDER-9908]
      (if
       (clojure.lang.Numbers/gt (PLACEHOLDER-9908 :n) 1)
       (str
        (PLACEHOLDER-9908 :e)
        (PLACEHOLDER-9908 :n)
        (PLACEHOLDER-9908 :c))
       (str (PLACEHOLDER-9908 :e) (PLACEHOLDER-9908 :c))))))
   (def
    rle-encoder
    (fn*
     ([PLACEHOLDER-9909 PLACEHOLDER-9910]
      (if
       (clojure.lang.Util/equiv (PLACEHOLDER-9909 :c) PLACEHOLDER-9910)
       {:n (clojure.lang.Numbers/inc (PLACEHOLDER-9909 :n)),
        :e (PLACEHOLDER-9909 :e),
        :c PLACEHOLDER-9910}
       {:n 1,
        :e (merge-encoder-state PLACEHOLDER-9909),
        :c PLACEHOLDER-9910}))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9911]
      (merge-encoder-state
       (reduce rle-encoder {:n 0, :e "", :c nil} PLACEHOLDER-9911)))))
   (def
    merge-decoder-state
    (fn*
     ([PLACEHOLDER-9912]
      (if
       (clojure.lang.Numbers/gt (PLACEHOLDER-9912 :n) 1)
       (apply
        str
        (PLACEHOLDER-9912 :d)
        (repeat (PLACEHOLDER-9912 :n) (PLACEHOLDER-9912 :c)))
       (str (PLACEHOLDER-9912 :d) (PLACEHOLDER-9912 :c))))))
   (def
    update-count
    (fn*
     ([PLACEHOLDER-9913 PLACEHOLDER-9914]
      (java.lang.Integer/parseInt
       (str PLACEHOLDER-9913 PLACEHOLDER-9914)))))
   (def
    rle-decoder
    (fn*
     ([PLACEHOLDER-9915 PLACEHOLDER-9916]
      (if
       (java.lang.Character/isDigit PLACEHOLDER-9916)
       {:n (update-count (PLACEHOLDER-9915 :n) PLACEHOLDER-9916),
        :c (PLACEHOLDER-9915 :c),
        :d (PLACEHOLDER-9915 :d)}
       {:n 0,
        :c PLACEHOLDER-9916,
        :d
        (merge-decoder-state
         {:n (PLACEHOLDER-9915 :n),
          :c PLACEHOLDER-9916,
          :d (PLACEHOLDER-9915 :d)})}))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9917]
      ((reduce rle-decoder {:n 0, :c nil, :d ""} PLACEHOLDER-9917)
       :d)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10052
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10052))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    inc-second-last
    (fn*
     ([PLACEHOLDER-10053]
      (update-in
       PLACEHOLDER-10053
       [(clojure.lang.Numbers/minus
         (clojure.lang.RT/count PLACEHOLDER-10053)
         2)]
       inc))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10054]
      (do
       (def res [0 (first PLACEHOLDER-10054)])
       (apply
        str
        (remove
         (fn*
          ([PLACEHOLDER-10055]
           (let*
            [PLACEHOLDER-10056
             (clojure.lang.Util/equiv 0 PLACEHOLDER-10055)]
            (if
             PLACEHOLDER-10056
             PLACEHOLDER-10056
             (clojure.lang.Util/equiv 1 PLACEHOLDER-10055)))))
         (reduce
          (fn*
           ([PLACEHOLDER-10057 PLACEHOLDER-10058]
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-10058
              (last PLACEHOLDER-10057))
             (inc-second-last PLACEHOLDER-10057)
             (conj PLACEHOLDER-10057 1 PLACEHOLDER-10058))))
          res
          PLACEHOLDER-10054)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10059]
      (apply
       str
       (apply
        concat
        (map
         (fn*
          ([PLACEHOLDER-10060]
           (do
            (def
             n
             (if
              (clojure.string/blank? (PLACEHOLDER-10060 1))
              "1"
              (PLACEHOLDER-10060 1)))
            (vec
             (replicate
              (java.lang.Integer/parseInt n)
              (PLACEHOLDER-10060 2))))))
         (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-10059))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12907
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12907))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (use 'clojure.string)
   (def
    create-groups
    (fn*
     ([PLACEHOLDER-12908]
      (let*
       [PLACEHOLDER-12909
        (seq PLACEHOLDER-12908)
        PLACEHOLDER-12916
        (fn*
         ([PLACEHOLDER-12910 PLACEHOLDER-12911]
          (let*
           [PLACEHOLDER-12912
            (last PLACEHOLDER-12910)
            PLACEHOLDER-12913
            (first PLACEHOLDER-12912)
            PLACEHOLDER-12914
            (last PLACEHOLDER-12912)
            PLACEHOLDER-12915
            (if
             (clojure.lang.Util/identical
              (butlast PLACEHOLDER-12910)
              nil)
             []
             (vec (butlast PLACEHOLDER-12910)))]
           (if
            (empty? PLACEHOLDER-12912)
            (conj PLACEHOLDER-12915 [PLACEHOLDER-12911 1])
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-12911
              PLACEHOLDER-12913)
             (conj
              PLACEHOLDER-12915
              [PLACEHOLDER-12911
               (clojure.lang.Numbers/inc PLACEHOLDER-12914)])
             (if
              :else
              (conj PLACEHOLDER-12910 [PLACEHOLDER-12911 1])))))))]
       (reduce PLACEHOLDER-12916 [[]] PLACEHOLDER-12909)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12917]
      (join
       ""
       (map
        (fn*
         ([PLACEHOLDER-12918]
          (let*
           [PLACEHOLDER-12919
            (if
             (clojure.lang.Util/equiv 1 (last PLACEHOLDER-12918))
             ""
             (last PLACEHOLDER-12918))]
           (str PLACEHOLDER-12919 (first PLACEHOLDER-12918)))))
        (create-groups PLACEHOLDER-12917))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12920]
      (let*
       [PLACEHOLDER-12921
        (map
         first
         (re-seq
          (re-pattern "(\\d+[a-zA-Z\\s])|[a-zA-Z\\s]")
          PLACEHOLDER-12920))]
       (join
        ""
        (map
         (fn*
          ([PLACEHOLDER-12922]
           (let*
            [PLACEHOLDER-12923
             (re-find (re-pattern "^\\d+") PLACEHOLDER-12922)
             PLACEHOLDER-12924
             (if
              (clojure.lang.Util/identical PLACEHOLDER-12923 nil)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-12923))
             PLACEHOLDER-12925
             (re-find (re-pattern "[a-zA-Z\\s]$") PLACEHOLDER-12922)]
            (join
             ""
             (replicate PLACEHOLDER-12924 PLACEHOLDER-12925)))))
         PLACEHOLDER-12921)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14452
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14452))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14453]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-14454]
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-14454))
            (first PLACEHOLDER-14454)
            (vector
             (clojure.lang.RT/count PLACEHOLDER-14454)
             (first PLACEHOLDER-14454)))))
         (partition-by identity PLACEHOLDER-14453)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14455]
      (loop*
       [PLACEHOLDER-14456 PLACEHOLDER-14455 PLACEHOLDER-14457 []]
       (if
        (empty? PLACEHOLDER-14456)
        (apply str PLACEHOLDER-14457)
        (let*
         [PLACEHOLDER-14459
          (split-with
           (fn*
            ([PLACEHOLDER-14458]
             (java.lang.Character/isDigit PLACEHOLDER-14458)))
           PLACEHOLDER-14456)
          PLACEHOLDER-14460
          (clojure.lang.RT/nth PLACEHOLDER-14459 0 nil)
          PLACEHOLDER-14461
          (clojure.lang.RT/nth PLACEHOLDER-14459 1 nil)
          PLACEHOLDER-14462
          (if
           (empty? PLACEHOLDER-14460)
           1
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-14460)))
          PLACEHOLDER-14463
          (first PLACEHOLDER-14461)
          PLACEHOLDER-14464
          (repeat PLACEHOLDER-14462 PLACEHOLDER-14463)]
         (recur
          (rest PLACEHOLDER-14461)
          (flatten (cons PLACEHOLDER-14457 PLACEHOLDER-14464))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8797
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8797))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def matcher (re-pattern "(?=\\d{1,2})\\d{1,2}\\D{1}|\\D{1}"))
   (def seq->str (partial apply str))
   (def
    group
    (fn*
     ([PLACEHOLDER-8798 PLACEHOLDER-8799]
      (partition-by PLACEHOLDER-8798 PLACEHOLDER-8799))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-8800]
      (let*
       [PLACEHOLDER-8801 (clojure.lang.RT/count PLACEHOLDER-8800)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-8801)
        (first PLACEHOLDER-8800)
        (str PLACEHOLDER-8801 (first PLACEHOLDER-8800)))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-8802]
      (let*
       [PLACEHOLDER-8805
        (map
         (fn* ([PLACEHOLDER-8803] (apply str PLACEHOLDER-8803)))
         (group
          (fn*
           ([PLACEHOLDER-8804]
            (java.lang.Character/isDigit PLACEHOLDER-8804)))
          PLACEHOLDER-8802))]
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-8805))
        (first PLACEHOLDER-8805)
        (seq->str
         (repeat
          (java.lang.Integer/parseInt (first PLACEHOLDER-8805))
          (second PLACEHOLDER-8805))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8806]
      (seq->str (map encode (group identity PLACEHOLDER-8806))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8807]
      (let*
       [PLACEHOLDER-8808 (re-seq matcher PLACEHOLDER-8807)]
       (seq->str (map decode PLACEHOLDER-8808)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11255
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11255))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress
    (fn*
     ([PLACEHOLDER-11256]
      (str
       (if
        (clojure.lang.Numbers/gt
         (clojure.lang.RT/count PLACEHOLDER-11256)
         1)
        (clojure.lang.RT/count PLACEHOLDER-11256))
       (first PLACEHOLDER-11256)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11257]
      (apply
       str
       (map compress (partition-by identity PLACEHOLDER-11257))))))
   (def
    uncompress
    (fn*
     ([PLACEHOLDER-11258]
      (apply
       str
       (repeat
        (java.lang.Integer/parseInt
         (apply str (first PLACEHOLDER-11258)))
        (first (second PLACEHOLDER-11258)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11259]
      (loop*
       [PLACEHOLDER-11261
        (partition-by
         (fn*
          ([PLACEHOLDER-11260]
           (java.lang.Character/isDigit PLACEHOLDER-11260)))
         PLACEHOLDER-11259)
        PLACEHOLDER-11262
        []]
       (if
        (seq PLACEHOLDER-11261)
        (if
         (java.lang.Character/isDigit
          (first (first PLACEHOLDER-11261)))
         (if
          (clojure.lang.Util/equiv
           1
           (clojure.lang.RT/count (second PLACEHOLDER-11261)))
          (recur
           (drop 2 PLACEHOLDER-11261)
           (conj PLACEHOLDER-11262 (uncompress PLACEHOLDER-11261)))
          (recur
           (cons
            (rest (second PLACEHOLDER-11261))
            (drop 2 PLACEHOLDER-11261))
           (conj PLACEHOLDER-11262 (uncompress PLACEHOLDER-11261))))
         (recur
          (rest PLACEHOLDER-11261)
          (conj
           PLACEHOLDER-11262
           (apply str (first PLACEHOLDER-11261)))))
        (apply str PLACEHOLDER-11262)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13000
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13000))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13001]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13002]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-13002))
           (str (first PLACEHOLDER-13002))
           (str
            (clojure.lang.RT/count PLACEHOLDER-13002)
            (first PLACEHOLDER-13002)))))
        (partition-by identity PLACEHOLDER-13001))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13003]
      (letfn*
       [PLACEHOLDER-13004
        (fn*
         PLACEHOLDER-13005
         ([PLACEHOLDER-13006]
          (java.lang.Integer/parseInt
           (re-find (re-pattern "\\d+") PLACEHOLDER-13006))))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-13007]
           (if
            (clojure.lang.Util/equiv
             (clojure.lang.RT/count PLACEHOLDER-13007)
             1)
            PLACEHOLDER-13007
            (apply
             str
             (repeat
              (PLACEHOLDER-13004 PLACEHOLDER-13007)
              (last PLACEHOLDER-13007))))))
         (re-seq
          (re-pattern "\\d+ |\\d+\\w|\\w| ")
          PLACEHOLDER-13003))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13565
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13565))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13566]
      ((apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-13567]
           (if
            (clojure.lang.Numbers/lt
             1
             (clojure.lang.RT/count PLACEHOLDER-13567))
            (str
             (clojure.lang.RT/count PLACEHOLDER-13567)
             (first PLACEHOLDER-13567))
            (str (first PLACEHOLDER-13567)))))
         (partition-by identity PLACEHOLDER-13566))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12330
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12330))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    plain->groups
    (fn*
     ([PLACEHOLDER-12331]
      (mapv
       (fn*
        ([PLACEHOLDER-12332]
         (let*
          [PLACEHOLDER-12333
           PLACEHOLDER-12332
           PLACEHOLDER-12334
           (clojure.lang.RT/nth PLACEHOLDER-12333 0 nil)
           PLACEHOLDER-12335
           (clojure.lang.RT/nth PLACEHOLDER-12333 1 nil)]
          [(clojure.lang.RT/count PLACEHOLDER-12334)
           PLACEHOLDER-12335])))
       (re-seq (re-pattern "([a-zA-Z\\s])\\1*") PLACEHOLDER-12331)))))
   (def
    groups->cipher
    (fn*
     ([PLACEHOLDER-12336]
      (reduce
       (fn*
        ([PLACEHOLDER-12337 PLACEHOLDER-12338]
         (let*
          [PLACEHOLDER-12339
           PLACEHOLDER-12338
           PLACEHOLDER-12340
           (clojure.lang.RT/nth PLACEHOLDER-12339 0 nil)
           PLACEHOLDER-12341
           (clojure.lang.RT/nth PLACEHOLDER-12339 1 nil)]
          (str
           PLACEHOLDER-12337
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-12340 1)
            PLACEHOLDER-12340
            "")
           PLACEHOLDER-12341))))
       ""
       PLACEHOLDER-12336))))
   (def
    cipher->groups
    (fn*
     ([PLACEHOLDER-12342]
      (mapv
       (fn*
        ([PLACEHOLDER-12343]
         (let*
          [PLACEHOLDER-12344
           PLACEHOLDER-12343
           PLACEHOLDER-12345
           (clojure.lang.RT/nth PLACEHOLDER-12344 0 nil)
           PLACEHOLDER-12346
           (clojure.lang.RT/nth PLACEHOLDER-12344 1 nil)
           PLACEHOLDER-12347
           (clojure.lang.RT/nth PLACEHOLDER-12344 2 nil)
           PLACEHOLDER-12348
           (clojure.lang.RT/nth PLACEHOLDER-12344 3 nil)]
          [(new
            Integer
            (if
             (clojure.lang.Util/equiv "" PLACEHOLDER-12347)
             "1"
             PLACEHOLDER-12347))
           PLACEHOLDER-12348])))
       (re-seq
        (re-pattern "(([0-9]*)([a-zA-Z\\s]))\\1*")
        PLACEHOLDER-12342)))))
   (def
    groups->plain
    (fn*
     ([PLACEHOLDER-12349]
      (reduce
       (fn*
        ([PLACEHOLDER-12350 PLACEHOLDER-12351]
         (let*
          [PLACEHOLDER-12352
           PLACEHOLDER-12351
           PLACEHOLDER-12353
           (clojure.lang.RT/nth PLACEHOLDER-12352 0 nil)
           PLACEHOLDER-12354
           (clojure.lang.RT/nth PLACEHOLDER-12352 1 nil)]
          (str
           PLACEHOLDER-12350
           (apply str (repeat PLACEHOLDER-12353 PLACEHOLDER-12354))))))
       ""
       PLACEHOLDER-12349))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12355]
      (groups->cipher (plain->groups PLACEHOLDER-12355)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12356]
      (groups->plain (cipher->groups PLACEHOLDER-12356))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11702
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11702))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11703]
      (reduce
       (fn*
        ([PLACEHOLDER-11704 PLACEHOLDER-11705]
         (if
          (clojure.lang.Numbers/gte
           (clojure.lang.RT/count PLACEHOLDER-11705)
           2)
          (str
           PLACEHOLDER-11704
           (clojure.lang.RT/count PLACEHOLDER-11705)
           (first PLACEHOLDER-11705))
          (str PLACEHOLDER-11704 (first PLACEHOLDER-11705)))))
       ""
       (partition-by identity PLACEHOLDER-11703)))))
   (def
    normalize-cipher-text
    (fn*
     ([PLACEHOLDER-11706]
      (if
       (let*
        [PLACEHOLDER-11707 (not (str/blank? PLACEHOLDER-11706))]
        (if
         PLACEHOLDER-11707
         (not (java.lang.Character/isDigit (first PLACEHOLDER-11706)))
         PLACEHOLDER-11707))
       (str 1 PLACEHOLDER-11706)
       PLACEHOLDER-11706))))
   (def
    numbers?
    (fn*
     ([PLACEHOLDER-11708]
      (let*
       [PLACEHOLDER-11709 (not (empty? PLACEHOLDER-11708))]
       (if
        PLACEHOLDER-11709
        (apply
         =
         true
         (map
          (fn*
           ([PLACEHOLDER-11710]
            (java.lang.Character/isDigit PLACEHOLDER-11710)))
          PLACEHOLDER-11708))
        PLACEHOLDER-11709)))))
   (def
    numbers->integer
    (fn*
     ([PLACEHOLDER-11711]
      (java.lang.Integer/valueOf (apply str PLACEHOLDER-11711)))))
   (def
    interpose-ones
    (fn* ([PLACEHOLDER-11712] (interpose 1 PLACEHOLDER-11712))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11713]
      (apply
       str
       (flatten
        (map
         (fn* ([PLACEHOLDER-11714] (apply repeat PLACEHOLDER-11714)))
         (partition
          2
          (flatten
           (reduce
            (fn*
             ([PLACEHOLDER-11715 PLACEHOLDER-11716]
              (if
               (numbers? PLACEHOLDER-11716)
               (conj
                PLACEHOLDER-11715
                (numbers->integer PLACEHOLDER-11716))
               (conj
                PLACEHOLDER-11715
                (interpose-ones PLACEHOLDER-11716)))))
            []
            (partition-by
             (fn*
              ([PLACEHOLDER-11717]
               (java.lang.Character/isDigit PLACEHOLDER-11717)))
             (normalize-cipher-text PLACEHOLDER-11713))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12111
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12111))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encoder
    (fn*
     ([PLACEHOLDER-12112 PLACEHOLDER-12113]
      (let*
       [PLACEHOLDER-12114
        (take-last 2 PLACEHOLDER-12112)
        PLACEHOLDER-12115
        (clojure.lang.RT/nth PLACEHOLDER-12114 0 nil)
        PLACEHOLDER-12116
        (clojure.lang.RT/nth PLACEHOLDER-12114 1 nil)
        PLACEHOLDER-12117
        (clojure.lang.Numbers/minus
         (clojure.lang.RT/count PLACEHOLDER-12112)
         2)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12116 PLACEHOLDER-12113)
        (assoc
         PLACEHOLDER-12112
         PLACEHOLDER-12117
         (clojure.lang.Numbers/inc PLACEHOLDER-12115))
        (conj PLACEHOLDER-12112 1 PLACEHOLDER-12113))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-12118] (expand '(\1) PLACEHOLDER-12118))
     ([PLACEHOLDER-12119 PLACEHOLDER-12120]
      (repeat
       (java.lang.Integer/parseInt (apply str PLACEHOLDER-12119))
       (apply str PLACEHOLDER-12120)))))
   (def
    decoder
    (fn*
     ([PLACEHOLDER-12121]
      (let*
       [PLACEHOLDER-12122
        PLACEHOLDER-12121
        PLACEHOLDER-12123
        (clojure.lang.RT/nth PLACEHOLDER-12122 0 nil)
        PLACEHOLDER-12124
        (clojure.lang.RT/nth PLACEHOLDER-12122 1 nil)]
       (apply
        expand
        (partition-by
         (fn*
          ([PLACEHOLDER-12125]
           (re-matches
            (re-pattern "[a-zA-Z\\s]")
            (str PLACEHOLDER-12125))))
         PLACEHOLDER-12123))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12126]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-12127]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-12127)))
        (reduce encoder [] PLACEHOLDER-12126))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12128]
      (apply
       str
       (mapcat
        decoder
        (re-seq
         (re-pattern "([0-9]+[a-zA-Z\\s])|[a-zA-Z\\s]")
         PLACEHOLDER-12128)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9855
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9855))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress-consec
    (fn*
     ([PLACEHOLDER-9856]
      (let*
       [PLACEHOLDER-9857
        PLACEHOLDER-9856
        PLACEHOLDER-9858
        (clojure.lang.RT/nth PLACEHOLDER-9857 0 nil)
        PLACEHOLDER-9859
        (clojure.lang.RT/nth PLACEHOLDER-9857 1 nil)]
       (str
        (if
         (clojure.lang.Util/equiv
          (clojure.lang.RT/count PLACEHOLDER-9858)
          1)
         ""
         (clojure.lang.RT/count PLACEHOLDER-9858))
        PLACEHOLDER-9859)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9860]
      (clojure.string/replace
       PLACEHOLDER-9860
       (re-pattern "(.)\\1*")
       compress-consec))))
   (def
    uncompress-consec
    (fn*
     ([PLACEHOLDER-9861]
      (let*
       [PLACEHOLDER-9862
        PLACEHOLDER-9861
        PLACEHOLDER-9863
        (clojure.lang.RT/nth PLACEHOLDER-9862 0 nil)
        PLACEHOLDER-9864
        (clojure.lang.RT/nth PLACEHOLDER-9862 1 nil)
        PLACEHOLDER-9865
        (clojure.lang.RT/nth PLACEHOLDER-9862 2 nil)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-9864)
         PLACEHOLDER-9865))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9866]
      (clojure.string/replace
       PLACEHOLDER-9866
       (re-pattern "([0-9]+)([A-Za-z\\s])")
       uncompress-consec)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10892
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10892))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-part
    (fn*
     ([PLACEHOLDER-10893]
      (let*
       [PLACEHOLDER-10894
        (first PLACEHOLDER-10893)
        PLACEHOLDER-10895
        (clojure.lang.RT/count PLACEHOLDER-10893)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-10895)
        PLACEHOLDER-10894
        (str PLACEHOLDER-10895 PLACEHOLDER-10894))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10896]
      (apply
       str
       (map encode-part (partition-by identity PLACEHOLDER-10896))))))
   (def
    digit-char->int
    (fn*
     ([PLACEHOLDER-10897]
      (java.lang.Integer/parseInt (apply str PLACEHOLDER-10897)))))
   (def
    decode-part
    (fn*
     ([PLACEHOLDER-10898 PLACEHOLDER-10899]
      (if
       (empty? PLACEHOLDER-10898)
       (list PLACEHOLDER-10899)
       (repeat
        (digit-char->int PLACEHOLDER-10898)
        PLACEHOLDER-10899)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10900] (run-length-decode PLACEHOLDER-10900 ""))
     ([PLACEHOLDER-10901 PLACEHOLDER-10902]
      (if
       (empty? PLACEHOLDER-10901)
       (apply str PLACEHOLDER-10902)
       (let*
        [PLACEHOLDER-10904
         (split-with
          (fn*
           ([PLACEHOLDER-10903]
            (java.lang.Character/isDigit PLACEHOLDER-10903)))
          PLACEHOLDER-10901)
         PLACEHOLDER-10905
         (clojure.lang.RT/nth PLACEHOLDER-10904 0 nil)
         PLACEHOLDER-10906
         (clojure.lang.RT/nth PLACEHOLDER-10904 1 nil)
         PLACEHOLDER-10907
         (clojure.core/seq PLACEHOLDER-10906)
         PLACEHOLDER-10908
         (clojure.core/first PLACEHOLDER-10907)
         PLACEHOLDER-10909
         (clojure.core/next PLACEHOLDER-10907)
         PLACEHOLDER-10910
         PLACEHOLDER-10908
         PLACEHOLDER-10911
         PLACEHOLDER-10909]
        (recur
         PLACEHOLDER-10911
         (concat
          PLACEHOLDER-10902
          (decode-part PLACEHOLDER-10905 PLACEHOLDER-10910)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9008
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9008))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9009]
      (str/replace
       PLACEHOLDER-9009
       (re-pattern "(\\D)\\1+")
       (fn*
        ([PLACEHOLDER-9010]
         (let*
          [PLACEHOLDER-9011
           PLACEHOLDER-9010
           PLACEHOLDER-9012
           (clojure.lang.RT/nth PLACEHOLDER-9011 0 nil)
           PLACEHOLDER-9013
           (clojure.lang.RT/nth PLACEHOLDER-9011 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-9012)
           PLACEHOLDER-9013))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9014]
      (str/replace
       PLACEHOLDER-9014
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-9015]
         (let*
          [PLACEHOLDER-9016
           PLACEHOLDER-9015
           PLACEHOLDER-9017
           (clojure.lang.RT/nth PLACEHOLDER-9016 0 nil)
           PLACEHOLDER-9018
           (clojure.lang.RT/nth PLACEHOLDER-9016 1 nil)
           PLACEHOLDER-9019
           (clojure.lang.RT/nth PLACEHOLDER-9016 2 nil)]
          (apply
           str
           (repeat
            (read-string PLACEHOLDER-9018)
            PLACEHOLDER-9019))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11148
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11148))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11149]
      (let*
       [PLACEHOLDER-11150
        (clojure.lang.RT/count PLACEHOLDER-11149)
        PLACEHOLDER-11151
        (first PLACEHOLDER-11149)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-11150)
        PLACEHOLDER-11151
        (str PLACEHOLDER-11150 PLACEHOLDER-11151))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11152]
      (apply
       str
       (map encode (partition-by identity PLACEHOLDER-11152))))))
   (def
    decode-item
    (fn*
     ([PLACEHOLDER-11153]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-11153))
       (first PLACEHOLDER-11153)
       (let*
        [PLACEHOLDER-11154
         (java.lang.Integer/parseInt
          (apply str (drop-last PLACEHOLDER-11153)))]
        (apply
         str
         (repeat PLACEHOLDER-11154 (last PLACEHOLDER-11153))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11155]
      (apply
       str
       (map
        decode-item
        (re-seq (re-pattern "[\\d]*[\\D]") PLACEHOLDER-11155)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13800
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13800))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    collect
    (fn*
     ([PLACEHOLDER-13801 PLACEHOLDER-13802]
      (if
       (some #{PLACEHOLDER-13802} (last PLACEHOLDER-13801))
       (conj
        (vec (drop-last PLACEHOLDER-13801))
        (conj (last PLACEHOLDER-13801) PLACEHOLDER-13802))
       (conj PLACEHOLDER-13801 [PLACEHOLDER-13802])))))
   (def
    collect-all
    (fn*
     ([PLACEHOLDER-13803]
      (reduce
       (fn*
        ([PLACEHOLDER-13804 PLACEHOLDER-13805]
         (collect PLACEHOLDER-13804 PLACEHOLDER-13805)))
       []
       PLACEHOLDER-13803))))
   (def
    gt
    (fn*
     ([PLACEHOLDER-13806 PLACEHOLDER-13807]
      (if
       (clojure.lang.Numbers/gt PLACEHOLDER-13806 PLACEHOLDER-13807)
       PLACEHOLDER-13806))))
   (def
    encode-groups
    (fn*
     ([PLACEHOLDER-13808]
      (map
       (fn*
        ([PLACEHOLDER-13809]
         (str
          (gt (clojure.lang.RT/count PLACEHOLDER-13809) 1)
          (first PLACEHOLDER-13809))))
       PLACEHOLDER-13808))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13810]
      (apply str (encode-groups (collect-all PLACEHOLDER-13810))))))
   (def
    penultimate
    (fn* ([PLACEHOLDER-13811] (last (butlast PLACEHOLDER-13811)))))
   (def
    str-to-int
    (fn*
     ([PLACEHOLDER-13812]
      (if
       (str/blank? PLACEHOLDER-13812)
       1
       (new Integer PLACEHOLDER-13812)))))
   (def
    find-groups
    (fn*
     ([PLACEHOLDER-13813]
      (map
       (fn*
        ([PLACEHOLDER-13814]
         (hash-map
          :count
          (str-to-int (penultimate PLACEHOLDER-13814))
          :char
          (last PLACEHOLDER-13814))))
       (re-seq (re-pattern "((\\d*)([^\\d]))") PLACEHOLDER-13813)))))
   (def
    print-groups
    (fn*
     ([PLACEHOLDER-13815]
      (map
       (fn*
        ([PLACEHOLDER-13816]
         (apply
          str
          (repeat
           (:count PLACEHOLDER-13816)
           (:char PLACEHOLDER-13816)))))
       PLACEHOLDER-13815))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13817]
      (apply str (print-groups (find-groups PLACEHOLDER-13817)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8537
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8537))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-8538 PLACEHOLDER-8539]
      (let*
       [PLACEHOLDER-8540
        PLACEHOLDER-8538
        PLACEHOLDER-8541
        (clojure.lang.RT/nth PLACEHOLDER-8540 0 nil)
        PLACEHOLDER-8542
        (clojure.lang.RT/nth PLACEHOLDER-8540 1 nil)
        PLACEHOLDER-8543
        (clojure.lang.RT/nth PLACEHOLDER-8540 2 nil)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-8543 nil)
        [[] 1 PLACEHOLDER-8539]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8543 PLACEHOLDER-8539)
         [PLACEHOLDER-8541
          (clojure.lang.Numbers/inc PLACEHOLDER-8542)
          PLACEHOLDER-8543]
         [(conj
           PLACEHOLDER-8541
           (str
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-8542 1)
             ""
             PLACEHOLDER-8542)
            PLACEHOLDER-8543))
          1
          PLACEHOLDER-8539]))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-8544 PLACEHOLDER-8545]
      (let*
       [PLACEHOLDER-8546
        PLACEHOLDER-8544
        PLACEHOLDER-8547
        (clojure.lang.RT/nth PLACEHOLDER-8546 0 nil)
        PLACEHOLDER-8548
        (clojure.lang.RT/nth PLACEHOLDER-8546 1 nil)]
       (if
        (java.lang.Character/isDigit PLACEHOLDER-8545)
        [PLACEHOLDER-8547
         (clojure.lang.Numbers/add
          (clojure.lang.Numbers/multiply PLACEHOLDER-8548 10)
          (new Integer (str PLACEHOLDER-8545)))]
        [(conj
          PLACEHOLDER-8547
          (apply
           str
           (repeat
            (clojure.lang.Numbers/max 1 PLACEHOLDER-8548)
            PLACEHOLDER-8545)))
         0])))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8549]
      (apply
       str
       (first
        (reduce encode [[] 0 nil] (str PLACEHOLDER-8549 "!")))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8550]
      (apply str (first (reduce decode [[] 0] PLACEHOLDER-8550)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11318
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11318))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11319 PLACEHOLDER-11320]
      (let*
       [PLACEHOLDER-11321
        (PLACEHOLDER-11319 :current)
        PLACEHOLDER-11322
        (PLACEHOLDER-11319 :result)
        PLACEHOLDER-11323
        (PLACEHOLDER-11319 :count)
        PLACEHOLDER-11324
        (str PLACEHOLDER-11320)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11321 PLACEHOLDER-11324)
        (assoc
         PLACEHOLDER-11319
         :count
         (clojure.lang.Numbers/inc PLACEHOLDER-11323))
        (if
         :else
         (assoc
          PLACEHOLDER-11319
          :result
          (if
           (empty? PLACEHOLDER-11321)
           ""
           (if
            :else
            (str
             PLACEHOLDER-11322
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-11323 1)
              ""
              PLACEHOLDER-11323)
             PLACEHOLDER-11321)))
          :count
          1
          :current
          PLACEHOLDER-11324)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11325]
      (let*
       [PLACEHOLDER-11326
        (reduce
         encode
         {:result "", :current "", :count 0}
         PLACEHOLDER-11325)
        PLACEHOLDER-11327
        (PLACEHOLDER-11326 :count)]
       (str
        (PLACEHOLDER-11326 :result)
        (if
         (clojure.lang.Numbers/lt PLACEHOLDER-11327 2)
         ""
         PLACEHOLDER-11327)
        (PLACEHOLDER-11326 :current))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11328 PLACEHOLDER-11329]
      (let*
       [PLACEHOLDER-11330
        (PLACEHOLDER-11328 :result)
        PLACEHOLDER-11331
        (PLACEHOLDER-11328 :number)
        PLACEHOLDER-11332
        (str PLACEHOLDER-11329)]
       (if
        (re-seq (re-pattern "[0-9]") PLACEHOLDER-11332)
        (assoc
         PLACEHOLDER-11328
         :number
         (str PLACEHOLDER-11331 PLACEHOLDER-11332))
        (if
         :else
         (assoc
          PLACEHOLDER-11328
          :result
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-11331 "")
           (str PLACEHOLDER-11330 PLACEHOLDER-11332)
           (if
            :else
            (str
             PLACEHOLDER-11330
             (apply
              str
              (repeat
               (new Integer PLACEHOLDER-11331)
               PLACEHOLDER-11332)))))
          :number
          "")))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11333]
      (let*
       [PLACEHOLDER-11334
        (reduce decode {:number "", :result ""} PLACEHOLDER-11333)]
       (PLACEHOLDER-11334 :result))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-7961
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-7961))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-7962]
      ((comp
        clojure.string/join
        (fn*
         ([PLACEHOLDER-7963]
          (map clojure.string/join PLACEHOLDER-7963)))
        (fn*
         ([PLACEHOLDER-7964]
          (map
           (fn*
            ([PLACEHOLDER-7965]
             (let*
              [PLACEHOLDER-7966
               PLACEHOLDER-7965
               PLACEHOLDER-7967
               (clojure.lang.RT/nth PLACEHOLDER-7966 0 nil)
               PLACEHOLDER-7968
               (clojure.lang.RT/nth PLACEHOLDER-7966 1 nil)]
              (if
               (clojure.lang.Util/equiv
                (clojure.lang.RT/count PLACEHOLDER-7967)
                1)
               ["" PLACEHOLDER-7968]
               [(str (clojure.lang.RT/count PLACEHOLDER-7967))
                PLACEHOLDER-7968]))))
           PLACEHOLDER-7964)))
        (fn*
         ([PLACEHOLDER-7969]
          (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-7969))))
       PLACEHOLDER-7962))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-7970]
      ((comp
        clojure.string/join
        flatten
        (fn*
         ([PLACEHOLDER-7971]
          (map
           (fn*
            ([PLACEHOLDER-7972]
             (let*
              [PLACEHOLDER-7973
               PLACEHOLDER-7972
               PLACEHOLDER-7974
               (clojure.lang.RT/nth PLACEHOLDER-7973 0 nil)
               PLACEHOLDER-7975
               (clojure.lang.RT/nth PLACEHOLDER-7973 1 nil)]
              (repeat PLACEHOLDER-7974 PLACEHOLDER-7975))))
           PLACEHOLDER-7971)))
        (fn*
         ([PLACEHOLDER-7976]
          (map
           (fn*
            ([PLACEHOLDER-7977]
             (let*
              [PLACEHOLDER-7978
               PLACEHOLDER-7977
               PLACEHOLDER-7979
               (clojure.lang.RT/nth PLACEHOLDER-7978 0 nil)
               PLACEHOLDER-7980
               (clojure.lang.RT/nth PLACEHOLDER-7978 1 nil)]
              (if
               (clojure.lang.Util/identical PLACEHOLDER-7979 nil)
               [1 PLACEHOLDER-7980]
               [(java.lang.Integer/parseInt PLACEHOLDER-7979)
                PLACEHOLDER-7980]))))
           PLACEHOLDER-7976)))
        (fn*
         ([PLACEHOLDER-7981] (map (partial drop 1) PLACEHOLDER-7981)))
        (fn*
         ([PLACEHOLDER-7982]
          (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-7982))))
       PLACEHOLDER-7970)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8443
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8443))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([] (run-length-encode ""))
     ([PLACEHOLDER-8444]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8445]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-8445))
           [(first PLACEHOLDER-8445)]
           [(clojure.lang.RT/count PLACEHOLDER-8445)
            (first PLACEHOLDER-8445)])))
        (partition-by
         identity
         (clojure.string/split PLACEHOLDER-8444 (re-pattern ""))))))))
   (def
    run-length-decode
    (fn*
     ([] (run-length-decode ""))
     ([PLACEHOLDER-8446]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8447]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-8447))
           PLACEHOLDER-8447
           (repeat
            (java.lang.Integer/parseInt
             (apply str (drop-last PLACEHOLDER-8447)))
            (last PLACEHOLDER-8447)))))
        (re-seq
         (re-pattern "[1-9]*[a-zA-Z\\W]")
         PLACEHOLDER-8446)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8448
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8448))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8449]
      (reduce
       (fn*
        ([PLACEHOLDER-8450 PLACEHOLDER-8451]
         (let*
          [PLACEHOLDER-8452
           PLACEHOLDER-8451
           PLACEHOLDER-8453
           (clojure.core/seq PLACEHOLDER-8452)
           PLACEHOLDER-8454
           (clojure.core/first PLACEHOLDER-8453)
           PLACEHOLDER-8455
           (clojure.core/next PLACEHOLDER-8453)
           PLACEHOLDER-8456
           PLACEHOLDER-8454
           PLACEHOLDER-8457
           PLACEHOLDER-8455]
          (str
           PLACEHOLDER-8450
           (if
            (seq PLACEHOLDER-8457)
            (clojure.lang.Numbers/inc
             (clojure.lang.RT/count PLACEHOLDER-8457)))
           PLACEHOLDER-8456))))
       ""
       (partition-by identity PLACEHOLDER-8449)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8458]
      (reduce
       (fn*
        ([PLACEHOLDER-8459 PLACEHOLDER-8460]
         (str
          PLACEHOLDER-8459
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-8460))
           PLACEHOLDER-8460
           (let*
            [PLACEHOLDER-8461
             (last PLACEHOLDER-8460)
             PLACEHOLDER-8462
             (java.lang.Long/parseLong
              (apply str (butlast PLACEHOLDER-8460)))]
            (apply str (repeat PLACEHOLDER-8462 PLACEHOLDER-8461)))))))
       ""
       (re-seq (re-pattern "\\d+\\D|\\D") PLACEHOLDER-8458))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8647
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8647))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8648]
      (clojure.string/replace
       PLACEHOLDER-8648
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-8649]
         (let*
          [PLACEHOLDER-8650
           PLACEHOLDER-8649
           PLACEHOLDER-8651
           (clojure.lang.RT/nth PLACEHOLDER-8650 0 nil)
           PLACEHOLDER-8652
           (clojure.lang.RT/nth PLACEHOLDER-8650 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-8651)
           PLACEHOLDER-8652))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8653]
      (clojure.string/replace
       PLACEHOLDER-8653
       (re-pattern "([0-9]*[a-zA-Z\\s])")
       (fn*
        ([PLACEHOLDER-8654]
         (let*
          [PLACEHOLDER-8655
           PLACEHOLDER-8654
           PLACEHOLDER-8656
           (clojure.lang.RT/nth PLACEHOLDER-8655 0 nil)]
          (let*
           [PLACEHOLDER-8657
            (last PLACEHOLDER-8656)
            PLACEHOLDER-8658
            (butlast PLACEHOLDER-8656)]
           (if
            PLACEHOLDER-8658
            (clojure.string/join
             (repeat
              (java.lang.Integer/parseInt (apply str PLACEHOLDER-8658))
              PLACEHOLDER-8657))
            (str PLACEHOLDER-8657)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9608
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9608))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9609]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9610]
          (let*
           [PLACEHOLDER-9611
            (clojure.lang.RT/count PLACEHOLDER-9610)
            PLACEHOLDER-9612
            (first PLACEHOLDER-9610)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-9611 1)
            PLACEHOLDER-9612
            (str PLACEHOLDER-9611 PLACEHOLDER-9612)))))
        (partition-by identity PLACEHOLDER-9609))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9613]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9614]
          (let*
           [PLACEHOLDER-9615
            PLACEHOLDER-9614
            PLACEHOLDER-9616
            (clojure.lang.RT/nth PLACEHOLDER-9615 0 nil)
            PLACEHOLDER-9617
            (clojure.lang.RT/nth PLACEHOLDER-9615 1 nil)
            PLACEHOLDER-9618
            (clojure.lang.RT/nth PLACEHOLDER-9615 2 nil)]
           (let*
            [PLACEHOLDER-9619
             (if
              (empty? PLACEHOLDER-9617)
              1
              (new Integer PLACEHOLDER-9617))]
            (apply
             str
             (take PLACEHOLDER-9619 (repeat PLACEHOLDER-9618)))))))
        (re-seq
         (re-pattern "(\\d*)([\\w|\\s])")
         PLACEHOLDER-9613)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9804
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9804))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9805]
      (do
       (if
        (string? PLACEHOLDER-9805)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(string? s))))))
       (let*
        [PLACEHOLDER-9807
         (apply
          str
          (map
           (fn*
            ([PLACEHOLDER-9806]
             (str
              (if
               (clojure.lang.Util/equiv
                1
                (clojure.lang.RT/count PLACEHOLDER-9806))
               nil
               (clojure.lang.RT/count PLACEHOLDER-9806))
              (first PLACEHOLDER-9806))))
           (partition-by identity PLACEHOLDER-9805)))]
        (do
         (if
          (string? PLACEHOLDER-9807)
          nil
          (throw
           (new
            java.lang.AssertionError
            (clojure.core/str
             "Assert failed: "
             (clojure.core/pr-str '(string? %))))))
         PLACEHOLDER-9807))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-9808]
      (let*
       [PLACEHOLDER-9809
        PLACEHOLDER-9808
        PLACEHOLDER-9810
        (clojure.lang.RT/nth PLACEHOLDER-9809 0 nil)
        PLACEHOLDER-9811
        (clojure.lang.RT/nth PLACEHOLDER-9809 1 nil)
        PLACEHOLDER-9812
        (clojure.lang.RT/nth PLACEHOLDER-9809 2 nil)]
       (do
        (if
         [(any? PLACEHOLDER-9810)
          (string? PLACEHOLDER-9811)
          (string? PLACEHOLDER-9812)]
         nil
         (throw
          (new
           java.lang.AssertionError
           (clojure.core/str
            "Assert failed: "
            (clojure.core/pr-str
             '[(any? _)
               (string? repeated-times)
               (string? element)])))))
        (let*
         [PLACEHOLDER-9813
          (if
           (str/blank? PLACEHOLDER-9811)
           PLACEHOLDER-9812
           (str/join
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-9811)
             PLACEHOLDER-9812)))]
         (do
          (if
           (string? PLACEHOLDER-9813)
           nil
           (throw
            (new
             java.lang.AssertionError
             (clojure.core/str
              "Assert failed: "
              (clojure.core/pr-str '(string? %))))))
          PLACEHOLDER-9813)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9814]
      (do
       (if
        (string? PLACEHOLDER-9814)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(string? s))))))
       (let*
        [PLACEHOLDER-9815
         (str/join
          (mapcat
           decode-chunk
           (re-seq
            (re-pattern "(\\d*)([a-zA-Z\\s])")
            PLACEHOLDER-9814)))]
        (do
         (if
          (string? PLACEHOLDER-9815)
          nil
          (throw
           (new
            java.lang.AssertionError
            (clojure.core/str
             "Assert failed: "
             (clojure.core/pr-str '(string? %))))))
         PLACEHOLDER-9815)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14336
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14336))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    numbered-chars-from-str
    (fn*
     ([PLACEHOLDER-14337]
      (loop*
       [PLACEHOLDER-14338
        1
        PLACEHOLDER-14339
        (first PLACEHOLDER-14337)
        PLACEHOLDER-14340
        (rest PLACEHOLDER-14337)
        PLACEHOLDER-14341
        []]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-14339 nil)
        PLACEHOLDER-14341
        (if
         (clojure.lang.Util/equiv
          PLACEHOLDER-14339
          (first PLACEHOLDER-14340))
         (recur
          (clojure.lang.Numbers/inc PLACEHOLDER-14338)
          (first PLACEHOLDER-14340)
          (rest PLACEHOLDER-14340)
          PLACEHOLDER-14341)
         (recur
          1
          (first PLACEHOLDER-14340)
          (rest PLACEHOLDER-14340)
          (conj
           PLACEHOLDER-14341
           {:char PLACEHOLDER-14339,
            :repeated PLACEHOLDER-14338}))))))))
   (def
    encode-numbered-chars
    (fn*
     ([PLACEHOLDER-14342]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14343]
          (let*
           [PLACEHOLDER-14344
            PLACEHOLDER-14343
            PLACEHOLDER-14345
            (if
             (clojure.core/seq? PLACEHOLDER-14344)
             (if
              (clojure.core/next PLACEHOLDER-14344)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-14344))
              (if
               (clojure.core/seq PLACEHOLDER-14344)
               (clojure.core/first PLACEHOLDER-14344)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-14344)
            PLACEHOLDER-14346
            (clojure.lang.RT/get PLACEHOLDER-14345 :char)
            PLACEHOLDER-14347
            (clojure.lang.RT/get PLACEHOLDER-14345 :repeated)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-14347 1)
            (str PLACEHOLDER-14347 PLACEHOLDER-14346)
            (str PLACEHOLDER-14346)))))
        PLACEHOLDER-14342)))))
   (def
    numbered-chars-from-cipher
    (fn*
     ([PLACEHOLDER-14348]
      (map
       (fn*
        ([PLACEHOLDER-14349]
         (let*
          [PLACEHOLDER-14350
           PLACEHOLDER-14349
           PLACEHOLDER-14351
           (clojure.lang.RT/nth PLACEHOLDER-14350 0 nil)
           PLACEHOLDER-14352
           (clojure.lang.RT/nth PLACEHOLDER-14350 1 nil)
           PLACEHOLDER-14353
           (clojure.lang.RT/nth PLACEHOLDER-14350 2 nil)]
          (if
           (empty? PLACEHOLDER-14352)
           {:char (.charAt PLACEHOLDER-14353 0), :repeated 1}
           {:char (.charAt PLACEHOLDER-14353 0),
            :repeated
            (java.lang.Integer/parseInt PLACEHOLDER-14352)}))))
       (re-seq
        (re-pattern "([\\d]*)([\\w\\s]{1})")
        PLACEHOLDER-14348)))))
   (def
    unpack-numbered-chars
    (fn*
     ([PLACEHOLDER-14354]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14355]
          (let*
           [PLACEHOLDER-14356
            PLACEHOLDER-14355
            PLACEHOLDER-14357
            (if
             (clojure.core/seq? PLACEHOLDER-14356)
             (if
              (clojure.core/next PLACEHOLDER-14356)
              (clojure.lang.PersistentArrayMap/createAsIfByAssoc
               (clojure.core/to-array PLACEHOLDER-14356))
              (if
               (clojure.core/seq PLACEHOLDER-14356)
               (clojure.core/first PLACEHOLDER-14356)
               clojure.lang.PersistentArrayMap/EMPTY))
             PLACEHOLDER-14356)
            PLACEHOLDER-14358
            (clojure.lang.RT/get PLACEHOLDER-14357 :char)
            PLACEHOLDER-14359
            (clojure.lang.RT/get PLACEHOLDER-14357 :repeated)]
           (apply str (repeat PLACEHOLDER-14359 PLACEHOLDER-14358)))))
        PLACEHOLDER-14354)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14360]
      (encode-numbered-chars
       (numbered-chars-from-str PLACEHOLDER-14360)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14361]
      (apply
       str
       (unpack-numbered-chars
        (numbered-chars-from-cipher PLACEHOLDER-14361)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8568
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8568))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-8569] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-8570] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8266
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8266))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-encode (fn* ([PLACEHOLDER-8267] nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-8268] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9923
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9923))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9924]
      (let*
       [PLACEHOLDER-9927
        (fn*
         ([PLACEHOLDER-9925]
          (let*
           [PLACEHOLDER-9926 (clojure.lang.RT/count PLACEHOLDER-9925)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-9926 1)
            (str PLACEHOLDER-9926)
            ""))))]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-9928]
           (str
            (PLACEHOLDER-9927 PLACEHOLDER-9928)
            (first PLACEHOLDER-9928))))
         (partition-by identity PLACEHOLDER-9924)))))))
   (def
    alphabet
    (let*
     [PLACEHOLDER-9929
      (range
       (clojure.lang.RT/intCast \A)
       (clojure.lang.Numbers/inc (clojure.lang.RT/intCast \Z)))
      PLACEHOLDER-9930
      (range
       (clojure.lang.RT/intCast \a)
       (clojure.lang.Numbers/inc (clojure.lang.RT/intCast \z)))]
     (into
      (into #{\space} (map char PLACEHOLDER-9929))
      (map char PLACEHOLDER-9930))))
   (def
    parse-run-sequence
    (fn*
     ([PLACEHOLDER-9931]
      (loop*
       [PLACEHOLDER-9932
        PLACEHOLDER-9931
        PLACEHOLDER-9933
        1
        PLACEHOLDER-9934
        []]
       (if
        (seq PLACEHOLDER-9932)
        (let*
         [PLACEHOLDER-9935
          (first PLACEHOLDER-9932)
          PLACEHOLDER-9936
          (first PLACEHOLDER-9935)
          PLACEHOLDER-9937
          (if (alphabet PLACEHOLDER-9936) :alpha :num)
          PLACEHOLDER-9938
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-9937 :num)
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-9935))
           PLACEHOLDER-9933)]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-9937 :alpha)
          (recur
           (rest PLACEHOLDER-9932)
           1
           (conj
            PLACEHOLDER-9934
            [PLACEHOLDER-9938 (str PLACEHOLDER-9936)]))
          (recur
           (rest PLACEHOLDER-9932)
           PLACEHOLDER-9938
           PLACEHOLDER-9934)))
        PLACEHOLDER-9934)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9939]
      (apply
       str
       (mapcat
        (fn* ([PLACEHOLDER-9940] (apply repeat PLACEHOLDER-9940)))
        (parse-run-sequence
         (partition-by alphabet PLACEHOLDER-9939)))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10423
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10423))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-runs
    (fn*
     ([PLACEHOLDER-10424]
      (reduce
       str
       (apply
        concat
        (map
         (fn*
          ([PLACEHOLDER-10425]
           (concat
            (if
             (clojure.lang.Numbers/gt (:count PLACEHOLDER-10425) 1)
             (str (:count PLACEHOLDER-10425)))
            (:char PLACEHOLDER-10425))))
         PLACEHOLDER-10424))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10426]
      (loop*
       [PLACEHOLDER-10427 PLACEHOLDER-10426 PLACEHOLDER-10428 []]
       (if
        (empty? PLACEHOLDER-10427)
        (encode-runs PLACEHOLDER-10428)
        (let*
         [PLACEHOLDER-10429
          (first
           (re-find (re-pattern "^(.)\\1{0,}") PLACEHOLDER-10427))
          PLACEHOLDER-10430
          (.indexOf PLACEHOLDER-10428 (last PLACEHOLDER-10428))]
         (recur
          (apply
           str
           (drop
            (clojure.lang.RT/count PLACEHOLDER-10429)
            PLACEHOLDER-10427))
          (conj
           PLACEHOLDER-10428
           {:n (clojure.lang.Numbers/inc PLACEHOLDER-10430),
            :count (clojure.lang.RT/count PLACEHOLDER-10429),
            :char (str (first PLACEHOLDER-10429))}))))))))
   (def
    decode-runs
    (fn*
     ([PLACEHOLDER-10431]
      (reduce
       str
       (apply
        concat
        (map
         (fn*
          ([PLACEHOLDER-10432]
           (repeat
            (:count PLACEHOLDER-10432)
            (str (:char PLACEHOLDER-10432)))))
         PLACEHOLDER-10431))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10433]
      (loop*
       [PLACEHOLDER-10434 PLACEHOLDER-10433 PLACEHOLDER-10435 []]
       (if
        (empty? PLACEHOLDER-10434)
        (decode-runs PLACEHOLDER-10435)
        (let*
         [PLACEHOLDER-10437
          (let*
           [PLACEHOLDER-10436
            (first
             (re-find (re-pattern "^\\d+(.)") PLACEHOLDER-10434))]
           (if
            PLACEHOLDER-10436
            PLACEHOLDER-10436
            (str (first PLACEHOLDER-10434))))
          PLACEHOLDER-10438
          (.indexOf PLACEHOLDER-10435 (last PLACEHOLDER-10435))]
         (recur
          (apply
           str
           (let*
            [PLACEHOLDER-10439
             (drop
              (clojure.lang.RT/count PLACEHOLDER-10437)
              PLACEHOLDER-10434)]
            (if
             PLACEHOLDER-10439
             PLACEHOLDER-10439
             (rest PLACEHOLDER-10434))))
          (conj
           PLACEHOLDER-10435
           {:n (clojure.lang.Numbers/inc PLACEHOLDER-10438),
            :count
            (if
             (clojure.lang.Numbers/gt
              (clojure.lang.RT/count PLACEHOLDER-10437)
              1)
             (java.lang.Integer/parseInt
              (re-find (re-pattern "\\d+") PLACEHOLDER-10437))
             1),
            :char
            (re-find (re-pattern "\\D") PLACEHOLDER-10437)})))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10195
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10195))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    append
    (fn*
     ([PLACEHOLDER-10196 PLACEHOLDER-10197 PLACEHOLDER-10198]
      (str
       PLACEHOLDER-10196
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10198 0)
        PLACEHOLDER-10197
        (str
         (clojure.lang.Numbers/inc PLACEHOLDER-10198)
         PLACEHOLDER-10197))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10199]
      (loop*
       [PLACEHOLDER-10200
        ""
        PLACEHOLDER-10201
        0
        PLACEHOLDER-10202
        nil
        PLACEHOLDER-10203
        PLACEHOLDER-10199]
       (if
        (empty? PLACEHOLDER-10203)
        (append PLACEHOLDER-10200 PLACEHOLDER-10202 PLACEHOLDER-10201)
        (let*
         [PLACEHOLDER-10204
          (first PLACEHOLDER-10203)
          PLACEHOLDER-10205
          (rest PLACEHOLDER-10203)]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-10202 PLACEHOLDER-10204)
          (recur
           PLACEHOLDER-10200
           (clojure.lang.Numbers/inc PLACEHOLDER-10201)
           PLACEHOLDER-10204
           PLACEHOLDER-10205)
          (recur
           (append
            PLACEHOLDER-10200
            PLACEHOLDER-10202
            PLACEHOLDER-10201)
           0
           PLACEHOLDER-10204
           PLACEHOLDER-10205))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10206]
      (loop*
       [PLACEHOLDER-10207
        ""
        PLACEHOLDER-10208
        ""
        PLACEHOLDER-10209
        PLACEHOLDER-10206]
       (if
        (empty? PLACEHOLDER-10209)
        PLACEHOLDER-10207
        (let*
         [PLACEHOLDER-10210
          (first PLACEHOLDER-10209)
          PLACEHOLDER-10211
          (rest PLACEHOLDER-10209)]
         (if
          (java.lang.Character/isDigit PLACEHOLDER-10210)
          (recur
           PLACEHOLDER-10207
           (str PLACEHOLDER-10208 PLACEHOLDER-10210)
           PLACEHOLDER-10211)
          (recur
           (apply
            str
            PLACEHOLDER-10207
            (repeat
             (if
              (empty? PLACEHOLDER-10208)
              1
              (java.lang.Integer/parseInt PLACEHOLDER-10208))
             PLACEHOLDER-10210))
           ""
           PLACEHOLDER-10211)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8623
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8623))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    plain->counters
    (fn*
     ([PLACEHOLDER-8624 PLACEHOLDER-8625]
      (if
       (clojure.lang.Util/identical (last PLACEHOLDER-8624) nil)
       [{:count 1, :char PLACEHOLDER-8625}]
       (let*
        [PLACEHOLDER-8626
         (last PLACEHOLDER-8624)
         PLACEHOLDER-8627
         (:count PLACEHOLDER-8626)
         PLACEHOLDER-8628
         (:char PLACEHOLDER-8626)
         PLACEHOLDER-8629
         (clojure.lang.Numbers/minus
          (clojure.lang.RT/count PLACEHOLDER-8624)
          1)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8628 PLACEHOLDER-8625)
         (assoc-in
          PLACEHOLDER-8624
          [PLACEHOLDER-8629 :count]
          (clojure.lang.Numbers/inc PLACEHOLDER-8627))
         (conj
          PLACEHOLDER-8624
          {:count 1, :char PLACEHOLDER-8625})))))))
   (def
    counter->cipher
    (fn*
     ([PLACEHOLDER-8630]
      (if
       (clojure.lang.Util/equiv 1 (:count PLACEHOLDER-8630))
       (str (:char PLACEHOLDER-8630))
       (str (:count PLACEHOLDER-8630) (:char PLACEHOLDER-8630))))))
   (def
    cipher->counters
    (fn*
     ([PLACEHOLDER-8631 PLACEHOLDER-8632]
      (let*
       [PLACEHOLDER-8633
        (java.lang.Character/digit PLACEHOLDER-8632 10)]
       (if
        (clojure.lang.Util/identical (last PLACEHOLDER-8631) nil)
        (if
         (clojure.lang.Util/equiv -1 PLACEHOLDER-8633)
         (conj PLACEHOLDER-8631 {:count 1, :char PLACEHOLDER-8632})
         (conj PLACEHOLDER-8631 {:count PLACEHOLDER-8633}))
        (let*
         [PLACEHOLDER-8634
          (last PLACEHOLDER-8631)
          PLACEHOLDER-8635
          (:count PLACEHOLDER-8634)
          PLACEHOLDER-8636
          (:char PLACEHOLDER-8634)
          PLACEHOLDER-8637
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/count PLACEHOLDER-8631)
           1)]
         (if
          (clojure.lang.Util/equiv -1 PLACEHOLDER-8633)
          (if
           PLACEHOLDER-8636
           (conj PLACEHOLDER-8631 {:count 1, :char PLACEHOLDER-8632})
           (assoc-in
            PLACEHOLDER-8631
            [PLACEHOLDER-8637 :char]
            PLACEHOLDER-8632))
          (if
           PLACEHOLDER-8636
           (conj PLACEHOLDER-8631 {:count PLACEHOLDER-8633})
           (assoc-in
            PLACEHOLDER-8631
            [PLACEHOLDER-8637 :count]
            (clojure.lang.Numbers/add
             PLACEHOLDER-8633
             (clojure.lang.Numbers/multiply
              10
              PLACEHOLDER-8635)))))))))))
   (def
    counter->plain
    (fn*
     ([PLACEHOLDER-8638]
      (apply
       str
       (repeat (:count PLACEHOLDER-8638) (:char PLACEHOLDER-8638))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8639]
      (apply
       str
       (map
        counter->cipher
        (reduce plain->counters [] (seq PLACEHOLDER-8639)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8640]
      (apply
       str
       (map
        counter->plain
        (reduce cipher->counters [] (seq PLACEHOLDER-8640))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10509
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10509))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10510]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10511]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-10511))
           (str (first PLACEHOLDER-10511))
           (str
            (clojure.lang.RT/count PLACEHOLDER-10511)
            (first PLACEHOLDER-10511)))))
        (partition-by identity PLACEHOLDER-10510))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10512]
      (loop*
       [PLACEHOLDER-10513 0 PLACEHOLDER-10514 ""]
       (if
        (clojure.lang.Util/equiv
         PLACEHOLDER-10513
         (clojure.lang.RT/count PLACEHOLDER-10512))
        PLACEHOLDER-10514
        (let*
         [PLACEHOLDER-10515
          (re-find
           (re-pattern "^\\d+")
           (subs PLACEHOLDER-10512 PLACEHOLDER-10513))]
         (if
          (clojure.core/not PLACEHOLDER-10515)
          (recur
           (clojure.lang.Numbers/inc PLACEHOLDER-10513)
           (str
            PLACEHOLDER-10514
            (clojure.lang.RT/get PLACEHOLDER-10512 PLACEHOLDER-10513)))
          (let*
           [PLACEHOLDER-10516 (read-string PLACEHOLDER-10515)]
           (recur
            (clojure.lang.Numbers/add
             (clojure.lang.Numbers/add
              PLACEHOLDER-10513
              (clojure.lang.RT/count PLACEHOLDER-10515))
             1)
            (apply
             str
             PLACEHOLDER-10514
             (repeat
              PLACEHOLDER-10516
              (clojure.lang.RT/nth
               PLACEHOLDER-10512
               (clojure.lang.Numbers/add
                PLACEHOLDER-10513
                (clojure.lang.RT/count PLACEHOLDER-10515)))))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14574
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14574))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    group-letters
    (fn*
     ([PLACEHOLDER-14575]
      (clojure.string/split
       PLACEHOLDER-14575
       (re-pattern "(?<=(.))(?!\\1|$)")))))
   (def
    ungroup-letters
    (fn*
     ([PLACEHOLDER-14576]
      (re-seq (re-pattern "(?i)(\\d*)([A-Z ])") PLACEHOLDER-14576))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14577]
      (if
       (empty? PLACEHOLDER-14577)
       ""
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-14578 PLACEHOLDER-14579]
           (str
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-14579 1)
             ""
             PLACEHOLDER-14579)
            (first PLACEHOLDER-14578))))
         (group-letters PLACEHOLDER-14577)
         (map count (group-letters PLACEHOLDER-14577))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14580]
      (do
       (if (empty? PLACEHOLDER-14580) "")
       (apply
        str
        (map
         (fn* ([PLACEHOLDER-14581] (apply str PLACEHOLDER-14581)))
         (map
          (fn*
           ([PLACEHOLDER-14582]
            (let*
             [PLACEHOLDER-14583
              PLACEHOLDER-14582
              PLACEHOLDER-14584
              (clojure.lang.RT/nth PLACEHOLDER-14583 0 nil)
              PLACEHOLDER-14585
              (clojure.lang.RT/nth PLACEHOLDER-14583 1 nil)
              PLACEHOLDER-14586
              (clojure.lang.RT/nth PLACEHOLDER-14583 2 nil)]
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-14585 "")
              PLACEHOLDER-14586
              (repeat
               (java.lang.Integer/parseInt PLACEHOLDER-14585)
               PLACEHOLDER-14586)))))
          (ungroup-letters PLACEHOLDER-14580)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11623
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11623))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as string])
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11624]
      (reduce
       (fn*
        ([PLACEHOLDER-11625 PLACEHOLDER-11626]
         (let*
          [PLACEHOLDER-11627
           PLACEHOLDER-11626
           PLACEHOLDER-11628
           (clojure.lang.RT/nth PLACEHOLDER-11627 0 nil)
           PLACEHOLDER-11629
           (clojure.lang.RT/nth PLACEHOLDER-11627 1 nil)]
          (str
           PLACEHOLDER-11625
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-11628 1)
            PLACEHOLDER-11628)
           PLACEHOLDER-11629))))
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-11630 PLACEHOLDER-11631]
          (let*
           [PLACEHOLDER-11632
            (last PLACEHOLDER-11630)
            PLACEHOLDER-11633
            (clojure.lang.RT/nth PLACEHOLDER-11632 0 nil)
            PLACEHOLDER-11634
            (clojure.lang.RT/nth PLACEHOLDER-11632 1 nil)]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-11631
             PLACEHOLDER-11634)
            (assoc
             PLACEHOLDER-11630
             (clojure.lang.Numbers/dec
              (clojure.lang.RT/count PLACEHOLDER-11630))
             [(clojure.lang.Numbers/inc PLACEHOLDER-11633)
              PLACEHOLDER-11631])
            (conj PLACEHOLDER-11630 [1 PLACEHOLDER-11631])))))
        []
        (vec PLACEHOLDER-11624))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11635]
      (reduce
       (fn*
        ([PLACEHOLDER-11636 PLACEHOLDER-11637]
         (let*
          [PLACEHOLDER-11638
           (first
            (re-seq (re-pattern "(\\d+)(\\D)") PLACEHOLDER-11637))
           PLACEHOLDER-11639
           (clojure.lang.RT/nth PLACEHOLDER-11638 0 nil)
           PLACEHOLDER-11640
           (clojure.lang.RT/nth PLACEHOLDER-11638 1 nil)
           PLACEHOLDER-11641
           (clojure.lang.RT/nth PLACEHOLDER-11638 2 nil)]
          (if
           PLACEHOLDER-11640
           (str
            PLACEHOLDER-11636
            (string/join
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-11640)
              PLACEHOLDER-11641)))
           (str PLACEHOLDER-11636 PLACEHOLDER-11637)))))
       ""
       (vec (re-seq (re-pattern "\\d+\\D|\\D") PLACEHOLDER-11635)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11660
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11660))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-partition
    (fn*
     ([PLACEHOLDER-11661]
      (let*
       [PLACEHOLDER-11662
        (clojure.lang.RT/count PLACEHOLDER-11661)
        PLACEHOLDER-11663
        (first PLACEHOLDER-11661)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-11662 1)
        (str PLACEHOLDER-11662 PLACEHOLDER-11663)
        PLACEHOLDER-11663)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11664]
      (apply
       str
       (map
        encode-partition
        (partition-by identity PLACEHOLDER-11664))))))
   (def
    decode-partition
    (fn*
     ([PLACEHOLDER-11665]
      (let*
       [PLACEHOLDER-11666
        PLACEHOLDER-11665
        PLACEHOLDER-11667
        (clojure.lang.RT/nth PLACEHOLDER-11666 0 nil)
        PLACEHOLDER-11668
        (clojure.lang.RT/nth PLACEHOLDER-11666 1 nil)
        PLACEHOLDER-11669
        (clojure.lang.RT/nth PLACEHOLDER-11666 2 nil)]
       (if
        PLACEHOLDER-11668
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-11668)
         PLACEHOLDER-11669)
        PLACEHOLDER-11669)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11670]
      (apply
       str
       (mapcat
        decode-partition
        (re-seq
         (re-pattern "(\\d+)?([A-Za-z ])")
         PLACEHOLDER-11670)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8519
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8519))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress
    (fn*
     ([PLACEHOLDER-8520]
      (let*
       [PLACEHOLDER-8521
        PLACEHOLDER-8520
        PLACEHOLDER-8522
        (clojure.core/seq PLACEHOLDER-8521)
        PLACEHOLDER-8523
        (clojure.core/first PLACEHOLDER-8522)
        PLACEHOLDER-8524
        (clojure.core/next PLACEHOLDER-8522)
        PLACEHOLDER-8525
        PLACEHOLDER-8523
        PLACEHOLDER-8526
        PLACEHOLDER-8524
        PLACEHOLDER-8527
        PLACEHOLDER-8521]
       (let*
        [PLACEHOLDER-8528 (clojure.lang.RT/count PLACEHOLDER-8527)]
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-8528)
         (str PLACEHOLDER-8525)
         (str PLACEHOLDER-8528 PLACEHOLDER-8525)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8529]
      (apply
       str
       (map compress (partition-by identity PLACEHOLDER-8529))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8530]
      (let*
       [PLACEHOLDER-8531
        (re-matcher (re-pattern "(\\d*)([a-zA-Z ])") PLACEHOLDER-8530)]
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-8532]
           (let*
            [PLACEHOLDER-8533
             PLACEHOLDER-8532
             PLACEHOLDER-8534
             (clojure.lang.RT/nth PLACEHOLDER-8533 0 nil)
             PLACEHOLDER-8535
             (clojure.lang.RT/nth PLACEHOLDER-8533 1 nil)
             PLACEHOLDER-8536
             (clojure.lang.RT/nth PLACEHOLDER-8533 2 nil)]
            (if
             (empty? PLACEHOLDER-8535)
             PLACEHOLDER-8536
             (repeat
              (new Integer PLACEHOLDER-8535)
              PLACEHOLDER-8536)))))
         (take-while
          some?
          (repeatedly (fn* ([] (re-find PLACEHOLDER-8531))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-7948
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-7948))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    empty-string-if-one
    (fn*
     ([PLACEHOLDER-7949]
      (if
       (clojure.lang.Util/equiv 1 PLACEHOLDER-7949)
       ""
       PLACEHOLDER-7949))))
   (def
    char-partition-to-encoded-unit
    (fn*
     ([PLACEHOLDER-7950]
      (str
       (empty-string-if-one (clojure.lang.RT/count PLACEHOLDER-7950))
       (first PLACEHOLDER-7950)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-7951]
      (apply
       str
       (map
        char-partition-to-encoded-unit
        (partition-by identity PLACEHOLDER-7951))))))
   (def
    clean-encoded-unit
    (fn*
     ([PLACEHOLDER-7952]
      (let*
       [PLACEHOLDER-7953 (rest PLACEHOLDER-7952)]
       (if
        (clojure.lang.Util/equiv nil (first PLACEHOLDER-7953))
        ["1" (last PLACEHOLDER-7953)]
        PLACEHOLDER-7953)))))
   (def
    unwrap-cleaned-unit
    (fn*
     ([PLACEHOLDER-7954]
      (apply
       str
       (repeat
        (java.lang.Integer/parseInt (first PLACEHOLDER-7954))
        (last PLACEHOLDER-7954))))))
   (def
    decode-cipher-text-unit
    (fn*
     ([PLACEHOLDER-7955]
      (unwrap-cleaned-unit (clean-encoded-unit PLACEHOLDER-7955)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-7956]
      (apply
       str
       (mapv
        decode-cipher-text-unit
        (re-seq
         (re-pattern "(\\d+)?([a-zA-Z ])")
         PLACEHOLDER-7956)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11928
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11928))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11929]
      (let*
       [PLACEHOLDER-11930 (partition-by identity PLACEHOLDER-11929)]
       (apply
        str
        (filter
         (fn* ([PLACEHOLDER-11931] (not= 1 PLACEHOLDER-11931)))
         (interleave
          (map count PLACEHOLDER-11930)
          (map first PLACEHOLDER-11930))))))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-11932]
      (try
       (java.lang.Integer/parseInt PLACEHOLDER-11932)
       (catch Exception PLACEHOLDER-11933 PLACEHOLDER-11932)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11934]
      (let*
       [PLACEHOLDER-11937
        (map
         (fn*
          ([PLACEHOLDER-11935]
           (parse-int (apply str PLACEHOLDER-11935))))
         (partition-by
          (fn*
           ([PLACEHOLDER-11936]
            (java.lang.Character/isDigit PLACEHOLDER-11936)))
          PLACEHOLDER-11934))]
       (reduce
        (fn*
         ([PLACEHOLDER-11938 PLACEHOLDER-11939]
          (if
           (number? PLACEHOLDER-11939)
           (java.lang.String/join
            ""
            (reverse
             (conj
              (repeat
               (clojure.lang.Numbers/minus PLACEHOLDER-11939 1)
               (str (first PLACEHOLDER-11938)))
              PLACEHOLDER-11938)))
           (java.lang.String/join
            ""
            (list PLACEHOLDER-11939 PLACEHOLDER-11938)))))
        ""
        (reverse PLACEHOLDER-11937)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14424
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14424))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-token
    (fn*
     ([PLACEHOLDER-14425]
      (let*
       [PLACEHOLDER-14426
        PLACEHOLDER-14425
        PLACEHOLDER-14427
        (clojure.lang.RT/nth PLACEHOLDER-14426 0 nil)
        PLACEHOLDER-14428
        (clojure.lang.RT/nth PLACEHOLDER-14426 1 nil)]
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-14427))
        PLACEHOLDER-14428
        (str
         (clojure.lang.RT/count PLACEHOLDER-14427)
         PLACEHOLDER-14428))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14429]
      (str/join
       (map
        encode-token
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14429))))))
   (def
    decode-token
    (fn*
     ([PLACEHOLDER-14430]
      (let*
       [PLACEHOLDER-14431
        PLACEHOLDER-14430
        PLACEHOLDER-14432
        (clojure.lang.RT/nth PLACEHOLDER-14431 0 nil)
        PLACEHOLDER-14433
        (clojure.lang.RT/nth PLACEHOLDER-14431 1 nil)
        PLACEHOLDER-14434
        (clojure.lang.RT/nth PLACEHOLDER-14431 2 nil)
        PLACEHOLDER-14435
        (clojure.lang.RT/nth PLACEHOLDER-14431 3 nil)]
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-14432))
        PLACEHOLDER-14435
        (str/join
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-14433)
          PLACEHOLDER-14434)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14436]
      (str/join
       (map
        decode-token
        (re-seq
         (re-pattern "([0-9]+)([a-zA-Z ])|([a-zA-Z ])")
         PLACEHOLDER-14436))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11145
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11145))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   ((def
     run-length-encode
     (fn*
      ([PLACEHOLDER-11146]
       (str/split
        PLACEHOLDER-11146
        (re-pattern "(?<a>\\w)(?!\\k<a>)")))))
    "AABBBCCCCBBABBAD")
   (def run-length-decode (fn* ([PLACEHOLDER-11147] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11815
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11815))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/use '[clojure.string :only (join)]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11816]
      (let*
       [PLACEHOLDER-11817
        (clojure.lang.RT/count PLACEHOLDER-11816)
        PLACEHOLDER-11818
        (clojure.lang.RT/nth PLACEHOLDER-11816 0)]
       (if
        (not= 1 PLACEHOLDER-11817)
        (str PLACEHOLDER-11817 PLACEHOLDER-11818)
        PLACEHOLDER-11818)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11819]
      (join
       (map
        encode
        (map
         first
         (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-11819)))))))
   (def
    get-int
    (fn*
     ([PLACEHOLDER-11820]
      (java.lang.Integer/parseInt
       (join (butlast PLACEHOLDER-11820))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11821]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-11821)
        1)
       PLACEHOLDER-11821
       (repeat
        (get-int PLACEHOLDER-11821)
        (last PLACEHOLDER-11821))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11822]
      (join
       (flatten
        (map
         decode
         (re-seq
          (re-pattern "\\d*?[a-zA-Z ]{1}")
          PLACEHOLDER-11822))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11554
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11554))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11555]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-11556]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-11556)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-11555)))))))
   (def
    isdigit?
    (fn*
     ([PLACEHOLDER-11557]
      (java.lang.Character/isDigit PLACEHOLDER-11557))))
   (def
    add-1
    (fn*
     ([PLACEHOLDER-11558]
      (if
       (not (isdigit? (first PLACEHOLDER-11558)))
       (cons 1 PLACEHOLDER-11558)
       PLACEHOLDER-11558))))
   (def
    repeater
    (fn*
     ([PLACEHOLDER-11559]
      (repeat (first PLACEHOLDER-11559) (last PLACEHOLDER-11559)))))
   (def
    parse-sublist
    (fn*
     ([PLACEHOLDER-11560]
      (if
       (isdigit? (first PLACEHOLDER-11560))
       (java.lang.Integer/parseInt (apply str PLACEHOLDER-11560))
       (interpose 1 PLACEHOLDER-11560)))))
   (def
    rld
    (fn*
     ([PLACEHOLDER-11561]
      (clojure.string/join
       (map
        clojure.string/join
        (map
         repeater
         (partition
          2
          (flatten
           (map
            parse-sublist
            (partition-by isdigit? PLACEHOLDER-11561))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11562]
      (if
       (empty? PLACEHOLDER-11562)
       ""
       (if
        (not (isdigit? (first PLACEHOLDER-11562)))
        (rld (str "1" PLACEHOLDER-11562))
        (if :else (rld PLACEHOLDER-11562))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13445
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13445))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    collect-run-length
    (fn*
     ([PLACEHOLDER-13446]
      (dissoc
       (dissoc
        (update
         PLACEHOLDER-13446
         :output
         (fn*
          ([PLACEHOLDER-13447]
           (if
            (clojure.lang.Util/equiv 1 (:run-length PLACEHOLDER-13446))
            (conj
             PLACEHOLDER-13447
             (str (:current-char PLACEHOLDER-13446)))
            (if
             :else
             (conj
              PLACEHOLDER-13447
              (str
               (:run-length PLACEHOLDER-13446)
               (:current-char PLACEHOLDER-13446))))))))
        :current-char)
       :run-length))))
   (def
    collect-character
    (fn*
     ([PLACEHOLDER-13448 PLACEHOLDER-13449]
      (if
       (clojure.lang.Util/equiv
        PLACEHOLDER-13449
        (:current-char PLACEHOLDER-13448))
       (update PLACEHOLDER-13448 :run-length inc)
       (assoc
        (assoc
         (collect-run-length PLACEHOLDER-13448)
         :current-char
         PLACEHOLDER-13449)
        :run-length
        1)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13450]
      (apply
       str
       (:output
        (collect-run-length
         (reduce
          collect-character
          {:output []}
          PLACEHOLDER-13450)))))))
   (def
    third
    (fn*
     ([PLACEHOLDER-13451] (first (next (next PLACEHOLDER-13451))))))
   (def
    find-run-lengths
    (fn*
     ([PLACEHOLDER-13452]
      (map
       (fn*
        ([PLACEHOLDER-13453]
         (hash-map
          :length
          (if
           (not-empty (second PLACEHOLDER-13453))
           (read-string (second PLACEHOLDER-13453))
           1)
          :char
          (third PLACEHOLDER-13453))))
       (re-seq (re-pattern "(\\d*)([^\\d])") PLACEHOLDER-13452)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13454]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13455]
          (apply
           str
           (repeat
            (:length PLACEHOLDER-13455)
            (:char PLACEHOLDER-13455)))))
        (find-run-lengths PLACEHOLDER-13454)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8976
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8976))})
        (try
         (do
          nil
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def run-length-decode (fn* ([PLACEHOLDER-8977] nil)))
   (def
    encode-it
    (fn*
     ([PLACEHOLDER-8978 PLACEHOLDER-8979 PLACEHOLDER-8980]
      (if
       (empty? PLACEHOLDER-8978)
       PLACEHOLDER-8980
       (let*
        [PLACEHOLDER-8981
         (first PLACEHOLDER-8978)
         PLACEHOLDER-8982
         (second PLACEHOLDER-8978)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-8981 PLACEHOLDER-8982)
         (encode-it
          (drop 1 PLACEHOLDER-8978)
          (clojure.lang.Numbers/add PLACEHOLDER-8979 1)
          PLACEHOLDER-8980)
         (if
          (clojure.lang.Numbers/lt PLACEHOLDER-8979 2)
          (encode-it
           (drop 1 PLACEHOLDER-8978)
           1
           (str PLACEHOLDER-8980 PLACEHOLDER-8981))
          (encode-it
           (drop 1 PLACEHOLDER-8978)
           1
           (str
            PLACEHOLDER-8980
            PLACEHOLDER-8979
            PLACEHOLDER-8981)))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8983]
      (encode-it
       (str/split PLACEHOLDER-8983 (re-pattern ""))
       1
       (re-pattern ""))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10405
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10405))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-character
    (fn*
     ([PLACEHOLDER-10406 PLACEHOLDER-10407]
      (let*
       [PLACEHOLDER-10408
        PLACEHOLDER-10406
        PLACEHOLDER-10409
        (if
         (clojure.core/seq? PLACEHOLDER-10408)
         (if
          (clojure.core/next PLACEHOLDER-10408)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-10408))
          (if
           (clojure.core/seq PLACEHOLDER-10408)
           (clojure.core/first PLACEHOLDER-10408)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-10408)
        PLACEHOLDER-10410
        (clojure.lang.RT/get PLACEHOLDER-10409 :last)
        PLACEHOLDER-10411
        (clojure.lang.RT/get PLACEHOLDER-10409 :result)
        PLACEHOLDER-10412
        (clojure.lang.RT/get PLACEHOLDER-10409 :count)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10410 PLACEHOLDER-10407)
        {:result PLACEHOLDER-10411,
         :count (clojure.lang.Numbers/inc PLACEHOLDER-10412),
         :last PLACEHOLDER-10410}
        {:result
         (str
          PLACEHOLDER-10411
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-10412 1)
           PLACEHOLDER-10412)
          PLACEHOLDER-10410),
         :count 1,
         :last PLACEHOLDER-10407})))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10413]
      (let*
       [PLACEHOLDER-10414
        (reduce
         encode-character
         {:cur (first PLACEHOLDER-10413), :result "", :count 1}
         (str PLACEHOLDER-10413 \*))]
       (:result PLACEHOLDER-10414)))))
   (def
    decode-char
    (fn*
     ([PLACEHOLDER-10415 PLACEHOLDER-10416]
      (let*
       [PLACEHOLDER-10417
        PLACEHOLDER-10415
        PLACEHOLDER-10418
        (if
         (clojure.core/seq? PLACEHOLDER-10417)
         (if
          (clojure.core/next PLACEHOLDER-10417)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-10417))
          (if
           (clojure.core/seq PLACEHOLDER-10417)
           (clojure.core/first PLACEHOLDER-10417)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-10417)
        PLACEHOLDER-10419
        (clojure.lang.RT/get PLACEHOLDER-10418 :reps)
        PLACEHOLDER-10420
        (clojure.lang.RT/get PLACEHOLDER-10418 :result)]
       (if
        (java.lang.Character/isDigit PLACEHOLDER-10416)
        (let*
         [PLACEHOLDER-10421
          (java.lang.Integer/parseInt (str PLACEHOLDER-10416))]
         {:reps PLACEHOLDER-10421, :result PLACEHOLDER-10420})
        {:reps 1,
         :result
         (apply
          str
          PLACEHOLDER-10420
          (repeat PLACEHOLDER-10419 PLACEHOLDER-10416))})))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10422]
      (:result
       (reduce
        decode-char
        {:reps 1, :result ""}
        PLACEHOLDER-10422))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13491
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13491))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-chunk
    (fn*
     ([PLACEHOLDER-13492]
      (let*
       [PLACEHOLDER-13493
        PLACEHOLDER-13492
        PLACEHOLDER-13494
        (clojure.core/seq PLACEHOLDER-13493)
        PLACEHOLDER-13495
        (clojure.core/first PLACEHOLDER-13494)
        PLACEHOLDER-13496
        (clojure.core/next PLACEHOLDER-13494)
        PLACEHOLDER-13497
        PLACEHOLDER-13495
        PLACEHOLDER-13498
        PLACEHOLDER-13496
        PLACEHOLDER-13499
        (clojure.lang.RT/count PLACEHOLDER-13492)]
       (if
        (empty? PLACEHOLDER-13498)
        (str PLACEHOLDER-13497)
        (format "%d%s" PLACEHOLDER-13499 PLACEHOLDER-13497))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13500]
      (loop*
       [PLACEHOLDER-13501 nil PLACEHOLDER-13502 PLACEHOLDER-13500]
       (if
        (empty? PLACEHOLDER-13502)
        (str/join (reverse PLACEHOLDER-13501))
        (let*
         [PLACEHOLDER-13503
          PLACEHOLDER-13502
          PLACEHOLDER-13504
          (clojure.core/seq PLACEHOLDER-13503)
          PLACEHOLDER-13505
          (clojure.core/first PLACEHOLDER-13504)
          PLACEHOLDER-13506
          (clojure.core/next PLACEHOLDER-13504)
          PLACEHOLDER-13507
          PLACEHOLDER-13505
          PLACEHOLDER-13508
          PLACEHOLDER-13506
          PLACEHOLDER-13510
          (split-with
           (fn*
            ([PLACEHOLDER-13509]
             (clojure.lang.Util/equiv
              PLACEHOLDER-13507
              PLACEHOLDER-13509)))
           PLACEHOLDER-13502)
          PLACEHOLDER-13511
          (clojure.lang.RT/nth PLACEHOLDER-13510 0 nil)
          PLACEHOLDER-13512
          (clojure.lang.RT/nth PLACEHOLDER-13510 1 nil)]
         (recur
          (cons (encode-chunk PLACEHOLDER-13511) PLACEHOLDER-13501)
          PLACEHOLDER-13512)))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-13513]
      (if
       (empty? PLACEHOLDER-13513)
       nil
       (let*
        [PLACEHOLDER-13515
         (split-with
          (fn*
           ([PLACEHOLDER-13514]
            (java.lang.Character/isDigit PLACEHOLDER-13514)))
          PLACEHOLDER-13513)
         PLACEHOLDER-13516
         (clojure.lang.RT/nth PLACEHOLDER-13515 0 nil)
         PLACEHOLDER-13517
         (clojure.lang.RT/nth PLACEHOLDER-13515 1 nil)]
        (if
         (empty? PLACEHOLDER-13516)
         (cons
          (str (first PLACEHOLDER-13513))
          (rest PLACEHOLDER-13513))
         (let*
          [PLACEHOLDER-13518
           (java.lang.Integer/parseInt (apply str PLACEHOLDER-13516))
           PLACEHOLDER-13519
           PLACEHOLDER-13517
           PLACEHOLDER-13520
           (clojure.core/seq PLACEHOLDER-13519)
           PLACEHOLDER-13521
           (clojure.core/first PLACEHOLDER-13520)
           PLACEHOLDER-13522
           (clojure.core/next PLACEHOLDER-13520)
           PLACEHOLDER-13523
           PLACEHOLDER-13521
           PLACEHOLDER-13524
           PLACEHOLDER-13522]
          (cons
           (apply str (repeat PLACEHOLDER-13518 PLACEHOLDER-13523))
           PLACEHOLDER-13524))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13525]
      (loop*
       [PLACEHOLDER-13526 nil PLACEHOLDER-13527 PLACEHOLDER-13525]
       (let*
        [PLACEHOLDER-13528 (decode-chunk PLACEHOLDER-13527)]
        (if
         PLACEHOLDER-13528
         (let*
          [PLACEHOLDER-13529
           PLACEHOLDER-13528
           PLACEHOLDER-13530
           (clojure.core/seq PLACEHOLDER-13529)
           PLACEHOLDER-13531
           (clojure.core/first PLACEHOLDER-13530)
           PLACEHOLDER-13532
           (clojure.core/next PLACEHOLDER-13530)
           PLACEHOLDER-13533
           PLACEHOLDER-13531
           PLACEHOLDER-13534
           PLACEHOLDER-13532]
          (recur
           (cons PLACEHOLDER-13533 PLACEHOLDER-13526)
           PLACEHOLDER-13534))
         (str/join (reverse PLACEHOLDER-13526)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11027
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11027))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-unit
    (fn*
     ([PLACEHOLDER-11028 PLACEHOLDER-11029]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-11029 1)
       (str PLACEHOLDER-11028)
       (str PLACEHOLDER-11029 PLACEHOLDER-11028)))))
   (def
    decode-unit
    (fn*
     ([PLACEHOLDER-11030 PLACEHOLDER-11031]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-11031)
        0)
       PLACEHOLDER-11030
       (str
        (clojure.string/join
         (repeat
          (read-string PLACEHOLDER-11031)
          PLACEHOLDER-11030)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11032]
      (loop*
       [PLACEHOLDER-11033
        ""
        PLACEHOLDER-11034
        1
        PLACEHOLDER-11035
        PLACEHOLDER-11032]
       (if
        (clojure.lang.Util/equiv
         (clojure.lang.RT/count PLACEHOLDER-11035)
         0)
        PLACEHOLDER-11033
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-11035)
          (second PLACEHOLDER-11035))
         (recur
          PLACEHOLDER-11033
          (clojure.lang.Numbers/inc PLACEHOLDER-11034)
          (rest PLACEHOLDER-11035))
         (if
          :else
          (recur
           (str
            PLACEHOLDER-11033
            (encode-unit (first PLACEHOLDER-11035) PLACEHOLDER-11034))
           1
           (rest PLACEHOLDER-11035)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11036]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-11037]
          (decode-unit
           (clojure.lang.RT/nth PLACEHOLDER-11037 2)
           (clojure.lang.RT/nth PLACEHOLDER-11037 1))))
        (re-seq (re-pattern "([0-9]*)(.)") PLACEHOLDER-11036)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10498
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10498))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10499]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10500]
          (let*
           [PLACEHOLDER-10501
            (clojure.lang.RT/count PLACEHOLDER-10500)
            PLACEHOLDER-10502
            (first PLACEHOLDER-10500)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-10501 1)
             PLACEHOLDER-10501)
            PLACEHOLDER-10502))))
        (partition-by identity PLACEHOLDER-10499))))))
   (def
    repeat-it
    (fn*
     ([PLACEHOLDER-10503 PLACEHOLDER-10504]
      (concat
       (repeat PLACEHOLDER-10504 (first PLACEHOLDER-10503))
       (rest PLACEHOLDER-10503)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10505]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-10506]
          (let*
           [PLACEHOLDER-10507
            (clojure.lang.RT/nth PLACEHOLDER-10506 1)
            PLACEHOLDER-10508
            (clojure.lang.RT/nth PLACEHOLDER-10506 2)]
           (if
            (clojure.core/not PLACEHOLDER-10507)
            PLACEHOLDER-10508
            (apply
             str
             (repeat-it
              PLACEHOLDER-10508
              (read-string PLACEHOLDER-10507)))))))
        (re-seq
         (re-pattern "(\\d+)*([^0-9]+)")
         PLACEHOLDER-10505)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8610
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8610))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    enc-mapper
    (fn*
     ([PLACEHOLDER-8611]
      (let*
       [PLACEHOLDER-8612
        (first PLACEHOLDER-8611)
        PLACEHOLDER-8613
        (clojure.lang.RT/count PLACEHOLDER-8611)]
       (str
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-8613 1)
         PLACEHOLDER-8613
         "")
        PLACEHOLDER-8612)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8614]
      (clojure.string/join
       ""
       (map enc-mapper (partition-by identity PLACEHOLDER-8614))))))
   (def
    dec-reducer
    (fn*
     ([PLACEHOLDER-8615 PLACEHOLDER-8616]
      (let*
       [PLACEHOLDER-8617
        (first PLACEHOLDER-8615)
        PLACEHOLDER-8618
        (second PLACEHOLDER-8615)
        PLACEHOLDER-8620
        (let*
         [PLACEHOLDER-8619
          (clojure.lang.Numbers/gte
           (clojure.lang.RT/intCast PLACEHOLDER-8616)
           (clojure.lang.RT/intCast \0))]
         (if
          PLACEHOLDER-8619
          (clojure.lang.Numbers/lte
           (clojure.lang.RT/intCast PLACEHOLDER-8616)
           (clojure.lang.RT/intCast \9))
          PLACEHOLDER-8619))
        PLACEHOLDER-8621
        (clojure.lang.Numbers/minus
         (clojure.lang.RT/intCast PLACEHOLDER-8616)
         48)]
       (if
        PLACEHOLDER-8620
        [(clojure.lang.Numbers/add
          (clojure.lang.Numbers/multiply 10 PLACEHOLDER-8617)
          PLACEHOLDER-8621)
         PLACEHOLDER-8618]
        [0
         (str
          PLACEHOLDER-8618
          (apply
           str
           (repeat
            (if
             (clojure.lang.Util/equiv 0 PLACEHOLDER-8617)
             1
             PLACEHOLDER-8617)
            (str PLACEHOLDER-8616))))])))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8622]
      (second (reduce dec-reducer [0 ""] PLACEHOLDER-8622))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10776
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10776))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    str->list-of-runs
    (fn*
     ([PLACEHOLDER-10777]
      (map
       first
       (re-seq (re-pattern "([a-zA-Z]|\\s)\\1*") PLACEHOLDER-10777)))))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-10778]
      (let*
       [PLACEHOLDER-10779
        (clojure.lang.RT/count PLACEHOLDER-10778)
        PLACEHOLDER-10780
        (first PLACEHOLDER-10778)]
       (str
        (if
         (clojure.lang.Util/equiv 1 PLACEHOLDER-10779)
         ""
         PLACEHOLDER-10779)
        PLACEHOLDER-10780)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10781]
      (let*
       [PLACEHOLDER-10782 (str->list-of-runs PLACEHOLDER-10781)]
       (apply str (map encode-run PLACEHOLDER-10782))))))
   (def
    decode-element-match
    (fn*
     ([PLACEHOLDER-10783]
      (let*
       [PLACEHOLDER-10784
        PLACEHOLDER-10783
        PLACEHOLDER-10785
        (clojure.lang.RT/nth PLACEHOLDER-10784 0 nil)
        PLACEHOLDER-10786
        (clojure.lang.RT/nth PLACEHOLDER-10784 1 nil)
        PLACEHOLDER-10787
        (clojure.lang.RT/nth PLACEHOLDER-10784 2 nil)]
       (let*
        [PLACEHOLDER-10788
         (if
          (clojure.core/not (clojure.string/blank? PLACEHOLDER-10786))
          (java.lang.Integer/parseInt PLACEHOLDER-10786)
          1)]
        (apply str (repeat PLACEHOLDER-10788 PLACEHOLDER-10787)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10789]
      (let*
       [PLACEHOLDER-10790
        (re-seq
         (re-pattern "([0-9]*)([a-zA-Z]|\\s)")
         PLACEHOLDER-10789)]
       (apply str (map decode-element-match PLACEHOLDER-10790)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13096
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13096))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-seq
    (fn*
     ([PLACEHOLDER-13097]
      (let*
       [PLACEHOLDER-13098
        (clojure.lang.RT/count PLACEHOLDER-13097)
        PLACEHOLDER-13099
        (first PLACEHOLDER-13097)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-13098)
        PLACEHOLDER-13099
        (str PLACEHOLDER-13098 PLACEHOLDER-13099))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13100]
      (apply
       str
       (map encode-seq (partition-by identity PLACEHOLDER-13100))))))
   (def
    apply-match
    (fn*
     ([PLACEHOLDER-13101]
      (let*
       [PLACEHOLDER-13102
        PLACEHOLDER-13101
        PLACEHOLDER-13103
        (clojure.lang.RT/nth PLACEHOLDER-13102 0 nil)
        PLACEHOLDER-13104
        (clojure.lang.RT/nth PLACEHOLDER-13102 1 nil)
        PLACEHOLDER-13105
        (clojure.lang.RT/nth PLACEHOLDER-13102 2 nil)]
       (if
        (empty? PLACEHOLDER-13104)
        PLACEHOLDER-13105
        (apply
         str
         (repeat
          (java.lang.Long/parseLong PLACEHOLDER-13104)
          PLACEHOLDER-13105)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13106]
      (apply
       str
       (map
        apply-match
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13106)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14980
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14980))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-14981]
      (let*
       [PLACEHOLDER-14982
        (clojure.lang.RT/intCast \0)
        PLACEHOLDER-14983
        (clojure.lang.RT/intCast \9)]
       (<=
        PLACEHOLDER-14982
        (clojure.lang.RT/intCast PLACEHOLDER-14981)
        PLACEHOLDER-14983)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14984] (run-length-encode PLACEHOLDER-14984 ""))
     ([PLACEHOLDER-14985 PLACEHOLDER-14986]
      (if
       (empty? PLACEHOLDER-14985)
       PLACEHOLDER-14986
       (let*
        [PLACEHOLDER-14987
         (first PLACEHOLDER-14985)
         PLACEHOLDER-14989
         (take-while
          (fn*
           ([PLACEHOLDER-14988]
            (clojure.lang.Util/equiv
             PLACEHOLDER-14988
             PLACEHOLDER-14987)))
          PLACEHOLDER-14985)
         PLACEHOLDER-14990
         (clojure.lang.RT/count PLACEHOLDER-14989)]
        (run-length-encode
         (drop PLACEHOLDER-14990 PLACEHOLDER-14985)
         (str
          PLACEHOLDER-14986
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-14990 1)
           PLACEHOLDER-14990
           "")
          PLACEHOLDER-14987)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14991] (run-length-decode PLACEHOLDER-14991 ""))
     ([PLACEHOLDER-14992 PLACEHOLDER-14993]
      (if
       (empty? PLACEHOLDER-14992)
       PLACEHOLDER-14993
       (if
        (is-digit? (first PLACEHOLDER-14992))
        (let*
         [PLACEHOLDER-14994
          (java.lang.Integer/parseInt
           (str/join (take-while is-digit? PLACEHOLDER-14992)))
          PLACEHOLDER-14995
          (drop-while is-digit? PLACEHOLDER-14992)
          PLACEHOLDER-14996
          (clojure.core/seq PLACEHOLDER-14995)
          PLACEHOLDER-14997
          (clojure.core/first PLACEHOLDER-14996)
          PLACEHOLDER-14998
          (clojure.core/next PLACEHOLDER-14996)
          PLACEHOLDER-14999
          PLACEHOLDER-14997
          PLACEHOLDER-15000
          PLACEHOLDER-14998]
         (run-length-decode
          PLACEHOLDER-15000
          (apply
           str
           PLACEHOLDER-14993
           (repeat PLACEHOLDER-14994 PLACEHOLDER-14999))))
        (run-length-decode
         (rest PLACEHOLDER-14992)
         (str PLACEHOLDER-14993 (first PLACEHOLDER-14992)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10992
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10992))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10993]
      (clojure.string/join
       (mapcat
        (fn*
         ([PLACEHOLDER-10994]
          (let*
           [PLACEHOLDER-10995
            PLACEHOLDER-10994
            PLACEHOLDER-10996
            (clojure.lang.RT/nth PLACEHOLDER-10995 0 nil)
            PLACEHOLDER-10997
            (clojure.lang.RT/nth PLACEHOLDER-10995 1 nil)]
           [(if
             (clojure.lang.Numbers/gt PLACEHOLDER-10996 1)
             PLACEHOLDER-10996)
            PLACEHOLDER-10997])))
        (map
         (juxt count first)
         (partition-by identity PLACEHOLDER-10993)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10998] (run-length-decode PLACEHOLDER-10998 ""))
     ([PLACEHOLDER-10999 PLACEHOLDER-11000]
      (if
       (not-empty PLACEHOLDER-10999)
       (let*
        [PLACEHOLDER-11001
         (re-find (re-pattern "^(\\d+)?(\\D)(.*)$") PLACEHOLDER-10999)
         PLACEHOLDER-11002
         (clojure.lang.RT/nth PLACEHOLDER-11001 0 nil)
         PLACEHOLDER-11003
         (clojure.lang.RT/nth PLACEHOLDER-11001 1 nil)
         PLACEHOLDER-11004
         (clojure.lang.RT/nth PLACEHOLDER-11001 2 nil)
         PLACEHOLDER-11005
         (clojure.lang.RT/nth PLACEHOLDER-11001 3 nil)
         PLACEHOLDER-11006
         (if
          PLACEHOLDER-11003
          (java.lang.Integer/parseInt PLACEHOLDER-11003)
          1)
         PLACEHOLDER-11007
         (repeat PLACEHOLDER-11006 PLACEHOLDER-11004)]
        (recur
         PLACEHOLDER-11005
         (str
          PLACEHOLDER-11000
          (clojure.string/join PLACEHOLDER-11007))))
       PLACEHOLDER-11000)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10758
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10758))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10759]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-10760]
          (str
           (if
            (clojure.lang.Numbers/lt
             1
             (clojure.lang.RT/count (first PLACEHOLDER-10760)))
            (clojure.lang.RT/count (first PLACEHOLDER-10760)))
           (last PLACEHOLDER-10760))))
        (re-seq
         (re-pattern "([a-zA-Z\\ ])\\1*")
         PLACEHOLDER-10759))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10761]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-10762]
          (clojure.string/join
           (repeat
            (if
             (not
              (clojure.lang.Util/equiv (second PLACEHOLDER-10762) ""))
             (bigdec (second PLACEHOLDER-10762))
             1)
            (last PLACEHOLDER-10762)))))
        (re-seq
         (re-pattern "([0-9]*)([a-zA-Z\\ ]{1})")
         PLACEHOLDER-10761)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12095
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12095))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12096]
      (apply
       str
       (filter
        (fn* ([PLACEHOLDER-12097] (not= 1 PLACEHOLDER-12097)))
        (reduce
         (fn*
          ([PLACEHOLDER-12098 PLACEHOLDER-12099]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-12099
             (last PLACEHOLDER-12098))
            (conj
             (vec (drop-last 2 PLACEHOLDER-12098))
             (clojure.lang.Numbers/inc
              (first (take-last 2 PLACEHOLDER-12098)))
             PLACEHOLDER-12099)
            (conj PLACEHOLDER-12098 1 PLACEHOLDER-12099))))
         []
         PLACEHOLDER-12096))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12100]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-12101]
           (repeat
            (if
             (empty? (second PLACEHOLDER-12101))
             1
             (java.lang.Integer/parseInt (second PLACEHOLDER-12101)))
            (last PLACEHOLDER-12101))))
         (re-seq
          (re-pattern "([0-9]*)([^0-9])")
          PLACEHOLDER-12100))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13313
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13313))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    update-cipher-text
    (fn*
     ([PLACEHOLDER-13314 PLACEHOLDER-13315]
      (let*
       [PLACEHOLDER-13316
        (clojure.lang.RT/count PLACEHOLDER-13315)
        PLACEHOLDER-13317
        (first PLACEHOLDER-13315)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-13316 1)
        (str PLACEHOLDER-13314 PLACEHOLDER-13316 PLACEHOLDER-13317)
        (str PLACEHOLDER-13314 PLACEHOLDER-13317))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13318]
      (reduce
       update-cipher-text
       ""
       (partition-by identity PLACEHOLDER-13318)))))
   (def
    update-decoded-text
    (fn*
     ([PLACEHOLDER-13319 PLACEHOLDER-13320]
      (let*
       [PLACEHOLDER-13321
        PLACEHOLDER-13320
        PLACEHOLDER-13322
        (if
         (clojure.core/seq? PLACEHOLDER-13321)
         (if
          (clojure.core/next PLACEHOLDER-13321)
          (clojure.lang.PersistentArrayMap/createAsIfByAssoc
           (clojure.core/to-array PLACEHOLDER-13321))
          (if
           (clojure.core/seq PLACEHOLDER-13321)
           (clojure.core/first PLACEHOLDER-13321)
           clojure.lang.PersistentArrayMap/EMPTY))
         PLACEHOLDER-13321)
        PLACEHOLDER-13323
        (clojure.lang.RT/get PLACEHOLDER-13322 :ch)
        PLACEHOLDER-13324
        (clojure.lang.RT/get PLACEHOLDER-13322 :len)]
       (str
        PLACEHOLDER-13319
        (apply str (repeat PLACEHOLDER-13324 PLACEHOLDER-13323)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13325]
      (reduce
       update-decoded-text
       ""
       (map
        (fn*
         ([PLACEHOLDER-13326]
          (let*
           [PLACEHOLDER-13327
            PLACEHOLDER-13326
            PLACEHOLDER-13328
            (clojure.lang.RT/nth PLACEHOLDER-13327 0 nil)
            PLACEHOLDER-13329
            (clojure.lang.RT/nth PLACEHOLDER-13327 1 nil)
            PLACEHOLDER-13330
            (clojure.lang.RT/nth PLACEHOLDER-13327 2 nil)]
           {:ch PLACEHOLDER-13330,
            :len
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-13329 "")
             1
             (java.lang.Integer/parseInt PLACEHOLDER-13329))})))
        (re-seq
         (re-pattern "(?i)(\\d*)([a-z\\s])")
         PLACEHOLDER-13325)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9098
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9098))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9099]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-9100]
          (clojure.lang.Util/equiv PLACEHOLDER-9100 1)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-9099)))))))
   (def re-n-x-pairs (re-pattern "(\\d*)([a-zA-Z\\s]{1})"))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9101]
      (let*
       [PLACEHOLDER-9102
        (map rest (re-seq re-n-x-pairs PLACEHOLDER-9101))
        PLACEHOLDER-9107
        (fn*
         ([PLACEHOLDER-9103]
          (let*
           [PLACEHOLDER-9104
            PLACEHOLDER-9103
            PLACEHOLDER-9105
            (clojure.lang.RT/nth PLACEHOLDER-9104 0 nil)
            PLACEHOLDER-9106
            (clojure.lang.RT/nth PLACEHOLDER-9104 1 nil)]
           (list
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-9105 "")
             1
             (java.lang.Integer/parseInt PLACEHOLDER-9105))
            PLACEHOLDER-9106))))
        PLACEHOLDER-9108
        (map PLACEHOLDER-9107 PLACEHOLDER-9102)]
       (reduce
        (fn*
         ([PLACEHOLDER-9109 PLACEHOLDER-9110]
          (let*
           [PLACEHOLDER-9111
            PLACEHOLDER-9110
            PLACEHOLDER-9112
            (clojure.lang.RT/nth PLACEHOLDER-9111 0 nil)
            PLACEHOLDER-9113
            (clojure.lang.RT/nth PLACEHOLDER-9111 1 nil)]
           (apply
            str
            PLACEHOLDER-9109
            (repeat PLACEHOLDER-9112 PLACEHOLDER-9113)))))
        ""
        PLACEHOLDER-9108))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9075
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9075))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as string]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-letter
    (fn*
     ([PLACEHOLDER-9076]
      (let*
       [PLACEHOLDER-9077
        PLACEHOLDER-9076
        PLACEHOLDER-9078
        (clojure.lang.RT/nth PLACEHOLDER-9077 0 nil)
        PLACEHOLDER-9079
        (clojure.lang.RT/nth PLACEHOLDER-9077 1 nil)]
       (str
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-9079 1)
         PLACEHOLDER-9079
         "")
        PLACEHOLDER-9078)))))
   (def
    increment-count-on
    (fn*
     ([PLACEHOLDER-9080]
      (merge-with
       +
       {(first (keys PLACEHOLDER-9080)) 1}
       PLACEHOLDER-9080))))
   (def
    vk
    (fn*
     ([PLACEHOLDER-9081]
      (let*
       [PLACEHOLDER-9082 (first PLACEHOLDER-9081)]
       (encode-letter PLACEHOLDER-9082)))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-9083 PLACEHOLDER-9084]
      (let*
       [PLACEHOLDER-9085 (peek PLACEHOLDER-9083)]
       (if
        (contains? PLACEHOLDER-9085 PLACEHOLDER-9084)
        (conj
         (pop PLACEHOLDER-9083)
         (increment-count-on PLACEHOLDER-9085))
        (conj PLACEHOLDER-9083 {PLACEHOLDER-9084 1}))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9086]
      (string/join (map vk (reduce encode [] PLACEHOLDER-9086))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-9087]
      (let*
       [PLACEHOLDER-9088
        (not (clojure.lang.Util/identical PLACEHOLDER-9087 nil))]
       (if
        PLACEHOLDER-9088
        (java.lang.Character/isDigit PLACEHOLDER-9087)
        PLACEHOLDER-9088)))))
   (def
    number-prefix
    (fn*
     ([PLACEHOLDER-9089] (number-prefix PLACEHOLDER-9089 ""))
     ([PLACEHOLDER-9090 PLACEHOLDER-9091]
      (let*
       [PLACEHOLDER-9092 (first PLACEHOLDER-9090)]
       (if
        (digit? PLACEHOLDER-9092)
        (number-prefix
         (rest PLACEHOLDER-9090)
         (str PLACEHOLDER-9092 PLACEHOLDER-9091))
        (str (reduce str (reverse PLACEHOLDER-9091))))))))
   (def
    to-number
    (fn*
     ([PLACEHOLDER-9093]
      (if
       (clojure.string/blank? PLACEHOLDER-9093)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-9093)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9094 PLACEHOLDER-9095]
      (if
       (digit? PLACEHOLDER-9095)
       (str PLACEHOLDER-9094 PLACEHOLDER-9095)
       (let*
        [PLACEHOLDER-9096
         (str
          (reduce
           str
           (reverse (number-prefix (reverse PLACEHOLDER-9094)))))]
        (str
         (subs
          PLACEHOLDER-9094
          0
          (clojure.lang.Numbers/minus
           (clojure.lang.RT/count PLACEHOLDER-9094)
           (clojure.lang.RT/count PLACEHOLDER-9096)))
         (apply
          str
          (repeat (to-number PLACEHOLDER-9096) PLACEHOLDER-9095))))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-9097] (reduce decode "" PLACEHOLDER-9097)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10352
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10352))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10353]
      (let*
       [PLACEHOLDER-10354 (partition-by identity PLACEHOLDER-10353)]
       (apply
        str
        (filter
         (fn* ([PLACEHOLDER-10355] (not= 1 PLACEHOLDER-10355)))
         (flatten
          (map
           (fn*
            ([PLACEHOLDER-10356]
             (list
              (clojure.lang.RT/count PLACEHOLDER-10356)
              (first PLACEHOLDER-10356))))
           PLACEHOLDER-10354))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10357]
      (apply
       str
       (flatten
        (reduce
         (fn*
          ([PLACEHOLDER-10358 PLACEHOLDER-10359]
           (conj
            PLACEHOLDER-10358
            (repeat
             (let*
              [PLACEHOLDER-10360 (butlast PLACEHOLDER-10359)]
              (if
               PLACEHOLDER-10360
               (let*
                [PLACEHOLDER-10361 PLACEHOLDER-10360]
                (java.lang.Integer/parseInt
                 (apply str PLACEHOLDER-10361)))
               1))
             (last PLACEHOLDER-10359)))))
         []
         (re-seq (re-pattern "\\d*[\\S\\s]") PLACEHOLDER-10357)))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10834
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10834))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10835]
      (loop*
       [PLACEHOLDER-10836
        nil
        PLACEHOLDER-10837
        (first PLACEHOLDER-10835)
        PLACEHOLDER-10838
        0
        PLACEHOLDER-10839
        (rest PLACEHOLDER-10835)]
       (let*
        [PLACEHOLDER-10840 (first PLACEHOLDER-10839)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-10840 nil)
         (str
          PLACEHOLDER-10836
          (if
           (clojure.lang.Numbers/gt PLACEHOLDER-10838 0)
           (clojure.lang.Numbers/inc PLACEHOLDER-10838))
          PLACEHOLDER-10837)
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-10837 PLACEHOLDER-10840)
          (recur
           PLACEHOLDER-10836
           PLACEHOLDER-10840
           (clojure.lang.Numbers/inc PLACEHOLDER-10838)
           (rest PLACEHOLDER-10839))
          (if
           :else
           (recur
            (str
             PLACEHOLDER-10836
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-10838 0)
              (clojure.lang.Numbers/inc PLACEHOLDER-10838))
             PLACEHOLDER-10837)
            PLACEHOLDER-10840
            0
            (rest PLACEHOLDER-10839))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10841]
      (loop*
       [PLACEHOLDER-10842
        nil
        PLACEHOLDER-10843
        (first PLACEHOLDER-10841)
        PLACEHOLDER-10844
        0
        PLACEHOLDER-10845
        (rest PLACEHOLDER-10841)]
       (let*
        [PLACEHOLDER-10846 (first PLACEHOLDER-10845)]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-10846 nil)
         (str
          PLACEHOLDER-10842
          (apply
           str
           (repeat
            (if
             (clojure.lang.Numbers/isZero PLACEHOLDER-10844)
             1
             PLACEHOLDER-10844)
            PLACEHOLDER-10843)))
         (if
          (clojure.spec.alpha/int-in-range?
           48
           58
           (clojure.lang.RT/intCast PLACEHOLDER-10843))
          (recur
           PLACEHOLDER-10842
           PLACEHOLDER-10846
           (clojure.lang.Numbers/add
            (clojure.lang.Numbers/multiply PLACEHOLDER-10844 10)
            (clojure.lang.Numbers/minus
             (clojure.lang.RT/intCast PLACEHOLDER-10843)
             48))
           (rest PLACEHOLDER-10845))
          (if
           :else
           (recur
            (str
             PLACEHOLDER-10842
             (apply
              str
              (repeat
               (if
                (clojure.lang.Numbers/isZero PLACEHOLDER-10844)
                1
                PLACEHOLDER-10844)
               PLACEHOLDER-10843)))
            PLACEHOLDER-10846
            0
            (rest PLACEHOLDER-10845)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10227
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10227))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-char-cnt
    (fn*
     ([PLACEHOLDER-10228 PLACEHOLDER-10229]
      (seq
       (str
        (if
         (clojure.lang.Numbers/lt 1 PLACEHOLDER-10228)
         PLACEHOLDER-10228)
        PLACEHOLDER-10229)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10230]
      (let*
       [PLACEHOLDER-10238
        (reduce
         (fn*
          ([PLACEHOLDER-10231 PLACEHOLDER-10232]
           (let*
            [PLACEHOLDER-10233
             PLACEHOLDER-10231
             PLACEHOLDER-10234
             (clojure.lang.RT/nth PLACEHOLDER-10233 0 nil)
             PLACEHOLDER-10235
             (clojure.lang.RT/nth PLACEHOLDER-10233 1 nil)
             PLACEHOLDER-10236
             (clojure.lang.RT/nth PLACEHOLDER-10233 2 nil)]
            (if
             (let*
              [PLACEHOLDER-10237
               (clojure.lang.Util/equiv
                PLACEHOLDER-10235
                PLACEHOLDER-10232)]
              (if
               PLACEHOLDER-10237
               PLACEHOLDER-10237
               (clojure.lang.Util/identical PLACEHOLDER-10235 nil)))
             [PLACEHOLDER-10234
              PLACEHOLDER-10232
              (clojure.lang.Numbers/inc PLACEHOLDER-10236)]
             (if
              :else
              [(concat
                PLACEHOLDER-10234
                (encode-char-cnt PLACEHOLDER-10236 PLACEHOLDER-10235))
               PLACEHOLDER-10232
               1])))))
         [nil nil 0]
         PLACEHOLDER-10230)
        PLACEHOLDER-10239
        (clojure.lang.RT/nth PLACEHOLDER-10238 0 nil)
        PLACEHOLDER-10240
        (clojure.lang.RT/nth PLACEHOLDER-10238 1 nil)
        PLACEHOLDER-10241
        (clojure.lang.RT/nth PLACEHOLDER-10238 2 nil)]
       (apply
        str
        (concat
         PLACEHOLDER-10239
         (encode-char-cnt PLACEHOLDER-10241 PLACEHOLDER-10240)))))))
   (def
    int-from-digits
    (fn*
     ([PLACEHOLDER-10242]
      (let*
       [PLACEHOLDER-10243 (apply str PLACEHOLDER-10242)]
       (if
        (empty? PLACEHOLDER-10243)
        1
        (if :else (java.lang.Integer/parseInt PLACEHOLDER-10243)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10244]
      (let*
       [PLACEHOLDER-10250
        (reduce
         (fn*
          ([PLACEHOLDER-10245 PLACEHOLDER-10246]
           (let*
            [PLACEHOLDER-10247
             PLACEHOLDER-10245
             PLACEHOLDER-10248
             (clojure.lang.RT/nth PLACEHOLDER-10247 0 nil)
             PLACEHOLDER-10249
             (clojure.lang.RT/nth PLACEHOLDER-10247 1 nil)]
            (if
             (java.lang.Character/isDigit PLACEHOLDER-10246)
             [PLACEHOLDER-10248
              (conj PLACEHOLDER-10249 PLACEHOLDER-10246)]
             (if
              :else
              [(concat
                PLACEHOLDER-10248
                (repeat
                 (int-from-digits PLACEHOLDER-10249)
                 PLACEHOLDER-10246))
               []])))))
         [[] []]
         PLACEHOLDER-10244)
        PLACEHOLDER-10251
        (clojure.lang.RT/nth PLACEHOLDER-10250 0 nil)]
       (apply str PLACEHOLDER-10251))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14261
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14261))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14262]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14263]
          (let*
           [PLACEHOLDER-14264
            PLACEHOLDER-14263
            PLACEHOLDER-14265
            (clojure.core/seq PLACEHOLDER-14264)
            PLACEHOLDER-14266
            (clojure.core/first PLACEHOLDER-14265)
            PLACEHOLDER-14267
            (clojure.core/next PLACEHOLDER-14265)
            PLACEHOLDER-14268
            PLACEHOLDER-14266
            PLACEHOLDER-14269
            PLACEHOLDER-14267
            PLACEHOLDER-14270
            PLACEHOLDER-14264]
           (if
            (clojure.lang.Util/equiv
             1
             (clojure.lang.RT/count PLACEHOLDER-14270))
            [PLACEHOLDER-14268]
            [(clojure.lang.RT/count PLACEHOLDER-14270)
             PLACEHOLDER-14268]))))
        (partition-by identity PLACEHOLDER-14262))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14271]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-14272]
          (let*
           [PLACEHOLDER-14273
            PLACEHOLDER-14272
            PLACEHOLDER-14274
            (clojure.lang.RT/nth PLACEHOLDER-14273 0 nil)
            PLACEHOLDER-14275
            (clojure.lang.RT/nth PLACEHOLDER-14273 1 nil)]
           (if
            (java.lang.Character/isDigit (first PLACEHOLDER-14274))
            (let*
             [PLACEHOLDER-14276
              (new Integer (apply str PLACEHOLDER-14274))]
             (concat
              (repeat PLACEHOLDER-14276 (first PLACEHOLDER-14275))
              (rest PLACEHOLDER-14275)))
            PLACEHOLDER-14274))))
        (partition-all
         2
         2
         (partition-by
          (fn*
           ([PLACEHOLDER-14277]
            (java.lang.Character/isDigit PLACEHOLDER-14277)))
          PLACEHOLDER-14271))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12787
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12787))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12788]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-12789]
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/count PLACEHOLDER-12789)
            1)
           PLACEHOLDER-12789
           (str
            (clojure.lang.RT/count PLACEHOLDER-12789)
            (first PLACEHOLDER-12789)))))
        (map
         first
         (re-seq (re-pattern "([\\w\\s])\\1*") PLACEHOLDER-12788)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12790]
      (apply
       str
       (map
        (fn* ([PLACEHOLDER-12791] (apply str PLACEHOLDER-12791)))
        (map
         (fn*
          ([PLACEHOLDER-12792]
           (let*
            [PLACEHOLDER-12793
             (re-find (re-pattern "\\d+") PLACEHOLDER-12792)
             PLACEHOLDER-12794
             (last PLACEHOLDER-12792)]
            (if
             (clojure.lang.Util/identical PLACEHOLDER-12793 nil)
             PLACEHOLDER-12792
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-12793)
              PLACEHOLDER-12794)))))
         (re-seq (re-pattern "\\d*[\\w\\s]") PLACEHOLDER-12790)))))))
   (run-length-decode (run-length-encode "zzz ZZ  zZ")))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13716
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13716))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    is-letter-or-space?
    (fn*
     ([PLACEHOLDER-13717]
      (let*
       [PLACEHOLDER-13718
        (java.lang.Character/isLetter PLACEHOLDER-13717)]
       (if
        PLACEHOLDER-13718
        PLACEHOLDER-13718
        (java.lang.Character/isSpace PLACEHOLDER-13717))))))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-13719]
      (java.lang.Character/isDigit PLACEHOLDER-13719))))
   (def
    run-length-encode
    (fn*
     ([] nil)
     ([PLACEHOLDER-13720]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13721]
          (let*
           [PLACEHOLDER-13722
            (clojure.lang.RT/count PLACEHOLDER-13721)]
           (case*
            PLACEHOLDER-13722
            0
            0
            (str
             (clojure.lang.RT/count PLACEHOLDER-13721)
             (first PLACEHOLDER-13721))
            {1 [1 (first PLACEHOLDER-13721)]}
            :compact
            :int
            nil))))
        (partition-by identity PLACEHOLDER-13720))))))
   (def
    run-length-decode-rec
    (fn*
     ([PLACEHOLDER-13723 PLACEHOLDER-13724]
      (if
       (empty? PLACEHOLDER-13723)
       PLACEHOLDER-13724
       (if
        :else
        (let*
         [PLACEHOLDER-13725
          (take-while is-letter-or-space? PLACEHOLDER-13723)
          PLACEHOLDER-13726
          (clojure.lang.RT/count PLACEHOLDER-13725)]
         (if
          (clojure.lang.Numbers/gt PLACEHOLDER-13726 0)
          (run-length-decode-rec
           (nthrest PLACEHOLDER-13723 PLACEHOLDER-13726)
           (concat PLACEHOLDER-13724 PLACEHOLDER-13725))
          (if
           :else
           (let*
            [PLACEHOLDER-13727
             (split-with is-digit? PLACEHOLDER-13723)
             PLACEHOLDER-13728
             (java.lang.Integer/parseInt
              (apply str (clojure.lang.RT/nth PLACEHOLDER-13727 0)))
             PLACEHOLDER-13729
             (first (clojure.lang.RT/nth PLACEHOLDER-13727 1))
             PLACEHOLDER-13730
             (rest (clojure.lang.RT/nth PLACEHOLDER-13727 1))]
            (run-length-decode-rec
             PLACEHOLDER-13730
             (concat
              PLACEHOLDER-13724
              (repeat PLACEHOLDER-13728 PLACEHOLDER-13729))))))))))))
   (def
    run-length-decode
    (fn*
     ([] nil)
     ([PLACEHOLDER-13731]
      (apply
       str
       (run-length-decode-rec (seq PLACEHOLDER-13731) []))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11440
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11440))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11441]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-11442]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-11442)))
        (flatten
         (map
          (fn*
           ([PLACEHOLDER-11443]
            (vector
             (clojure.lang.RT/count PLACEHOLDER-11443)
             (first PLACEHOLDER-11443))))
          (partition-by identity PLACEHOLDER-11441))))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-11444]
      (java.lang.Character/isDigit (first PLACEHOLDER-11444)))))
   (def
    add-ones
    (fn*
     ([PLACEHOLDER-11445]
      (let*
       [PLACEHOLDER-11446 (atom nil)]
       (map
        (fn*
         ([PLACEHOLDER-11447]
          (if
           (int? PLACEHOLDER-11447)
           (do (reset! PLACEHOLDER-11446 :int) PLACEHOLDER-11447)
           (if
            (clojure.lang.Util/equiv (deref PLACEHOLDER-11446) :int)
            (do (reset! PLACEHOLDER-11446 :nil) PLACEHOLDER-11447)
            (if
             :else
             (do
              (reset! PLACEHOLDER-11446 :nil)
              [1 PLACEHOLDER-11447]))))))
        PLACEHOLDER-11445)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11448]
      (apply
       str
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-11449]
           (repeat
            (first PLACEHOLDER-11449)
            (second PLACEHOLDER-11449))))
         (partition
          2
          (flatten
           (add-ones
            (map
             (fn*
              ([PLACEHOLDER-11450]
               (if
                (digit? PLACEHOLDER-11450)
                (java.lang.Integer/parseInt PLACEHOLDER-11450)
                PLACEHOLDER-11450)))
             (re-seq
              (re-pattern "\\d+|[^0-9]")
              PLACEHOLDER-11448))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13403
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13403))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13404]
      (str/replace
       PLACEHOLDER-13404
       (re-pattern "(.)\\1+")
       (fn*
        ([PLACEHOLDER-13405]
         (str
          (clojure.lang.RT/count (PLACEHOLDER-13405 0))
          (PLACEHOLDER-13405 1))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13406]
      (str/replace
       PLACEHOLDER-13406
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-13407]
         (str/join
          (repeat
           (java.lang.Integer/parseInt (PLACEHOLDER-13407 1))
           (PLACEHOLDER-13407 2))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11054
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11054))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11055]
      (loop*
       [PLACEHOLDER-11056 PLACEHOLDER-11055 PLACEHOLDER-11057 ""]
       (if
        (empty? PLACEHOLDER-11056)
        (apply str PLACEHOLDER-11057)
        (let*
         [PLACEHOLDER-11058
          (first PLACEHOLDER-11056)
          PLACEHOLDER-11059
          (split-with (partial = PLACEHOLDER-11058) PLACEHOLDER-11056)
          PLACEHOLDER-11060
          (clojure.lang.RT/nth PLACEHOLDER-11059 0 nil)
          PLACEHOLDER-11061
          (clojure.lang.RT/nth PLACEHOLDER-11059 1 nil)
          PLACEHOLDER-11062
          (clojure.lang.RT/count PLACEHOLDER-11060)]
         (recur
          PLACEHOLDER-11061
          (str
           PLACEHOLDER-11057
           (if
            (clojure.lang.Numbers/lte PLACEHOLDER-11062 1)
            ""
            PLACEHOLDER-11062)
           PLACEHOLDER-11058))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11063]
      (loop*
       [PLACEHOLDER-11064 PLACEHOLDER-11063 PLACEHOLDER-11065 ""]
       (if
        (empty? PLACEHOLDER-11064)
        PLACEHOLDER-11065
        (let*
         [PLACEHOLDER-11067
          (split-with
           (fn*
            ([PLACEHOLDER-11066]
             (re-matches (re-pattern "\\d") (str PLACEHOLDER-11066))))
           PLACEHOLDER-11064)
          PLACEHOLDER-11068
          (clojure.lang.RT/nth PLACEHOLDER-11067 0 nil)
          PLACEHOLDER-11069
          (clojure.lang.RT/nth PLACEHOLDER-11067 1 nil)
          PLACEHOLDER-11070
          (clojure.core/seq PLACEHOLDER-11069)
          PLACEHOLDER-11071
          (clojure.core/first PLACEHOLDER-11070)
          PLACEHOLDER-11072
          (clojure.core/next PLACEHOLDER-11070)
          PLACEHOLDER-11073
          PLACEHOLDER-11071
          PLACEHOLDER-11074
          PLACEHOLDER-11072]
         (recur
          PLACEHOLDER-11074
          (str
           PLACEHOLDER-11065
           (apply
            str
            (repeat
             (if
              (seq PLACEHOLDER-11068)
              (new Integer (apply str PLACEHOLDER-11068))
              1)
             PLACEHOLDER-11073)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9444
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9444))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-buf
    (fn*
     ([PLACEHOLDER-9445]
      (let*
       [PLACEHOLDER-9446 (clojure.lang.RT/count PLACEHOLDER-9445)]
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-9446 1)
        PLACEHOLDER-9445
        (str PLACEHOLDER-9446 (first PLACEHOLDER-9445)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9447]
      (loop*
       [PLACEHOLDER-9448
        (clojure.lang.Numbers/char_array PLACEHOLDER-9447)
        PLACEHOLDER-9449
        ""
        PLACEHOLDER-9450
        ""]
       (if
        (empty? PLACEHOLDER-9448)
        (str PLACEHOLDER-9450 (encode-buf PLACEHOLDER-9449))
        (let*
         [PLACEHOLDER-9451
          PLACEHOLDER-9448
          PLACEHOLDER-9452
          (clojure.core/seq PLACEHOLDER-9451)
          PLACEHOLDER-9453
          (clojure.core/first PLACEHOLDER-9452)
          PLACEHOLDER-9454
          (clojure.core/next PLACEHOLDER-9452)
          PLACEHOLDER-9455
          PLACEHOLDER-9453
          PLACEHOLDER-9456
          PLACEHOLDER-9454]
         (if
          (empty? PLACEHOLDER-9449)
          (recur
           PLACEHOLDER-9456
           (str PLACEHOLDER-9449 PLACEHOLDER-9455)
           PLACEHOLDER-9450)
          (if
           (not= PLACEHOLDER-9455 (last PLACEHOLDER-9449))
           (recur
            PLACEHOLDER-9456
            (str PLACEHOLDER-9455)
            (str PLACEHOLDER-9450 (encode-buf PLACEHOLDER-9449)))
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-9455
             (last PLACEHOLDER-9449))
            (recur
             PLACEHOLDER-9456
             (str PLACEHOLDER-9449 PLACEHOLDER-9455)
             PLACEHOLDER-9450)
            (if
             :else
             [:error
              PLACEHOLDER-9455
              PLACEHOLDER-9456
              PLACEHOLDER-9449
              PLACEHOLDER-9450]))))))))))
   (def
    decode-buf
    (fn*
     ([PLACEHOLDER-9457]
      (let*
       [PLACEHOLDER-9458
        (subvec
         (re-matches (re-pattern "(\\d*)(.)") PLACEHOLDER-9457)
         1)
        PLACEHOLDER-9459
        (clojure.lang.RT/nth PLACEHOLDER-9458 0 nil)
        PLACEHOLDER-9460
        (clojure.lang.RT/nth PLACEHOLDER-9458 1 nil)]
       (if
        (empty? PLACEHOLDER-9459)
        (str PLACEHOLDER-9460)
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-9459)
          PLACEHOLDER-9460)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9461]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9462] (decode-buf (first PLACEHOLDER-9462))))
        (re-seq
         (re-pattern "(\\d*[a-zA-Z\\s])")
         PLACEHOLDER-9461)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9357
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9357))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9358]
      (let*
       [PLACEHOLDER-9359
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-9358)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-9360]
           (str
            (let*
             [PLACEHOLDER-9361
              (clojure.lang.RT/count (first PLACEHOLDER-9360))]
             (if
              (clojure.lang.Numbers/gt PLACEHOLDER-9361 1)
              PLACEHOLDER-9361))
            (second PLACEHOLDER-9360))))
         PLACEHOLDER-9359))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9362]
      (let*
       [PLACEHOLDER-9363
        (re-seq (re-pattern "(\\d+)?(\\w|\\s)") PLACEHOLDER-9362)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-9364]
           (apply
            str
            (if
             (clojure.lang.Util/identical
              (second PLACEHOLDER-9364)
              nil)
             (last PLACEHOLDER-9364)
             (repeat
              (new Integer (second PLACEHOLDER-9364))
              (last PLACEHOLDER-9364))))))
         PLACEHOLDER-9363)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14842
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14842))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14843]
      (apply
       str
       (filter
        (partial not= 1)
        (flatten
         (map
          (juxt count first)
          (partition-by identity PLACEHOLDER-14843))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14844]
      (apply
       str
       (flatten
        (reverse
         (reduce
          (fn*
           ([PLACEHOLDER-14845 PLACEHOLDER-14846]
            (if
             (number? (first PLACEHOLDER-14845))
             (cons
              (repeat (first PLACEHOLDER-14845) PLACEHOLDER-14846)
              (rest PLACEHOLDER-14845))
             (cons PLACEHOLDER-14846 PLACEHOLDER-14845))))
          []
          (map
           (fn*
            ([PLACEHOLDER-14847]
             (if
              (java.lang.Character/isDigit (first PLACEHOLDER-14847))
              (java.lang.Integer/parseInt
               (apply str PLACEHOLDER-14847))
              (first PLACEHOLDER-14847))))
           (partition-by
            (fn*
             ([PLACEHOLDER-14848]
              (if
               (java.lang.Character/isDigit PLACEHOLDER-14848)
               true
               PLACEHOLDER-14848)))
            PLACEHOLDER-14844))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13940
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13940))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13941]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-13942]
          (clojure.lang.Util/equiv PLACEHOLDER-13942 1)))
        (mapcat
         (fn*
          ([PLACEHOLDER-13943]
           (vector
            (clojure.lang.RT/count PLACEHOLDER-13943)
            (first PLACEHOLDER-13943))))
         (partition-by identity PLACEHOLDER-13941)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13944]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13945]
          (repeat (first PLACEHOLDER-13945) (last PLACEHOLDER-13945))))
        (map
         (fn*
          ([PLACEHOLDER-13946]
           (vector
            (java.lang.Integer/parseInt
             (apply str (butlast PLACEHOLDER-13946)))
            (last PLACEHOLDER-13946))))
         (map
          (fn*
           ([PLACEHOLDER-13947]
            (if
             (clojure.lang.Util/equiv
              (clojure.lang.RT/count PLACEHOLDER-13947)
              1)
             (str "1" PLACEHOLDER-13947)
             PLACEHOLDER-13947)))
          (re-seq
           (re-pattern "\\d*[a-zA-Z\\s]")
           PLACEHOLDER-13944)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12053
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12053))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-consecutive-chars
    (fn*
     ([PLACEHOLDER-12054 PLACEHOLDER-12055]
      (let*
       [PLACEHOLDER-12056
        (clojure.lang.RT/count PLACEHOLDER-12055)
        PLACEHOLDER-12057
        (first PLACEHOLDER-12055)]
       (if
        (clojure.lang.Numbers/lte PLACEHOLDER-12056 1)
        (str PLACEHOLDER-12054 PLACEHOLDER-12057)
        (str
         PLACEHOLDER-12054
         PLACEHOLDER-12056
         PLACEHOLDER-12057))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12058]
      (reduce
       encode-consecutive-chars
       ""
       (map
        (fn*
         ([PLACEHOLDER-12059]
          (clojure.lang.RT/nth PLACEHOLDER-12059 0)))
        (re-seq
         (re-pattern "([a-zA-Z\\s])\\1*")
         PLACEHOLDER-12058))))))
   (def
    decode-consecutive-chars
    (fn*
     ([PLACEHOLDER-12060 PLACEHOLDER-12061]
      (let*
       [PLACEHOLDER-12062
        (clojure.lang.RT/count PLACEHOLDER-12061)
        PLACEHOLDER-12063
        (last PLACEHOLDER-12061)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12062 1)
        (str PLACEHOLDER-12060 PLACEHOLDER-12061)
        (let*
         [PLACEHOLDER-12064
          (java.lang.Integer/parseInt
           (subs
            PLACEHOLDER-12061
            0
            (clojure.lang.Numbers/dec
             (clojure.lang.RT/count PLACEHOLDER-12061))))]
         (str
          PLACEHOLDER-12060
          (reduce
           str
           (repeat PLACEHOLDER-12064 PLACEHOLDER-12063)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12065]
      (reduce
       decode-consecutive-chars
       ""
       (map
        (fn*
         ([PLACEHOLDER-12066]
          (clojure.lang.RT/nth PLACEHOLDER-12066 0)))
        (re-seq
         (re-pattern "(\\d*[a-zA-Z\\s])\\1*")
         PLACEHOLDER-12065))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9958
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9958))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    default-1
    (fn*
     ([PLACEHOLDER-9959]
      (let*
       [PLACEHOLDER-9960 PLACEHOLDER-9959]
       (case*
        PLACEHOLDER-9960
        0
        0
        PLACEHOLDER-9959
        {1 [1 ""]}
        :compact
        :int
        nil)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9961]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9962]
          (let*
           [PLACEHOLDER-9963
            PLACEHOLDER-9962
            PLACEHOLDER-9964
            (clojure.lang.RT/nth PLACEHOLDER-9963 0 nil)
            PLACEHOLDER-9965
            (clojure.lang.RT/nth PLACEHOLDER-9963 1 nil)]
           (str
            (default-1 (clojure.lang.RT/count PLACEHOLDER-9964))
            PLACEHOLDER-9965))))
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-9961))))))
   (def
    str->int
    (fn*
     ([PLACEHOLDER-9966]
      (let*
       [PLACEHOLDER-9967 PLACEHOLDER-9966]
       (case*
        PLACEHOLDER-9967
        0
        0
        (java.lang.Integer/parseInt PLACEHOLDER-9966)
        {0 ["" 1]}
        :compact
        :hash-equiv
        nil)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9968]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9969]
          (let*
           [PLACEHOLDER-9970
            PLACEHOLDER-9969
            PLACEHOLDER-9971
            (clojure.lang.RT/nth PLACEHOLDER-9970 0 nil)
            PLACEHOLDER-9972
            (clojure.lang.RT/nth PLACEHOLDER-9970 1 nil)
            PLACEHOLDER-9973
            (clojure.lang.RT/nth PLACEHOLDER-9970 2 nil)]
           (apply
            str
            (repeat (str->int PLACEHOLDER-9972) PLACEHOLDER-9973)))))
        (re-seq (re-pattern "(\\d*)(.)") PLACEHOLDER-9968)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8756
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8756))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8757]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-8758]
          (let*
           [PLACEHOLDER-8759
            (clojure.lang.RT/count PLACEHOLDER-8758)
            PLACEHOLDER-8760
            (first PLACEHOLDER-8758)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-8759 1)
            (str PLACEHOLDER-8759 PLACEHOLDER-8760)
            PLACEHOLDER-8760))))
        (partition-by identity PLACEHOLDER-8757))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8761]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-8762]
          (let*
           [PLACEHOLDER-8763
            PLACEHOLDER-8762
            PLACEHOLDER-8764
            (clojure.lang.RT/nth PLACEHOLDER-8763 0 nil)
            PLACEHOLDER-8765
            (clojure.lang.RT/nth PLACEHOLDER-8763 1 nil)
            PLACEHOLDER-8766
            (clojure.lang.RT/nth PLACEHOLDER-8763 2 nil)]
           (repeat
            (if
             PLACEHOLDER-8765
             (java.lang.Integer/parseInt PLACEHOLDER-8765)
             1)
            PLACEHOLDER-8766))))
        (re-seq (re-pattern "(\\d+)?([^\\d])") PLACEHOLDER-8761)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8659
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8659))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8660]
      (let*
       [PLACEHOLDER-8661 (new java.io.StringWriter)]
       (do
        (clojure.core/push-thread-bindings
         (clojure.core/hash-map #'clojure.core/*out* PLACEHOLDER-8661))
        (try
         (do
          (loop*
           [PLACEHOLDER-8662
            (clojure.core/seq (partition-by identity PLACEHOLDER-8660))
            PLACEHOLDER-8663
            nil
            PLACEHOLDER-8664
            0
            PLACEHOLDER-8665
            0]
           (if
            (clojure.lang.Numbers/lt PLACEHOLDER-8665 PLACEHOLDER-8664)
            (let*
             [PLACEHOLDER-8666
              (.nth PLACEHOLDER-8663 PLACEHOLDER-8665)]
             (do
              (do
               (if
                (clojure.lang.Numbers/gt
                 (clojure.lang.RT/count PLACEHOLDER-8666)
                 1)
                (print (clojure.lang.RT/count PLACEHOLDER-8666)))
               (print (first PLACEHOLDER-8666)))
              (recur
               PLACEHOLDER-8662
               PLACEHOLDER-8663
               PLACEHOLDER-8664
               (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-8665))))
            (let*
             [PLACEHOLDER-8667 (clojure.core/seq PLACEHOLDER-8662)]
             (if
              PLACEHOLDER-8667
              (let*
               [PLACEHOLDER-8668 PLACEHOLDER-8667]
               (if
                (clojure.core/chunked-seq? PLACEHOLDER-8668)
                (let*
                 [PLACEHOLDER-8669
                  (clojure.core/chunk-first PLACEHOLDER-8668)]
                 (recur
                  (clojure.core/chunk-rest PLACEHOLDER-8668)
                  PLACEHOLDER-8669
                  (clojure.lang.RT/intCast
                   (clojure.lang.RT/count PLACEHOLDER-8669))
                  (clojure.lang.RT/intCast 0)))
                (let*
                 [PLACEHOLDER-8670
                  (clojure.core/first PLACEHOLDER-8668)]
                 (do
                  (do
                   (if
                    (clojure.lang.Numbers/gt
                     (clojure.lang.RT/count PLACEHOLDER-8670)
                     1)
                    (print (clojure.lang.RT/count PLACEHOLDER-8670)))
                   (print (first PLACEHOLDER-8670)))
                  (recur
                   (clojure.core/next PLACEHOLDER-8668)
                   nil
                   0
                   0)))))))))
          (clojure.core/str PLACEHOLDER-8661))
         (finally (clojure.core/pop-thread-bindings))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8671]
      (let*
       [PLACEHOLDER-8672 (new java.io.StringWriter)]
       (do
        (clojure.core/push-thread-bindings
         (clojure.core/hash-map #'clojure.core/*out* PLACEHOLDER-8672))
        (try
         (do
          (loop*
           [PLACEHOLDER-8673
            (clojure.core/seq
             (re-seq (re-pattern "([0-9]*)([^0-9])") PLACEHOLDER-8671))
            PLACEHOLDER-8674
            nil
            PLACEHOLDER-8675
            0
            PLACEHOLDER-8676
            0]
           (if
            (clojure.lang.Numbers/lt PLACEHOLDER-8676 PLACEHOLDER-8675)
            (let*
             [PLACEHOLDER-8677
              (.nth PLACEHOLDER-8674 PLACEHOLDER-8676)
              PLACEHOLDER-8678
              (clojure.lang.RT/nth PLACEHOLDER-8677 0 nil)
              PLACEHOLDER-8679
              (clojure.lang.RT/nth PLACEHOLDER-8677 1 nil)
              PLACEHOLDER-8680
              (clojure.lang.RT/nth PLACEHOLDER-8677 2 nil)]
             (do
              (do
               (def
                repeats
                (if
                 (clojure.lang.Util/equiv "" PLACEHOLDER-8679)
                 1
                 (bigint PLACEHOLDER-8679)))
               (let*
                [PLACEHOLDER-8681 (clojure.lang.RT/longCast repeats)]
                (loop*
                 [PLACEHOLDER-8682 0]
                 (if
                  (clojure.lang.Numbers/lt
                   PLACEHOLDER-8682
                   PLACEHOLDER-8681)
                  (do
                   (print PLACEHOLDER-8680)
                   (recur
                    (clojure.lang.Numbers/unchecked_inc
                     PLACEHOLDER-8682)))))))
              (recur
               PLACEHOLDER-8673
               PLACEHOLDER-8674
               PLACEHOLDER-8675
               (clojure.lang.Numbers/unchecked_inc PLACEHOLDER-8676))))
            (let*
             [PLACEHOLDER-8683 (clojure.core/seq PLACEHOLDER-8673)]
             (if
              PLACEHOLDER-8683
              (let*
               [PLACEHOLDER-8684 PLACEHOLDER-8683]
               (if
                (clojure.core/chunked-seq? PLACEHOLDER-8684)
                (let*
                 [PLACEHOLDER-8685
                  (clojure.core/chunk-first PLACEHOLDER-8684)]
                 (recur
                  (clojure.core/chunk-rest PLACEHOLDER-8684)
                  PLACEHOLDER-8685
                  (clojure.lang.RT/intCast
                   (clojure.lang.RT/count PLACEHOLDER-8685))
                  (clojure.lang.RT/intCast 0)))
                (let*
                 [PLACEHOLDER-8686
                  (clojure.core/first PLACEHOLDER-8684)
                  PLACEHOLDER-8687
                  (clojure.lang.RT/nth PLACEHOLDER-8686 0 nil)
                  PLACEHOLDER-8688
                  (clojure.lang.RT/nth PLACEHOLDER-8686 1 nil)
                  PLACEHOLDER-8689
                  (clojure.lang.RT/nth PLACEHOLDER-8686 2 nil)]
                 (do
                  (do
                   (def
                    repeats
                    (if
                     (clojure.lang.Util/equiv "" PLACEHOLDER-8688)
                     1
                     (bigint PLACEHOLDER-8688)))
                   (let*
                    [PLACEHOLDER-8690
                     (clojure.lang.RT/longCast repeats)]
                    (loop*
                     [PLACEHOLDER-8691 0]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-8691
                       PLACEHOLDER-8690)
                      (do
                       (print PLACEHOLDER-8689)
                       (recur
                        (clojure.lang.Numbers/unchecked_inc
                         PLACEHOLDER-8691)))))))
                  (recur
                   (clojure.core/next PLACEHOLDER-8684)
                   nil
                   0
                   0)))))))))
          (clojure.core/str PLACEHOLDER-8672))
         (finally (clojure.core/pop-thread-bindings)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12469
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12469))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12470]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-12471]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-12471))
           (first PLACEHOLDER-12471)
           (str
            (clojure.lang.RT/count PLACEHOLDER-12471)
            (first PLACEHOLDER-12471)))))
        (partition-by identity PLACEHOLDER-12470))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12472]
      (let*
       [PLACEHOLDER-12476
        (map
         (fn* ([PLACEHOLDER-12473] (apply str PLACEHOLDER-12473)))
         (partition-by
          (fn*
           ([PLACEHOLDER-12474]
            (let*
             [PLACEHOLDER-12475
              (java.lang.Character/isDigit PLACEHOLDER-12474)]
             (if
              PLACEHOLDER-12475
              PLACEHOLDER-12475
              (identity PLACEHOLDER-12474)))))
          PLACEHOLDER-12472))]
       (loop*
        [PLACEHOLDER-12477 PLACEHOLDER-12476 PLACEHOLDER-12478 ""]
        (if
         (empty? PLACEHOLDER-12477)
         PLACEHOLDER-12478
         (let*
          [PLACEHOLDER-12479
           (first PLACEHOLDER-12477)
           PLACEHOLDER-12480
           (second PLACEHOLDER-12477)
           PLACEHOLDER-12482
           (let*
            [PLACEHOLDER-12481 (some? (first PLACEHOLDER-12479))]
            (if
             PLACEHOLDER-12481
             (java.lang.Character/isDigit (first PLACEHOLDER-12479))
             PLACEHOLDER-12481))
           PLACEHOLDER-12484
           (let*
            [PLACEHOLDER-12483 (some? (first PLACEHOLDER-12480))]
            (if
             PLACEHOLDER-12483
             (java.lang.Character/isDigit (first PLACEHOLDER-12480))
             PLACEHOLDER-12483))]
          (if
           (true? PLACEHOLDER-12482)
           (let*
            [PLACEHOLDER-12485
             (java.lang.Integer/parseInt PLACEHOLDER-12479)]
            (recur
             (rest (rest PLACEHOLDER-12477))
             (str
              PLACEHOLDER-12478
              (str
               (clojure.string/join
                (repeat PLACEHOLDER-12485 PLACEHOLDER-12480))))))
           (if
            (let*
             [PLACEHOLDER-12486
              (clojure.lang.Util/identical PLACEHOLDER-12480 nil)]
             (if
              PLACEHOLDER-12486
              PLACEHOLDER-12486
              (let*
               [PLACEHOLDER-12487 (false? PLACEHOLDER-12482)]
               (if
                PLACEHOLDER-12487
                (true? PLACEHOLDER-12484)
                PLACEHOLDER-12487))))
            (recur
             (rest PLACEHOLDER-12477)
             (str PLACEHOLDER-12478 PLACEHOLDER-12479))
            (if
             :else
             (recur
              (rest (rest PLACEHOLDER-12477))
              (str
               PLACEHOLDER-12478
               PLACEHOLDER-12479
               PLACEHOLDER-12480))))))))))))
   (run-length-decode "5e 4r r r6 f")
   (run-length-encode "eeeee rrrr r r      f")
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12734
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12734))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    parse-repeat-count
    (fn*
     ([PLACEHOLDER-12735]
      (let*
       [PLACEHOLDER-12736
        (re-find (re-pattern "\\d+") PLACEHOLDER-12735)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-12736 nil)
        1
        (new Integer PLACEHOLDER-12736))))))
   (def
    split-parts
    (fn*
     ([PLACEHOLDER-12737]
      (take-while
       (fn*
        ([PLACEHOLDER-12738] ((complement nil?) PLACEHOLDER-12738)))
       (repeatedly (fn* ([] (re-find PLACEHOLDER-12737))))))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-12739]
      (let*
       [PLACEHOLDER-12740
        (clojure.lang.RT/count PLACEHOLDER-12739)
        PLACEHOLDER-12741
        (first PLACEHOLDER-12739)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-12740 1)
        (str PLACEHOLDER-12740 PLACEHOLDER-12741)
        (str PLACEHOLDER-12741))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12742]
      (let*
       [PLACEHOLDER-12743
        (parse-repeat-count PLACEHOLDER-12742)
        PLACEHOLDER-12744
        (last PLACEHOLDER-12742)]
       (str/join (repeat PLACEHOLDER-12743 PLACEHOLDER-12744))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12745]
      (let*
       [PLACEHOLDER-12746
        (re-matcher (re-pattern "([a-zA-Z ])\\1*") PLACEHOLDER-12745)]
       (str/join
        (map
         (fn* ([PLACEHOLDER-12747] (encode PLACEHOLDER-12747)))
         (map first (split-parts PLACEHOLDER-12746))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12748]
      (let*
       [PLACEHOLDER-12749
        (re-matcher (re-pattern "\\d*[a-zA-Z ]") PLACEHOLDER-12748)]
       (str/join
        (map
         (fn* ([PLACEHOLDER-12750] (decode PLACEHOLDER-12750)))
         (split-parts PLACEHOLDER-12749))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12639
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12639))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12640]
      (reduce
       (fn*
        ([PLACEHOLDER-12641 PLACEHOLDER-12642]
         (str
          PLACEHOLDER-12641
          (let*
           [PLACEHOLDER-12643
            (clojure.lang.RT/count PLACEHOLDER-12642)]
           (if
            (clojure.lang.Numbers/gt PLACEHOLDER-12643 1)
            PLACEHOLDER-12643))
          (first PLACEHOLDER-12642))))
       ""
       (partition-by identity PLACEHOLDER-12640)))))
   (def
    read-number
    (fn*
     ([PLACEHOLDER-12644]
      (if
       (seq PLACEHOLDER-12644)
       (java.lang.Long/parseLong PLACEHOLDER-12644)
       1))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12645]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-12646]
          (let*
           [PLACEHOLDER-12647
            PLACEHOLDER-12646
            PLACEHOLDER-12648
            (clojure.lang.RT/nth PLACEHOLDER-12647 0 nil)
            PLACEHOLDER-12649
            (clojure.lang.RT/nth PLACEHOLDER-12647 1 nil)]
           ((comp str/join repeat)
            (read-number PLACEHOLDER-12648)
            PLACEHOLDER-12649))))
        (map
         (fn*
          ([PLACEHOLDER-12650]
           (vector
            ((comp str/join vec butlast) PLACEHOLDER-12650)
            (last PLACEHOLDER-12650))))
         (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-12645))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14306
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14306))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14307 PLACEHOLDER-14308]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-14308 1)
       PLACEHOLDER-14307
       (str PLACEHOLDER-14308 PLACEHOLDER-14307)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14309]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14310]
          (let*
           [PLACEHOLDER-14311
            PLACEHOLDER-14310
            PLACEHOLDER-14312
            (clojure.lang.RT/nth PLACEHOLDER-14311 0 nil)
            PLACEHOLDER-14313
            (clojure.lang.RT/nth PLACEHOLDER-14311 1 nil)]
           (encode
            PLACEHOLDER-14313
            (clojure.lang.RT/count PLACEHOLDER-14312)))))
        (re-seq (re-pattern "(.)\\1{0,}") PLACEHOLDER-14309))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14314 PLACEHOLDER-14315]
      (if
       (clojure.string/blank? PLACEHOLDER-14315)
       PLACEHOLDER-14314
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-14315)
         PLACEHOLDER-14314))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14316]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14317]
          (let*
           [PLACEHOLDER-14318
            PLACEHOLDER-14317
            PLACEHOLDER-14319
            (clojure.lang.RT/nth PLACEHOLDER-14318 0 nil)
            PLACEHOLDER-14320
            (clojure.lang.RT/nth PLACEHOLDER-14318 1 nil)
            PLACEHOLDER-14321
            (clojure.lang.RT/nth PLACEHOLDER-14318 2 nil)]
           (decode PLACEHOLDER-14321 PLACEHOLDER-14320))))
        (re-seq (re-pattern "(\\d*)([\\w ])") PLACEHOLDER-14316)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12606
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12606))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12607]
      (if
       (clojure.lang.Numbers/lte
        (clojure.lang.RT/count PLACEHOLDER-12607)
        1)
       PLACEHOLDER-12607
       (loop*
        [PLACEHOLDER-12608
         (rest PLACEHOLDER-12607)
         PLACEHOLDER-12609
         ""
         PLACEHOLDER-12610
         1
         PLACEHOLDER-12611
         (first PLACEHOLDER-12607)]
        (if
         (empty? PLACEHOLDER-12608)
         (if
          (clojure.lang.Numbers/lt 1 PLACEHOLDER-12610)
          (str PLACEHOLDER-12609 PLACEHOLDER-12610 PLACEHOLDER-12611)
          (str PLACEHOLDER-12609 PLACEHOLDER-12611))
         (let*
          [PLACEHOLDER-12612 (first PLACEHOLDER-12608)]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-12611
            PLACEHOLDER-12612)
           (recur
            (rest PLACEHOLDER-12608)
            PLACEHOLDER-12609
            (clojure.lang.Numbers/inc PLACEHOLDER-12610)
            PLACEHOLDER-12612)
           (recur
            (rest PLACEHOLDER-12608)
            (if
             (clojure.lang.Numbers/lt 1 PLACEHOLDER-12610)
             (str
              PLACEHOLDER-12609
              PLACEHOLDER-12610
              PLACEHOLDER-12611)
             (str PLACEHOLDER-12609 PLACEHOLDER-12611))
            1
            PLACEHOLDER-12612)))))))))
   (def
    count-letter
    (fn*
     ([PLACEHOLDER-12613]
      (re-matcher (re-pattern "^\\d+") PLACEHOLDER-12613))))
   (def
    rest-cipher-text
    (fn*
     ([PLACEHOLDER-12614]
      (re-matcher (re-pattern "[^\\d+].*") PLACEHOLDER-12614))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12615]
      (if
       (clojure.lang.Numbers/lte
        (clojure.lang.RT/count PLACEHOLDER-12615)
        1)
       PLACEHOLDER-12615
       (loop*
        [PLACEHOLDER-12616 PLACEHOLDER-12615 PLACEHOLDER-12617 ""]
        (if
         (empty? PLACEHOLDER-12616)
         PLACEHOLDER-12617
         (let*
          [PLACEHOLDER-12618
           (re-find (count-letter PLACEHOLDER-12616))]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-12618 nil)
           (recur
            (apply str (rest PLACEHOLDER-12616))
            (str PLACEHOLDER-12617 (first PLACEHOLDER-12616)))
           (recur
            (apply
             str
             (rest
              (let*
               [PLACEHOLDER-12619
                (re-find (rest-cipher-text PLACEHOLDER-12616))]
               (if PLACEHOLDER-12619 PLACEHOLDER-12619 ""))))
            (str
             PLACEHOLDER-12617
             (apply
              str
              (repeat
               (java.lang.Integer/parseInt PLACEHOLDER-12618)
               (let*
                [PLACEHOLDER-12621
                 (first
                  (let*
                   [PLACEHOLDER-12620
                    (re-find (rest-cipher-text PLACEHOLDER-12616))]
                   (if PLACEHOLDER-12620 PLACEHOLDER-12620 "")))]
                (if
                 PLACEHOLDER-12621
                 PLACEHOLDER-12621
                 ""))))))))))))))
   (run-length-encode "zzz ZZ  zZ"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11603
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11603))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    last-char
    (fn*
     ([PLACEHOLDER-11604]
      (let*
       [PLACEHOLDER-11605 (last PLACEHOLDER-11604)]
       (if PLACEHOLDER-11605 PLACEHOLDER-11605 \@)))))
   (def
    repeat-str
    (fn*
     ([PLACEHOLDER-11606 PLACEHOLDER-11607]
      (apply str (repeat PLACEHOLDER-11606 PLACEHOLDER-11607)))))
   (def
    concat-to-last
    (fn*
     ([PLACEHOLDER-11608 PLACEHOLDER-11609]
      (conj
       (vec (butlast PLACEHOLDER-11608))
       (str (last PLACEHOLDER-11608) PLACEHOLDER-11609)))))
   (def
    decompress
    (fn*
     ([PLACEHOLDER-11610]
      (repeat-str
       (java.lang.Integer/parseInt
        (apply
         str
         (let*
          [PLACEHOLDER-11611 (butlast PLACEHOLDER-11610)]
          (if PLACEHOLDER-11611 PLACEHOLDER-11611 "1"))))
       (last PLACEHOLDER-11610)))))
   (def
    decompress-all
    (fn* ([PLACEHOLDER-11612] (map decompress PLACEHOLDER-11612))))
   (def
    compression-reducer
    (fn*
     ([PLACEHOLDER-11613 PLACEHOLDER-11614]
      (if
       (java.lang.Character/isDigit
        (last-char (last PLACEHOLDER-11613)))
       (concat-to-last PLACEHOLDER-11613 PLACEHOLDER-11614)
       (conj PLACEHOLDER-11613 PLACEHOLDER-11614)))))
   (def
    parse-compressed
    (fn*
     ([PLACEHOLDER-11615]
      (reduce
       compression-reducer
       []
       (clojure.string/split PLACEHOLDER-11615 (re-pattern ""))))))
   (def
    length-decode
    (comp clojure.string/join decompress-all parse-compressed))
   (def
    length-encode
    (fn*
     ([PLACEHOLDER-11616]
      (let*
       [PLACEHOLDER-11617
        (clojure.lang.RT/count PLACEHOLDER-11616)
        PLACEHOLDER-11618
        (first PLACEHOLDER-11616)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-11617 1)
        (str PLACEHOLDER-11618)
        (str PLACEHOLDER-11617 PLACEHOLDER-11618))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11619]
      (reduce
       (fn*
        ([PLACEHOLDER-11620 PLACEHOLDER-11621]
         (str PLACEHOLDER-11620 (length-encode PLACEHOLDER-11621))))
       ""
       (partition-by identity PLACEHOLDER-11619)))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-11622] (length-decode PLACEHOLDER-11622)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14362
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14362))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14363]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-14364]
          (let*
           [PLACEHOLDER-14365
            (clojure.lang.RT/count PLACEHOLDER-14364)]
           (if
            (clojure.lang.Util/equiv 1 PLACEHOLDER-14365)
            PLACEHOLDER-14364
            (str PLACEHOLDER-14365 (first PLACEHOLDER-14364))))))
        (remove
         empty?
         (map
          first
          (re-seq
           (re-pattern "([a-zA-Z])\\1*|\\s*")
           PLACEHOLDER-14363))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14366]
      (str/join
       (mapcat
        (fn*
         ([PLACEHOLDER-14367]
          (let*
           [PLACEHOLDER-14368
            (str/split
             PLACEHOLDER-14367
             (re-pattern "(?=[a-zA-Z\\s])"))
            PLACEHOLDER-14369
            (clojure.lang.RT/nth PLACEHOLDER-14368 0 nil)
            PLACEHOLDER-14370
            (clojure.lang.RT/nth PLACEHOLDER-14368 1 nil)]
           (if
            PLACEHOLDER-14370
            (repeat
             (java.lang.Long/parseLong PLACEHOLDER-14369)
             PLACEHOLDER-14370)
            [PLACEHOLDER-14369]))))
        (re-seq
         (re-pattern "\\d*[\\w\\s]|[\\w\\s]")
         PLACEHOLDER-14366)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12146
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12146))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-char
    (fn*
     ([PLACEHOLDER-12147]
      (let*
       [PLACEHOLDER-12148
        (clojure.lang.RT/count PLACEHOLDER-12147)
        PLACEHOLDER-12149
        (first PLACEHOLDER-12147)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12148 1)
        [PLACEHOLDER-12149]
        [PLACEHOLDER-12148 PLACEHOLDER-12149])))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-12150]
      (let*
       [PLACEHOLDER-12151
        (re-matches (re-pattern "(\\d*)(\\D)") PLACEHOLDER-12150)
        PLACEHOLDER-12152
        (clojure.lang.RT/nth PLACEHOLDER-12151 0 nil)
        PLACEHOLDER-12153
        (clojure.lang.RT/nth PLACEHOLDER-12151 1 nil)
        PLACEHOLDER-12154
        (clojure.lang.RT/nth PLACEHOLDER-12151 2 nil)
        PLACEHOLDER-12155
        (java.lang.Integer/parseInt
         (str (if (empty? PLACEHOLDER-12153) "1" PLACEHOLDER-12153)))]
       (repeat PLACEHOLDER-12155 PLACEHOLDER-12154)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12156]
      (apply
       str
       (mapcat
        encode-char
        (partition-by identity PLACEHOLDER-12156))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12157]
      (apply
       str
       (mapcat
        decode
        (re-seq
         (re-pattern "(?i)\\d*[a-z\\s]")
         PLACEHOLDER-12157)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9867
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9867))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode-lazy
    (fn*
     ([PLACEHOLDER-9868]
      (new
       clojure.lang.LazySeq
       (fn*
        ([]
         (if
          (not-empty PLACEHOLDER-9868)
          (let*
           [PLACEHOLDER-9869
            (first PLACEHOLDER-9868)
            PLACEHOLDER-9871
            (take-while
             (fn*
              ([PLACEHOLDER-9870]
               (clojure.lang.Util/equiv
                PLACEHOLDER-9869
                PLACEHOLDER-9870)))
             PLACEHOLDER-9868)
            PLACEHOLDER-9872
            (clojure.lang.RT/count PLACEHOLDER-9871)
            PLACEHOLDER-9873
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-9872 1)
             (str PLACEHOLDER-9872 PLACEHOLDER-9869)
             PLACEHOLDER-9869)]
           (cons
            PLACEHOLDER-9873
            (run-length-encode-lazy
             (drop PLACEHOLDER-9872 PLACEHOLDER-9868)))))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9874]
      (apply str (run-length-encode-lazy PLACEHOLDER-9874)))))
   (def number-str #{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9})
   (def
    run-length-decode-lazy
    (fn*
     ([PLACEHOLDER-9875]
      (new
       clojure.lang.LazySeq
       (fn*
        ([]
         (if
          (not-empty PLACEHOLDER-9875)
          (let*
           [PLACEHOLDER-9876
            (apply str (take-while number-str PLACEHOLDER-9875))
            PLACEHOLDER-9877
            (if
             (not-empty PLACEHOLDER-9876)
             (new Integer PLACEHOLDER-9876)
             0)
            PLACEHOLDER-9878
            (first
             (drop
              (clojure.lang.RT/count PLACEHOLDER-9876)
              PLACEHOLDER-9875))
            PLACEHOLDER-9879
            (apply
             str
             (repeat
              (clojure.lang.Numbers/max PLACEHOLDER-9877 1)
              PLACEHOLDER-9878))]
           (cons
            PLACEHOLDER-9879
            (run-length-decode-lazy
             (drop
              (clojure.lang.Numbers/inc
               (clojure.lang.RT/count PLACEHOLDER-9876))
              PLACEHOLDER-9875)))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9880]
      (apply str (run-length-decode-lazy PLACEHOLDER-9880))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10362
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10362))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    num-to-str
    (fn*
     ([PLACEHOLDER-10363]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-10363 1)
       ""
       (str PLACEHOLDER-10363)))))
   (def
    divide-text
    (fn*
     ([PLACEHOLDER-10364]
      (map
       (fn*
        ([PLACEHOLDER-10365]
         (let*
          [PLACEHOLDER-10366
           PLACEHOLDER-10365
           PLACEHOLDER-10367
           (clojure.lang.RT/nth PLACEHOLDER-10366 0 nil)
           PLACEHOLDER-10368
           (clojure.lang.RT/nth PLACEHOLDER-10366 1 nil)]
          [(clojure.lang.RT/count PLACEHOLDER-10367)
           PLACEHOLDER-10368])))
       (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-10364)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10369]
      (reduce
       (fn*
        ([PLACEHOLDER-10370 PLACEHOLDER-10371]
         (let*
          [PLACEHOLDER-10372
           PLACEHOLDER-10371
           PLACEHOLDER-10373
           (clojure.lang.RT/nth PLACEHOLDER-10372 0 nil)
           PLACEHOLDER-10374
           (clojure.lang.RT/nth PLACEHOLDER-10372 1 nil)]
          (str
           PLACEHOLDER-10370
           (num-to-str PLACEHOLDER-10373)
           PLACEHOLDER-10374))))
       ""
       (divide-text PLACEHOLDER-10369)))))
   (def
    str-to-num
    (fn*
     ([PLACEHOLDER-10375]
      (if
       (empty? PLACEHOLDER-10375)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-10375)))))
   (def
    divide-cipher
    (fn*
     ([PLACEHOLDER-10376]
      (map
       (fn*
        ([PLACEHOLDER-10377]
         [(str-to-num
           (subs
            PLACEHOLDER-10377
            0
            (clojure.lang.Numbers/dec
             (clojure.lang.RT/count PLACEHOLDER-10377))))
          (last PLACEHOLDER-10377)]))
       (re-seq (re-pattern "[0-9]*[^0-9]") PLACEHOLDER-10376)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10378]
      (reduce
       (fn*
        ([PLACEHOLDER-10379 PLACEHOLDER-10380]
         (apply
          str
          PLACEHOLDER-10379
          (repeat
           (first PLACEHOLDER-10380)
           (last PLACEHOLDER-10380)))))
       ""
       (divide-cipher PLACEHOLDER-10378))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9463
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9463))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    create-item
    (fn*
     ([PLACEHOLDER-9464 PLACEHOLDER-9465]
      {:times-used PLACEHOLDER-9465, :char-key PLACEHOLDER-9464})))
   (def
    increment-usage
    (fn*
     ([PLACEHOLDER-9466] (update PLACEHOLDER-9466 :times-used inc))))
   (def
    repeated?
    (fn*
     ([PLACEHOLDER-9467 PLACEHOLDER-9468]
      (clojure.lang.Util/equiv
       (clojure.lang.RT/get PLACEHOLDER-9468 :char-key)
       PLACEHOLDER-9467))))
   (def
    item->string
    (fn*
     ([PLACEHOLDER-9469]
      (if
       (clojure.lang.Util/equiv 1 (PLACEHOLDER-9469 :times-used))
       (str (PLACEHOLDER-9469 :char-key))
       (str
        (PLACEHOLDER-9469 :times-used)
        (PLACEHOLDER-9469 :char-key))))))
   (def
    items->string
    (fn*
     ([PLACEHOLDER-9470]
      (apply str (map item->string PLACEHOLDER-9470)))))
   (def
    increment-or-add
    (fn*
     ([PLACEHOLDER-9471 PLACEHOLDER-9472]
      (let*
       [PLACEHOLDER-9473 (last PLACEHOLDER-9471)]
       (if
        (repeated? PLACEHOLDER-9472 PLACEHOLDER-9473)
        (conj
         (pop PLACEHOLDER-9471)
         (increment-usage PLACEHOLDER-9473))
        (conj PLACEHOLDER-9471 (create-item PLACEHOLDER-9472 1)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9474]
      (items->string
       (reduce increment-or-add [] (seq PLACEHOLDER-9474))))))
   (def
    to-int
    (fn*
     ([PLACEHOLDER-9475]
      (java.lang.Integer/parseInt PLACEHOLDER-9475))))
   (def
    to-pairs
    (fn*
     ([PLACEHOLDER-9476]
      (re-seq
       (re-pattern "[^ a-zA-Z ]*[ a-zA-Z ]")
       PLACEHOLDER-9476))))
   (def
    times-used
    (fn*
     ([PLACEHOLDER-9477]
      (to-int
       (let*
        [PLACEHOLDER-9478
         (re-find (re-pattern "\\d+") PLACEHOLDER-9477)]
        (if PLACEHOLDER-9478 PLACEHOLDER-9478 "1"))))))
   (def
    character-used
    (fn* ([PLACEHOLDER-9479] (str (last PLACEHOLDER-9479)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9480]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9481]
          (apply
           str
           (take
            (times-used PLACEHOLDER-9481)
            (repeat (character-used PLACEHOLDER-9481))))))
        (to-pairs PLACEHOLDER-9480)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11236
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11236))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11237]
      (apply
       str
       (let*
        [PLACEHOLDER-11249
         (fn*
          PLACEHOLDER-11238
          ([PLACEHOLDER-11239]
           (new
            clojure.lang.LazySeq
            (fn*
             ([]
              (loop*
               [PLACEHOLDER-11240 PLACEHOLDER-11239]
               (let*
                [PLACEHOLDER-11241
                 (clojure.core/seq PLACEHOLDER-11240)]
                (if
                 PLACEHOLDER-11241
                 (let*
                  [PLACEHOLDER-11242 PLACEHOLDER-11241]
                  (if
                   (clojure.core/chunked-seq? PLACEHOLDER-11242)
                   (let*
                    [PLACEHOLDER-11243
                     (clojure.core/chunk-first PLACEHOLDER-11242)
                     PLACEHOLDER-11244
                     (clojure.lang.RT/intCast
                      (clojure.lang.RT/count PLACEHOLDER-11243))
                     PLACEHOLDER-11245
                     (clojure.core/chunk-buffer PLACEHOLDER-11244)]
                    (if
                     (loop*
                      [PLACEHOLDER-11246 (clojure.lang.RT/intCast 0)]
                      (if
                       (clojure.lang.Numbers/lt
                        PLACEHOLDER-11246
                        PLACEHOLDER-11244)
                       (let*
                        [PLACEHOLDER-11247
                         (.nth PLACEHOLDER-11243 PLACEHOLDER-11246)]
                        (do
                         (clojure.core/chunk-append
                          PLACEHOLDER-11245
                          (str
                           (if
                            (clojure.lang.Util/equiv
                             1
                             (clojure.lang.RT/count PLACEHOLDER-11247))
                            nil
                            (clojure.lang.RT/count PLACEHOLDER-11247))
                           (first PLACEHOLDER-11247)))
                         (recur
                          (clojure.lang.Numbers/unchecked_inc
                           PLACEHOLDER-11246))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-11245)
                      (PLACEHOLDER-11238
                       (clojure.core/chunk-rest PLACEHOLDER-11242)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk PLACEHOLDER-11245)
                      nil)))
                   (let*
                    [PLACEHOLDER-11248
                     (clojure.core/first PLACEHOLDER-11242)]
                    (clojure.core/cons
                     (str
                      (if
                       (clojure.lang.Util/equiv
                        1
                        (clojure.lang.RT/count PLACEHOLDER-11248))
                       nil
                       (clojure.lang.RT/count PLACEHOLDER-11248))
                      (first PLACEHOLDER-11248))
                     (PLACEHOLDER-11238
                      (clojure.core/rest
                       PLACEHOLDER-11242))))))))))))))]
        (PLACEHOLDER-11249
         (partition-by identity PLACEHOLDER-11237)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11250]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-11251]
          (apply
           str
           (repeat
            (first PLACEHOLDER-11251)
            (second PLACEHOLDER-11251)))))
        (map
         (fn*
          ([PLACEHOLDER-11252]
           (list
            (new Integer (reduce str "" (butlast PLACEHOLDER-11252)))
            (str (last PLACEHOLDER-11252)))))
         (map
          (fn*
           ([PLACEHOLDER-11253]
            (if
             (clojure.lang.Util/equiv
              (clojure.lang.RT/count PLACEHOLDER-11253)
              1)
             (str "1" PLACEHOLDER-11253)
             PLACEHOLDER-11253)))
          (re-seq
           (re-pattern "[0-9]+.|[a-zA-Z\\s]")
           PLACEHOLDER-11250)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13456
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13456))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13457]
      (apply
       str
       (remove
        #{1}
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-13457)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13458]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-13459]
          (let*
           [PLACEHOLDER-13460
            PLACEHOLDER-13459
            PLACEHOLDER-13461
            (clojure.lang.RT/nth PLACEHOLDER-13460 0 nil)
            PLACEHOLDER-13462
            (clojure.lang.RT/nth PLACEHOLDER-13460 1 nil)
            PLACEHOLDER-13463
            (clojure.lang.RT/nth PLACEHOLDER-13460 2 nil)]
           (if
            (seq PLACEHOLDER-13462)
            (repeat (new Long PLACEHOLDER-13462) PLACEHOLDER-13463)
            PLACEHOLDER-13463))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-13458)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14524
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14524))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14525]
      (let*
       [PLACEHOLDER-14526
        (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14525)]
       (apply
        str
        (map
         (fn*
          ([PLACEHOLDER-14527]
           (let*
            [PLACEHOLDER-14528
             PLACEHOLDER-14527
             PLACEHOLDER-14529
             (clojure.lang.RT/nth PLACEHOLDER-14528 0 nil)
             PLACEHOLDER-14530
             (clojure.lang.RT/nth PLACEHOLDER-14528 1 nil)]
            (if
             (not= (clojure.lang.RT/count PLACEHOLDER-14529) 1)
             (str
              (clojure.lang.RT/count PLACEHOLDER-14529)
              PLACEHOLDER-14530)
             PLACEHOLDER-14530))))
         PLACEHOLDER-14526))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14531]
      (loop*
       [PLACEHOLDER-14532
        (re-seq
         (re-pattern "[A-Z]|[a-z]|\\s|[0-9]+")
         PLACEHOLDER-14531)
        PLACEHOLDER-14533
        ""]
       (if
        (empty? PLACEHOLDER-14532)
        PLACEHOLDER-14533
        (if
         (some?
          (re-find (re-pattern "[0-9]+") (first PLACEHOLDER-14532)))
         (recur
          (nthrest PLACEHOLDER-14532 2)
          (apply
           str
           PLACEHOLDER-14533
           (let*
            [PLACEHOLDER-14545
             (fn*
              PLACEHOLDER-14534
              ([PLACEHOLDER-14535]
               (new
                clojure.lang.LazySeq
                (fn*
                 ([]
                  (loop*
                   [PLACEHOLDER-14536 PLACEHOLDER-14535]
                   (let*
                    [PLACEHOLDER-14537
                     (clojure.core/seq PLACEHOLDER-14536)]
                    (if
                     PLACEHOLDER-14537
                     (let*
                      [PLACEHOLDER-14538 PLACEHOLDER-14537]
                      (if
                       (clojure.core/chunked-seq? PLACEHOLDER-14538)
                       (let*
                        [PLACEHOLDER-14539
                         (clojure.core/chunk-first PLACEHOLDER-14538)
                         PLACEHOLDER-14540
                         (clojure.lang.RT/intCast
                          (clojure.lang.RT/count PLACEHOLDER-14539))
                         PLACEHOLDER-14541
                         (clojure.core/chunk-buffer PLACEHOLDER-14540)]
                        (if
                         (loop*
                          [PLACEHOLDER-14542
                           (clojure.lang.RT/intCast 0)]
                          (if
                           (clojure.lang.Numbers/lt
                            PLACEHOLDER-14542
                            PLACEHOLDER-14540)
                           (let*
                            [PLACEHOLDER-14543
                             (.nth
                              PLACEHOLDER-14539
                              PLACEHOLDER-14542)]
                            (do
                             (clojure.core/chunk-append
                              PLACEHOLDER-14541
                              (second PLACEHOLDER-14532))
                             (recur
                              (clojure.lang.Numbers/unchecked_inc
                               PLACEHOLDER-14542))))
                           true))
                         (clojure.core/chunk-cons
                          (clojure.core/chunk PLACEHOLDER-14541)
                          (PLACEHOLDER-14534
                           (clojure.core/chunk-rest
                            PLACEHOLDER-14538)))
                         (clojure.core/chunk-cons
                          (clojure.core/chunk PLACEHOLDER-14541)
                          nil)))
                       (let*
                        [PLACEHOLDER-14544
                         (clojure.core/first PLACEHOLDER-14538)]
                        (clojure.core/cons
                         (second PLACEHOLDER-14532)
                         (PLACEHOLDER-14534
                          (clojure.core/rest
                           PLACEHOLDER-14538))))))))))))))]
            (PLACEHOLDER-14545
             (range (read-string (first PLACEHOLDER-14532)))))))
         (recur
          (rest PLACEHOLDER-14532)
          (apply
           str
           PLACEHOLDER-14533
           (first PLACEHOLDER-14532))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9629
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9629))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9630]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9631]
          (let*
           [PLACEHOLDER-9632 (clojure.lang.RT/count PLACEHOLDER-9631)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-9632 1)
             PLACEHOLDER-9632)
            (first PLACEHOLDER-9631)))))
        (partition-by identity PLACEHOLDER-9630))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9633]
      (run-length-decode
       (re-matcher (re-pattern "(\\d*)(\\w|\\h)") PLACEHOLDER-9633)
       []))
     ([PLACEHOLDER-9634 PLACEHOLDER-9635]
      (let*
       [PLACEHOLDER-9636 (re-find PLACEHOLDER-9634)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-9636 nil)
        (apply str PLACEHOLDER-9635)
        (let*
         [PLACEHOLDER-9637
          PLACEHOLDER-9636
          PLACEHOLDER-9638
          (clojure.lang.RT/nth PLACEHOLDER-9637 0 nil)
          PLACEHOLDER-9639
          (clojure.lang.RT/nth PLACEHOLDER-9637 1 nil)
          PLACEHOLDER-9640
          (clojure.lang.RT/nth PLACEHOLDER-9637 2 nil)
          PLACEHOLDER-9641
          (if
           (clojure.lang.Util/equiv PLACEHOLDER-9639 "")
           1
           (java.lang.Integer/parseInt PLACEHOLDER-9639))]
         (recur
          PLACEHOLDER-9634
          (into
           PLACEHOLDER-9635
           (repeat PLACEHOLDER-9641 PLACEHOLDER-9640))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8841
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8841))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8842]
      (apply
       clojure.string/join
       ""
       [(let*
         [PLACEHOLDER-8856
          (fn*
           PLACEHOLDER-8843
           ([PLACEHOLDER-8844]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-8845 PLACEHOLDER-8844]
                (let*
                 [PLACEHOLDER-8846 (clojure.core/seq PLACEHOLDER-8845)]
                 (if
                  PLACEHOLDER-8846
                  (let*
                   [PLACEHOLDER-8847 PLACEHOLDER-8846]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-8847)
                    (let*
                     [PLACEHOLDER-8848
                      (clojure.core/chunk-first PLACEHOLDER-8847)
                      PLACEHOLDER-8849
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-8848))
                      PLACEHOLDER-8850
                      (clojure.core/chunk-buffer PLACEHOLDER-8849)]
                     (if
                      (loop*
                       [PLACEHOLDER-8851 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-8851
                         PLACEHOLDER-8849)
                        (let*
                         [PLACEHOLDER-8852
                          (.nth PLACEHOLDER-8848 PLACEHOLDER-8851)]
                         (let*
                          [PLACEHOLDER-8853
                           (str
                            (if
                             (clojure.lang.Numbers/gt
                              (clojure.lang.RT/count
                               (clojure.lang.RT/get
                                PLACEHOLDER-8852
                                0))
                              1)
                             (clojure.lang.RT/count
                              (clojure.lang.RT/get PLACEHOLDER-8852 0))
                             (if :else ""))
                            (clojure.lang.RT/get PLACEHOLDER-8852 1))]
                          (do
                           (clojure.core/chunk-append
                            PLACEHOLDER-8850
                            PLACEHOLDER-8853)
                           (recur
                            (clojure.lang.Numbers/unchecked_inc
                             PLACEHOLDER-8851)))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-8850)
                       (PLACEHOLDER-8843
                        (clojure.core/chunk-rest PLACEHOLDER-8847)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-8850)
                       nil)))
                    (let*
                     [PLACEHOLDER-8854
                      (clojure.core/first PLACEHOLDER-8847)]
                     (let*
                      [PLACEHOLDER-8855
                       (str
                        (if
                         (clojure.lang.Numbers/gt
                          (clojure.lang.RT/count
                           (clojure.lang.RT/get PLACEHOLDER-8854 0))
                          1)
                         (clojure.lang.RT/count
                          (clojure.lang.RT/get PLACEHOLDER-8854 0))
                         (if :else ""))
                        (clojure.lang.RT/get PLACEHOLDER-8854 1))]
                      (clojure.core/cons
                       PLACEHOLDER-8855
                       (PLACEHOLDER-8843
                        (clojure.core/rest
                         PLACEHOLDER-8847)))))))))))))))]
         (PLACEHOLDER-8856
          (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-8842)))]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8857]
      (apply
       clojure.string/join
       ""
       [(let*
         [PLACEHOLDER-8871
          (fn*
           PLACEHOLDER-8858
           ([PLACEHOLDER-8859]
            (new
             clojure.lang.LazySeq
             (fn*
              ([]
               (loop*
                [PLACEHOLDER-8860 PLACEHOLDER-8859]
                (let*
                 [PLACEHOLDER-8861 (clojure.core/seq PLACEHOLDER-8860)]
                 (if
                  PLACEHOLDER-8861
                  (let*
                   [PLACEHOLDER-8862 PLACEHOLDER-8861]
                   (if
                    (clojure.core/chunked-seq? PLACEHOLDER-8862)
                    (let*
                     [PLACEHOLDER-8863
                      (clojure.core/chunk-first PLACEHOLDER-8862)
                      PLACEHOLDER-8864
                      (clojure.lang.RT/intCast
                       (clojure.lang.RT/count PLACEHOLDER-8863))
                      PLACEHOLDER-8865
                      (clojure.core/chunk-buffer PLACEHOLDER-8864)]
                     (if
                      (loop*
                       [PLACEHOLDER-8866 (clojure.lang.RT/intCast 0)]
                       (if
                        (clojure.lang.Numbers/lt
                         PLACEHOLDER-8866
                         PLACEHOLDER-8864)
                        (let*
                         [PLACEHOLDER-8867
                          (.nth PLACEHOLDER-8863 PLACEHOLDER-8866)]
                         (let*
                          [PLACEHOLDER-8868
                           (str
                            (if
                             (clojure.lang.Numbers/gt
                              (clojure.lang.RT/count PLACEHOLDER-8867)
                              1)
                             (apply
                              clojure.string/join
                              ""
                              [(repeat
                                (read-string
                                 (subs
                                  PLACEHOLDER-8867
                                  0
                                  (clojure.lang.Numbers/minus
                                   (. PLACEHOLDER-8867 length)
                                   1)))
                                (subs
                                 PLACEHOLDER-8867
                                 (clojure.lang.Numbers/minus
                                  (. PLACEHOLDER-8867 length)
                                  1)))])
                             (if :else PLACEHOLDER-8867)))]
                          (do
                           (clojure.core/chunk-append
                            PLACEHOLDER-8865
                            PLACEHOLDER-8868)
                           (recur
                            (clojure.lang.Numbers/unchecked_inc
                             PLACEHOLDER-8866)))))
                        true))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-8865)
                       (PLACEHOLDER-8858
                        (clojure.core/chunk-rest PLACEHOLDER-8862)))
                      (clojure.core/chunk-cons
                       (clojure.core/chunk PLACEHOLDER-8865)
                       nil)))
                    (let*
                     [PLACEHOLDER-8869
                      (clojure.core/first PLACEHOLDER-8862)]
                     (let*
                      [PLACEHOLDER-8870
                       (str
                        (if
                         (clojure.lang.Numbers/gt
                          (clojure.lang.RT/count PLACEHOLDER-8869)
                          1)
                         (apply
                          clojure.string/join
                          ""
                          [(repeat
                            (read-string
                             (subs
                              PLACEHOLDER-8869
                              0
                              (clojure.lang.Numbers/minus
                               (. PLACEHOLDER-8869 length)
                               1)))
                            (subs
                             PLACEHOLDER-8869
                             (clojure.lang.Numbers/minus
                              (. PLACEHOLDER-8869 length)
                              1)))])
                         (if :else PLACEHOLDER-8869)))]
                      (clojure.core/cons
                       PLACEHOLDER-8870
                       (PLACEHOLDER-8858
                        (clojure.core/rest
                         PLACEHOLDER-8862)))))))))))))))]
         (PLACEHOLDER-8871
          (re-seq (re-pattern "\\d*.") PLACEHOLDER-8857)))])))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11097
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11097))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-single
    (fn*
     ([PLACEHOLDER-11098 PLACEHOLDER-11099]
      (if
       (clojure.lang.Util/equiv 1 PLACEHOLDER-11099)
       PLACEHOLDER-11098
       (str PLACEHOLDER-11099 PLACEHOLDER-11098)))))
   (def
    append-group
    (fn*
     ([PLACEHOLDER-11100 PLACEHOLDER-11101]
      (str
       PLACEHOLDER-11100
       (encode-single
        (first PLACEHOLDER-11101)
        (clojure.lang.RT/count PLACEHOLDER-11101))))))
   (def
    encode
    (fn*
     ([PLACEHOLDER-11102]
      (encode
       ""
       (clojure.string/split PLACEHOLDER-11102 (re-pattern ""))))
     ([PLACEHOLDER-11103 PLACEHOLDER-11104]
      (if
       (empty? PLACEHOLDER-11104)
       PLACEHOLDER-11103
       (let*
        [PLACEHOLDER-11106
         (split-with
          (fn*
           ([PLACEHOLDER-11105]
            (clojure.lang.Util/equiv
             (first PLACEHOLDER-11104)
             PLACEHOLDER-11105)))
          PLACEHOLDER-11104)
         PLACEHOLDER-11107
         (clojure.lang.RT/nth PLACEHOLDER-11106 0 nil)
         PLACEHOLDER-11108
         (clojure.lang.RT/nth PLACEHOLDER-11106 1 nil)]
        (recur
         (append-group PLACEHOLDER-11103 PLACEHOLDER-11107)
         PLACEHOLDER-11108))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11109]
      (if (empty? PLACEHOLDER-11109) "" (encode PLACEHOLDER-11109)))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-11110]
      (re-matches (re-pattern "\\d") PLACEHOLDER-11110))))
   (def
    digits->int
    (fn*
     ([PLACEHOLDER-11111]
      (java.lang.Integer/parseInt
       (clojure.string/join PLACEHOLDER-11111)))))
   (def
    process-next-group
    (fn*
     ([PLACEHOLDER-11112 PLACEHOLDER-11113]
      (if
       (clojure.core/not (digit? (first PLACEHOLDER-11113)))
       [(str PLACEHOLDER-11112 (first PLACEHOLDER-11113))
        (rest PLACEHOLDER-11113)]
       (let*
        [PLACEHOLDER-11114
         (split-with digit? PLACEHOLDER-11113)
         PLACEHOLDER-11115
         (clojure.lang.RT/nth PLACEHOLDER-11114 0 nil)
         PLACEHOLDER-11116
         (clojure.lang.RT/nth PLACEHOLDER-11114 1 nil)]
        [(str
          PLACEHOLDER-11112
          (clojure.string/join
           (repeat
            (digits->int PLACEHOLDER-11115)
            (first PLACEHOLDER-11116))))
         (rest PLACEHOLDER-11116)])))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-11117]
      (decode
       ""
       (clojure.string/split PLACEHOLDER-11117 (re-pattern ""))))
     ([PLACEHOLDER-11118 PLACEHOLDER-11119]
      (if
       (empty? PLACEHOLDER-11119)
       PLACEHOLDER-11118
       (apply
        decode
        (process-next-group PLACEHOLDER-11118 PLACEHOLDER-11119))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11120]
      (if (empty? PLACEHOLDER-11120) "" (decode PLACEHOLDER-11120))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12683
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12683))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    compress
    (fn*
     ([PLACEHOLDER-12684]
      (let*
       [PLACEHOLDER-12685
        (clojure.lang.RT/count PLACEHOLDER-12684)
        PLACEHOLDER-12686
        (first PLACEHOLDER-12684)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-12685 1)
        (str PLACEHOLDER-12686)
        (str PLACEHOLDER-12685 PLACEHOLDER-12686))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12687] (run-length-encode "" PLACEHOLDER-12687))
     ([PLACEHOLDER-12688 PLACEHOLDER-12689]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-12689)
        0)
       PLACEHOLDER-12688
       (let*
        [PLACEHOLDER-12690
         (first PLACEHOLDER-12689)
         PLACEHOLDER-12692
         (split-with
          (fn*
           ([PLACEHOLDER-12691]
            (clojure.lang.Util/equiv
             PLACEHOLDER-12690
             PLACEHOLDER-12691)))
          PLACEHOLDER-12689)
         PLACEHOLDER-12693
         (clojure.lang.RT/nth PLACEHOLDER-12692 0 nil)
         PLACEHOLDER-12694
         (clojure.lang.RT/nth PLACEHOLDER-12692 1 nil)]
        (recur
         (str PLACEHOLDER-12688 (compress PLACEHOLDER-12693))
         PLACEHOLDER-12694))))))
   (def
    decompress
    (fn*
     ([PLACEHOLDER-12695]
      (let*
       [PLACEHOLDER-12697
        (split-with
         (fn*
          ([PLACEHOLDER-12696]
           (java.lang.Character/isDigit PLACEHOLDER-12696)))
         PLACEHOLDER-12695)
        PLACEHOLDER-12698
        (clojure.core/seq PLACEHOLDER-12697)
        PLACEHOLDER-12699
        (clojure.core/first PLACEHOLDER-12698)
        PLACEHOLDER-12700
        (clojure.core/next PLACEHOLDER-12698)
        PLACEHOLDER-12701
        PLACEHOLDER-12699
        PLACEHOLDER-12702
        (clojure.core/first PLACEHOLDER-12700)
        PLACEHOLDER-12703
        (clojure.core/next PLACEHOLDER-12700)
        PLACEHOLDER-12704
        PLACEHOLDER-12702
        PLACEHOLDER-12705
        PLACEHOLDER-12703
        PLACEHOLDER-12706
        (java.lang.Integer/parseInt (apply str PLACEHOLDER-12701))]
       [(apply
         str
         (repeat PLACEHOLDER-12706 (first PLACEHOLDER-12704)))
        (apply str (rest PLACEHOLDER-12704))]))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12707] (run-length-decode "" PLACEHOLDER-12707))
     ([PLACEHOLDER-12708 PLACEHOLDER-12709]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-12709)
        0)
       PLACEHOLDER-12708
       (if
        (java.lang.Character/isDigit (first PLACEHOLDER-12709))
        (let*
         [PLACEHOLDER-12710
          (decompress PLACEHOLDER-12709)
          PLACEHOLDER-12711
          (clojure.lang.RT/nth PLACEHOLDER-12710 0 nil)
          PLACEHOLDER-12712
          (clojure.lang.RT/nth PLACEHOLDER-12710 1 nil)]
         (recur
          (str PLACEHOLDER-12708 PLACEHOLDER-12711)
          PLACEHOLDER-12712))
        (if
         :default
         (recur
          (str PLACEHOLDER-12708 (first PLACEHOLDER-12709))
          (apply str (rest PLACEHOLDER-12709))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9426
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9426))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9427]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-9428]
          (let*
           [PLACEHOLDER-9429 (clojure.lang.RT/count PLACEHOLDER-9428)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-9429 1)
             PLACEHOLDER-9429)
            (first PLACEHOLDER-9428)))))
        (partition-by identity (into [] PLACEHOLDER-9427)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9430]
      (str/replace
       PLACEHOLDER-9430
       (re-pattern "(\\d+)?([a-zA-Z\\s])")
       (fn*
        ([PLACEHOLDER-9431]
         (let*
          [PLACEHOLDER-9432
           PLACEHOLDER-9431
           PLACEHOLDER-9433
           (clojure.lang.RT/nth PLACEHOLDER-9432 0 nil)
           PLACEHOLDER-9434
           (clojure.lang.RT/nth PLACEHOLDER-9432 1 nil)
           PLACEHOLDER-9435
           (clojure.lang.RT/nth PLACEHOLDER-9432 2 nil)]
          (let*
           [PLACEHOLDER-9437
            (java.lang.Integer/parseInt
             (let*
              [PLACEHOLDER-9436 PLACEHOLDER-9434]
              (if PLACEHOLDER-9436 PLACEHOLDER-9436 "1")))]
           (str/join
            ""
            (repeat PLACEHOLDER-9437 PLACEHOLDER-9435)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14258
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14258))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14259]
      (apply
       str
       (re-seq
        (re-pattern "[a-zA-Z2-9 ]|[1-9]{2,}")
        (apply
         str
         (mapcat
          (juxt count first)
          (partition-by identity PLACEHOLDER-14259))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14260]
      (re-seq (re-pattern "\\d*[a-zA-Z]") PLACEHOLDER-14260)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12266
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12266))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    rle
    (fn*
     ([PLACEHOLDER-12267]
      ((fn*
        ([PLACEHOLDER-12268 PLACEHOLDER-12269]
         (if
          (empty? PLACEHOLDER-12268)
          (reverse PLACEHOLDER-12269)
          (let*
           [PLACEHOLDER-12270
            (first (first PLACEHOLDER-12269))
            PLACEHOLDER-12271
            (second (first PLACEHOLDER-12269))]
           (recur
            (next PLACEHOLDER-12268)
            (if
             (clojure.lang.Util/equiv
              (first PLACEHOLDER-12268)
              PLACEHOLDER-12271)
             (conj
              (next PLACEHOLDER-12269)
              (list
               (clojure.lang.Numbers/inc PLACEHOLDER-12270)
               PLACEHOLDER-12271))
             (conj
              PLACEHOLDER-12269
              (list 1 (first PLACEHOLDER-12268)))))))))
       PLACEHOLDER-12267
       '()))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12272]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-12273]
          (if
           (clojure.lang.Util/equiv (first PLACEHOLDER-12273) 1)
           (second PLACEHOLDER-12273)
           (clojure.string/join PLACEHOLDER-12273))))
        (rle (seq PLACEHOLDER-12272)))))))
   (def
    split-symbols
    (fn*
     ([PLACEHOLDER-12274]
      ((fn*
        ([PLACEHOLDER-12275 PLACEHOLDER-12276]
         (if
          (empty? PLACEHOLDER-12275)
          (reverse PLACEHOLDER-12276)
          (let*
           [PLACEHOLDER-12277 (first PLACEHOLDER-12275)]
           (if
            (java.lang.Character/isDigit PLACEHOLDER-12277)
            (if
             (int? (first PLACEHOLDER-12276))
             (recur
              (next PLACEHOLDER-12275)
              (conj
               (next PLACEHOLDER-12276)
               (clojure.lang.Numbers/add
                (clojure.lang.Numbers/multiply
                 (first PLACEHOLDER-12276)
                 10)
                (java.lang.Character/digit PLACEHOLDER-12277 10))))
             (recur
              (next PLACEHOLDER-12275)
              (conj
               PLACEHOLDER-12276
               (java.lang.Character/digit PLACEHOLDER-12277 10))))
            (recur
             (next PLACEHOLDER-12275)
             (conj PLACEHOLDER-12276 PLACEHOLDER-12277)))))))
       PLACEHOLDER-12274
       '()))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12278]
      ((fn*
        ([PLACEHOLDER-12279 PLACEHOLDER-12280]
         (if
          (empty? PLACEHOLDER-12279)
          PLACEHOLDER-12280
          (let*
           [PLACEHOLDER-12281
            (first PLACEHOLDER-12279)
            PLACEHOLDER-12282
            (next PLACEHOLDER-12279)]
           (if
            (char? PLACEHOLDER-12281)
            (recur
             PLACEHOLDER-12282
             (str PLACEHOLDER-12280 PLACEHOLDER-12281))
            (recur
             (next PLACEHOLDER-12282)
             (str
              PLACEHOLDER-12280
              (clojure.string/join
               ""
               (repeat
                PLACEHOLDER-12281
                (first PLACEHOLDER-12282))))))))))
       (split-symbols PLACEHOLDER-12278)
       "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10478
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10478))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10479]
      (let*
       [PLACEHOLDER-10486
        (fn*
         ([PLACEHOLDER-10480 PLACEHOLDER-10481]
          (let*
           [PLACEHOLDER-10482
            PLACEHOLDER-10480
            PLACEHOLDER-10483
            (clojure.lang.RT/nth PLACEHOLDER-10482 0 nil)
            PLACEHOLDER-10484
            (clojure.lang.RT/nth PLACEHOLDER-10482 1 nil)
            PLACEHOLDER-10485
            (clojure.lang.RT/nth PLACEHOLDER-10482 2 nil)]
           (if
            (clojure.lang.Util/equiv
             PLACEHOLDER-10484
             PLACEHOLDER-10481)
            [(clojure.lang.Numbers/inc PLACEHOLDER-10483)
             PLACEHOLDER-10484
             PLACEHOLDER-10485]
            [1
             PLACEHOLDER-10481
             (str
              PLACEHOLDER-10485
              (if
               (clojure.lang.Numbers/gt PLACEHOLDER-10483 1)
               (str PLACEHOLDER-10483)
               "")
              PLACEHOLDER-10484)]))))
        PLACEHOLDER-10487
        (reduce PLACEHOLDER-10486 [1 nil ""] PLACEHOLDER-10479)]
       (str
        (clojure.lang.RT/nth PLACEHOLDER-10487 2)
        (clojure.lang.RT/nth PLACEHOLDER-10487 1))))))
   (def
    expand-char
    (fn*
     ([PLACEHOLDER-10488 PLACEHOLDER-10489]
      (take PLACEHOLDER-10488 (repeat PLACEHOLDER-10489)))))
   (def get-digit (comp read-string str))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10490]
      (let*
       [PLACEHOLDER-10496
        (fn*
         ([PLACEHOLDER-10491 PLACEHOLDER-10492]
          (let*
           [PLACEHOLDER-10493
            PLACEHOLDER-10491
            PLACEHOLDER-10494
            (clojure.lang.RT/nth PLACEHOLDER-10493 0 nil)
            PLACEHOLDER-10495
            (clojure.lang.RT/nth PLACEHOLDER-10493 1 nil)]
           (if
            (java.lang.Character/isDigit PLACEHOLDER-10492)
            [(get-digit PLACEHOLDER-10492) PLACEHOLDER-10495]
            [1
             (concat
              PLACEHOLDER-10495
              (expand-char PLACEHOLDER-10494 PLACEHOLDER-10492))]))))
        PLACEHOLDER-10497
        (reduce PLACEHOLDER-10496 [1 ()] PLACEHOLDER-10490)]
       (apply str (second PLACEHOLDER-10497)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14052
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14052))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-run
    (fn*
     ([PLACEHOLDER-14053]
      (if
       (clojure.lang.Numbers/lt
        1
        (clojure.lang.RT/count PLACEHOLDER-14053))
       (clojure.lang.RT/count PLACEHOLDER-14053)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14054]
      (let*
       [PLACEHOLDER-14055 (partition-by identity PLACEHOLDER-14054)]
       (reduce
        (fn*
         ([PLACEHOLDER-14056 PLACEHOLDER-14057]
          (apply
           str
           [PLACEHOLDER-14056
            (count-run PLACEHOLDER-14057)
            (first PLACEHOLDER-14057)])))
        ""
        PLACEHOLDER-14055)))))
   (def
    extract-encoded-parts
    (fn*
     ([PLACEHOLDER-14058]
      (loop*
       [PLACEHOLDER-14059 PLACEHOLDER-14058 PLACEHOLDER-14060 []]
       (if
        (empty? PLACEHOLDER-14059)
        PLACEHOLDER-14060
        (let*
         [PLACEHOLDER-14061
          (re-find (re-pattern "(\\d+)?(.{1})") PLACEHOLDER-14059)]
         (recur
          (subs
           PLACEHOLDER-14059
           (clojure.lang.RT/count (first PLACEHOLDER-14061)))
          (conj
           PLACEHOLDER-14060
           [(let*
             [PLACEHOLDER-14062
              (clojure.lang.RT/nth PLACEHOLDER-14061 1)]
             (if PLACEHOLDER-14062 PLACEHOLDER-14062 "1"))
            (clojure.lang.RT/nth PLACEHOLDER-14061 2)]))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14063]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14064]
          (let*
           [PLACEHOLDER-14065
            PLACEHOLDER-14064
            PLACEHOLDER-14066
            (clojure.lang.RT/nth PLACEHOLDER-14065 0 nil)
            PLACEHOLDER-14067
            (clojure.lang.RT/nth PLACEHOLDER-14065 1 nil)]
           (apply
            str
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-14066)
             PLACEHOLDER-14067)))))
        (extract-encoded-parts PLACEHOLDER-14063)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13999
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13999))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    update-last
    (fn*
     ([PLACEHOLDER-14000 PLACEHOLDER-14001]
      (conj (pop PLACEHOLDER-14000) PLACEHOLDER-14001))))
   (def
    serialize-string
    (fn*
     ([PLACEHOLDER-14002]
      (reduce
       (fn*
        ([PLACEHOLDER-14003 PLACEHOLDER-14004]
         (let*
          [PLACEHOLDER-14005 (last PLACEHOLDER-14003)]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-14005 nil)
           [{:times 1, :char PLACEHOLDER-14004}]
           (if
            (clojure.lang.Util/equiv
             (:char PLACEHOLDER-14005)
             PLACEHOLDER-14004)
            (update-last
             PLACEHOLDER-14003
             {:times
              (clojure.lang.Numbers/inc (:times PLACEHOLDER-14005)),
              :char PLACEHOLDER-14004})
            (if
             :else
             (conj
              PLACEHOLDER-14003
              {:times 1, :char PLACEHOLDER-14004})))))))
       []
       PLACEHOLDER-14002))))
   (def
    build-cipher-text
    (fn*
     ([PLACEHOLDER-14006]
      (reduce
       (fn*
        ([PLACEHOLDER-14007 PLACEHOLDER-14008]
         (let*
          [PLACEHOLDER-14009
           PLACEHOLDER-14008
           PLACEHOLDER-14010
           (if
            (clojure.core/seq? PLACEHOLDER-14009)
            (if
             (clojure.core/next PLACEHOLDER-14009)
             (clojure.lang.PersistentArrayMap/createAsIfByAssoc
              (clojure.core/to-array PLACEHOLDER-14009))
             (if
              (clojure.core/seq PLACEHOLDER-14009)
              (clojure.core/first PLACEHOLDER-14009)
              clojure.lang.PersistentArrayMap/EMPTY))
            PLACEHOLDER-14009)
           PLACEHOLDER-14011
           (clojure.lang.RT/get PLACEHOLDER-14010 :times)
           PLACEHOLDER-14012
           (clojure.lang.RT/get PLACEHOLDER-14010 :char)]
          (if
           (clojure.lang.Util/equiv 1 PLACEHOLDER-14011)
           (str PLACEHOLDER-14007 PLACEHOLDER-14012)
           (str
            PLACEHOLDER-14007
            PLACEHOLDER-14011
            PLACEHOLDER-14012)))))
       ""
       PLACEHOLDER-14006))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14013]
      (build-cipher-text (serialize-string PLACEHOLDER-14013)))))
   (def
    is-digit?
    (fn*
     ([PLACEHOLDER-14014]
      (re-find (re-pattern "\\d") PLACEHOLDER-14014))))
   (def
    is-closed?
    (fn*
     ([PLACEHOLDER-14015]
      (clojure.lang.Util/identical (:char PLACEHOLDER-14015) nil))))
   (def
    create-map
    (fn*
     ([PLACEHOLDER-14016]
      (if
       (is-digit? PLACEHOLDER-14016)
       {:times PLACEHOLDER-14016, :char nil}
       {:times 1, :char PLACEHOLDER-14016}))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14017]
      (reduce
       (fn*
        ([PLACEHOLDER-14018 PLACEHOLDER-14019]
         (str
          PLACEHOLDER-14018
          (apply
           str
           (repeat
            (:times PLACEHOLDER-14019)
            (:char PLACEHOLDER-14019))))))
       ""
       (reduce
        (fn*
         ([PLACEHOLDER-14020 PLACEHOLDER-14021]
          (let*
           [PLACEHOLDER-14022 (last PLACEHOLDER-14020)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-14022 nil)
            (conj PLACEHOLDER-14020 (create-map PLACEHOLDER-14021))
            (if
             (is-digit? PLACEHOLDER-14021)
             (if
              (is-closed? PLACEHOLDER-14022)
              (update-last
               PLACEHOLDER-14020
               {:times
                (str (:times PLACEHOLDER-14022) PLACEHOLDER-14021),
                :char nil})
              (conj PLACEHOLDER-14020 (create-map PLACEHOLDER-14021)))
             (if
              (is-closed? PLACEHOLDER-14022)
              (update-last
               PLACEHOLDER-14020
               {:times
                (java.lang.Integer/parseInt
                 (:times PLACEHOLDER-14022)),
                :char PLACEHOLDER-14021})
              (if
               (not= PLACEHOLDER-14021 (:char PLACEHOLDER-14022))
               (conj PLACEHOLDER-14020 (create-map PLACEHOLDER-14021))
               (if :else PLACEHOLDER-14020))))))))
        []
        (map str PLACEHOLDER-14017)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9816
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9816))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9817]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-9818]
          (let*
           [PLACEHOLDER-9819
            (first PLACEHOLDER-9818)
            PLACEHOLDER-9820
            (clojure.lang.RT/count PLACEHOLDER-9818)]
           (str
            (if
             (clojure.lang.Numbers/gt PLACEHOLDER-9820 1)
             PLACEHOLDER-9820
             "")
            PLACEHOLDER-9819))))
        (partition-by identity PLACEHOLDER-9817))))))
   (def
    numbers?
    (fn*
     ([PLACEHOLDER-9821]
      (java.lang.Character/isDigit (first PLACEHOLDER-9821)))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-9822]
      (let*
       [PLACEHOLDER-9823
        PLACEHOLDER-9822
        PLACEHOLDER-9824
        (clojure.core/seq PLACEHOLDER-9823)
        PLACEHOLDER-9825
        (clojure.core/first PLACEHOLDER-9824)
        PLACEHOLDER-9826
        (clojure.core/next PLACEHOLDER-9824)
        PLACEHOLDER-9827
        PLACEHOLDER-9825
        PLACEHOLDER-9828
        (clojure.core/first PLACEHOLDER-9826)
        PLACEHOLDER-9829
        (clojure.core/next PLACEHOLDER-9826)
        PLACEHOLDER-9830
        PLACEHOLDER-9828
        PLACEHOLDER-9831
        (clojure.core/seq PLACEHOLDER-9830)
        PLACEHOLDER-9832
        (clojure.core/first PLACEHOLDER-9831)
        PLACEHOLDER-9833
        (clojure.core/next PLACEHOLDER-9831)
        PLACEHOLDER-9834
        PLACEHOLDER-9832
        PLACEHOLDER-9835
        PLACEHOLDER-9833
        PLACEHOLDER-9836
        PLACEHOLDER-9829
        PLACEHOLDER-9837
        PLACEHOLDER-9823]
       (let*
        [PLACEHOLDER-9838
         (str/join PLACEHOLDER-9827)
         PLACEHOLDER-9839
         PLACEHOLDER-9838]
        (if
         (empty? PLACEHOLDER-9827)
         nil
         (if
          (not (numbers? PLACEHOLDER-9827))
          (concat PLACEHOLDER-9838 (decode (rest PLACEHOLDER-9837)))
          (if
           :else
           (concat
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-9839)
             PLACEHOLDER-9834)
            PLACEHOLDER-9835
            (decode PLACEHOLDER-9836))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9840]
      (str/join
       (decode
        (partition-by
         (fn*
          ([PLACEHOLDER-9841]
           (java.lang.Character/isDigit PLACEHOLDER-9841)))
         PLACEHOLDER-9840)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9057
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9057))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9058]
      (.
       (reduce
        (fn*
         ([PLACEHOLDER-9059 PLACEHOLDER-9060]
          (.append PLACEHOLDER-9059 (str PLACEHOLDER-9060))))
        (reduce
         (fn*
          ([PLACEHOLDER-9061 PLACEHOLDER-9062]
           (let*
            [PLACEHOLDER-9063
             PLACEHOLDER-9061
             PLACEHOLDER-9064
             (clojure.lang.RT/nth PLACEHOLDER-9063 0 nil)
             PLACEHOLDER-9065
             (clojure.lang.RT/nth PLACEHOLDER-9063 1 nil)
             PLACEHOLDER-9066
             (clojure.lang.RT/nth PLACEHOLDER-9063 2 nil)]
            (if
             (clojure.lang.Util/equiv
              PLACEHOLDER-9066
              PLACEHOLDER-9062)
             [PLACEHOLDER-9064
              ((fnil inc 1) PLACEHOLDER-9065)
              PLACEHOLDER-9066]
             [(.append
               PLACEHOLDER-9064
               (str PLACEHOLDER-9065 PLACEHOLDER-9066))
              nil
              PLACEHOLDER-9062]))))
         [(new StringBuilder) nil nil]
         PLACEHOLDER-9058))
       toString))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9067]
      (.
       (first
        (reduce
         (fn*
          ([PLACEHOLDER-9068 PLACEHOLDER-9069]
           (let*
            [PLACEHOLDER-9070
             PLACEHOLDER-9068
             PLACEHOLDER-9071
             (clojure.lang.RT/nth PLACEHOLDER-9070 0 nil)
             PLACEHOLDER-9072
             (clojure.lang.RT/nth PLACEHOLDER-9070 1 nil)]
            (if
             (< 47 PLACEHOLDER-9069 56)
             [PLACEHOLDER-9071
              (conj
               PLACEHOLDER-9072
               (clojure.lang.RT/charCast PLACEHOLDER-9069))]
             [(reduce
               (fn*
                ([PLACEHOLDER-9073 PLACEHOLDER-9074]
                 (.append PLACEHOLDER-9073 PLACEHOLDER-9074)))
               PLACEHOLDER-9071
               (repeat
                (if
                 (seq PLACEHOLDER-9072)
                 (java.lang.Integer/parseInt
                  (clojure.string/join PLACEHOLDER-9072))
                 1)
                (clojure.lang.RT/charCast PLACEHOLDER-9069)))
              []]))))
         [(new StringBuilder) []]
         (. PLACEHOLDER-9067 getBytes)))
       toString)))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12795
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12795))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode-single-char
    (fn*
     ([PLACEHOLDER-12796]
      (let*
       [PLACEHOLDER-12797
        (first PLACEHOLDER-12796)
        PLACEHOLDER-12798
        (clojure.lang.RT/count PLACEHOLDER-12796)]
       (if
        (clojure.lang.Numbers/gt PLACEHOLDER-12798 1)
        (str PLACEHOLDER-12798 PLACEHOLDER-12797)
        (str PLACEHOLDER-12797))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12799]
      (if
       (seq PLACEHOLDER-12799)
       (let*
        [PLACEHOLDER-12800
         (first PLACEHOLDER-12799)
         PLACEHOLDER-12802
         (apply
          str
          (take-while
           (fn*
            ([PLACEHOLDER-12801]
             (clojure.lang.Util/equiv
              PLACEHOLDER-12801
              PLACEHOLDER-12800)))
           PLACEHOLDER-12799))
         PLACEHOLDER-12804
         (apply
          str
          (drop-while
           (fn*
            ([PLACEHOLDER-12803]
             (clojure.lang.Util/equiv
              PLACEHOLDER-12803
              PLACEHOLDER-12800)))
           PLACEHOLDER-12799))]
        (apply
         str
         (run-length-encode-single-char PLACEHOLDER-12802)
         (run-length-encode PLACEHOLDER-12804)))
       ""))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12805]
      (let*
       [PLACEHOLDER-12806
        (re-find (re-pattern "^\\d+") PLACEHOLDER-12805)]
       (if
        PLACEHOLDER-12806
        (apply
         str
         (apply
          str
          (repeat
           (java.lang.Integer/parseInt PLACEHOLDER-12806)
           (first
            (subs
             PLACEHOLDER-12805
             (clojure.lang.RT/count PLACEHOLDER-12806)))))
         (run-length-decode
          (subs
           PLACEHOLDER-12805
           (clojure.lang.Numbers/inc
            (clojure.lang.RT/count PLACEHOLDER-12806)))))
        (if
         (clojure.lang.Numbers/lte
          (clojure.lang.RT/count PLACEHOLDER-12805)
          1)
         (str PLACEHOLDER-12805)
         (apply
          str
          (first PLACEHOLDER-12805)
          (run-length-decode (subs PLACEHOLDER-12805 1))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12357
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12357))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-vec
    (fn*
     ([PLACEHOLDER-12358]
      (do
       (if
        (vector? PLACEHOLDER-12358)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(vector? coll))))))
       (let*
        [PLACEHOLDER-12361
         (filterv
          (fn*
           ([PLACEHOLDER-12359]
            (let*
             [PLACEHOLDER-12360 (char? PLACEHOLDER-12359)]
             (if
              PLACEHOLDER-12360
              PLACEHOLDER-12360
              (clojure.lang.Numbers/gt PLACEHOLDER-12359 1)))))
          PLACEHOLDER-12358)]
        (apply str PLACEHOLDER-12361))))))
   (def
    text->vec
    (fn*
     ([PLACEHOLDER-12362
       PLACEHOLDER-12363
       PLACEHOLDER-12364
       PLACEHOLDER-12365]
      (do
       (if
        (seq? PLACEHOLDER-12362)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(seq? text))))))
       (if
        (not (clojure.lang.Util/identical PLACEHOLDER-12363 nil))
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(not (nil? current-char)))))))
       (if
        (clojure.lang.Numbers/isPos PLACEHOLDER-12364)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(pos? current-count))))))
       (if
        (vector? PLACEHOLDER-12365)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(vector? encoded))))))
       (if
        (empty? PLACEHOLDER-12362)
        (conj PLACEHOLDER-12365 PLACEHOLDER-12364 PLACEHOLDER-12363)
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-12362)
          PLACEHOLDER-12363)
         (text->vec
          (rest PLACEHOLDER-12362)
          PLACEHOLDER-12363
          (clojure.lang.Numbers/inc PLACEHOLDER-12364)
          PLACEHOLDER-12365)
         (if
          :else
          (text->vec
           (rest PLACEHOLDER-12362)
           (first PLACEHOLDER-12362)
           1
           (conj
            PLACEHOLDER-12365
            PLACEHOLDER-12364
            PLACEHOLDER-12363)))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12366]
      (do
       (if
        (string? PLACEHOLDER-12366)
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str '(string? plain-text))))))
       (if
        (empty? PLACEHOLDER-12366)
        PLACEHOLDER-12366
        (encode-vec
         (text->vec
          (rest PLACEHOLDER-12366)
          (first PLACEHOLDER-12366)
          1
          [])))))))
   (def
    materialize
    (fn*
     ([PLACEHOLDER-12367 PLACEHOLDER-12368]
      (let*
       [PLACEHOLDER-12369
        (first PLACEHOLDER-12368)
        PLACEHOLDER-12370
        (first PLACEHOLDER-12369)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-12369 nil)
        PLACEHOLDER-12367
        (if
         (let*
          [PLACEHOLDER-12371
           (java.lang.Character/isSpace PLACEHOLDER-12370)]
          (if
           PLACEHOLDER-12371
           PLACEHOLDER-12371
           (java.lang.Character/isLetter PLACEHOLDER-12370)))
         (materialize
          (conj PLACEHOLDER-12367 PLACEHOLDER-12369)
          (rest PLACEHOLDER-12368))
         (if
          :else
          (let*
           [PLACEHOLDER-12372
            (second PLACEHOLDER-12368)
            PLACEHOLDER-12373
            (java.lang.Integer/parseInt PLACEHOLDER-12369)
            PLACEHOLDER-12374
            (apply str (repeat PLACEHOLDER-12373 PLACEHOLDER-12372))]
           (materialize
            (conj PLACEHOLDER-12367 PLACEHOLDER-12374)
            (nthrest PLACEHOLDER-12368 2))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12375]
      (do
       (if
        string?
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str 'string?)))))
       (if
        PLACEHOLDER-12375
        nil
        (throw
         (new
          java.lang.AssertionError
          (clojure.core/str
           "Assert failed: "
           (clojure.core/pr-str 'cipher-text)))))
       (apply
        str
        (materialize
         []
         (re-seq
          (re-pattern "\\d+|[a-zA-Z ]")
          PLACEHOLDER-12375))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12283
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12283))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12284]
      (let*
       [PLACEHOLDER-12285
        (re-matcher (re-pattern "([\\w ])\\1*") PLACEHOLDER-12284)]
       (let*
        [PLACEHOLDER-12286
         (re-find PLACEHOLDER-12285)
         PLACEHOLDER-12287
         PLACEHOLDER-12286
         PLACEHOLDER-12288
         (clojure.lang.RT/nth PLACEHOLDER-12287 0 nil)
         PLACEHOLDER-12289
         (clojure.lang.RT/nth PLACEHOLDER-12287 1 nil)
         PLACEHOLDER-12290
         ""]
        (loop*
         [PLACEHOLDER-12291
          PLACEHOLDER-12286
          PLACEHOLDER-12292
          PLACEHOLDER-12290]
         (let*
          [PLACEHOLDER-12293
           PLACEHOLDER-12291
           PLACEHOLDER-12294
           (clojure.lang.RT/nth PLACEHOLDER-12293 0 nil)
           PLACEHOLDER-12295
           (clojure.lang.RT/nth PLACEHOLDER-12293 1 nil)
           PLACEHOLDER-12296
           PLACEHOLDER-12292]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-12294 nil)
           PLACEHOLDER-12296
           (recur
            (re-find PLACEHOLDER-12285)
            (str
             PLACEHOLDER-12296
             (str
              (str
               (if
                (clojure.lang.Numbers/gt
                 (clojure.lang.RT/count PLACEHOLDER-12294)
                 1)
                (clojure.lang.RT/count PLACEHOLDER-12294)
                "")
               PLACEHOLDER-12295))))))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12297]
      (let*
       [PLACEHOLDER-12298
        (re-matcher
         (re-pattern "(\\d*)([\\w ]{1})?")
         PLACEHOLDER-12297)]
       (let*
        [PLACEHOLDER-12299
         (re-find PLACEHOLDER-12298)
         PLACEHOLDER-12300
         PLACEHOLDER-12299
         PLACEHOLDER-12301
         (clojure.lang.RT/nth PLACEHOLDER-12300 0 nil)
         PLACEHOLDER-12302
         (clojure.lang.RT/nth PLACEHOLDER-12300 1 nil)
         PLACEHOLDER-12303
         (clojure.lang.RT/nth PLACEHOLDER-12300 2 nil)
         PLACEHOLDER-12304
         ""]
        (loop*
         [PLACEHOLDER-12305
          PLACEHOLDER-12299
          PLACEHOLDER-12306
          PLACEHOLDER-12304]
         (let*
          [PLACEHOLDER-12307
           PLACEHOLDER-12305
           PLACEHOLDER-12308
           (clojure.lang.RT/nth PLACEHOLDER-12307 0 nil)
           PLACEHOLDER-12309
           (clojure.lang.RT/nth PLACEHOLDER-12307 1 nil)
           PLACEHOLDER-12310
           (clojure.lang.RT/nth PLACEHOLDER-12307 2 nil)
           PLACEHOLDER-12311
           PLACEHOLDER-12306]
          (if
           (clojure.lang.Util/identical PLACEHOLDER-12310 nil)
           PLACEHOLDER-12311
           (recur
            (re-find PLACEHOLDER-12298)
            (str
             PLACEHOLDER-12311
             (apply
              str
              (repeat
               (if
                (clojure.lang.Util/equiv
                 (clojure.lang.RT/count PLACEHOLDER-12309)
                 0)
                1
                (new Integer PLACEHOLDER-12309))
               PLACEHOLDER-12310)))))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13065
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13065))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-reducer
    (fn*
     ([PLACEHOLDER-13066 PLACEHOLDER-13067]
      (let*
       [PLACEHOLDER-13068
        (clojure.lang.RT/count PLACEHOLDER-13067)
        PLACEHOLDER-13069
        (first PLACEHOLDER-13067)]
       (if
        (clojure.lang.Util/equiv 1 PLACEHOLDER-13068)
        (str PLACEHOLDER-13066 PLACEHOLDER-13069)
        (str
         PLACEHOLDER-13066
         PLACEHOLDER-13068
         PLACEHOLDER-13069))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13070]
      (reduce
       encode-reducer
       ""
       (partition-by identity PLACEHOLDER-13070)))))
   (def
    decode-mapping
    (fn*
     ([PLACEHOLDER-13071]
      (let*
       [PLACEHOLDER-13072
        PLACEHOLDER-13071
        PLACEHOLDER-13073
        (clojure.lang.RT/nth PLACEHOLDER-13072 0 nil)
        PLACEHOLDER-13074
        (clojure.lang.RT/nth PLACEHOLDER-13072 1 nil)
        PLACEHOLDER-13075
        (clojure.lang.RT/nth PLACEHOLDER-13072 2 nil)
        PLACEHOLDER-13076
        (clojure.lang.RT/nth PLACEHOLDER-13072 3 nil)]
       (let*
        [PLACEHOLDER-13077
         (if
          (clojure.lang.Numbers/isZero
           (clojure.lang.RT/count PLACEHOLDER-13074))
          1
          (new Integer PLACEHOLDER-13074))]
        (apply str (repeat PLACEHOLDER-13077 PLACEHOLDER-13076)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13078]
      (apply
       str
       (map
        decode-mapping
        (re-seq
         (re-pattern "((\\d?)+)([A-Za-z]|\\s+)")
         PLACEHOLDER-13078)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9799
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9799))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (require '[clojure.string :as str])
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9800]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-9801]
          (str
           (clojure.lang.RT/count PLACEHOLDER-9801)
           (first PLACEHOLDER-9801))))
        (partition-by identity PLACEHOLDER-9800))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9802]
      (str/join
       (map
        (fn*
         ([PLACEHOLDER-9803]
          (str/join
           (repeat
            (java.lang.Character/digit (first PLACEHOLDER-9803) 10)
            (second PLACEHOLDER-9803)))))
        (partition 2 PLACEHOLDER-9802)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12088
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12088))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12089]
      (clojure.string/join
       (map
        (fn*
         ([PLACEHOLDER-12090]
          (if
           (clojure.lang.Util/equiv
            1
            (clojure.lang.RT/count PLACEHOLDER-12090))
           (apply str PLACEHOLDER-12090)
           (str
            (clojure.lang.RT/count PLACEHOLDER-12090)
            (first PLACEHOLDER-12090)))))
        (partition-by identity PLACEHOLDER-12089))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12091]
      (clojure.string/join
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-12092]
           (repeat
            (first PLACEHOLDER-12092)
            (second PLACEHOLDER-12092))))
         (map
          (fn*
           ([PLACEHOLDER-12093]
            [(read-string
              (let*
               [PLACEHOLDER-12094
                (re-find (re-pattern "\\d*") PLACEHOLDER-12093)]
               (if (empty? PLACEHOLDER-12094) "1" PLACEHOLDER-12094)))
             (re-find (re-pattern "\\D") PLACEHOLDER-12093)]))
          (re-seq (re-pattern "\\d*\\D") PLACEHOLDER-12091)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13270
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13270))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    rle-conj
    (fn*
     ([PLACEHOLDER-13271 PLACEHOLDER-13272]
      (if
       (empty? PLACEHOLDER-13271)
       [[1 PLACEHOLDER-13272]]
       (let*
        [PLACEHOLDER-13273
         (last PLACEHOLDER-13271)
         PLACEHOLDER-13274
         (clojure.lang.RT/nth PLACEHOLDER-13273 0 nil)
         PLACEHOLDER-13275
         (clojure.lang.RT/nth PLACEHOLDER-13273 1 nil)]
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-13275 PLACEHOLDER-13272)
         (conj
          (pop PLACEHOLDER-13271)
          [(clojure.lang.Numbers/inc PLACEHOLDER-13274)
           PLACEHOLDER-13275])
         (conj PLACEHOLDER-13271 [1 PLACEHOLDER-13272])))))))
   (def
    rle-pair-str
    (fn*
     ([PLACEHOLDER-13276]
      (let*
       [PLACEHOLDER-13277
        PLACEHOLDER-13276
        PLACEHOLDER-13278
        (clojure.lang.RT/nth PLACEHOLDER-13277 0 nil)
        PLACEHOLDER-13279
        (clojure.lang.RT/nth PLACEHOLDER-13277 1 nil)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-13278 1)
        (str PLACEHOLDER-13279)
        (str PLACEHOLDER-13278 PLACEHOLDER-13279))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13280]
      (apply
       str
       (map rle-pair-str (reduce rle-conj [] PLACEHOLDER-13280))))))
   (def
    decompress-group
    (fn*
     ([PLACEHOLDER-13281]
      (let*
       [PLACEHOLDER-13282
        PLACEHOLDER-13281
        PLACEHOLDER-13283
        (clojure.lang.RT/nth PLACEHOLDER-13282 0 nil)
        PLACEHOLDER-13284
        (clojure.lang.RT/nth PLACEHOLDER-13282 1 nil)
        PLACEHOLDER-13285
        (clojure.lang.RT/nth PLACEHOLDER-13282 2 nil)
        PLACEHOLDER-13286
        (clojure.lang.RT/nth PLACEHOLDER-13282 3 nil)]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-13284 nil)
        PLACEHOLDER-13286
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt PLACEHOLDER-13284)
          PLACEHOLDER-13285)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13287]
      (apply
       str
       (map
        decompress-group
        (re-seq
         (re-pattern "(\\d+)([\\w ])|([\\w ])")
         PLACEHOLDER-13287)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9438
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9438))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    part
    (fn*
     ([PLACEHOLDER-9439] (partition-by identity PLACEHOLDER-9439))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9440]
      (str/join
       (mapcat
        (fn*
         ([PLACEHOLDER-9441]
          (str/join
           (conj
            '()
            (first PLACEHOLDER-9441)
            (if
             (clojure.lang.Util/equiv
              (clojure.lang.RT/count PLACEHOLDER-9441)
              1)
             ""
             (clojure.lang.RT/count PLACEHOLDER-9441))))))
        (part PLACEHOLDER-9440))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9442]
      (str/join
       (flatten
        (map
         (fn*
          ([PLACEHOLDER-9443]
           (if
            (clojure.lang.Numbers/gt
             (clojure.lang.RT/count PLACEHOLDER-9443)
             1)
            (repeat
             (parse-int (str/join (butlast PLACEHOLDER-9443)))
             (str (last PLACEHOLDER-9443)))
            (str PLACEHOLDER-9443))))
         (re-seq
          (re-pattern "[0-9]+[[A-Z]|[a-z]|\\s]|[[A-Z]|[a-z]|\\s]")
          PLACEHOLDER-9442))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10274
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10274))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-gt1
    (fn*
     ([PLACEHOLDER-10275]
      (let*
       [PLACEHOLDER-10276 (clojure.lang.RT/count PLACEHOLDER-10275)]
       (if
        (clojure.lang.Numbers/lt 1 PLACEHOLDER-10276)
        PLACEHOLDER-10276)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10277]
      (apply
       str
       (mapcat
        (juxt count-gt1 first)
        (partition-by identity PLACEHOLDER-10277))))))
   (def
    expand
    (fn*
     ([PLACEHOLDER-10278]
      (let*
       [PLACEHOLDER-10279
        PLACEHOLDER-10278
        PLACEHOLDER-10280
        (clojure.lang.RT/nth PLACEHOLDER-10279 0 nil)
        PLACEHOLDER-10281
        (clojure.lang.RT/nth PLACEHOLDER-10279 1 nil)
        PLACEHOLDER-10282
        (clojure.lang.RT/nth PLACEHOLDER-10279 2 nil)]
       (let*
        [PLACEHOLDER-10284
         (java.lang.Integer/parseInt
          (let*
           [PLACEHOLDER-10283 PLACEHOLDER-10281]
           (if PLACEHOLDER-10283 PLACEHOLDER-10283 "1")))]
        (repeat PLACEHOLDER-10284 PLACEHOLDER-10282))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10285]
      (apply
       str
       (mapcat
        expand
        (re-seq (re-pattern "(\\d+)?(\\D)") PLACEHOLDER-10285)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11417
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11417))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11418]
      (reduce
       (fn* ([PLACEHOLDER-11419 PLACEHOLDER-11420] ()))
       ((first PLACEHOLDER-11418) 1)
       PLACEHOLDER-11418))))
   (def run-length-decode (fn* ([PLACEHOLDER-11421] nil))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9347
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9347))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-9348]
      (apply
       str
       (filter
        (fn* ([PLACEHOLDER-9349] (not= 1 PLACEHOLDER-9349)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-9348)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-9350]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-9351]
          (let*
           [PLACEHOLDER-9352
            PLACEHOLDER-9351
            PLACEHOLDER-9353
            (clojure.lang.RT/nth PLACEHOLDER-9352 0 nil)
            PLACEHOLDER-9354
            (clojure.lang.RT/nth PLACEHOLDER-9352 1 nil)
            PLACEHOLDER-9355
            (clojure.lang.RT/nth PLACEHOLDER-9352 2 nil)
            PLACEHOLDER-9356
            (clojure.lang.RT/nth PLACEHOLDER-9352 3 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-9356 nil)
            (repeat
             (java.lang.Integer/parseInt PLACEHOLDER-9354)
             PLACEHOLDER-9355)
            PLACEHOLDER-9356))))
        (re-seq
         (re-pattern "(\\d+)([A-Za-z ])|([A-Za-z ])")
         PLACEHOLDER-9350)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8961
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8961))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8962]
      (let*
       [PLACEHOLDER-8964
        (map
         (fn* ([PLACEHOLDER-8963] (PLACEHOLDER-8963 0)))
         (re-seq (re-pattern "([a-zA-Z ])\\1*") PLACEHOLDER-8962))
        PLACEHOLDER-8966
        (map
         (fn*
          ([PLACEHOLDER-8965]
           (clojure.lang.RT/get PLACEHOLDER-8965 0)))
         PLACEHOLDER-8964)
        PLACEHOLDER-8967
        (map count PLACEHOLDER-8964)]
       (str/join (interleave PLACEHOLDER-8967 PLACEHOLDER-8966))))))
   (def run-length-decode (fn* ([PLACEHOLDER-8968] nil)))
   (run-length-encode "AAABBC"))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13018
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13018))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    fmt
    (fn*
     ([PLACEHOLDER-13019]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count PLACEHOLDER-13019))
       (str (first PLACEHOLDER-13019))
       (str
        (clojure.lang.RT/count PLACEHOLDER-13019)
        (first PLACEHOLDER-13019))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13020]
      (loop*
       [PLACEHOLDER-13021 PLACEHOLDER-13020 PLACEHOLDER-13022 ""]
       (if
        (empty? PLACEHOLDER-13021)
        PLACEHOLDER-13022
        (let*
         [PLACEHOLDER-13023
          (first PLACEHOLDER-13021)
          PLACEHOLDER-13025
          (split-with
           (fn*
            ([PLACEHOLDER-13024]
             (clojure.lang.Util/equiv
              PLACEHOLDER-13024
              PLACEHOLDER-13023)))
           PLACEHOLDER-13021)
          PLACEHOLDER-13026
          (clojure.lang.RT/nth PLACEHOLDER-13025 0 nil)
          PLACEHOLDER-13027
          (clojure.lang.RT/nth PLACEHOLDER-13025 1 nil)
          PLACEHOLDER-13028
          (fmt PLACEHOLDER-13026)]
         (recur
          PLACEHOLDER-13027
          (str PLACEHOLDER-13022 PLACEHOLDER-13028))))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-13029]
      (not= -1 (java.lang.Character/digit PLACEHOLDER-13029 10)))))
   (def
    parse-int
    (fn*
     ([PLACEHOLDER-13030 PLACEHOLDER-13031]
      (if
       (empty? PLACEHOLDER-13030)
       PLACEHOLDER-13031
       (java.lang.Integer/parseInt PLACEHOLDER-13030)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13032]
      (loop*
       [PLACEHOLDER-13033 PLACEHOLDER-13032 PLACEHOLDER-13034 ""]
       (if
        (empty? PLACEHOLDER-13033)
        PLACEHOLDER-13034
        (let*
         [PLACEHOLDER-13035
          (split-with digit? PLACEHOLDER-13033)
          PLACEHOLDER-13036
          (clojure.lang.RT/nth PLACEHOLDER-13035 0 nil)
          PLACEHOLDER-13037
          (clojure.lang.RT/nth PLACEHOLDER-13035 1 nil)
          PLACEHOLDER-13038
          (parse-int (apply str PLACEHOLDER-13036) 1)
          PLACEHOLDER-13039
          (first PLACEHOLDER-13037)
          PLACEHOLDER-13040
          (apply
           str
           (take PLACEHOLDER-13038 (repeat PLACEHOLDER-13039)))]
         (recur
          (rest PLACEHOLDER-13037)
          (str PLACEHOLDER-13034 PLACEHOLDER-13040)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14942
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14942))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    sum-chars
    (fn*
     ([PLACEHOLDER-14943 PLACEHOLDER-14944]
      (let*
       [PLACEHOLDER-14945 (last PLACEHOLDER-14943)]
       (if
        PLACEHOLDER-14945
        (let*
         [PLACEHOLDER-14946 PLACEHOLDER-14945]
         (let*
          [PLACEHOLDER-14947
           PLACEHOLDER-14946
           PLACEHOLDER-14948
           (clojure.lang.RT/nth PLACEHOLDER-14947 0 nil)
           PLACEHOLDER-14949
           (clojure.lang.RT/nth PLACEHOLDER-14947 1 nil)]
          (if
           (clojure.lang.Util/equiv
            PLACEHOLDER-14948
            PLACEHOLDER-14944)
           (assoc
            PLACEHOLDER-14943
            (clojure.lang.Numbers/dec
             (clojure.lang.RT/count PLACEHOLDER-14943))
            [PLACEHOLDER-14948
             (clojure.lang.Numbers/inc PLACEHOLDER-14949)])
           (conj PLACEHOLDER-14943 [PLACEHOLDER-14944 1]))))
        (conj PLACEHOLDER-14943 [PLACEHOLDER-14944 1]))))))
   (def
    build-str
    (fn*
     ([PLACEHOLDER-14950 PLACEHOLDER-14951]
      (let*
       [PLACEHOLDER-14952
        PLACEHOLDER-14951
        PLACEHOLDER-14953
        (clojure.lang.RT/nth PLACEHOLDER-14952 0 nil)
        PLACEHOLDER-14954
        (clojure.lang.RT/nth PLACEHOLDER-14952 1 nil)]
       (str
        PLACEHOLDER-14950
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-14954 1)
         PLACEHOLDER-14954)
        PLACEHOLDER-14953)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14955]
      (reduce build-str "" (reduce sum-chars [] PLACEHOLDER-14955)))))
   (def
    str->int
    (fn*
     ([PLACEHOLDER-14956]
      (if
       (empty? PLACEHOLDER-14956)
       1
       (java.lang.Integer/parseInt PLACEHOLDER-14956)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14957]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14958]
          (let*
           [PLACEHOLDER-14959
            PLACEHOLDER-14958
            PLACEHOLDER-14960
            (clojure.lang.RT/nth PLACEHOLDER-14959 0 nil)
            PLACEHOLDER-14961
            (clojure.lang.RT/nth PLACEHOLDER-14959 1 nil)
            PLACEHOLDER-14962
            (clojure.lang.RT/nth PLACEHOLDER-14959 2 nil)]
           (apply
            str
            (take
             (str->int PLACEHOLDER-14961)
             (repeat PLACEHOLDER-14962))))))
        (re-seq (re-pattern "(\\d*)(\\w| )") PLACEHOLDER-14957)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13601
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13601))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encoder
    (fn*
     ([PLACEHOLDER-13602 PLACEHOLDER-13603]
      (if
       (empty? PLACEHOLDER-13602)
       PLACEHOLDER-13603
       (let*
        [PLACEHOLDER-13604
         (first PLACEHOLDER-13602)
         PLACEHOLDER-13605
         (clojure.lang.RT/count
          (take-while (partial = PLACEHOLDER-13604) PLACEHOLDER-13602))
         PLACEHOLDER-13606
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-13605 1)
          ""
          PLACEHOLDER-13605)
         PLACEHOLDER-13607
         (str PLACEHOLDER-13603 PLACEHOLDER-13606 PLACEHOLDER-13604)]
        (recur
         (subs PLACEHOLDER-13602 PLACEHOLDER-13605)
         PLACEHOLDER-13607))))))
   (def
    run-length-encode
    (fn* ([PLACEHOLDER-13608] (encoder PLACEHOLDER-13608 ""))))
   (def
    texter
    (fn*
     ([PLACEHOLDER-13609 PLACEHOLDER-13610 PLACEHOLDER-13611]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-13609)
       (subs PLACEHOLDER-13611 0 1)
       (apply
        str
        (repeat
         PLACEHOLDER-13609
         (clojure.lang.RT/nth
          PLACEHOLDER-13611
          PLACEHOLDER-13610)))))))
   (def
    decoder
    (fn*
     ([PLACEHOLDER-13612 PLACEHOLDER-13613]
      (if
       (empty? PLACEHOLDER-13612)
       PLACEHOLDER-13613
       (let*
        [PLACEHOLDER-13616
         (map
          (fn*
           ([PLACEHOLDER-13614]
            (java.lang.Character/digit PLACEHOLDER-13614 10)))
          (take-while
           (fn*
            ([PLACEHOLDER-13615]
             (java.lang.Character/isDigit PLACEHOLDER-13615)))
           PLACEHOLDER-13612))
         PLACEHOLDER-13617
         (clojure.lang.RT/count PLACEHOLDER-13616)
         PLACEHOLDER-13618
         (reverse (take PLACEHOLDER-13617 (iterate (partial * 10) 1)))
         PLACEHOLDER-13619
         (reduce + (map * PLACEHOLDER-13616 PLACEHOLDER-13618))
         PLACEHOLDER-13620
         (texter PLACEHOLDER-13619 PLACEHOLDER-13617 PLACEHOLDER-13612)
         PLACEHOLDER-13621
         (str PLACEHOLDER-13613 PLACEHOLDER-13620)
         PLACEHOLDER-13622
         (if
          (clojure.lang.Numbers/isZero PLACEHOLDER-13617)
          1
          (clojure.lang.Numbers/add 1 PLACEHOLDER-13617))]
        (recur
         (subs PLACEHOLDER-13612 PLACEHOLDER-13622)
         PLACEHOLDER-13621))))))
   (def
    run-length-decode
    (fn* ([PLACEHOLDER-13623] (decoder PLACEHOLDER-13623 "")))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13535
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13535))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13536]
      (str/replace
       PLACEHOLDER-13536
       (re-pattern "(\\D)\\1+")
       (fn*
        ([PLACEHOLDER-13537]
         (let*
          [PLACEHOLDER-13538
           PLACEHOLDER-13537
           PLACEHOLDER-13539
           (clojure.lang.RT/nth PLACEHOLDER-13538 0 nil)
           PLACEHOLDER-13540
           (clojure.lang.RT/nth PLACEHOLDER-13538 1 nil)]
          (str
           (clojure.lang.RT/count PLACEHOLDER-13539)
           PLACEHOLDER-13540))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13541]
      (str/replace
       PLACEHOLDER-13541
       (re-pattern "(\\d+)(\\D)")
       (fn*
        ([PLACEHOLDER-13542]
         (let*
          [PLACEHOLDER-13543
           PLACEHOLDER-13542
           PLACEHOLDER-13544
           (clojure.lang.RT/nth PLACEHOLDER-13543 0 nil)
           PLACEHOLDER-13545
           (clojure.lang.RT/nth PLACEHOLDER-13543 1 nil)
           PLACEHOLDER-13546
           (clojure.lang.RT/nth PLACEHOLDER-13543 2 nil)]
          (apply
           str
           (repeat
            (read-string PLACEHOLDER-13545)
            PLACEHOLDER-13546))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11375
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11375))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11376]
      (let*
       [PLACEHOLDER-11377 (partition-by identity PLACEHOLDER-11376)]
       (clojure.string/replace
        (clojure.string/join
         (map
          str
          (map count PLACEHOLDER-11377)
          (map first PLACEHOLDER-11377)))
        (re-pattern "1([a-zA-Z ])")
        "$1")))))
   (def
    decode-preprocess
    (fn*
     ([PLACEHOLDER-11378]
      (clojure.string/replace
       (clojure.string/replace
        (clojure.string/replace
         PLACEHOLDER-11378
         (re-pattern "^([a-zA-Z ])")
         "1$1")
        (re-pattern "([a-zA-Z ])([a-zA-Z ])")
        "$11$2")
       (re-pattern "([a-zA-Z ])([a-zA-Z ])")
       "$11$2"))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11379]
      (let*
       [PLACEHOLDER-11380
        (decode-preprocess PLACEHOLDER-11379)
        PLACEHOLDER-11381
        (clojure.string/split PLACEHOLDER-11380 (re-pattern "[^0-9]+"))
        PLACEHOLDER-11382
        (rest
         (clojure.string/split
          PLACEHOLDER-11380
          (re-pattern "[0-9]+")))]
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-11383 PLACEHOLDER-11384]
           (repeat (new Integer PLACEHOLDER-11383) PLACEHOLDER-11384)))
         PLACEHOLDER-11381
         PLACEHOLDER-11382)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-10912
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-10912))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    split-plain-text
    (fn*
     ([PLACEHOLDER-10913]
      (loop*
       [PLACEHOLDER-10914 PLACEHOLDER-10913 PLACEHOLDER-10915 []]
       (let*
        [PLACEHOLDER-10916
         (first PLACEHOLDER-10914)
         PLACEHOLDER-10918
         (take-while
          (fn*
           ([PLACEHOLDER-10917]
            (clojure.lang.Util/equiv
             PLACEHOLDER-10916
             PLACEHOLDER-10917)))
          PLACEHOLDER-10914)
         PLACEHOLDER-10919
         (conj PLACEHOLDER-10915 PLACEHOLDER-10918)
         PLACEHOLDER-10920
         (drop
          (clojure.lang.RT/count PLACEHOLDER-10918)
          PLACEHOLDER-10914)]
        (if
         (empty? PLACEHOLDER-10920)
         PLACEHOLDER-10919
         (recur PLACEHOLDER-10920 PLACEHOLDER-10919)))))))
   (def
    encode-substr
    (fn*
     ([PLACEHOLDER-10921]
      (let*
       [PLACEHOLDER-10922
        (clojure.lang.RT/count PLACEHOLDER-10921)
        PLACEHOLDER-10923
        (first PLACEHOLDER-10921)]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-10922 0)
        ""
        (if
         (clojure.lang.Util/equiv PLACEHOLDER-10922 1)
         PLACEHOLDER-10923
         (if :else (str PLACEHOLDER-10922 PLACEHOLDER-10923))))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-10924]
      (reduce
       str
       (map encode-substr (split-plain-text PLACEHOLDER-10924))))))
   (def
    split-cipher
    (fn*
     ([PLACEHOLDER-10925]
      (loop*
       [PLACEHOLDER-10926 PLACEHOLDER-10925 PLACEHOLDER-10927 []]
       (let*
        [PLACEHOLDER-10929
         (take-while
          (fn*
           ([PLACEHOLDER-10928]
            (clojure.lang.Numbers/isPos
             (java.lang.Character/digit PLACEHOLDER-10928 10))))
          PLACEHOLDER-10926)
         PLACEHOLDER-10930
         (take
          (clojure.lang.Numbers/inc
           (clojure.lang.RT/count PLACEHOLDER-10929))
          PLACEHOLDER-10926)
         PLACEHOLDER-10931
         (drop
          (clojure.lang.RT/count PLACEHOLDER-10930)
          PLACEHOLDER-10926)]
        (if
         (empty? PLACEHOLDER-10926)
         PLACEHOLDER-10927
         (recur
          PLACEHOLDER-10931
          (conj PLACEHOLDER-10927 PLACEHOLDER-10930))))))))
   (def
    decode-substr
    (fn*
     ([PLACEHOLDER-10932]
      (let*
       [PLACEHOLDER-10933
        (drop-last PLACEHOLDER-10932)
        PLACEHOLDER-10934
        (last PLACEHOLDER-10932)]
       (if
        (empty? PLACEHOLDER-10933)
        PLACEHOLDER-10934
        (reduce
         str
         (repeat
          (read-string (apply str PLACEHOLDER-10933))
          PLACEHOLDER-10934)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-10935]
      (reduce
       str
       (map decode-substr (split-cipher PLACEHOLDER-10935)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15190
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15190))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15191]
      (reduce
       (fn*
        ([PLACEHOLDER-15192 PLACEHOLDER-15193]
         (str
          PLACEHOLDER-15192
          (let*
           [PLACEHOLDER-15194 (apply str (vals PLACEHOLDER-15193))]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-15194 "1")
            nil
            PLACEHOLDER-15194))
          (apply str (keys PLACEHOLDER-15193)))))
       ""
       (map frequencies (partition-by identity PLACEHOLDER-15191))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15195]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-15196]
          (let*
           [PLACEHOLDER-15197
            PLACEHOLDER-15196
            PLACEHOLDER-15198
            (clojure.lang.RT/nth PLACEHOLDER-15197 0 nil)
            PLACEHOLDER-15199
            (clojure.lang.RT/nth PLACEHOLDER-15197 1 nil)
            PLACEHOLDER-15200
            (clojure.lang.RT/nth PLACEHOLDER-15197 2 nil)]
           (apply
            str
            (repeat
             (if
              (clojure.lang.Util/equiv PLACEHOLDER-15199 "")
              1
              (java.lang.Integer/parseInt PLACEHOLDER-15199))
             PLACEHOLDER-15200)))))
        (re-seq
         (re-pattern "(\\d*)([A-Za-z ]{1})")
         PLACEHOLDER-15195)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-12462
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-12462))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-run
    (fn*
     ([PLACEHOLDER-12463]
      (if
       (clojure.lang.Util/equiv
        1
        (clojure.lang.RT/count (first PLACEHOLDER-12463)))
       ["" (last PLACEHOLDER-12463)]
       [(clojure.lang.RT/count (first PLACEHOLDER-12463))
        (last PLACEHOLDER-12463)]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-12464]
      (clojure.string/join
       (map
        str
        (flatten
         (map
          encode-run
          (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-12464))))))))
   (def
    decode-run
    (fn*
     ([PLACEHOLDER-12465]
      (let*
       [PLACEHOLDER-12466
        (clojure.lang.RT/nth PLACEHOLDER-12465 1)
        PLACEHOLDER-12467
        (clojure.lang.RT/nth PLACEHOLDER-12465 2)]
       (if
        (clojure.lang.Util/equiv
         0
         (clojure.lang.RT/count PLACEHOLDER-12466))
        PLACEHOLDER-12467
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-12466)
         PLACEHOLDER-12467))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-12468]
      (clojure.string/join
       (flatten
        (map
         decode-run
         (re-seq
          (re-pattern "(\\d*)([a-zA-Z ])")
          PLACEHOLDER-12468))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-8331
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-8331))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    next-letter
    (fn* ([PLACEHOLDER-8332] (first (rest PLACEHOLDER-8332)))))
   (def
    output-chars
    (fn*
     ([PLACEHOLDER-8333 PLACEHOLDER-8334]
      (if
       (clojure.lang.Util/equiv PLACEHOLDER-8333 1)
       PLACEHOLDER-8334
       (str PLACEHOLDER-8333 PLACEHOLDER-8334)))))
   (def
    repeat-letter
    (fn*
     ([PLACEHOLDER-8335 PLACEHOLDER-8336]
      (loop*
       [PLACEHOLDER-8337 PLACEHOLDER-8335 PLACEHOLDER-8338 ""]
       (if
        (clojure.lang.Util/equiv PLACEHOLDER-8337 0)
        PLACEHOLDER-8338
        (recur
         (clojure.lang.Numbers/dec PLACEHOLDER-8337)
         (str PLACEHOLDER-8338 PLACEHOLDER-8336)))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-8339]
      (loop*
       [PLACEHOLDER-8340
        PLACEHOLDER-8339
        PLACEHOLDER-8341
        1
        PLACEHOLDER-8342
        ""]
       (if
        (empty? PLACEHOLDER-8340)
        PLACEHOLDER-8342
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-8340)
          (next-letter PLACEHOLDER-8340))
         (recur
          (rest PLACEHOLDER-8340)
          (clojure.lang.Numbers/inc PLACEHOLDER-8341)
          PLACEHOLDER-8342)
         (if
          :else
          (recur
           (rest PLACEHOLDER-8340)
           1
           (str
            PLACEHOLDER-8342
            (output-chars
             PLACEHOLDER-8341
             (first PLACEHOLDER-8340)))))))))))
   (def
    digit?
    (fn*
     ([PLACEHOLDER-8343]
      (if
       (let*
        [PLACEHOLDER-8344
         (clojure.lang.Numbers/lte
          (clojure.lang.RT/intCast PLACEHOLDER-8343)
          57)]
        (if
         PLACEHOLDER-8344
         (clojure.lang.Numbers/gte
          (clojure.lang.RT/intCast PLACEHOLDER-8343)
          48)
         PLACEHOLDER-8344))
       true
       false))))
   (def non-digit? (complement digit?))
   (def
    proc-digits
    (fn*
     ([PLACEHOLDER-8345 PLACEHOLDER-8346]
      (clojure.lang.Numbers/add
       (clojure.lang.Numbers/multiply PLACEHOLDER-8345 10)
       PLACEHOLDER-8346))))
   (def
    ch->int
    (fn* ([PLACEHOLDER-8347] (new Integer (str PLACEHOLDER-8347)))))
   (def
    check-first-digit
    (fn*
     ([PLACEHOLDER-8348]
      (if (digit? PLACEHOLDER-8348) (ch->int PLACEHOLDER-8348) 1))))
   (def
    init-output
    (fn*
     ([PLACEHOLDER-8349 PLACEHOLDER-8350]
      (if
       (let*
        [PLACEHOLDER-8351 (non-digit? PLACEHOLDER-8349)]
        (if
         PLACEHOLDER-8351
         (non-digit? PLACEHOLDER-8350)
         PLACEHOLDER-8351))
       PLACEHOLDER-8349
       ""))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-8352]
      (do
       (def
        decode-iter
        (fn*
         ([PLACEHOLDER-8353]
          (loop*
           [PLACEHOLDER-8354
            (first PLACEHOLDER-8353)
            PLACEHOLDER-8355
            (rest PLACEHOLDER-8353)
            PLACEHOLDER-8356
            (check-first-digit (first PLACEHOLDER-8353))
            PLACEHOLDER-8357
            (init-output PLACEHOLDER-8354 (first PLACEHOLDER-8355))]
           (if
            (empty? PLACEHOLDER-8355)
            PLACEHOLDER-8357
            (if
             (let*
              [PLACEHOLDER-8358 (digit? PLACEHOLDER-8354)]
              (if
               PLACEHOLDER-8358
               (non-digit? (first PLACEHOLDER-8355))
               PLACEHOLDER-8358))
             (recur
              (first PLACEHOLDER-8355)
              (rest PLACEHOLDER-8355)
              1
              (str
               PLACEHOLDER-8357
               (repeat-letter
                PLACEHOLDER-8356
                (first PLACEHOLDER-8355))))
             (if
              (let*
               [PLACEHOLDER-8359 (non-digit? PLACEHOLDER-8354)]
               (if
                PLACEHOLDER-8359
                (non-digit? (first PLACEHOLDER-8355))
                PLACEHOLDER-8359))
              (recur
               (first PLACEHOLDER-8355)
               (rest PLACEHOLDER-8355)
               1
               (str PLACEHOLDER-8357 (first PLACEHOLDER-8355)))
              (if
               (let*
                [PLACEHOLDER-8360 (digit? PLACEHOLDER-8354)]
                (if
                 PLACEHOLDER-8360
                 (digit? (first PLACEHOLDER-8355))
                 PLACEHOLDER-8360))
               (recur
                (first PLACEHOLDER-8355)
                (rest PLACEHOLDER-8355)
                (proc-digits
                 (ch->int PLACEHOLDER-8354)
                 (ch->int (first PLACEHOLDER-8355)))
                PLACEHOLDER-8357)
               (if
                :else
                (recur
                 (first PLACEHOLDER-8355)
                 (rest PLACEHOLDER-8355)
                 (new Integer (str (first PLACEHOLDER-8355)))
                 PLACEHOLDER-8357))))))))))
       (if
        (clojure.string/blank? PLACEHOLDER-8352)
        ""
        (decode-iter PLACEHOLDER-8352)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-9290
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-9290))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (set! *warn-on-reflection* true)
   (def
    run-length-encode-naive
    (fn*
     ([PLACEHOLDER-9291]
      (let*
       [PLACEHOLDER-9292 (seq PLACEHOLDER-9291)]
       (if
        PLACEHOLDER-9292
        (let*
         [PLACEHOLDER-9293 PLACEHOLDER-9292]
         (apply
          str
          (mapcat
           (fn*
            ([PLACEHOLDER-9294]
             (vector
              (if
               (clojure.lang.Numbers/lt
                1
                (clojure.lang.RT/count PLACEHOLDER-9294))
               (clojure.lang.RT/count PLACEHOLDER-9294))
              (first PLACEHOLDER-9294))))
           (partition-by identity PLACEHOLDER-9293))))
        "")))))
   (def
    run-length-encode-transduced
    (fn*
     ([PLACEHOLDER-9295]
      (apply
       str
       (sequence
        (comp
         (partition-by identity)
         (mapcat
          (fn*
           ([PLACEHOLDER-9296]
            (vector
             (if
              (clojure.lang.Numbers/lt
               1
               (clojure.lang.RT/count PLACEHOLDER-9296))
              (clojure.lang.RT/count PLACEHOLDER-9296))
             (first PLACEHOLDER-9296))))))
        (seq PLACEHOLDER-9295))))))
   (def
    run-length-encode
    #'run-length-encoding/run-length-encode-transduced)
   (def
    run-length-decode-naive
    (fn*
     ([PLACEHOLDER-9297]
      (if
       (seq PLACEHOLDER-9297)
       (apply
        str
        (mapcat
         (fn*
          ([PLACEHOLDER-9298]
           (let*
            [PLACEHOLDER-9299
             PLACEHOLDER-9298
             PLACEHOLDER-9300
             (clojure.lang.RT/nth PLACEHOLDER-9299 0 nil)
             PLACEHOLDER-9301
             (clojure.lang.RT/nth PLACEHOLDER-9299 1 nil)]
            (if
             (seq PLACEHOLDER-9300)
             (repeat
              (java.lang.Integer/parseInt PLACEHOLDER-9300)
              PLACEHOLDER-9301)
             PLACEHOLDER-9301))))
         (map
          rest
          (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-9297))))
       ""))))
   (def
    run-length-decode-transduced
    (fn*
     ([PLACEHOLDER-9302]
      (apply
       str
       (sequence
        (comp
         (map rest)
         (mapcat
          (fn*
           ([PLACEHOLDER-9303]
            (let*
             [PLACEHOLDER-9304
              PLACEHOLDER-9303
              PLACEHOLDER-9305
              (clojure.lang.RT/nth PLACEHOLDER-9304 0 nil)
              PLACEHOLDER-9306
              (clojure.lang.RT/nth PLACEHOLDER-9304 1 nil)]
             (if
              (seq PLACEHOLDER-9305)
              (repeat
               (java.lang.Integer/parseInt PLACEHOLDER-9305)
               PLACEHOLDER-9306)
              PLACEHOLDER-9306))))))
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-9302))))))
   (def
    run-length-decode
    #'run-length-encoding/run-length-decode-transduced)
   (def
    rand-char
    (fn*
     ([] (rand-char \a \e))
     ([PLACEHOLDER-9307 PLACEHOLDER-9308]
      (clojure.lang.RT/charCast
       (rand-nth
        (range
         (clojure.lang.RT/intCast PLACEHOLDER-9307)
         (clojure.lang.RT/intCast PLACEHOLDER-9308)))))))
   (def
    test-string
    (doall
     (apply
      str
      (take
       (clojure.lang.Numbers/multiply
        (clojure.lang.Numbers/multiply 1 1024)
        1024)
       (repeatedly rand-char)))))
   (def
    encoded-test-string
    (run-length-encode-transduced test-string)))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11718
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11718))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    count-1
    (fn*
     ([PLACEHOLDER-11719]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/count PLACEHOLDER-11719)
        1)
       ""
       (clojure.lang.RT/count PLACEHOLDER-11719)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11720]
      (apply
       str
       (mapcat
        (juxt count-1 first)
        (partition-by identity PLACEHOLDER-11720))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11721]
      (apply
       str
       (mapcat
        (fn*
         ([PLACEHOLDER-11722]
          (let*
           [PLACEHOLDER-11723
            PLACEHOLDER-11722
            PLACEHOLDER-11724
            (clojure.lang.RT/nth PLACEHOLDER-11723 0 nil)
            PLACEHOLDER-11725
            (clojure.lang.RT/nth PLACEHOLDER-11723 1 nil)
            PLACEHOLDER-11726
            (clojure.lang.RT/nth PLACEHOLDER-11723 2 nil)]
           (repeat
            (java.lang.Integer/parseInt
             (let*
              [PLACEHOLDER-11727 PLACEHOLDER-11725]
              (if PLACEHOLDER-11727 PLACEHOLDER-11727 "1")))
            PLACEHOLDER-11726))))
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-11721))))))
   nil)
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13366
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13366))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as s]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    test-string
    "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB")
   (def test-string-encoded "12WB12W3B24WB")
   (def
    reduce-helper
    (fn*
     ([PLACEHOLDER-13367 PLACEHOLDER-13368]
      (if
       (clojure.lang.Util/equiv
        (clojure.lang.RT/get PLACEHOLDER-13367 0)
        PLACEHOLDER-13368)
       [PLACEHOLDER-13368
        (clojure.lang.Numbers/inc
         (clojure.lang.RT/get PLACEHOLDER-13367 1))
        (clojure.lang.RT/get PLACEHOLDER-13367 2)]
       [PLACEHOLDER-13368
        1
        (str
         (clojure.lang.RT/get PLACEHOLDER-13367 2)
         (if
          (clojure.lang.Util/equiv
           (clojure.lang.RT/get PLACEHOLDER-13367 1)
           1)
          ""
          (clojure.lang.RT/get PLACEHOLDER-13367 1))
         (clojure.lang.RT/get PLACEHOLDER-13367 0))]))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13369]
      (if
       (empty? PLACEHOLDER-13369)
       ""
       (let*
        [PLACEHOLDER-13370
         (reduce
          reduce-helper
          [(clojure.lang.RT/get PLACEHOLDER-13369 0) 0 ""]
          (s/trim PLACEHOLDER-13369))
         PLACEHOLDER-13371
         (str
          (clojure.lang.RT/get PLACEHOLDER-13370 2)
          (if
           (clojure.lang.Util/equiv
            (clojure.lang.RT/get PLACEHOLDER-13370 1)
            1)
           (clojure.lang.RT/get PLACEHOLDER-13370 0)
           (str
            (clojure.lang.RT/get PLACEHOLDER-13370 1)
            (clojure.lang.RT/get PLACEHOLDER-13370 0))))]
        PLACEHOLDER-13371)))))
   (def
    letter-expander
    (fn*
     ([PLACEHOLDER-13372]
      (let*
       [PLACEHOLDER-13373
        (re-seq (re-pattern "\\d+|\\w") PLACEHOLDER-13372)]
       (apply
        str
        (repeat
         (java.lang.Integer/parseInt (first PLACEHOLDER-13373))
         (second PLACEHOLDER-13373)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13374]
      (if
       (empty? PLACEHOLDER-13374)
       ""
       (let*
        [PLACEHOLDER-13375
         (s/trim PLACEHOLDER-13374)
         PLACEHOLDER-13376
         (conj (s/split PLACEHOLDER-13375 (re-pattern "[A-Za-z]")) "")
         PLACEHOLDER-13378
         (map
          (fn*
           ([PLACEHOLDER-13377]
            (if (empty? PLACEHOLDER-13377) 1 PLACEHOLDER-13377)))
          PLACEHOLDER-13376)
         PLACEHOLDER-13379
         (re-seq (re-pattern "[A-Za-z]") PLACEHOLDER-13374)
         PLACEHOLDER-13380
         (apply str (interleave PLACEHOLDER-13378 PLACEHOLDER-13379))]
        (apply
         str
         (map
          letter-expander
          (map
           first
           (re-seq (re-pattern "(\\d+\\w)") PLACEHOLDER-13380))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11940
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11940))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-seq
    (fn*
     ([PLACEHOLDER-11941]
      (loop*
       [PLACEHOLDER-11942
        PLACEHOLDER-11941
        PLACEHOLDER-11943
        (first PLACEHOLDER-11941)
        PLACEHOLDER-11944
        0
        PLACEHOLDER-11945
        ""]
       (if
        (clojure.lang.Util/identical PLACEHOLDER-11943 nil)
        PLACEHOLDER-11945
        (let*
         [PLACEHOLDER-11946 (first (rest PLACEHOLDER-11942))]
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-11946 PLACEHOLDER-11943)
          (recur
           (rest PLACEHOLDER-11942)
           PLACEHOLDER-11946
           (clojure.lang.Numbers/inc PLACEHOLDER-11944)
           PLACEHOLDER-11945)
          (recur
           (rest PLACEHOLDER-11942)
           PLACEHOLDER-11946
           0
           (let*
            [PLACEHOLDER-11947
             (clojure.lang.Numbers/inc PLACEHOLDER-11944)]
            (if
             (clojure.lang.Util/equiv PLACEHOLDER-11947 1)
             (str PLACEHOLDER-11945 PLACEHOLDER-11943)
             (str
              PLACEHOLDER-11945
              PLACEHOLDER-11947
              PLACEHOLDER-11943)))))))))))
   (def
    run-length-encode
    (fn* ([PLACEHOLDER-11948] (encode-seq (seq PLACEHOLDER-11948)))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11949]
      (loop*
       [PLACEHOLDER-11950 PLACEHOLDER-11949 PLACEHOLDER-11951 ""]
       (let*
        [PLACEHOLDER-11952
         (first PLACEHOLDER-11950)
         PLACEHOLDER-11953
         (first (rest PLACEHOLDER-11950))]
        (if
         (clojure.lang.Util/identical PLACEHOLDER-11952 nil)
         PLACEHOLDER-11951
         (if
          (java.lang.Character/isDigit PLACEHOLDER-11952)
          (let*
           [PLACEHOLDER-11954
            (apply
             str
             (repeat
              (java.lang.Character/digit PLACEHOLDER-11952 10)
              PLACEHOLDER-11953))
            PLACEHOLDER-11955
            (drop 2 PLACEHOLDER-11950)]
           (recur
            PLACEHOLDER-11955
            (str PLACEHOLDER-11951 PLACEHOLDER-11954)))
          (if
           :else
           (recur
            (drop 1 PLACEHOLDER-11950)
            (str PLACEHOLDER-11951 PLACEHOLDER-11952)))))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11671
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11671))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11672]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-11673]
          (clojure.lang.Util/equiv 1 PLACEHOLDER-11673)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-11672)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11674]
      (let*
       [PLACEHOLDER-11677
        (map
         (fn*
          ([PLACEHOLDER-11675]
           (if
            (java.lang.Character/isDigit (first PLACEHOLDER-11675))
            (java.lang.Integer/parseInt (apply str PLACEHOLDER-11675))
            (if :else PLACEHOLDER-11675))))
         (partition-by
          (fn*
           ([PLACEHOLDER-11676]
            (java.lang.Character/isDigit PLACEHOLDER-11676)))
          PLACEHOLDER-11674))]
       (apply str (run-length-decode '() PLACEHOLDER-11677 1))))
     ([PLACEHOLDER-11678 PLACEHOLDER-11679 PLACEHOLDER-11680]
      (let*
       [PLACEHOLDER-11681 (first PLACEHOLDER-11679)]
       (if
        (empty? PLACEHOLDER-11679)
        PLACEHOLDER-11678
        (if
         (seq? PLACEHOLDER-11681)
         (recur
          (concat
           PLACEHOLDER-11678
           (repeat PLACEHOLDER-11680 (first PLACEHOLDER-11681))
           (rest PLACEHOLDER-11681))
          (rest PLACEHOLDER-11679)
          1)
         (if
          :else
          (recur
           PLACEHOLDER-11678
           (rest PLACEHOLDER-11679)
           PLACEHOLDER-11681)))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11682
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11682))})
        (try
         (do
          (clojure.core/refer 'clojure.core)
          (clojure.core/require '[clojure.string :as str]))
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode-const-list
    (fn*
     ([PLACEHOLDER-11683]
      (let*
       [PLACEHOLDER-11684
        (clojure.lang.RT/count PLACEHOLDER-11683)
        PLACEHOLDER-11685
        (first PLACEHOLDER-11683)]
       (str
        (if
         (clojure.lang.Numbers/gt PLACEHOLDER-11684 1)
         PLACEHOLDER-11684)
        PLACEHOLDER-11685)))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11686]
      (apply
       str
       (map
        encode-const-list
        (partition-by identity PLACEHOLDER-11686))))))
   (def
    decode-parse-int
    (fn*
     ([PLACEHOLDER-11687]
      (if
       (empty? PLACEHOLDER-11687)
       1
       (new Integer PLACEHOLDER-11687)))))
   (def
    decode-match
    (fn*
     ([PLACEHOLDER-11688]
      (let*
       [PLACEHOLDER-11689
        (decode-parse-int (clojure.lang.RT/nth PLACEHOLDER-11688 1))
        PLACEHOLDER-11690
        (clojure.lang.RT/nth PLACEHOLDER-11688 2)]
       (apply str (repeat PLACEHOLDER-11689 PLACEHOLDER-11690))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11691]
      (apply
       str
       (map
        decode-match
        (re-seq (re-pattern "(\\d*)(\\D)") PLACEHOLDER-11691)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-15001
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-15001))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-15002]
      (loop*
       [PLACEHOLDER-15003
        PLACEHOLDER-15002
        PLACEHOLDER-15004
        nil
        PLACEHOLDER-15005
        0
        PLACEHOLDER-15006
        ""]
       (if
        (empty? PLACEHOLDER-15003)
        (if
         (clojure.lang.Numbers/isZero PLACEHOLDER-15005)
         PLACEHOLDER-15006
         (if
          (clojure.lang.Util/equiv PLACEHOLDER-15005 1)
          (str PLACEHOLDER-15006 PLACEHOLDER-15004)
          (str PLACEHOLDER-15006 PLACEHOLDER-15005 PLACEHOLDER-15004)))
        (if
         (clojure.lang.Util/equiv
          (first PLACEHOLDER-15003)
          PLACEHOLDER-15004)
         (recur
          (rest PLACEHOLDER-15003)
          (first PLACEHOLDER-15003)
          (clojure.lang.Numbers/inc PLACEHOLDER-15005)
          PLACEHOLDER-15006)
         (if
          (clojure.lang.Numbers/lte PLACEHOLDER-15005 1)
          (recur
           (rest PLACEHOLDER-15003)
           (first PLACEHOLDER-15003)
           1
           (str PLACEHOLDER-15006 PLACEHOLDER-15004))
          (recur
           (rest PLACEHOLDER-15003)
           (first PLACEHOLDER-15003)
           1
           (str
            PLACEHOLDER-15006
            PLACEHOLDER-15005
            PLACEHOLDER-15004)))))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-15007]
      (loop*
       [PLACEHOLDER-15008
        PLACEHOLDER-15007
        PLACEHOLDER-15009
        0
        PLACEHOLDER-15010
        ""]
       (if
        (empty? PLACEHOLDER-15008)
        PLACEHOLDER-15010
        (let*
         [PLACEHOLDER-15011 (first PLACEHOLDER-15008)]
         (case*
          PLACEHOLDER-15011
          0
          0
          (if
           (clojure.lang.Numbers/isZero PLACEHOLDER-15009)
           (recur
            (rest PLACEHOLDER-15008)
            0
            (str PLACEHOLDER-15010 (first PLACEHOLDER-15008)))
           (recur
            (rest PLACEHOLDER-15008)
            0
            (str
             PLACEHOLDER-15010
             (apply
              str
              (repeat PLACEHOLDER-15009 (first PLACEHOLDER-15008))))))
          {55
           [\7
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           54
           [\6
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           48
           [\0
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           50
           [\2
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           56
           [\8
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           51
           [\3
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           57
           [\9
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           53
           [\5
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           52
           [\4
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)],
           49
           [\1
            (recur
             (rest PLACEHOLDER-15008)
             (clojure.lang.Numbers/add
              (clojure.lang.Numbers/multiply PLACEHOLDER-15009 10)
              (clojure.lang.Numbers/minus
               (clojure.lang.RT/intCast (first PLACEHOLDER-15008))
               (clojure.lang.RT/intCast \0)))
             PLACEHOLDER-15010)]}
          :compact
          :hash-equiv
          nil))))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-11045
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-11045))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-11046]
      (apply
       str
       (remove
        (fn*
         ([PLACEHOLDER-11047]
          (clojure.lang.Util/equiv PLACEHOLDER-11047 1)))
        (mapcat
         (juxt count first)
         (partition-by identity PLACEHOLDER-11046)))))))
   (def
    decode-chunk
    (fn*
     ([PLACEHOLDER-11048]
      (let*
       [PLACEHOLDER-11049
        PLACEHOLDER-11048
        PLACEHOLDER-11050
        (clojure.lang.RT/nth PLACEHOLDER-11049 0 nil)
        PLACEHOLDER-11051
        (clojure.lang.RT/nth PLACEHOLDER-11049 1 nil)
        PLACEHOLDER-11052
        (clojure.lang.RT/nth PLACEHOLDER-11049 2 nil)]
       (if
        (clojure.string/blank? PLACEHOLDER-11051)
        PLACEHOLDER-11052
        (repeat
         (java.lang.Integer/parseInt PLACEHOLDER-11051)
         PLACEHOLDER-11052))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-11053]
      (apply
       str
       (mapcat
        decode-chunk
        (re-seq
         (re-pattern "(\\d*)([A-Za-z ])")
         PLACEHOLDER-11053)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-13191
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-13191))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-13192]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13193]
          (let*
           [PLACEHOLDER-13194
            (first PLACEHOLDER-13193)
            PLACEHOLDER-13195
            (clojure.lang.RT/count PLACEHOLDER-13193)]
           (if
            (clojure.lang.Util/equiv PLACEHOLDER-13195 1)
            (str PLACEHOLDER-13194)
            (str PLACEHOLDER-13195 PLACEHOLDER-13194)))))
        (partition-by identity PLACEHOLDER-13192))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-13196]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-13197]
          (let*
           [PLACEHOLDER-13198
            PLACEHOLDER-13197
            PLACEHOLDER-13199
            (clojure.lang.RT/nth PLACEHOLDER-13198 0 nil)
            PLACEHOLDER-13200
            (clojure.lang.RT/nth PLACEHOLDER-13198 1 nil)
            PLACEHOLDER-13201
            (clojure.lang.RT/nth PLACEHOLDER-13198 2 nil)]
           (if
            (clojure.lang.Util/identical PLACEHOLDER-13200 nil)
            (str PLACEHOLDER-13201)
            (apply
             str
             (repeat
              (new Integer PLACEHOLDER-13200)
              PLACEHOLDER-13201))))))
        (re-seq (re-pattern "(\\d+)?(.)") PLACEHOLDER-13196)))))))
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14611
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14611))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14612]
      (apply
       str
       (map
        (fn*
         ([PLACEHOLDER-14613]
          (if
           (clojure.lang.Numbers/gt
            (clojure.lang.RT/count PLACEHOLDER-14613)
            1)
           (str
            (clojure.lang.RT/count PLACEHOLDER-14613)
            (first PLACEHOLDER-14613))
           PLACEHOLDER-14613)))
        (map
         first
         (re-seq (re-pattern "(.)\\1*") PLACEHOLDER-14612)))))))
   (def
    uncompress
    (fn*
     ([PLACEHOLDER-14614]
      (let*
       [PLACEHOLDER-14615
        PLACEHOLDER-14614
        PLACEHOLDER-14616
        (clojure.lang.RT/nth PLACEHOLDER-14615 0 nil)
        PLACEHOLDER-14617
        (clojure.lang.RT/nth PLACEHOLDER-14615 1 nil)
        PLACEHOLDER-14618
        (clojure.lang.RT/nth PLACEHOLDER-14615 2 nil)]
       (if
        PLACEHOLDER-14618
        PLACEHOLDER-14618
        (apply
         str
         (repeat
          (java.lang.Long/parseLong PLACEHOLDER-14616)
          PLACEHOLDER-14617)))))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14619]
      (apply
       str
       (map
        uncompress
        (map
         rest
         (re-seq
          (re-pattern "(\\d+)(\\p{Alpha}|\\W)|(\\p{Alpha}|\\W)")
          PLACEHOLDER-14619))))))))
  "Exception inresources/run-length-encoding/370/src/run_length_encoding.cljCould not resolve var: find-number"
  (do
   (do
    (clojure.core/in-ns 'run-length-encoding)
    ((fn*
      PLACEHOLDER-14159
      ([]
       (do
        (clojure.lang.Var/pushThreadBindings
         #:clojure.lang.Compiler{LOADER
                                 (.getClassLoader
                                  (.getClass PLACEHOLDER-14159))})
        (try
         (clojure.core/refer 'clojure.core)
         (finally (clojure.lang.Var/popThreadBindings)))))))
    (if
     (.equals 'run-length-encoding 'clojure.core)
     nil
     (do
      (clojure.lang.LockingTransaction/runInTransaction
       (fn*
        ([]
         (clojure.core/commute
          @#'clojure.core/*loaded-libs*
          clojure.core/conj
          'run-length-encoding))))
      nil)))
   (def
    encode
    (fn*
     ([PLACEHOLDER-14160]
      (let*
       [PLACEHOLDER-14161 (clojure.lang.RT/get PLACEHOLDER-14160 0)]
       (if
        (clojure.lang.Util/equiv
         1
         (clojure.lang.RT/count PLACEHOLDER-14161))
        PLACEHOLDER-14161
        (if
         :else
         (str
          (clojure.lang.RT/count PLACEHOLDER-14161)
          (first PLACEHOLDER-14161))))))))
   (def
    decode
    (fn*
     ([PLACEHOLDER-14162]
      (if
       (clojure.lang.Util/equiv
        ""
        (clojure.lang.RT/get PLACEHOLDER-14162 1))
       (clojure.lang.RT/get PLACEHOLDER-14162 2)
       (if
        :else
        (apply
         str
         (repeat
          (java.lang.Integer/parseInt
           (clojure.lang.RT/get PLACEHOLDER-14162 1))
          (clojure.lang.RT/get PLACEHOLDER-14162 2))))))))
   (def
    process
    (fn*
     ([PLACEHOLDER-14163 PLACEHOLDER-14164 PLACEHOLDER-14165]
      (apply
       str
       (map
        PLACEHOLDER-14165
        (re-seq PLACEHOLDER-14164 PLACEHOLDER-14163))))))
   (def
    run-length-encode
    (fn*
     ([PLACEHOLDER-14166]
      (process PLACEHOLDER-14166 (re-pattern "(.)\\1*") encode))))
   (def
    run-length-decode
    (fn*
     ([PLACEHOLDER-14167]
      (process
       PLACEHOLDER-14167
       (re-pattern "(\\d*)([^\\d])")
       decode)))))}
